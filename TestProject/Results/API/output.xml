<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 4.0.3 (Python 3.7.4 on linux)" generated="20210730 15:35:11.495" rpa="false" schemaversion="2">
<suite id="s1" name="3-Updating-Personal-Information" source="/home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/Tests/API/3-Updating-Personal-Information.robot">
<kw name="Import DataManager" library="Common" type="SETUP">
<kw name="Convert Suite Variables To Correct Types" library="Common">
<doc>This keyword is needed because parameters passed by command line
to robot (i.e. -v variable_name:value) are of string types.
In run command we pass 2 parameters to robot:
robot -d Results/ -v DATA_SET_LENGTH:100 -v USE_EXISTING_FORM_DATA_SET:True -v BROWSER:chromium -P CustomLibs Tests/
So, we have the following variables passed as strings:
- DATA_SET_LENGTH:100
- USE_EXISTING_FORM_DATA_SET:True
We need to convert:
- DATA_SET_LENGTH to int (i.e. integer)
- USE_EXISTING_FORM_DATA_SET to bool (i.e. boolean)
Later these values will be used while loading DataManager.robot resource.</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${DATA_SET_LENGTH}</var>
<arg>int($DATA_SET_LENGTH)</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:12.129" level="INFO">${DATA_SET_LENGTH} = 100</msg>
<status status="PASS" starttime="20210730 15:35:12.125" endtime="20210730 15:35:12.129"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${USE_EXISTING_FORM_DATA_SET}</var>
<arg>$USE_EXISTING_FORM_DATA_SET=='True'</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:12.130" level="INFO">${USE_EXISTING_FORM_DATA_SET} = True</msg>
<status status="PASS" starttime="20210730 15:35:12.129" endtime="20210730 15:35:12.130"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${DATA_SET_LENGTH}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:35:12.131" level="INFO">${DATA_SET_LENGTH} = 100</msg>
<status status="PASS" starttime="20210730 15:35:12.130" endtime="20210730 15:35:12.131"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${USE_EXISTING_FORM_DATA_SET}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:35:12.131" level="INFO">${USE_EXISTING_FORM_DATA_SET} = True</msg>
<status status="PASS" starttime="20210730 15:35:12.131" endtime="20210730 15:35:12.131"/>
</kw>
<status status="PASS" starttime="20210730 15:35:12.125" endtime="20210730 15:35:12.132"/>
</kw>
<kw name="Import Resource" library="BuiltIn">
<arg>${EXECDIR}${/}Resources${/}DataManager.robot</arg>
<doc>Imports a resource file with the given path.</doc>
<status status="PASS" starttime="20210730 15:35:12.132" endtime="20210730 15:35:12.140"/>
</kw>
<status status="PASS" starttime="20210730 15:35:12.124" endtime="20210730 15:35:12.141"/>
</kw>
<test id="s1-t1" name="With Each Valid Token, Updating Username Of Each System User With '' Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:12.146" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:12.156" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:12.156" level="INFO">${pids} = 3106</msg>
<status status="PASS" starttime="20210730 15:35:12.143" endtime="20210730 15:35:12.156"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:12.157" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:12.157" endtime="20210730 15:35:12.157"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:12.158" level="INFO">${pids} = ['3106']</msg>
<status status="PASS" starttime="20210730 15:35:12.158" endtime="20210730 15:35:12.158"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">3106</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:12.162" level="INFO">Running command 'kill 3106 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:12.159" endtime="20210730 15:35:12.162"/>
</kw>
<status status="PASS" starttime="20210730 15:35:12.159" endtime="20210730 15:35:12.162"/>
</iter>
<status status="PASS" starttime="20210730 15:35:12.158" endtime="20210730 15:35:12.162"/>
</for>
<status status="PASS" starttime="20210730 15:35:12.158" endtime="20210730 15:35:12.162"/>
</branch>
<status status="PASS" starttime="20210730 15:35:12.158" endtime="20210730 15:35:12.162"/>
</if>
<status status="PASS" starttime="20210730 15:35:12.142" endtime="20210730 15:35:12.163"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:12.164" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:12.163" endtime="20210730 15:35:12.164"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:12.164" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:12.164" endtime="20210730 15:35:12.164"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:12.165" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:12.165" endtime="20210730 15:35:12.165"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:12.165" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:12.165" endtime="20210730 15:35:12.165"/>
</kw>
<msg timestamp="20210730 15:35:12.166" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:12.164" endtime="20210730 15:35:12.166"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:12.169" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:12.166" endtime="20210730 15:35:12.171"/>
</kw>
<status status="PASS" starttime="20210730 15:35:12.163" endtime="20210730 15:35:12.171"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:35:12.172" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:35:12.172" endtime="20210730 15:35:12.177"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:35:13.681" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:35:12.178" endtime="20210730 15:35:13.681"/>
</kw>
<status status="PASS" starttime="20210730 15:35:12.171" endtime="20210730 15:35:13.681"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:13.682" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:13.682" endtime="20210730 15:35:13.682"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:13.683" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:13.683" endtime="20210730 15:35:13.683"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:13.683" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:13.683" endtime="20210730 15:35:13.683"/>
</kw>
<msg timestamp="20210730 15:35:13.683" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:13.682" endtime="20210730 15:35:13.683"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:35:13.685" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:35:13.683" endtime="20210730 15:35:13.685"/>
</kw>
<status status="PASS" starttime="20210730 15:35:13.682" endtime="20210730 15:35:13.685"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:35:13.686" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:35:13.686" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:35:13.686" endtime="20210730 15:35:13.686"/>
</kw>
<status status="PASS" starttime="20210730 15:35:13.685" endtime="20210730 15:35:13.686"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:35:13.687" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:35:13.687" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:35:13.687" endtime="20210730 15:35:13.687"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:35:13.687" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:35:13.687" endtime="20210730 15:35:13.687"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:13.688" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:13.688" endtime="20210730 15:35:13.688"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:13.688" endtime="20210730 15:35:13.689"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:13.689" endtime="20210730 15:35:13.689"/>
</kw>
<status status="PASS" starttime="20210730 15:35:13.688" endtime="20210730 15:35:13.689"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:13.690" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:13.690" endtime="20210730 15:35:13.690"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:13.690" endtime="20210730 15:35:13.691"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:13.691" endtime="20210730 15:35:13.691"/>
</kw>
<status status="PASS" starttime="20210730 15:35:13.690" endtime="20210730 15:35:13.691"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:13.692" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:13.692" endtime="20210730 15:35:13.692"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:13.692" endtime="20210730 15:35:13.693"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:13.693" endtime="20210730 15:35:13.694"/>
</kw>
<status status="PASS" starttime="20210730 15:35:13.692" endtime="20210730 15:35:13.694"/>
</iter>
<status status="PASS" starttime="20210730 15:35:13.687" endtime="20210730 15:35:13.694"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:35:13.695" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:35:13.695" endtime="20210730 15:35:13.695"/>
</kw>
<status status="PASS" starttime="20210730 15:35:13.686" endtime="20210730 15:35:13.695"/>
</kw>
<status status="PASS" starttime="20210730 15:35:12.142" endtime="20210730 15:35:13.695"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=${EMPTY}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:13.697" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:35:13.697" endtime="20210730 15:35:13.697"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:13.698" level="INFO">${payload} = {'username': ''}</msg>
<status status="PASS" starttime="20210730 15:35:13.697" endtime="20210730 15:35:13.698"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:13.707" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:13.708" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:13.698" endtime="20210730 15:35:13.708"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:13.708" endtime="20210730 15:35:13.708"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:13.709" endtime="20210730 15:35:13.709"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:13.698" endtime="20210730 15:35:13.709"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:13.698" endtime="20210730 15:35:13.709"/>
</for>
<status status="FAIL" starttime="20210730 15:35:13.696" endtime="20210730 15:35:13.709"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:13.696" endtime="20210730 15:35:13.709"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=${EMPTY}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:13.712" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:35:13.711" endtime="20210730 15:35:13.712"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:13.712" level="INFO">${payload} = {'username': ''}</msg>
<status status="PASS" starttime="20210730 15:35:13.712" endtime="20210730 15:35:13.712"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:13.716" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:13.717" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:13.712" endtime="20210730 15:35:13.717"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:13.717" endtime="20210730 15:35:13.717"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:13.717" endtime="20210730 15:35:13.717"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:13.712" endtime="20210730 15:35:13.717"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:13.712" endtime="20210730 15:35:13.717"/>
</for>
<status status="FAIL" starttime="20210730 15:35:13.710" endtime="20210730 15:35:13.717"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:13.709" endtime="20210730 15:35:13.717"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=${EMPTY}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:13.719" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:35:13.719" endtime="20210730 15:35:13.719"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:13.719" level="INFO">${payload} = {'username': ''}</msg>
<status status="PASS" starttime="20210730 15:35:13.719" endtime="20210730 15:35:13.719"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:13.724" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:13.725" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:13.720" endtime="20210730 15:35:13.725"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:13.725" endtime="20210730 15:35:13.725"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:13.725" endtime="20210730 15:35:13.725"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:13.720" endtime="20210730 15:35:13.725"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:13.720" endtime="20210730 15:35:13.725"/>
</for>
<status status="FAIL" starttime="20210730 15:35:13.718" endtime="20210730 15:35:13.725"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:13.718" endtime="20210730 15:35:13.725"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:13.696" endtime="20210730 15:35:13.725"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:13.731" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:13.740" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:13.740" level="INFO">${pids} = 3130
3137
3142</msg>
<status status="PASS" starttime="20210730 15:35:13.726" endtime="20210730 15:35:13.740"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:13.741" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:13.740" endtime="20210730 15:35:13.741"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:13.741" level="INFO">${pids} = ['3130', '3137', '3142']</msg>
<status status="PASS" starttime="20210730 15:35:13.741" endtime="20210730 15:35:13.742"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">3130</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:13.746" level="INFO">Running command 'kill 3130 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:13.742" endtime="20210730 15:35:13.746"/>
</kw>
<status status="PASS" starttime="20210730 15:35:13.742" endtime="20210730 15:35:13.746"/>
</iter>
<iter>
<var name="${pid}">3137</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:13.750" level="INFO">Running command 'kill 3137 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:13.747" endtime="20210730 15:35:13.750"/>
</kw>
<status status="PASS" starttime="20210730 15:35:13.747" endtime="20210730 15:35:13.750"/>
</iter>
<iter>
<var name="${pid}">3142</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:13.756" level="INFO">Running command 'kill 3142 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:13.751" endtime="20210730 15:35:13.756"/>
</kw>
<status status="PASS" starttime="20210730 15:35:13.750" endtime="20210730 15:35:13.756"/>
</iter>
<status status="PASS" starttime="20210730 15:35:13.742" endtime="20210730 15:35:13.756"/>
</for>
<status status="PASS" starttime="20210730 15:35:13.741" endtime="20210730 15:35:13.756"/>
</branch>
<status status="PASS" starttime="20210730 15:35:13.741" endtime="20210730 15:35:13.756"/>
</if>
<status status="PASS" starttime="20210730 15:35:13.726" endtime="20210730 15:35:13.757"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
username as such:
{
"username": ''
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:35:12.141" endtime="20210730 15:35:13.757">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t2" name="With Each Valid Token, Updating Username Of Each System User With !#%&amp;/¤% Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:13.762" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:13.772" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:13.772" level="INFO">${pids} = 3195</msg>
<status status="PASS" starttime="20210730 15:35:13.759" endtime="20210730 15:35:13.772"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:13.773" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:13.772" endtime="20210730 15:35:13.773"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:13.774" level="INFO">${pids} = ['3195']</msg>
<status status="PASS" starttime="20210730 15:35:13.774" endtime="20210730 15:35:13.774"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">3195</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:13.778" level="INFO">Running command 'kill 3195 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:13.774" endtime="20210730 15:35:13.779"/>
</kw>
<status status="PASS" starttime="20210730 15:35:13.774" endtime="20210730 15:35:13.779"/>
</iter>
<status status="PASS" starttime="20210730 15:35:13.774" endtime="20210730 15:35:13.779"/>
</for>
<status status="PASS" starttime="20210730 15:35:13.773" endtime="20210730 15:35:13.779"/>
</branch>
<status status="PASS" starttime="20210730 15:35:13.773" endtime="20210730 15:35:13.779"/>
</if>
<status status="PASS" starttime="20210730 15:35:13.759" endtime="20210730 15:35:13.779"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:13.781" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:13.780" endtime="20210730 15:35:13.781"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:13.781" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:13.781" endtime="20210730 15:35:13.781"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:13.782" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:13.781" endtime="20210730 15:35:13.782"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:13.782" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:13.782" endtime="20210730 15:35:13.782"/>
</kw>
<msg timestamp="20210730 15:35:13.782" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:13.781" endtime="20210730 15:35:13.783"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:13.787" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:13.783" endtime="20210730 15:35:13.790"/>
</kw>
<status status="PASS" starttime="20210730 15:35:13.780" endtime="20210730 15:35:13.791"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:35:13.792" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:35:13.792" endtime="20210730 15:35:13.796"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:35:15.303" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:35:13.797" endtime="20210730 15:35:15.303"/>
</kw>
<status status="PASS" starttime="20210730 15:35:13.791" endtime="20210730 15:35:15.303"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:15.304" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:15.304" endtime="20210730 15:35:15.304"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:15.305" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:15.305" endtime="20210730 15:35:15.305"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:15.305" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:15.305" endtime="20210730 15:35:15.305"/>
</kw>
<msg timestamp="20210730 15:35:15.306" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:15.304" endtime="20210730 15:35:15.306"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:35:15.307" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:35:15.306" endtime="20210730 15:35:15.307"/>
</kw>
<status status="PASS" starttime="20210730 15:35:15.303" endtime="20210730 15:35:15.307"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:35:15.308" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:35:15.308" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:35:15.307" endtime="20210730 15:35:15.308"/>
</kw>
<status status="PASS" starttime="20210730 15:35:15.307" endtime="20210730 15:35:15.308"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:35:15.309" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:35:15.309" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:35:15.309" endtime="20210730 15:35:15.309"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:35:15.310" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:35:15.310" endtime="20210730 15:35:15.310"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:15.311" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:15.311" endtime="20210730 15:35:15.311"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:15.312" endtime="20210730 15:35:15.312"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:15.313" endtime="20210730 15:35:15.313"/>
</kw>
<status status="PASS" starttime="20210730 15:35:15.311" endtime="20210730 15:35:15.313"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:15.313" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:15.313" endtime="20210730 15:35:15.313"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:15.313" endtime="20210730 15:35:15.314"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:15.314" endtime="20210730 15:35:15.314"/>
</kw>
<status status="PASS" starttime="20210730 15:35:15.313" endtime="20210730 15:35:15.314"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:15.315" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:15.315" endtime="20210730 15:35:15.315"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:15.315" endtime="20210730 15:35:15.316"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:15.316" endtime="20210730 15:35:15.316"/>
</kw>
<status status="PASS" starttime="20210730 15:35:15.315" endtime="20210730 15:35:15.316"/>
</iter>
<status status="PASS" starttime="20210730 15:35:15.310" endtime="20210730 15:35:15.316"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:35:15.317" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:35:15.316" endtime="20210730 15:35:15.317"/>
</kw>
<status status="PASS" starttime="20210730 15:35:15.308" endtime="20210730 15:35:15.317"/>
</kw>
<status status="PASS" starttime="20210730 15:35:13.758" endtime="20210730 15:35:15.317"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤%</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:15.318" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:35:15.318" endtime="20210730 15:35:15.318"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:15.319" level="INFO">${payload} = {'username': '!#%&amp;/¤%'}</msg>
<status status="PASS" starttime="20210730 15:35:15.319" endtime="20210730 15:35:15.319"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:15.329" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:15.330" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:15.319" endtime="20210730 15:35:15.330"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:15.330" endtime="20210730 15:35:15.330"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:15.330" endtime="20210730 15:35:15.330"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:15.319" endtime="20210730 15:35:15.330"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:15.319" endtime="20210730 15:35:15.330"/>
</for>
<status status="FAIL" starttime="20210730 15:35:15.318" endtime="20210730 15:35:15.330"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:15.317" endtime="20210730 15:35:15.330"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤%</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:15.331" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:35:15.331" endtime="20210730 15:35:15.332"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:15.332" level="INFO">${payload} = {'username': '!#%&amp;/¤%'}</msg>
<status status="PASS" starttime="20210730 15:35:15.332" endtime="20210730 15:35:15.332"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:15.337" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:15.337" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:15.332" endtime="20210730 15:35:15.337"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:15.337" endtime="20210730 15:35:15.337"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:15.337" endtime="20210730 15:35:15.337"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:15.332" endtime="20210730 15:35:15.337"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:15.332" endtime="20210730 15:35:15.337"/>
</for>
<status status="FAIL" starttime="20210730 15:35:15.331" endtime="20210730 15:35:15.338"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:15.330" endtime="20210730 15:35:15.338"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤%</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:15.339" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:35:15.339" endtime="20210730 15:35:15.339"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:15.339" level="INFO">${payload} = {'username': '!#%&amp;/¤%'}</msg>
<status status="PASS" starttime="20210730 15:35:15.339" endtime="20210730 15:35:15.339"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:15.344" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:15.345" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:15.340" endtime="20210730 15:35:15.345"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:15.345" endtime="20210730 15:35:15.345"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:15.345" endtime="20210730 15:35:15.345"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:15.340" endtime="20210730 15:35:15.345"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:15.339" endtime="20210730 15:35:15.345"/>
</for>
<status status="FAIL" starttime="20210730 15:35:15.338" endtime="20210730 15:35:15.345"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:15.338" endtime="20210730 15:35:15.345"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:15.317" endtime="20210730 15:35:15.345"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:15.350" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:15.359" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:15.359" level="INFO">${pids} = 3223
3230
3235</msg>
<status status="PASS" starttime="20210730 15:35:15.346" endtime="20210730 15:35:15.359"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:15.360" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:15.360" endtime="20210730 15:35:15.360"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:15.361" level="INFO">${pids} = ['3223', '3230', '3235']</msg>
<status status="PASS" starttime="20210730 15:35:15.361" endtime="20210730 15:35:15.361"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">3223</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:15.364" level="INFO">Running command 'kill 3223 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:15.361" endtime="20210730 15:35:15.364"/>
</kw>
<status status="PASS" starttime="20210730 15:35:15.361" endtime="20210730 15:35:15.364"/>
</iter>
<iter>
<var name="${pid}">3230</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:15.368" level="INFO">Running command 'kill 3230 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:15.365" endtime="20210730 15:35:15.368"/>
</kw>
<status status="PASS" starttime="20210730 15:35:15.365" endtime="20210730 15:35:15.368"/>
</iter>
<iter>
<var name="${pid}">3235</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:15.372" level="INFO">Running command 'kill 3235 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:15.369" endtime="20210730 15:35:15.372"/>
</kw>
<status status="PASS" starttime="20210730 15:35:15.368" endtime="20210730 15:35:15.372"/>
</iter>
<status status="PASS" starttime="20210730 15:35:15.361" endtime="20210730 15:35:15.372"/>
</for>
<status status="PASS" starttime="20210730 15:35:15.360" endtime="20210730 15:35:15.372"/>
</branch>
<status status="PASS" starttime="20210730 15:35:15.360" endtime="20210730 15:35:15.372"/>
</if>
<status status="PASS" starttime="20210730 15:35:15.346" endtime="20210730 15:35:15.372"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '!#%&amp;/¤%'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:35:13.757" endtime="20210730 15:35:15.373">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t3" name="With Each Valid Token, Updating Username Of Each System User With !#%&amp;/¤%= Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:15.380" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:15.391" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:15.391" level="INFO">${pids} = 3269</msg>
<status status="PASS" starttime="20210730 15:35:15.376" endtime="20210730 15:35:15.391"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:15.392" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:15.391" endtime="20210730 15:35:15.392"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:15.393" level="INFO">${pids} = ['3269']</msg>
<status status="PASS" starttime="20210730 15:35:15.392" endtime="20210730 15:35:15.393"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">3269</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:15.396" level="INFO">Running command 'kill 3269 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:15.393" endtime="20210730 15:35:15.397"/>
</kw>
<status status="PASS" starttime="20210730 15:35:15.393" endtime="20210730 15:35:15.397"/>
</iter>
<status status="PASS" starttime="20210730 15:35:15.393" endtime="20210730 15:35:15.397"/>
</for>
<status status="PASS" starttime="20210730 15:35:15.392" endtime="20210730 15:35:15.397"/>
</branch>
<status status="PASS" starttime="20210730 15:35:15.392" endtime="20210730 15:35:15.397"/>
</if>
<status status="PASS" starttime="20210730 15:35:15.375" endtime="20210730 15:35:15.397"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:15.398" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:15.398" endtime="20210730 15:35:15.398"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:15.399" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:15.399" endtime="20210730 15:35:15.399"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:15.400" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:15.399" endtime="20210730 15:35:15.400"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:15.400" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:15.400" endtime="20210730 15:35:15.400"/>
</kw>
<msg timestamp="20210730 15:35:15.400" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:15.399" endtime="20210730 15:35:15.400"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:15.404" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:15.401" endtime="20210730 15:35:15.405"/>
</kw>
<status status="PASS" starttime="20210730 15:35:15.398" endtime="20210730 15:35:15.406"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:35:15.407" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:35:15.407" endtime="20210730 15:35:15.412"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:35:16.914" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:35:15.413" endtime="20210730 15:35:16.914"/>
</kw>
<status status="PASS" starttime="20210730 15:35:15.406" endtime="20210730 15:35:16.914"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:16.916" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:16.915" endtime="20210730 15:35:16.916"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:16.916" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:16.916" endtime="20210730 15:35:16.916"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:16.916" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:16.916" endtime="20210730 15:35:16.917"/>
</kw>
<msg timestamp="20210730 15:35:16.917" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:16.915" endtime="20210730 15:35:16.917"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:35:16.917" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:35:16.917" endtime="20210730 15:35:16.917"/>
</kw>
<status status="PASS" starttime="20210730 15:35:16.915" endtime="20210730 15:35:16.918"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:35:16.918" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:35:16.918" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:35:16.918" endtime="20210730 15:35:16.918"/>
</kw>
<status status="PASS" starttime="20210730 15:35:16.918" endtime="20210730 15:35:16.918"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:35:16.919" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:35:16.919" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:35:16.919" endtime="20210730 15:35:16.919"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:35:16.919" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:35:16.919" endtime="20210730 15:35:16.919"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:16.920" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:16.920" endtime="20210730 15:35:16.920"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:16.920" endtime="20210730 15:35:16.921"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:16.921" endtime="20210730 15:35:16.921"/>
</kw>
<status status="PASS" starttime="20210730 15:35:16.920" endtime="20210730 15:35:16.921"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:16.921" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:16.921" endtime="20210730 15:35:16.922"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:16.922" endtime="20210730 15:35:16.922"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:16.923" endtime="20210730 15:35:16.923"/>
</kw>
<status status="PASS" starttime="20210730 15:35:16.921" endtime="20210730 15:35:16.923"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:16.923" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:16.923" endtime="20210730 15:35:16.923"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:16.923" endtime="20210730 15:35:16.924"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:16.924" endtime="20210730 15:35:16.924"/>
</kw>
<status status="PASS" starttime="20210730 15:35:16.923" endtime="20210730 15:35:16.924"/>
</iter>
<status status="PASS" starttime="20210730 15:35:16.919" endtime="20210730 15:35:16.924"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:35:16.925" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:35:16.925" endtime="20210730 15:35:16.925"/>
</kw>
<status status="PASS" starttime="20210730 15:35:16.919" endtime="20210730 15:35:16.925"/>
</kw>
<status status="PASS" starttime="20210730 15:35:15.374" endtime="20210730 15:35:16.925"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤%=</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:16.927" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:35:16.926" endtime="20210730 15:35:16.927"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:16.927" level="INFO">${payload} = {'username': '!#%&amp;/¤%='}</msg>
<status status="PASS" starttime="20210730 15:35:16.927" endtime="20210730 15:35:16.927"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:16.936" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:16.936" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:16.927" endtime="20210730 15:35:16.936"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:16.937" endtime="20210730 15:35:16.937"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:16.937" endtime="20210730 15:35:16.937"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:16.927" endtime="20210730 15:35:16.937"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:16.927" endtime="20210730 15:35:16.937"/>
</for>
<status status="FAIL" starttime="20210730 15:35:16.926" endtime="20210730 15:35:16.937"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:16.926" endtime="20210730 15:35:16.937"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤%=</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:16.938" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:35:16.938" endtime="20210730 15:35:16.938"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:16.939" level="INFO">${payload} = {'username': '!#%&amp;/¤%='}</msg>
<status status="PASS" starttime="20210730 15:35:16.939" endtime="20210730 15:35:16.939"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:16.944" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:16.944" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:16.939" endtime="20210730 15:35:16.944"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:16.944" endtime="20210730 15:35:16.944"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:16.944" endtime="20210730 15:35:16.945"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:16.939" endtime="20210730 15:35:16.945"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:16.939" endtime="20210730 15:35:16.945"/>
</for>
<status status="FAIL" starttime="20210730 15:35:16.937" endtime="20210730 15:35:16.945"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:16.937" endtime="20210730 15:35:16.945"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤%=</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:16.946" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:35:16.946" endtime="20210730 15:35:16.946"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:16.947" level="INFO">${payload} = {'username': '!#%&amp;/¤%='}</msg>
<status status="PASS" starttime="20210730 15:35:16.947" endtime="20210730 15:35:16.947"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:16.952" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:16.952" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:16.947" endtime="20210730 15:35:16.952"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:16.952" endtime="20210730 15:35:16.952"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:16.952" endtime="20210730 15:35:16.952"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:16.947" endtime="20210730 15:35:16.952"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:16.947" endtime="20210730 15:35:16.952"/>
</for>
<status status="FAIL" starttime="20210730 15:35:16.945" endtime="20210730 15:35:16.953"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:16.945" endtime="20210730 15:35:16.953"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:16.925" endtime="20210730 15:35:16.953"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:16.957" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:16.967" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:16.967" level="INFO">${pids} = 3292
3299
3319</msg>
<status status="PASS" starttime="20210730 15:35:16.954" endtime="20210730 15:35:16.967"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:16.968" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:16.967" endtime="20210730 15:35:16.968"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:16.968" level="INFO">${pids} = ['3292', '3299', '3319']</msg>
<status status="PASS" starttime="20210730 15:35:16.968" endtime="20210730 15:35:16.968"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">3292</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:16.972" level="INFO">Running command 'kill 3292 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:16.969" endtime="20210730 15:35:16.972"/>
</kw>
<status status="PASS" starttime="20210730 15:35:16.969" endtime="20210730 15:35:16.972"/>
</iter>
<iter>
<var name="${pid}">3299</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:16.976" level="INFO">Running command 'kill 3299 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:16.973" endtime="20210730 15:35:16.978"/>
</kw>
<status status="PASS" starttime="20210730 15:35:16.973" endtime="20210730 15:35:16.978"/>
</iter>
<iter>
<var name="${pid}">3319</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:16.983" level="INFO">Running command 'kill 3319 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:16.980" endtime="20210730 15:35:16.984"/>
</kw>
<status status="PASS" starttime="20210730 15:35:16.979" endtime="20210730 15:35:16.984"/>
</iter>
<status status="PASS" starttime="20210730 15:35:16.968" endtime="20210730 15:35:16.984"/>
</for>
<status status="PASS" starttime="20210730 15:35:16.968" endtime="20210730 15:35:16.984"/>
</branch>
<status status="PASS" starttime="20210730 15:35:16.968" endtime="20210730 15:35:16.984"/>
</if>
<status status="PASS" starttime="20210730 15:35:16.953" endtime="20210730 15:35:16.984"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '!#%&amp;/¤%='
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:35:15.373" endtime="20210730 15:35:16.985">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t4" name="With Each Valid Token, Updating Username Of Each System User With !#%&amp;/¤%=!()=? Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:16.990" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:16.999" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:17.000" level="INFO">${pids} = 3355</msg>
<status status="PASS" starttime="20210730 15:35:16.987" endtime="20210730 15:35:17.000"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:17.001" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:17.000" endtime="20210730 15:35:17.001"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:17.001" level="INFO">${pids} = ['3355']</msg>
<status status="PASS" starttime="20210730 15:35:17.001" endtime="20210730 15:35:17.001"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">3355</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:17.005" level="INFO">Running command 'kill 3355 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:17.002" endtime="20210730 15:35:17.005"/>
</kw>
<status status="PASS" starttime="20210730 15:35:17.002" endtime="20210730 15:35:17.005"/>
</iter>
<status status="PASS" starttime="20210730 15:35:17.001" endtime="20210730 15:35:17.005"/>
</for>
<status status="PASS" starttime="20210730 15:35:17.001" endtime="20210730 15:35:17.005"/>
</branch>
<status status="PASS" starttime="20210730 15:35:17.001" endtime="20210730 15:35:17.005"/>
</if>
<status status="PASS" starttime="20210730 15:35:16.987" endtime="20210730 15:35:17.005"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:17.006" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:17.006" endtime="20210730 15:35:17.007"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:17.009" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:17.009" endtime="20210730 15:35:17.009"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:17.010" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:17.009" endtime="20210730 15:35:17.010"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:17.011" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:17.010" endtime="20210730 15:35:17.011"/>
</kw>
<msg timestamp="20210730 15:35:17.011" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:17.007" endtime="20210730 15:35:17.011"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:17.015" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:17.011" endtime="20210730 15:35:17.016"/>
</kw>
<status status="PASS" starttime="20210730 15:35:17.006" endtime="20210730 15:35:17.016"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:35:17.018" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:35:17.017" endtime="20210730 15:35:17.023"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:35:18.525" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:35:17.024" endtime="20210730 15:35:18.525"/>
</kw>
<status status="PASS" starttime="20210730 15:35:17.016" endtime="20210730 15:35:18.525"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:18.527" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:18.526" endtime="20210730 15:35:18.527"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:18.527" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:18.527" endtime="20210730 15:35:18.527"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:18.528" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:18.527" endtime="20210730 15:35:18.528"/>
</kw>
<msg timestamp="20210730 15:35:18.528" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:18.526" endtime="20210730 15:35:18.528"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:35:18.528" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:35:18.528" endtime="20210730 15:35:18.528"/>
</kw>
<status status="PASS" starttime="20210730 15:35:18.526" endtime="20210730 15:35:18.529"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:35:18.529" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:35:18.529" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:35:18.529" endtime="20210730 15:35:18.529"/>
</kw>
<status status="PASS" starttime="20210730 15:35:18.529" endtime="20210730 15:35:18.530"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:35:18.530" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:35:18.530" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:35:18.530" endtime="20210730 15:35:18.530"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:35:18.530" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:35:18.530" endtime="20210730 15:35:18.530"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:18.531" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:18.531" endtime="20210730 15:35:18.531"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:18.531" endtime="20210730 15:35:18.532"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:18.532" endtime="20210730 15:35:18.532"/>
</kw>
<status status="PASS" starttime="20210730 15:35:18.531" endtime="20210730 15:35:18.532"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:18.533" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:18.533" endtime="20210730 15:35:18.533"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:18.533" endtime="20210730 15:35:18.534"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:18.534" endtime="20210730 15:35:18.534"/>
</kw>
<status status="PASS" starttime="20210730 15:35:18.533" endtime="20210730 15:35:18.534"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:18.535" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:18.534" endtime="20210730 15:35:18.535"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:18.535" endtime="20210730 15:35:18.535"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:18.536" endtime="20210730 15:35:18.536"/>
</kw>
<status status="PASS" starttime="20210730 15:35:18.534" endtime="20210730 15:35:18.536"/>
</iter>
<status status="PASS" starttime="20210730 15:35:18.530" endtime="20210730 15:35:18.536"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:35:18.536" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:35:18.536" endtime="20210730 15:35:18.536"/>
</kw>
<status status="PASS" starttime="20210730 15:35:18.530" endtime="20210730 15:35:18.537"/>
</kw>
<status status="PASS" starttime="20210730 15:35:16.986" endtime="20210730 15:35:18.537"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤%=!()=?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:18.538" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:35:18.538" endtime="20210730 15:35:18.538"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:18.539" level="INFO">${payload} = {'username': '!#%&amp;/¤%=!()=?'}</msg>
<status status="PASS" starttime="20210730 15:35:18.538" endtime="20210730 15:35:18.539"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:18.550" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:18.550" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:18.539" endtime="20210730 15:35:18.550"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:18.550" endtime="20210730 15:35:18.551"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:18.551" endtime="20210730 15:35:18.551"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:18.539" endtime="20210730 15:35:18.551"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:18.539" endtime="20210730 15:35:18.551"/>
</for>
<status status="FAIL" starttime="20210730 15:35:18.537" endtime="20210730 15:35:18.551"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:18.537" endtime="20210730 15:35:18.551"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤%=!()=?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:18.552" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:35:18.552" endtime="20210730 15:35:18.552"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:18.553" level="INFO">${payload} = {'username': '!#%&amp;/¤%=!()=?'}</msg>
<status status="PASS" starttime="20210730 15:35:18.552" endtime="20210730 15:35:18.553"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:18.560" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:18.561" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:18.554" endtime="20210730 15:35:18.561"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:18.561" endtime="20210730 15:35:18.561"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:18.561" endtime="20210730 15:35:18.561"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:18.553" endtime="20210730 15:35:18.561"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:18.553" endtime="20210730 15:35:18.561"/>
</for>
<status status="FAIL" starttime="20210730 15:35:18.551" endtime="20210730 15:35:18.561"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:18.551" endtime="20210730 15:35:18.562"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤%=!()=?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:18.563" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:35:18.562" endtime="20210730 15:35:18.563"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:18.563" level="INFO">${payload} = {'username': '!#%&amp;/¤%=!()=?'}</msg>
<status status="PASS" starttime="20210730 15:35:18.563" endtime="20210730 15:35:18.563"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:18.570" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:18.570" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:18.564" endtime="20210730 15:35:18.571"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:18.571" endtime="20210730 15:35:18.571"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:18.571" endtime="20210730 15:35:18.571"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:18.563" endtime="20210730 15:35:18.571"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:18.563" endtime="20210730 15:35:18.571"/>
</for>
<status status="FAIL" starttime="20210730 15:35:18.562" endtime="20210730 15:35:18.571"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:18.562" endtime="20210730 15:35:18.571"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:18.537" endtime="20210730 15:35:18.571"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:18.577" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:18.587" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:18.587" level="INFO">${pids} = 3378
3385
3394</msg>
<status status="PASS" starttime="20210730 15:35:18.573" endtime="20210730 15:35:18.587"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:18.588" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:18.588" endtime="20210730 15:35:18.588"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:18.589" level="INFO">${pids} = ['3378', '3385', '3394']</msg>
<status status="PASS" starttime="20210730 15:35:18.589" endtime="20210730 15:35:18.589"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">3378</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:18.593" level="INFO">Running command 'kill 3378 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:18.589" endtime="20210730 15:35:18.593"/>
</kw>
<status status="PASS" starttime="20210730 15:35:18.589" endtime="20210730 15:35:18.593"/>
</iter>
<iter>
<var name="${pid}">3385</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:18.598" level="INFO">Running command 'kill 3385 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:18.594" endtime="20210730 15:35:18.601"/>
</kw>
<status status="PASS" starttime="20210730 15:35:18.593" endtime="20210730 15:35:18.601"/>
</iter>
<iter>
<var name="${pid}">3394</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:18.604" level="INFO">Running command 'kill 3394 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:18.601" endtime="20210730 15:35:18.605"/>
</kw>
<status status="PASS" starttime="20210730 15:35:18.601" endtime="20210730 15:35:18.605"/>
</iter>
<status status="PASS" starttime="20210730 15:35:18.589" endtime="20210730 15:35:18.605"/>
</for>
<status status="PASS" starttime="20210730 15:35:18.588" endtime="20210730 15:35:18.605"/>
</branch>
<status status="PASS" starttime="20210730 15:35:18.588" endtime="20210730 15:35:18.605"/>
</if>
<status status="PASS" starttime="20210730 15:35:18.572" endtime="20210730 15:35:18.605"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '!#%&amp;/¤%=!()=?'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:35:16.985" endtime="20210730 15:35:18.605">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t5" name="With Each Valid Token, Updating Username Of Each System User With 1234567 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:18.611" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:18.621" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:18.621" level="INFO">${pids} = 3477</msg>
<status status="PASS" starttime="20210730 15:35:18.607" endtime="20210730 15:35:18.621"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:18.622" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:18.621" endtime="20210730 15:35:18.622"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:18.622" level="INFO">${pids} = ['3477']</msg>
<status status="PASS" starttime="20210730 15:35:18.622" endtime="20210730 15:35:18.622"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">3477</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:18.627" level="INFO">Running command 'kill 3477 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:18.623" endtime="20210730 15:35:18.628"/>
</kw>
<status status="PASS" starttime="20210730 15:35:18.623" endtime="20210730 15:35:18.628"/>
</iter>
<status status="PASS" starttime="20210730 15:35:18.623" endtime="20210730 15:35:18.628"/>
</for>
<status status="PASS" starttime="20210730 15:35:18.622" endtime="20210730 15:35:18.628"/>
</branch>
<status status="PASS" starttime="20210730 15:35:18.622" endtime="20210730 15:35:18.628"/>
</if>
<status status="PASS" starttime="20210730 15:35:18.607" endtime="20210730 15:35:18.628"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:18.629" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:18.629" endtime="20210730 15:35:18.629"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:18.630" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:18.630" endtime="20210730 15:35:18.630"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:18.631" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:18.631" endtime="20210730 15:35:18.631"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:18.631" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:18.631" endtime="20210730 15:35:18.631"/>
</kw>
<msg timestamp="20210730 15:35:18.632" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:18.630" endtime="20210730 15:35:18.632"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:18.635" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:18.632" endtime="20210730 15:35:18.637"/>
</kw>
<status status="PASS" starttime="20210730 15:35:18.628" endtime="20210730 15:35:18.637"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:35:18.638" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:35:18.638" endtime="20210730 15:35:18.643"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:35:20.145" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:35:18.643" endtime="20210730 15:35:20.145"/>
</kw>
<status status="PASS" starttime="20210730 15:35:18.637" endtime="20210730 15:35:20.145"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:20.147" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:20.146" endtime="20210730 15:35:20.147"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:20.147" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:20.147" endtime="20210730 15:35:20.147"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:20.147" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:20.147" endtime="20210730 15:35:20.147"/>
</kw>
<msg timestamp="20210730 15:35:20.148" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:20.146" endtime="20210730 15:35:20.148"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:35:20.148" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:35:20.148" endtime="20210730 15:35:20.148"/>
</kw>
<status status="PASS" starttime="20210730 15:35:20.145" endtime="20210730 15:35:20.148"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:35:20.149" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:35:20.149" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:35:20.149" endtime="20210730 15:35:20.149"/>
</kw>
<status status="PASS" starttime="20210730 15:35:20.149" endtime="20210730 15:35:20.149"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:35:20.150" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:35:20.150" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:35:20.150" endtime="20210730 15:35:20.150"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:35:20.150" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:35:20.150" endtime="20210730 15:35:20.150"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:20.151" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:20.151" endtime="20210730 15:35:20.151"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:20.151" endtime="20210730 15:35:20.152"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:20.152" endtime="20210730 15:35:20.152"/>
</kw>
<status status="PASS" starttime="20210730 15:35:20.150" endtime="20210730 15:35:20.152"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:20.152" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:20.152" endtime="20210730 15:35:20.152"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:20.152" endtime="20210730 15:35:20.153"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:20.153" endtime="20210730 15:35:20.153"/>
</kw>
<status status="PASS" starttime="20210730 15:35:20.152" endtime="20210730 15:35:20.153"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:20.154" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:20.154" endtime="20210730 15:35:20.154"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:20.154" endtime="20210730 15:35:20.155"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:20.155" endtime="20210730 15:35:20.155"/>
</kw>
<status status="PASS" starttime="20210730 15:35:20.154" endtime="20210730 15:35:20.155"/>
</iter>
<status status="PASS" starttime="20210730 15:35:20.150" endtime="20210730 15:35:20.155"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:35:20.156" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:35:20.155" endtime="20210730 15:35:20.156"/>
</kw>
<status status="PASS" starttime="20210730 15:35:20.149" endtime="20210730 15:35:20.156"/>
</kw>
<status status="PASS" starttime="20210730 15:35:18.607" endtime="20210730 15:35:20.156"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=1234567</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:20.157" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:35:20.157" endtime="20210730 15:35:20.157"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:20.158" level="INFO">${payload} = {'username': '1234567'}</msg>
<status status="PASS" starttime="20210730 15:35:20.157" endtime="20210730 15:35:20.158"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:20.168" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:20.168" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:20.158" endtime="20210730 15:35:20.168"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:20.168" endtime="20210730 15:35:20.168"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:20.168" endtime="20210730 15:35:20.168"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:20.158" endtime="20210730 15:35:20.168"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:20.158" endtime="20210730 15:35:20.168"/>
</for>
<status status="FAIL" starttime="20210730 15:35:20.156" endtime="20210730 15:35:20.168"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:20.156" endtime="20210730 15:35:20.169"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=1234567</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:20.170" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:35:20.169" endtime="20210730 15:35:20.170"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:20.170" level="INFO">${payload} = {'username': '1234567'}</msg>
<status status="PASS" starttime="20210730 15:35:20.170" endtime="20210730 15:35:20.170"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:20.175" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:20.175" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:20.171" endtime="20210730 15:35:20.175"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:20.175" endtime="20210730 15:35:20.175"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:20.175" endtime="20210730 15:35:20.175"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:20.171" endtime="20210730 15:35:20.175"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:20.170" endtime="20210730 15:35:20.175"/>
</for>
<status status="FAIL" starttime="20210730 15:35:20.169" endtime="20210730 15:35:20.176"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:20.169" endtime="20210730 15:35:20.176"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=1234567</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:20.177" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:35:20.176" endtime="20210730 15:35:20.177"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:20.178" level="INFO">${payload} = {'username': '1234567'}</msg>
<status status="PASS" starttime="20210730 15:35:20.177" endtime="20210730 15:35:20.178"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:20.182" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:20.183" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:20.178" endtime="20210730 15:35:20.183"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:20.183" endtime="20210730 15:35:20.183"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:20.183" endtime="20210730 15:35:20.183"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:20.178" endtime="20210730 15:35:20.183"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:20.178" endtime="20210730 15:35:20.183"/>
</for>
<status status="FAIL" starttime="20210730 15:35:20.176" endtime="20210730 15:35:20.183"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:20.176" endtime="20210730 15:35:20.183"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:20.156" endtime="20210730 15:35:20.183"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:20.189" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:20.198" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:20.198" level="INFO">${pids} = 3510
3517
3538</msg>
<status status="PASS" starttime="20210730 15:35:20.184" endtime="20210730 15:35:20.198"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:20.199" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:20.198" endtime="20210730 15:35:20.199"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:20.200" level="INFO">${pids} = ['3510', '3517', '3538']</msg>
<status status="PASS" starttime="20210730 15:35:20.199" endtime="20210730 15:35:20.200"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">3510</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:20.203" level="INFO">Running command 'kill 3510 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:20.200" endtime="20210730 15:35:20.203"/>
</kw>
<status status="PASS" starttime="20210730 15:35:20.200" endtime="20210730 15:35:20.203"/>
</iter>
<iter>
<var name="${pid}">3517</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:20.206" level="INFO">Running command 'kill 3517 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:20.203" endtime="20210730 15:35:20.207"/>
</kw>
<status status="PASS" starttime="20210730 15:35:20.203" endtime="20210730 15:35:20.208"/>
</iter>
<iter>
<var name="${pid}">3538</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:20.212" level="INFO">Running command 'kill 3538 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:20.208" endtime="20210730 15:35:20.212"/>
</kw>
<status status="PASS" starttime="20210730 15:35:20.208" endtime="20210730 15:35:20.213"/>
</iter>
<status status="PASS" starttime="20210730 15:35:20.200" endtime="20210730 15:35:20.213"/>
</for>
<status status="PASS" starttime="20210730 15:35:20.199" endtime="20210730 15:35:20.213"/>
</branch>
<status status="PASS" starttime="20210730 15:35:20.199" endtime="20210730 15:35:20.213"/>
</if>
<status status="PASS" starttime="20210730 15:35:20.184" endtime="20210730 15:35:20.213"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '1234567'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:35:18.606" endtime="20210730 15:35:20.214">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t6" name="With Each Valid Token, Updating Username Of Each System User With 12345678 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:20.221" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:20.231" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:20.231" level="INFO">${pids} = 3600</msg>
<status status="PASS" starttime="20210730 15:35:20.216" endtime="20210730 15:35:20.231"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:20.232" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:20.231" endtime="20210730 15:35:20.232"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:20.232" level="INFO">${pids} = ['3600']</msg>
<status status="PASS" starttime="20210730 15:35:20.232" endtime="20210730 15:35:20.232"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">3600</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:20.236" level="INFO">Running command 'kill 3600 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:20.233" endtime="20210730 15:35:20.236"/>
</kw>
<status status="PASS" starttime="20210730 15:35:20.233" endtime="20210730 15:35:20.236"/>
</iter>
<status status="PASS" starttime="20210730 15:35:20.233" endtime="20210730 15:35:20.236"/>
</for>
<status status="PASS" starttime="20210730 15:35:20.232" endtime="20210730 15:35:20.236"/>
</branch>
<status status="PASS" starttime="20210730 15:35:20.232" endtime="20210730 15:35:20.236"/>
</if>
<status status="PASS" starttime="20210730 15:35:20.216" endtime="20210730 15:35:20.236"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:20.238" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:20.237" endtime="20210730 15:35:20.238"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:20.238" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:20.238" endtime="20210730 15:35:20.239"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:20.239" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:20.239" endtime="20210730 15:35:20.239"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:20.239" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:20.239" endtime="20210730 15:35:20.239"/>
</kw>
<msg timestamp="20210730 15:35:20.240" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:20.238" endtime="20210730 15:35:20.240"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:20.244" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:20.240" endtime="20210730 15:35:20.246"/>
</kw>
<status status="PASS" starttime="20210730 15:35:20.237" endtime="20210730 15:35:20.246"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:35:20.248" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:35:20.247" endtime="20210730 15:35:20.251"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:35:21.753" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:35:20.252" endtime="20210730 15:35:21.754"/>
</kw>
<status status="PASS" starttime="20210730 15:35:20.247" endtime="20210730 15:35:21.754"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:21.755" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:21.755" endtime="20210730 15:35:21.755"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:21.756" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:21.755" endtime="20210730 15:35:21.756"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:21.757" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:21.756" endtime="20210730 15:35:21.757"/>
</kw>
<msg timestamp="20210730 15:35:21.757" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:21.754" endtime="20210730 15:35:21.757"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:35:21.757" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:35:21.757" endtime="20210730 15:35:21.758"/>
</kw>
<status status="PASS" starttime="20210730 15:35:21.754" endtime="20210730 15:35:21.758"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:35:21.759" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:35:21.759" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:35:21.759" endtime="20210730 15:35:21.759"/>
</kw>
<status status="PASS" starttime="20210730 15:35:21.758" endtime="20210730 15:35:21.759"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:35:21.759" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:35:21.760" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:35:21.759" endtime="20210730 15:35:21.760"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:35:21.760" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:35:21.760" endtime="20210730 15:35:21.760"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:21.760" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:21.760" endtime="20210730 15:35:21.760"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:21.761" endtime="20210730 15:35:21.766"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:21.766" endtime="20210730 15:35:21.767"/>
</kw>
<status status="PASS" starttime="20210730 15:35:21.760" endtime="20210730 15:35:21.767"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:21.776" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:21.775" endtime="20210730 15:35:21.776"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:21.776" endtime="20210730 15:35:21.778"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:21.778" endtime="20210730 15:35:21.778"/>
</kw>
<status status="PASS" starttime="20210730 15:35:21.775" endtime="20210730 15:35:21.779"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:21.779" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:21.779" endtime="20210730 15:35:21.779"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:21.779" endtime="20210730 15:35:21.780"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:21.780" endtime="20210730 15:35:21.780"/>
</kw>
<status status="PASS" starttime="20210730 15:35:21.779" endtime="20210730 15:35:21.781"/>
</iter>
<status status="PASS" starttime="20210730 15:35:21.760" endtime="20210730 15:35:21.781"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:35:21.781" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:35:21.781" endtime="20210730 15:35:21.781"/>
</kw>
<status status="PASS" starttime="20210730 15:35:21.759" endtime="20210730 15:35:21.781"/>
</kw>
<status status="PASS" starttime="20210730 15:35:20.215" endtime="20210730 15:35:21.781"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=12345678</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:21.783" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:35:21.782" endtime="20210730 15:35:21.783"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:21.783" level="INFO">${payload} = {'username': '12345678'}</msg>
<status status="PASS" starttime="20210730 15:35:21.783" endtime="20210730 15:35:21.783"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:21.796" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:21.796" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:21.784" endtime="20210730 15:35:21.796"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:21.796" endtime="20210730 15:35:21.796"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:21.796" endtime="20210730 15:35:21.796"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:21.784" endtime="20210730 15:35:21.796"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:21.783" endtime="20210730 15:35:21.797"/>
</for>
<status status="FAIL" starttime="20210730 15:35:21.782" endtime="20210730 15:35:21.797"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:21.782" endtime="20210730 15:35:21.797"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=12345678</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:21.798" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:35:21.798" endtime="20210730 15:35:21.798"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:21.799" level="INFO">${payload} = {'username': '12345678'}</msg>
<status status="PASS" starttime="20210730 15:35:21.798" endtime="20210730 15:35:21.799"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:21.803" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:21.804" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:21.799" endtime="20210730 15:35:21.804"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:21.804" endtime="20210730 15:35:21.804"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:21.804" endtime="20210730 15:35:21.804"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:21.799" endtime="20210730 15:35:21.804"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:21.799" endtime="20210730 15:35:21.804"/>
</for>
<status status="FAIL" starttime="20210730 15:35:21.797" endtime="20210730 15:35:21.804"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:21.797" endtime="20210730 15:35:21.804"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=12345678</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:21.805" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:35:21.805" endtime="20210730 15:35:21.805"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:21.806" level="INFO">${payload} = {'username': '12345678'}</msg>
<status status="PASS" starttime="20210730 15:35:21.806" endtime="20210730 15:35:21.806"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:21.815" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:21.815" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:21.806" endtime="20210730 15:35:21.815"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:21.815" endtime="20210730 15:35:21.815"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:21.815" endtime="20210730 15:35:21.815"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:21.806" endtime="20210730 15:35:21.815"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:21.806" endtime="20210730 15:35:21.816"/>
</for>
<status status="FAIL" starttime="20210730 15:35:21.804" endtime="20210730 15:35:21.816"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:21.804" endtime="20210730 15:35:21.816"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:21.782" endtime="20210730 15:35:21.816"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:21.820" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:21.829" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:21.829" level="INFO">${pids} = 3634
3641
3650</msg>
<status status="PASS" starttime="20210730 15:35:21.817" endtime="20210730 15:35:21.829"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:21.830" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:21.829" endtime="20210730 15:35:21.830"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:21.831" level="INFO">${pids} = ['3634', '3641', '3650']</msg>
<status status="PASS" starttime="20210730 15:35:21.830" endtime="20210730 15:35:21.831"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">3634</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:21.834" level="INFO">Running command 'kill 3634 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:21.831" endtime="20210730 15:35:21.834"/>
</kw>
<status status="PASS" starttime="20210730 15:35:21.831" endtime="20210730 15:35:21.834"/>
</iter>
<iter>
<var name="${pid}">3641</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:21.837" level="INFO">Running command 'kill 3641 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:21.835" endtime="20210730 15:35:21.838"/>
</kw>
<status status="PASS" starttime="20210730 15:35:21.834" endtime="20210730 15:35:21.838"/>
</iter>
<iter>
<var name="${pid}">3650</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:21.843" level="INFO">Running command 'kill 3650 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:21.838" endtime="20210730 15:35:21.843"/>
</kw>
<status status="PASS" starttime="20210730 15:35:21.838" endtime="20210730 15:35:21.843"/>
</iter>
<status status="PASS" starttime="20210730 15:35:21.831" endtime="20210730 15:35:21.843"/>
</for>
<status status="PASS" starttime="20210730 15:35:21.830" endtime="20210730 15:35:21.843"/>
</branch>
<status status="PASS" starttime="20210730 15:35:21.830" endtime="20210730 15:35:21.843"/>
</if>
<status status="PASS" starttime="20210730 15:35:21.816" endtime="20210730 15:35:21.844"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '12345678'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:35:20.214" endtime="20210730 15:35:21.844">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t7" name="With Each Valid Token, Updating Username Of Each System User With 12345678912345 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:21.851" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:21.860" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:21.860" level="INFO">${pids} = 3796</msg>
<status status="PASS" starttime="20210730 15:35:21.847" endtime="20210730 15:35:21.860"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:21.861" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:21.861" endtime="20210730 15:35:21.861"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:21.862" level="INFO">${pids} = ['3796']</msg>
<status status="PASS" starttime="20210730 15:35:21.862" endtime="20210730 15:35:21.862"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">3796</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:21.865" level="INFO">Running command 'kill 3796 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:21.863" endtime="20210730 15:35:21.866"/>
</kw>
<status status="PASS" starttime="20210730 15:35:21.862" endtime="20210730 15:35:21.866"/>
</iter>
<status status="PASS" starttime="20210730 15:35:21.862" endtime="20210730 15:35:21.866"/>
</for>
<status status="PASS" starttime="20210730 15:35:21.861" endtime="20210730 15:35:21.866"/>
</branch>
<status status="PASS" starttime="20210730 15:35:21.861" endtime="20210730 15:35:21.866"/>
</if>
<status status="PASS" starttime="20210730 15:35:21.846" endtime="20210730 15:35:21.866"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:21.867" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:21.867" endtime="20210730 15:35:21.867"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:21.868" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:21.867" endtime="20210730 15:35:21.868"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:21.868" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:21.868" endtime="20210730 15:35:21.868"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:21.869" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:21.868" endtime="20210730 15:35:21.869"/>
</kw>
<msg timestamp="20210730 15:35:21.869" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:21.867" endtime="20210730 15:35:21.869"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:21.875" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:21.869" endtime="20210730 15:35:21.877"/>
</kw>
<status status="PASS" starttime="20210730 15:35:21.866" endtime="20210730 15:35:21.878"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:35:21.880" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:35:21.879" endtime="20210730 15:35:21.885"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:35:23.392" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:35:21.885" endtime="20210730 15:35:23.393"/>
</kw>
<status status="PASS" starttime="20210730 15:35:21.878" endtime="20210730 15:35:23.394"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:23.400" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:23.398" endtime="20210730 15:35:23.400"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:23.402" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:23.401" endtime="20210730 15:35:23.402"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:23.403" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:23.402" endtime="20210730 15:35:23.404"/>
</kw>
<msg timestamp="20210730 15:35:23.404" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:23.397" endtime="20210730 15:35:23.404"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:35:23.406" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:35:23.405" endtime="20210730 15:35:23.406"/>
</kw>
<status status="PASS" starttime="20210730 15:35:23.395" endtime="20210730 15:35:23.407"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:35:23.408" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:35:23.409" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:35:23.408" endtime="20210730 15:35:23.409"/>
</kw>
<status status="PASS" starttime="20210730 15:35:23.407" endtime="20210730 15:35:23.409"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:35:23.412" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:35:23.413" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:35:23.411" endtime="20210730 15:35:23.413"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:35:23.413" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:35:23.413" endtime="20210730 15:35:23.413"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:23.414" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:23.414" endtime="20210730 15:35:23.414"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:23.415" endtime="20210730 15:35:23.415"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:23.416" endtime="20210730 15:35:23.416"/>
</kw>
<status status="PASS" starttime="20210730 15:35:23.414" endtime="20210730 15:35:23.416"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:23.416" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:23.416" endtime="20210730 15:35:23.416"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:23.417" endtime="20210730 15:35:23.417"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:23.417" endtime="20210730 15:35:23.418"/>
</kw>
<status status="PASS" starttime="20210730 15:35:23.416" endtime="20210730 15:35:23.418"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:23.418" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:23.418" endtime="20210730 15:35:23.418"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:23.418" endtime="20210730 15:35:23.419"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:23.419" endtime="20210730 15:35:23.419"/>
</kw>
<status status="PASS" starttime="20210730 15:35:23.418" endtime="20210730 15:35:23.419"/>
</iter>
<status status="PASS" starttime="20210730 15:35:23.413" endtime="20210730 15:35:23.419"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:35:23.419" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:35:23.419" endtime="20210730 15:35:23.419"/>
</kw>
<status status="PASS" starttime="20210730 15:35:23.410" endtime="20210730 15:35:23.420"/>
</kw>
<status status="PASS" starttime="20210730 15:35:21.845" endtime="20210730 15:35:23.420"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=12345678912345</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:23.421" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:35:23.420" endtime="20210730 15:35:23.421"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:23.425" level="INFO">${payload} = {'username': '12345678912345'}</msg>
<status status="PASS" starttime="20210730 15:35:23.421" endtime="20210730 15:35:23.425"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:23.436" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:23.436" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:23.425" endtime="20210730 15:35:23.436"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:23.436" endtime="20210730 15:35:23.436"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:23.436" endtime="20210730 15:35:23.436"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:23.425" endtime="20210730 15:35:23.436"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:23.425" endtime="20210730 15:35:23.436"/>
</for>
<status status="FAIL" starttime="20210730 15:35:23.420" endtime="20210730 15:35:23.437"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:23.420" endtime="20210730 15:35:23.437"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=12345678912345</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:23.438" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:35:23.437" endtime="20210730 15:35:23.438"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:23.438" level="INFO">${payload} = {'username': '12345678912345'}</msg>
<status status="PASS" starttime="20210730 15:35:23.438" endtime="20210730 15:35:23.438"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:23.443" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:23.443" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:23.438" endtime="20210730 15:35:23.443"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:23.443" endtime="20210730 15:35:23.443"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:23.444" endtime="20210730 15:35:23.444"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:23.438" endtime="20210730 15:35:23.444"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:23.438" endtime="20210730 15:35:23.444"/>
</for>
<status status="FAIL" starttime="20210730 15:35:23.437" endtime="20210730 15:35:23.444"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:23.437" endtime="20210730 15:35:23.444"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=12345678912345</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:23.445" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:35:23.445" endtime="20210730 15:35:23.445"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:23.446" level="INFO">${payload} = {'username': '12345678912345'}</msg>
<status status="PASS" starttime="20210730 15:35:23.446" endtime="20210730 15:35:23.446"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:23.452" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:23.452" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:23.446" endtime="20210730 15:35:23.452"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:23.452" endtime="20210730 15:35:23.452"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:23.452" endtime="20210730 15:35:23.452"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:23.446" endtime="20210730 15:35:23.452"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:23.446" endtime="20210730 15:35:23.453"/>
</for>
<status status="FAIL" starttime="20210730 15:35:23.445" endtime="20210730 15:35:23.453"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:23.444" endtime="20210730 15:35:23.453"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:23.420" endtime="20210730 15:35:23.453"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:23.457" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:23.466" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:23.466" level="INFO">${pids} = 3837
3844
3856</msg>
<status status="PASS" starttime="20210730 15:35:23.454" endtime="20210730 15:35:23.466"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:23.467" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:23.467" endtime="20210730 15:35:23.467"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:23.468" level="INFO">${pids} = ['3837', '3844', '3856']</msg>
<status status="PASS" starttime="20210730 15:35:23.468" endtime="20210730 15:35:23.468"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">3837</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:23.471" level="INFO">Running command 'kill 3837 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:23.468" endtime="20210730 15:35:23.471"/>
</kw>
<status status="PASS" starttime="20210730 15:35:23.468" endtime="20210730 15:35:23.471"/>
</iter>
<iter>
<var name="${pid}">3844</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:23.474" level="INFO">Running command 'kill 3844 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:23.472" endtime="20210730 15:35:23.474"/>
</kw>
<status status="PASS" starttime="20210730 15:35:23.471" endtime="20210730 15:35:23.474"/>
</iter>
<iter>
<var name="${pid}">3856</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:23.480" level="INFO">Running command 'kill 3856 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:23.475" endtime="20210730 15:35:23.480"/>
</kw>
<status status="PASS" starttime="20210730 15:35:23.474" endtime="20210730 15:35:23.480"/>
</iter>
<status status="PASS" starttime="20210730 15:35:23.468" endtime="20210730 15:35:23.481"/>
</for>
<status status="PASS" starttime="20210730 15:35:23.467" endtime="20210730 15:35:23.481"/>
</branch>
<status status="PASS" starttime="20210730 15:35:23.467" endtime="20210730 15:35:23.481"/>
</if>
<status status="PASS" starttime="20210730 15:35:23.453" endtime="20210730 15:35:23.481"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '12345678912345'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:35:21.844" endtime="20210730 15:35:23.481">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t8" name="With Each Valid Token, Updating Username Of Each System User With abcdefg Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:23.487" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:23.497" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:23.497" level="INFO">${pids} = 3904</msg>
<status status="PASS" starttime="20210730 15:35:23.484" endtime="20210730 15:35:23.497"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:23.498" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:23.497" endtime="20210730 15:35:23.498"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:23.499" level="INFO">${pids} = ['3904']</msg>
<status status="PASS" starttime="20210730 15:35:23.498" endtime="20210730 15:35:23.499"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">3904</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:23.502" level="INFO">Running command 'kill 3904 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:23.499" endtime="20210730 15:35:23.502"/>
</kw>
<status status="PASS" starttime="20210730 15:35:23.499" endtime="20210730 15:35:23.502"/>
</iter>
<status status="PASS" starttime="20210730 15:35:23.499" endtime="20210730 15:35:23.502"/>
</for>
<status status="PASS" starttime="20210730 15:35:23.498" endtime="20210730 15:35:23.502"/>
</branch>
<status status="PASS" starttime="20210730 15:35:23.498" endtime="20210730 15:35:23.502"/>
</if>
<status status="PASS" starttime="20210730 15:35:23.483" endtime="20210730 15:35:23.503"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:23.504" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:23.503" endtime="20210730 15:35:23.504"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:23.504" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:23.504" endtime="20210730 15:35:23.504"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:23.505" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:23.504" endtime="20210730 15:35:23.505"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:23.505" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:23.505" endtime="20210730 15:35:23.505"/>
</kw>
<msg timestamp="20210730 15:35:23.505" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:23.504" endtime="20210730 15:35:23.505"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:23.509" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:23.506" endtime="20210730 15:35:23.514"/>
</kw>
<status status="PASS" starttime="20210730 15:35:23.503" endtime="20210730 15:35:23.515"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:35:23.516" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:35:23.516" endtime="20210730 15:35:23.520"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:35:25.021" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:35:23.521" endtime="20210730 15:35:25.022"/>
</kw>
<status status="PASS" starttime="20210730 15:35:23.515" endtime="20210730 15:35:25.022"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:25.023" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:25.023" endtime="20210730 15:35:25.023"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:25.023" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:25.023" endtime="20210730 15:35:25.023"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:25.024" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:25.023" endtime="20210730 15:35:25.024"/>
</kw>
<msg timestamp="20210730 15:35:25.024" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:25.022" endtime="20210730 15:35:25.024"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:35:25.024" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:35:25.024" endtime="20210730 15:35:25.025"/>
</kw>
<status status="PASS" starttime="20210730 15:35:25.022" endtime="20210730 15:35:25.025"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:35:25.025" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:35:25.025" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:35:25.025" endtime="20210730 15:35:25.026"/>
</kw>
<status status="PASS" starttime="20210730 15:35:25.025" endtime="20210730 15:35:25.026"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:35:25.027" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:35:25.027" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:35:25.027" endtime="20210730 15:35:25.027"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:35:25.027" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:35:25.027" endtime="20210730 15:35:25.027"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:25.028" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:25.028" endtime="20210730 15:35:25.028"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:25.028" endtime="20210730 15:35:25.029"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:25.029" endtime="20210730 15:35:25.029"/>
</kw>
<status status="PASS" starttime="20210730 15:35:25.028" endtime="20210730 15:35:25.029"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:25.030" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:25.029" endtime="20210730 15:35:25.030"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:25.030" endtime="20210730 15:35:25.030"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:25.031" endtime="20210730 15:35:25.031"/>
</kw>
<status status="PASS" starttime="20210730 15:35:25.029" endtime="20210730 15:35:25.031"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:25.031" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:25.031" endtime="20210730 15:35:25.031"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:25.031" endtime="20210730 15:35:25.032"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:25.032" endtime="20210730 15:35:25.033"/>
</kw>
<status status="PASS" starttime="20210730 15:35:25.031" endtime="20210730 15:35:25.033"/>
</iter>
<status status="PASS" starttime="20210730 15:35:25.028" endtime="20210730 15:35:25.033"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:35:25.033" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:35:25.033" endtime="20210730 15:35:25.033"/>
</kw>
<status status="PASS" starttime="20210730 15:35:25.026" endtime="20210730 15:35:25.033"/>
</kw>
<status status="PASS" starttime="20210730 15:35:23.483" endtime="20210730 15:35:25.033"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcdefg</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:25.035" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:35:25.034" endtime="20210730 15:35:25.035"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:25.035" level="INFO">${payload} = {'username': 'abcdefg'}</msg>
<status status="PASS" starttime="20210730 15:35:25.035" endtime="20210730 15:35:25.035"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:25.047" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:25.048" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:25.035" endtime="20210730 15:35:25.048"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:25.048" endtime="20210730 15:35:25.048"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:25.048" endtime="20210730 15:35:25.048"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:25.035" endtime="20210730 15:35:25.048"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:25.035" endtime="20210730 15:35:25.048"/>
</for>
<status status="FAIL" starttime="20210730 15:35:25.034" endtime="20210730 15:35:25.048"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:25.034" endtime="20210730 15:35:25.048"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcdefg</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:25.049" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:35:25.049" endtime="20210730 15:35:25.049"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:25.050" level="INFO">${payload} = {'username': 'abcdefg'}</msg>
<status status="PASS" starttime="20210730 15:35:25.050" endtime="20210730 15:35:25.050"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:25.054" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:25.054" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:25.050" endtime="20210730 15:35:25.055"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:25.055" endtime="20210730 15:35:25.055"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:25.055" endtime="20210730 15:35:25.055"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:25.050" endtime="20210730 15:35:25.055"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:25.050" endtime="20210730 15:35:25.055"/>
</for>
<status status="FAIL" starttime="20210730 15:35:25.049" endtime="20210730 15:35:25.055"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:25.049" endtime="20210730 15:35:25.055"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcdefg</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:25.056" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:35:25.056" endtime="20210730 15:35:25.056"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:25.057" level="INFO">${payload} = {'username': 'abcdefg'}</msg>
<status status="PASS" starttime="20210730 15:35:25.056" endtime="20210730 15:35:25.057"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:25.061" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:25.062" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:25.057" endtime="20210730 15:35:25.062"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:25.062" endtime="20210730 15:35:25.062"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:25.062" endtime="20210730 15:35:25.062"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:25.057" endtime="20210730 15:35:25.062"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:25.057" endtime="20210730 15:35:25.062"/>
</for>
<status status="FAIL" starttime="20210730 15:35:25.055" endtime="20210730 15:35:25.062"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:25.055" endtime="20210730 15:35:25.062"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:25.034" endtime="20210730 15:35:25.062"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:25.067" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:25.076" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:25.076" level="INFO">${pids} = 3932
3950
3954</msg>
<status status="PASS" starttime="20210730 15:35:25.063" endtime="20210730 15:35:25.076"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:25.077" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:25.076" endtime="20210730 15:35:25.077"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:25.078" level="INFO">${pids} = ['3932', '3950', '3954']</msg>
<status status="PASS" starttime="20210730 15:35:25.078" endtime="20210730 15:35:25.078"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">3932</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:25.081" level="INFO">Running command 'kill 3932 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:25.078" endtime="20210730 15:35:25.081"/>
</kw>
<status status="PASS" starttime="20210730 15:35:25.078" endtime="20210730 15:35:25.081"/>
</iter>
<iter>
<var name="${pid}">3950</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:25.084" level="INFO">Running command 'kill 3950 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:25.082" endtime="20210730 15:35:25.084"/>
</kw>
<status status="PASS" starttime="20210730 15:35:25.082" endtime="20210730 15:35:25.084"/>
</iter>
<iter>
<var name="${pid}">3954</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:25.087" level="INFO">Running command 'kill 3954 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:25.085" endtime="20210730 15:35:25.088"/>
</kw>
<status status="PASS" starttime="20210730 15:35:25.084" endtime="20210730 15:35:25.088"/>
</iter>
<status status="PASS" starttime="20210730 15:35:25.078" endtime="20210730 15:35:25.088"/>
</for>
<status status="PASS" starttime="20210730 15:35:25.077" endtime="20210730 15:35:25.088"/>
</branch>
<status status="PASS" starttime="20210730 15:35:25.077" endtime="20210730 15:35:25.088"/>
</if>
<status status="PASS" starttime="20210730 15:35:25.063" endtime="20210730 15:35:25.088"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": 'abcdefg'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:35:23.482" endtime="20210730 15:35:25.088">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t9" name="With Each Valid Token, Updating Username Of Each System User With abcdefgh Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:25.096" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:25.107" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:25.107" level="INFO">${pids} = 4000</msg>
<status status="PASS" starttime="20210730 15:35:25.090" endtime="20210730 15:35:25.107"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:25.108" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:25.108" endtime="20210730 15:35:25.108"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:25.109" level="INFO">${pids} = ['4000']</msg>
<status status="PASS" starttime="20210730 15:35:25.109" endtime="20210730 15:35:25.109"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4000</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:25.124" level="INFO">Running command 'kill 4000 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:25.110" endtime="20210730 15:35:25.125"/>
</kw>
<status status="PASS" starttime="20210730 15:35:25.109" endtime="20210730 15:35:25.125"/>
</iter>
<status status="PASS" starttime="20210730 15:35:25.109" endtime="20210730 15:35:25.125"/>
</for>
<status status="PASS" starttime="20210730 15:35:25.108" endtime="20210730 15:35:25.125"/>
</branch>
<status status="PASS" starttime="20210730 15:35:25.108" endtime="20210730 15:35:25.125"/>
</if>
<status status="PASS" starttime="20210730 15:35:25.090" endtime="20210730 15:35:25.125"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:25.127" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:25.127" endtime="20210730 15:35:25.127"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:25.128" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:25.128" endtime="20210730 15:35:25.128"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:25.128" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:25.128" endtime="20210730 15:35:25.128"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:25.129" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:25.128" endtime="20210730 15:35:25.129"/>
</kw>
<msg timestamp="20210730 15:35:25.129" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:25.127" endtime="20210730 15:35:25.129"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:25.133" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:25.129" endtime="20210730 15:35:25.134"/>
</kw>
<status status="PASS" starttime="20210730 15:35:25.126" endtime="20210730 15:35:25.134"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:35:25.136" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:35:25.135" endtime="20210730 15:35:25.140"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:35:26.646" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:35:25.140" endtime="20210730 15:35:26.646"/>
</kw>
<status status="PASS" starttime="20210730 15:35:25.135" endtime="20210730 15:35:26.646"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:26.648" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:26.647" endtime="20210730 15:35:26.648"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:26.648" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:26.648" endtime="20210730 15:35:26.648"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:26.648" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:26.648" endtime="20210730 15:35:26.648"/>
</kw>
<msg timestamp="20210730 15:35:26.649" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:26.647" endtime="20210730 15:35:26.649"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:35:26.649" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:35:26.649" endtime="20210730 15:35:26.649"/>
</kw>
<status status="PASS" starttime="20210730 15:35:26.646" endtime="20210730 15:35:26.649"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:35:26.650" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:35:26.650" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:35:26.650" endtime="20210730 15:35:26.650"/>
</kw>
<status status="PASS" starttime="20210730 15:35:26.650" endtime="20210730 15:35:26.650"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:35:26.651" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:35:26.651" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:35:26.651" endtime="20210730 15:35:26.651"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:35:26.651" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:35:26.651" endtime="20210730 15:35:26.651"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:26.652" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:26.652" endtime="20210730 15:35:26.652"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:26.652" endtime="20210730 15:35:26.653"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:26.653" endtime="20210730 15:35:26.653"/>
</kw>
<status status="PASS" starttime="20210730 15:35:26.652" endtime="20210730 15:35:26.653"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:26.654" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:26.653" endtime="20210730 15:35:26.654"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:26.654" endtime="20210730 15:35:26.654"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:26.655" endtime="20210730 15:35:26.655"/>
</kw>
<status status="PASS" starttime="20210730 15:35:26.653" endtime="20210730 15:35:26.655"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:26.655" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:26.655" endtime="20210730 15:35:26.655"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:26.655" endtime="20210730 15:35:26.656"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:26.656" endtime="20210730 15:35:26.656"/>
</kw>
<status status="PASS" starttime="20210730 15:35:26.655" endtime="20210730 15:35:26.656"/>
</iter>
<status status="PASS" starttime="20210730 15:35:26.651" endtime="20210730 15:35:26.656"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:35:26.657" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:35:26.656" endtime="20210730 15:35:26.657"/>
</kw>
<status status="PASS" starttime="20210730 15:35:26.650" endtime="20210730 15:35:26.657"/>
</kw>
<status status="PASS" starttime="20210730 15:35:25.090" endtime="20210730 15:35:26.657"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcdefgh</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:26.658" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:35:26.658" endtime="20210730 15:35:26.658"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:26.659" level="INFO">${payload} = {'username': 'abcdefgh'}</msg>
<status status="PASS" starttime="20210730 15:35:26.659" endtime="20210730 15:35:26.659"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:26.669" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:26.669" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:26.659" endtime="20210730 15:35:26.669"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:26.669" endtime="20210730 15:35:26.669"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:26.669" endtime="20210730 15:35:26.669"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:26.659" endtime="20210730 15:35:26.670"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:26.659" endtime="20210730 15:35:26.670"/>
</for>
<status status="FAIL" starttime="20210730 15:35:26.658" endtime="20210730 15:35:26.670"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:26.657" endtime="20210730 15:35:26.670"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcdefgh</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:26.671" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:35:26.671" endtime="20210730 15:35:26.671"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:26.671" level="INFO">${payload} = {'username': 'abcdefgh'}</msg>
<status status="PASS" starttime="20210730 15:35:26.671" endtime="20210730 15:35:26.671"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:26.676" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:26.676" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:26.672" endtime="20210730 15:35:26.677"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:26.677" endtime="20210730 15:35:26.677"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:26.677" endtime="20210730 15:35:26.677"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:26.672" endtime="20210730 15:35:26.677"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:26.671" endtime="20210730 15:35:26.677"/>
</for>
<status status="FAIL" starttime="20210730 15:35:26.670" endtime="20210730 15:35:26.677"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:26.670" endtime="20210730 15:35:26.677"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcdefgh</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:26.679" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:35:26.678" endtime="20210730 15:35:26.679"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:26.679" level="INFO">${payload} = {'username': 'abcdefgh'}</msg>
<status status="PASS" starttime="20210730 15:35:26.679" endtime="20210730 15:35:26.679"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:26.684" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:26.684" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:26.679" endtime="20210730 15:35:26.684"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:26.684" endtime="20210730 15:35:26.684"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:26.685" endtime="20210730 15:35:26.686"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:26.679" endtime="20210730 15:35:26.686"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:26.679" endtime="20210730 15:35:26.686"/>
</for>
<status status="FAIL" starttime="20210730 15:35:26.678" endtime="20210730 15:35:26.686"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:26.678" endtime="20210730 15:35:26.686"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:26.657" endtime="20210730 15:35:26.686"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:26.690" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:26.701" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:26.701" level="INFO">${pids} = 4023
4030
4034</msg>
<status status="PASS" starttime="20210730 15:35:26.687" endtime="20210730 15:35:26.701"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:26.702" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:26.701" endtime="20210730 15:35:26.702"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:26.704" level="INFO">${pids} = ['4023', '4030', '4034']</msg>
<status status="PASS" starttime="20210730 15:35:26.702" endtime="20210730 15:35:26.704"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4023</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:26.707" level="INFO">Running command 'kill 4023 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:26.704" endtime="20210730 15:35:26.708"/>
</kw>
<status status="PASS" starttime="20210730 15:35:26.704" endtime="20210730 15:35:26.708"/>
</iter>
<iter>
<var name="${pid}">4030</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:26.712" level="INFO">Running command 'kill 4030 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:26.708" endtime="20210730 15:35:26.714"/>
</kw>
<status status="PASS" starttime="20210730 15:35:26.708" endtime="20210730 15:35:26.714"/>
</iter>
<iter>
<var name="${pid}">4034</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:26.719" level="INFO">Running command 'kill 4034 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:26.715" endtime="20210730 15:35:26.720"/>
</kw>
<status status="PASS" starttime="20210730 15:35:26.714" endtime="20210730 15:35:26.720"/>
</iter>
<status status="PASS" starttime="20210730 15:35:26.704" endtime="20210730 15:35:26.720"/>
</for>
<status status="PASS" starttime="20210730 15:35:26.702" endtime="20210730 15:35:26.720"/>
</branch>
<status status="PASS" starttime="20210730 15:35:26.702" endtime="20210730 15:35:26.720"/>
</if>
<status status="PASS" starttime="20210730 15:35:26.687" endtime="20210730 15:35:26.720"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": 'abcdefgh'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:35:25.089" endtime="20210730 15:35:26.721">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t10" name="With Each Valid Token, Updating Username Of Each System User With abcdefghijklmnprstop Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:26.726" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:26.735" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:26.735" level="INFO">${pids} = 4063</msg>
<status status="PASS" starttime="20210730 15:35:26.723" endtime="20210730 15:35:26.735"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:26.736" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:26.736" endtime="20210730 15:35:26.736"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:26.737" level="INFO">${pids} = ['4063']</msg>
<status status="PASS" starttime="20210730 15:35:26.737" endtime="20210730 15:35:26.737"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4063</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:26.741" level="INFO">Running command 'kill 4063 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:26.738" endtime="20210730 15:35:26.742"/>
</kw>
<status status="PASS" starttime="20210730 15:35:26.738" endtime="20210730 15:35:26.742"/>
</iter>
<status status="PASS" starttime="20210730 15:35:26.738" endtime="20210730 15:35:26.742"/>
</for>
<status status="PASS" starttime="20210730 15:35:26.737" endtime="20210730 15:35:26.742"/>
</branch>
<status status="PASS" starttime="20210730 15:35:26.736" endtime="20210730 15:35:26.742"/>
</if>
<status status="PASS" starttime="20210730 15:35:26.722" endtime="20210730 15:35:26.742"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:26.744" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:26.744" endtime="20210730 15:35:26.744"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:26.745" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:26.745" endtime="20210730 15:35:26.745"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:26.746" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:26.745" endtime="20210730 15:35:26.746"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:26.746" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:26.746" endtime="20210730 15:35:26.746"/>
</kw>
<msg timestamp="20210730 15:35:26.747" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:26.744" endtime="20210730 15:35:26.747"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:26.751" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:26.747" endtime="20210730 15:35:26.753"/>
</kw>
<status status="PASS" starttime="20210730 15:35:26.743" endtime="20210730 15:35:26.754"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:35:26.755" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:35:26.755" endtime="20210730 15:35:26.759"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:35:28.266" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:35:26.760" endtime="20210730 15:35:28.266"/>
</kw>
<status status="PASS" starttime="20210730 15:35:26.754" endtime="20210730 15:35:28.267"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:28.268" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:28.268" endtime="20210730 15:35:28.268"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:28.268" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:28.268" endtime="20210730 15:35:28.268"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:28.269" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:28.268" endtime="20210730 15:35:28.269"/>
</kw>
<msg timestamp="20210730 15:35:28.269" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:28.267" endtime="20210730 15:35:28.269"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:35:28.270" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:35:28.269" endtime="20210730 15:35:28.270"/>
</kw>
<status status="PASS" starttime="20210730 15:35:28.267" endtime="20210730 15:35:28.270"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:35:28.271" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:35:28.271" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:35:28.270" endtime="20210730 15:35:28.271"/>
</kw>
<status status="PASS" starttime="20210730 15:35:28.270" endtime="20210730 15:35:28.271"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:35:28.272" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:35:28.272" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:35:28.271" endtime="20210730 15:35:28.272"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:35:28.272" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:35:28.272" endtime="20210730 15:35:28.272"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:28.273" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:28.272" endtime="20210730 15:35:28.273"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:28.273" endtime="20210730 15:35:28.274"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:28.274" endtime="20210730 15:35:28.274"/>
</kw>
<status status="PASS" starttime="20210730 15:35:28.272" endtime="20210730 15:35:28.274"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:28.274" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:28.274" endtime="20210730 15:35:28.274"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:28.274" endtime="20210730 15:35:28.276"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:28.276" endtime="20210730 15:35:28.276"/>
</kw>
<status status="PASS" starttime="20210730 15:35:28.274" endtime="20210730 15:35:28.276"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:28.277" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:28.277" endtime="20210730 15:35:28.277"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:28.278" endtime="20210730 15:35:28.278"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:28.279" endtime="20210730 15:35:28.279"/>
</kw>
<status status="PASS" starttime="20210730 15:35:28.277" endtime="20210730 15:35:28.279"/>
</iter>
<status status="PASS" starttime="20210730 15:35:28.272" endtime="20210730 15:35:28.279"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:35:28.279" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:35:28.279" endtime="20210730 15:35:28.279"/>
</kw>
<status status="PASS" starttime="20210730 15:35:28.271" endtime="20210730 15:35:28.280"/>
</kw>
<status status="PASS" starttime="20210730 15:35:26.722" endtime="20210730 15:35:28.280"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcdefghijklmnprstop</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:28.281" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:35:28.281" endtime="20210730 15:35:28.281"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:28.282" level="INFO">${payload} = {'username': 'abcdefghijklmnprstop'}</msg>
<status status="PASS" starttime="20210730 15:35:28.281" endtime="20210730 15:35:28.282"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:28.292" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:28.292" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:28.282" endtime="20210730 15:35:28.292"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:28.292" endtime="20210730 15:35:28.292"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:28.292" endtime="20210730 15:35:28.292"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:28.282" endtime="20210730 15:35:28.293"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:28.282" endtime="20210730 15:35:28.293"/>
</for>
<status status="FAIL" starttime="20210730 15:35:28.280" endtime="20210730 15:35:28.293"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:28.280" endtime="20210730 15:35:28.293"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcdefghijklmnprstop</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:28.294" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:35:28.294" endtime="20210730 15:35:28.294"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:28.294" level="INFO">${payload} = {'username': 'abcdefghijklmnprstop'}</msg>
<status status="PASS" starttime="20210730 15:35:28.294" endtime="20210730 15:35:28.294"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:28.299" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:28.299" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:28.295" endtime="20210730 15:35:28.299"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:28.299" endtime="20210730 15:35:28.299"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:28.299" endtime="20210730 15:35:28.300"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:28.295" endtime="20210730 15:35:28.300"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:28.294" endtime="20210730 15:35:28.300"/>
</for>
<status status="FAIL" starttime="20210730 15:35:28.293" endtime="20210730 15:35:28.300"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:28.293" endtime="20210730 15:35:28.300"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcdefghijklmnprstop</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:28.301" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:35:28.301" endtime="20210730 15:35:28.301"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:28.302" level="INFO">${payload} = {'username': 'abcdefghijklmnprstop'}</msg>
<status status="PASS" starttime="20210730 15:35:28.301" endtime="20210730 15:35:28.302"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:28.307" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:28.308" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:28.302" endtime="20210730 15:35:28.308"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:28.308" endtime="20210730 15:35:28.308"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:28.309" endtime="20210730 15:35:28.309"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:28.302" endtime="20210730 15:35:28.309"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:28.302" endtime="20210730 15:35:28.309"/>
</for>
<status status="FAIL" starttime="20210730 15:35:28.300" endtime="20210730 15:35:28.309"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:28.300" endtime="20210730 15:35:28.309"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:28.280" endtime="20210730 15:35:28.309"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:28.315" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:28.325" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:28.325" level="INFO">${pids} = 4087
4094
4099</msg>
<status status="PASS" starttime="20210730 15:35:28.311" endtime="20210730 15:35:28.325"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:28.326" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:28.326" endtime="20210730 15:35:28.326"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:28.327" level="INFO">${pids} = ['4087', '4094', '4099']</msg>
<status status="PASS" starttime="20210730 15:35:28.327" endtime="20210730 15:35:28.327"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4087</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:28.331" level="INFO">Running command 'kill 4087 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:28.328" endtime="20210730 15:35:28.331"/>
</kw>
<status status="PASS" starttime="20210730 15:35:28.327" endtime="20210730 15:35:28.331"/>
</iter>
<iter>
<var name="${pid}">4094</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:28.335" level="INFO">Running command 'kill 4094 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:28.332" endtime="20210730 15:35:28.336"/>
</kw>
<status status="PASS" starttime="20210730 15:35:28.331" endtime="20210730 15:35:28.336"/>
</iter>
<iter>
<var name="${pid}">4099</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:28.344" level="INFO">Running command 'kill 4099 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:28.336" endtime="20210730 15:35:28.344"/>
</kw>
<status status="PASS" starttime="20210730 15:35:28.336" endtime="20210730 15:35:28.344"/>
</iter>
<status status="PASS" starttime="20210730 15:35:28.327" endtime="20210730 15:35:28.344"/>
</for>
<status status="PASS" starttime="20210730 15:35:28.327" endtime="20210730 15:35:28.344"/>
</branch>
<status status="PASS" starttime="20210730 15:35:28.326" endtime="20210730 15:35:28.344"/>
</if>
<status status="PASS" starttime="20210730 15:35:28.310" endtime="20210730 15:35:28.345"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": 'abcdefghijklmnprstop'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:35:26.721" endtime="20210730 15:35:28.345">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t11" name="With Each Valid Token, Updating Username Of Each System User With hakan12 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:28.350" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:28.360" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:28.360" level="INFO">${pids} = 4129</msg>
<status status="PASS" starttime="20210730 15:35:28.347" endtime="20210730 15:35:28.360"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:28.361" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:28.360" endtime="20210730 15:35:28.361"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:28.362" level="INFO">${pids} = ['4129']</msg>
<status status="PASS" starttime="20210730 15:35:28.361" endtime="20210730 15:35:28.362"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4129</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:28.365" level="INFO">Running command 'kill 4129 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:28.362" endtime="20210730 15:35:28.365"/>
</kw>
<status status="PASS" starttime="20210730 15:35:28.362" endtime="20210730 15:35:28.366"/>
</iter>
<status status="PASS" starttime="20210730 15:35:28.362" endtime="20210730 15:35:28.366"/>
</for>
<status status="PASS" starttime="20210730 15:35:28.361" endtime="20210730 15:35:28.366"/>
</branch>
<status status="PASS" starttime="20210730 15:35:28.361" endtime="20210730 15:35:28.366"/>
</if>
<status status="PASS" starttime="20210730 15:35:28.347" endtime="20210730 15:35:28.366"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:28.367" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:28.367" endtime="20210730 15:35:28.367"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:28.368" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:28.367" endtime="20210730 15:35:28.368"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:28.368" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:28.368" endtime="20210730 15:35:28.368"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:28.369" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:28.369" endtime="20210730 15:35:28.369"/>
</kw>
<msg timestamp="20210730 15:35:28.370" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:28.367" endtime="20210730 15:35:28.370"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:28.374" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:28.370" endtime="20210730 15:35:28.377"/>
</kw>
<status status="PASS" starttime="20210730 15:35:28.366" endtime="20210730 15:35:28.377"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:35:28.379" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:35:28.378" endtime="20210730 15:35:28.383"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:35:29.890" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:35:28.383" endtime="20210730 15:35:29.890"/>
</kw>
<status status="PASS" starttime="20210730 15:35:28.378" endtime="20210730 15:35:29.890"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:29.891" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:29.891" endtime="20210730 15:35:29.891"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:29.892" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:29.892" endtime="20210730 15:35:29.892"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:29.893" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:29.892" endtime="20210730 15:35:29.893"/>
</kw>
<msg timestamp="20210730 15:35:29.893" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:29.891" endtime="20210730 15:35:29.893"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:35:29.894" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:35:29.893" endtime="20210730 15:35:29.894"/>
</kw>
<status status="PASS" starttime="20210730 15:35:29.890" endtime="20210730 15:35:29.894"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:35:29.894" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:35:29.894" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:35:29.894" endtime="20210730 15:35:29.895"/>
</kw>
<status status="PASS" starttime="20210730 15:35:29.894" endtime="20210730 15:35:29.895"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:35:29.895" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:35:29.895" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:35:29.895" endtime="20210730 15:35:29.895"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:35:29.896" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:35:29.896" endtime="20210730 15:35:29.896"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:29.896" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:29.896" endtime="20210730 15:35:29.896"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:29.897" endtime="20210730 15:35:29.897"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:29.897" endtime="20210730 15:35:29.898"/>
</kw>
<status status="PASS" starttime="20210730 15:35:29.896" endtime="20210730 15:35:29.898"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:29.898" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:29.898" endtime="20210730 15:35:29.898"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:29.898" endtime="20210730 15:35:29.899"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:29.899" endtime="20210730 15:35:29.900"/>
</kw>
<status status="PASS" starttime="20210730 15:35:29.898" endtime="20210730 15:35:29.900"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:29.901" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:29.901" endtime="20210730 15:35:29.901"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:29.901" endtime="20210730 15:35:29.902"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:29.902" endtime="20210730 15:35:29.902"/>
</kw>
<status status="PASS" starttime="20210730 15:35:29.901" endtime="20210730 15:35:29.902"/>
</iter>
<status status="PASS" starttime="20210730 15:35:29.896" endtime="20210730 15:35:29.902"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:35:29.903" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:35:29.902" endtime="20210730 15:35:29.903"/>
</kw>
<status status="PASS" starttime="20210730 15:35:29.895" endtime="20210730 15:35:29.903"/>
</kw>
<status status="PASS" starttime="20210730 15:35:28.347" endtime="20210730 15:35:29.903"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=hakan12</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:29.904" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:35:29.904" endtime="20210730 15:35:29.904"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:29.904" level="INFO">${payload} = {'username': 'hakan12'}</msg>
<status status="PASS" starttime="20210730 15:35:29.904" endtime="20210730 15:35:29.905"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:29.915" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:29.916" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:29.905" endtime="20210730 15:35:29.916"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:29.916" endtime="20210730 15:35:29.916"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:29.916" endtime="20210730 15:35:29.916"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:29.905" endtime="20210730 15:35:29.916"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:29.905" endtime="20210730 15:35:29.916"/>
</for>
<status status="FAIL" starttime="20210730 15:35:29.903" endtime="20210730 15:35:29.916"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:29.903" endtime="20210730 15:35:29.916"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=hakan12</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:29.917" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:35:29.917" endtime="20210730 15:35:29.917"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:29.918" level="INFO">${payload} = {'username': 'hakan12'}</msg>
<status status="PASS" starttime="20210730 15:35:29.918" endtime="20210730 15:35:29.918"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:29.922" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:29.922" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:29.918" endtime="20210730 15:35:29.922"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:29.923" endtime="20210730 15:35:29.923"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:29.923" endtime="20210730 15:35:29.923"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:29.918" endtime="20210730 15:35:29.923"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:29.918" endtime="20210730 15:35:29.923"/>
</for>
<status status="FAIL" starttime="20210730 15:35:29.917" endtime="20210730 15:35:29.923"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:29.916" endtime="20210730 15:35:29.923"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=hakan12</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:29.924" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:35:29.924" endtime="20210730 15:35:29.924"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:29.925" level="INFO">${payload} = {'username': 'hakan12'}</msg>
<status status="PASS" starttime="20210730 15:35:29.924" endtime="20210730 15:35:29.925"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:29.930" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:29.930" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:29.925" endtime="20210730 15:35:29.930"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:29.930" endtime="20210730 15:35:29.930"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:29.930" endtime="20210730 15:35:29.930"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:29.925" endtime="20210730 15:35:29.931"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:29.925" endtime="20210730 15:35:29.931"/>
</for>
<status status="FAIL" starttime="20210730 15:35:29.923" endtime="20210730 15:35:29.931"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:29.923" endtime="20210730 15:35:29.931"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:29.903" endtime="20210730 15:35:29.931"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:29.935" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:29.945" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:29.946" level="INFO">${pids} = 4152
4159
4163</msg>
<status status="PASS" starttime="20210730 15:35:29.932" endtime="20210730 15:35:29.946"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:29.947" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:29.946" endtime="20210730 15:35:29.947"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:29.947" level="INFO">${pids} = ['4152', '4159', '4163']</msg>
<status status="PASS" starttime="20210730 15:35:29.947" endtime="20210730 15:35:29.948"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4152</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:29.951" level="INFO">Running command 'kill 4152 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:29.948" endtime="20210730 15:35:29.951"/>
</kw>
<status status="PASS" starttime="20210730 15:35:29.948" endtime="20210730 15:35:29.951"/>
</iter>
<iter>
<var name="${pid}">4159</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:29.954" level="INFO">Running command 'kill 4159 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:29.952" endtime="20210730 15:35:29.955"/>
</kw>
<status status="PASS" starttime="20210730 15:35:29.951" endtime="20210730 15:35:29.955"/>
</iter>
<iter>
<var name="${pid}">4163</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:29.959" level="INFO">Running command 'kill 4163 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:29.955" endtime="20210730 15:35:29.959"/>
</kw>
<status status="PASS" starttime="20210730 15:35:29.955" endtime="20210730 15:35:29.959"/>
</iter>
<status status="PASS" starttime="20210730 15:35:29.948" endtime="20210730 15:35:29.959"/>
</for>
<status status="PASS" starttime="20210730 15:35:29.947" endtime="20210730 15:35:29.959"/>
</branch>
<status status="PASS" starttime="20210730 15:35:29.947" endtime="20210730 15:35:29.959"/>
</if>
<status status="PASS" starttime="20210730 15:35:29.932" endtime="20210730 15:35:29.960"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": 'hakan12'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:35:28.346" endtime="20210730 15:35:29.960">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t12" name="With Each Valid Token, Updating Username Of Each System User With hakan123 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:29.965" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:29.975" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:29.975" level="INFO">${pids} = 4199</msg>
<status status="PASS" starttime="20210730 15:35:29.962" endtime="20210730 15:35:29.975"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:29.976" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:29.975" endtime="20210730 15:35:29.976"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:29.978" level="INFO">${pids} = ['4199']</msg>
<status status="PASS" starttime="20210730 15:35:29.977" endtime="20210730 15:35:29.978"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4199</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:29.982" level="INFO">Running command 'kill 4199 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:29.978" endtime="20210730 15:35:29.982"/>
</kw>
<status status="PASS" starttime="20210730 15:35:29.978" endtime="20210730 15:35:29.983"/>
</iter>
<status status="PASS" starttime="20210730 15:35:29.978" endtime="20210730 15:35:29.983"/>
</for>
<status status="PASS" starttime="20210730 15:35:29.977" endtime="20210730 15:35:29.983"/>
</branch>
<status status="PASS" starttime="20210730 15:35:29.976" endtime="20210730 15:35:29.983"/>
</if>
<status status="PASS" starttime="20210730 15:35:29.962" endtime="20210730 15:35:29.983"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:29.984" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:29.984" endtime="20210730 15:35:29.984"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:29.985" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:29.985" endtime="20210730 15:35:29.985"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:29.985" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:29.985" endtime="20210730 15:35:29.985"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:29.986" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:29.986" endtime="20210730 15:35:29.986"/>
</kw>
<msg timestamp="20210730 15:35:29.986" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:29.984" endtime="20210730 15:35:29.986"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:29.990" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:29.986" endtime="20210730 15:35:29.991"/>
</kw>
<status status="PASS" starttime="20210730 15:35:29.983" endtime="20210730 15:35:29.992"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:35:29.993" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:35:29.993" endtime="20210730 15:35:30.001"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:35:31.506" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:35:30.002" endtime="20210730 15:35:31.507"/>
</kw>
<status status="PASS" starttime="20210730 15:35:29.992" endtime="20210730 15:35:31.508"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:31.511" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:31.510" endtime="20210730 15:35:31.511"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:31.511" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:31.511" endtime="20210730 15:35:31.511"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:31.512" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:31.512" endtime="20210730 15:35:31.512"/>
</kw>
<msg timestamp="20210730 15:35:31.512" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:31.509" endtime="20210730 15:35:31.512"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:35:31.513" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:35:31.512" endtime="20210730 15:35:31.513"/>
</kw>
<status status="PASS" starttime="20210730 15:35:31.508" endtime="20210730 15:35:31.513"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:35:31.514" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:35:31.514" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:35:31.514" endtime="20210730 15:35:31.514"/>
</kw>
<status status="PASS" starttime="20210730 15:35:31.513" endtime="20210730 15:35:31.516"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:35:31.516" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:35:31.517" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:35:31.516" endtime="20210730 15:35:31.517"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:35:31.517" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:35:31.517" endtime="20210730 15:35:31.517"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:31.517" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:31.517" endtime="20210730 15:35:31.517"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:31.518" endtime="20210730 15:35:31.518"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:31.518" endtime="20210730 15:35:31.519"/>
</kw>
<status status="PASS" starttime="20210730 15:35:31.517" endtime="20210730 15:35:31.519"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:31.519" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:31.519" endtime="20210730 15:35:31.519"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:31.519" endtime="20210730 15:35:31.520"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:31.520" endtime="20210730 15:35:31.520"/>
</kw>
<status status="PASS" starttime="20210730 15:35:31.519" endtime="20210730 15:35:31.520"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:31.521" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:31.521" endtime="20210730 15:35:31.521"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:31.525" endtime="20210730 15:35:31.526"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:31.526" endtime="20210730 15:35:31.526"/>
</kw>
<status status="PASS" starttime="20210730 15:35:31.520" endtime="20210730 15:35:31.526"/>
</iter>
<status status="PASS" starttime="20210730 15:35:31.517" endtime="20210730 15:35:31.526"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:35:31.527" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:35:31.526" endtime="20210730 15:35:31.527"/>
</kw>
<status status="PASS" starttime="20210730 15:35:31.516" endtime="20210730 15:35:31.527"/>
</kw>
<status status="PASS" starttime="20210730 15:35:29.961" endtime="20210730 15:35:31.527"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=hakan123</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:31.528" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:35:31.528" endtime="20210730 15:35:31.528"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:31.529" level="INFO">${payload} = {'username': 'hakan123'}</msg>
<status status="PASS" starttime="20210730 15:35:31.529" endtime="20210730 15:35:31.529"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:31.539" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:31.540" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:31.529" endtime="20210730 15:35:31.540"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:31.540" endtime="20210730 15:35:31.540"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:31.540" endtime="20210730 15:35:31.540"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:31.529" endtime="20210730 15:35:31.540"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:31.529" endtime="20210730 15:35:31.540"/>
</for>
<status status="FAIL" starttime="20210730 15:35:31.527" endtime="20210730 15:35:31.541"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:31.527" endtime="20210730 15:35:31.541"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=hakan123</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:31.542" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:35:31.541" endtime="20210730 15:35:31.542"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:31.542" level="INFO">${payload} = {'username': 'hakan123'}</msg>
<status status="PASS" starttime="20210730 15:35:31.542" endtime="20210730 15:35:31.542"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:31.547" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:31.548" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:31.543" endtime="20210730 15:35:31.548"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:31.548" endtime="20210730 15:35:31.548"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:31.548" endtime="20210730 15:35:31.548"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:31.543" endtime="20210730 15:35:31.548"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:31.542" endtime="20210730 15:35:31.548"/>
</for>
<status status="FAIL" starttime="20210730 15:35:31.541" endtime="20210730 15:35:31.548"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:31.541" endtime="20210730 15:35:31.548"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=hakan123</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:31.550" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:35:31.549" endtime="20210730 15:35:31.550"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:31.550" level="INFO">${payload} = {'username': 'hakan123'}</msg>
<status status="PASS" starttime="20210730 15:35:31.550" endtime="20210730 15:35:31.550"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:31.555" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:31.556" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:31.551" endtime="20210730 15:35:31.556"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:31.556" endtime="20210730 15:35:31.556"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:31.556" endtime="20210730 15:35:31.556"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:31.551" endtime="20210730 15:35:31.556"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:31.551" endtime="20210730 15:35:31.556"/>
</for>
<status status="FAIL" starttime="20210730 15:35:31.548" endtime="20210730 15:35:31.557"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:31.548" endtime="20210730 15:35:31.557"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:31.527" endtime="20210730 15:35:31.557"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:31.561" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:31.570" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:31.570" level="INFO">${pids} = 4222
4229
4233</msg>
<status status="PASS" starttime="20210730 15:35:31.558" endtime="20210730 15:35:31.570"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:31.571" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:31.571" endtime="20210730 15:35:31.571"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:31.572" level="INFO">${pids} = ['4222', '4229', '4233']</msg>
<status status="PASS" starttime="20210730 15:35:31.572" endtime="20210730 15:35:31.572"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4222</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:31.577" level="INFO">Running command 'kill 4222 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:31.573" endtime="20210730 15:35:31.578"/>
</kw>
<status status="PASS" starttime="20210730 15:35:31.573" endtime="20210730 15:35:31.578"/>
</iter>
<iter>
<var name="${pid}">4229</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:31.587" level="INFO">Running command 'kill 4229 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:31.578" endtime="20210730 15:35:31.589"/>
</kw>
<status status="PASS" starttime="20210730 15:35:31.578" endtime="20210730 15:35:31.589"/>
</iter>
<iter>
<var name="${pid}">4233</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:31.594" level="INFO">Running command 'kill 4233 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:31.590" endtime="20210730 15:35:31.595"/>
</kw>
<status status="PASS" starttime="20210730 15:35:31.590" endtime="20210730 15:35:31.595"/>
</iter>
<status status="PASS" starttime="20210730 15:35:31.572" endtime="20210730 15:35:31.595"/>
</for>
<status status="PASS" starttime="20210730 15:35:31.572" endtime="20210730 15:35:31.595"/>
</branch>
<status status="PASS" starttime="20210730 15:35:31.571" endtime="20210730 15:35:31.595"/>
</if>
<status status="PASS" starttime="20210730 15:35:31.557" endtime="20210730 15:35:31.595"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": 'hakan123'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:35:29.961" endtime="20210730 15:35:31.596">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t13" name="With Each Valid Token, Updating Username Of Each System User With hakan123456789123456789 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:31.601" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:31.612" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:31.612" level="INFO">${pids} = 4266</msg>
<status status="PASS" starttime="20210730 15:35:31.598" endtime="20210730 15:35:31.612"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:31.613" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:31.612" endtime="20210730 15:35:31.613"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:31.613" level="INFO">${pids} = ['4266']</msg>
<status status="PASS" starttime="20210730 15:35:31.613" endtime="20210730 15:35:31.614"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4266</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:31.617" level="INFO">Running command 'kill 4266 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:31.614" endtime="20210730 15:35:31.617"/>
</kw>
<status status="PASS" starttime="20210730 15:35:31.614" endtime="20210730 15:35:31.618"/>
</iter>
<status status="PASS" starttime="20210730 15:35:31.614" endtime="20210730 15:35:31.618"/>
</for>
<status status="PASS" starttime="20210730 15:35:31.613" endtime="20210730 15:35:31.618"/>
</branch>
<status status="PASS" starttime="20210730 15:35:31.613" endtime="20210730 15:35:31.618"/>
</if>
<status status="PASS" starttime="20210730 15:35:31.598" endtime="20210730 15:35:31.618"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:31.619" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:31.619" endtime="20210730 15:35:31.619"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:31.620" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:31.620" endtime="20210730 15:35:31.620"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:31.621" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:31.620" endtime="20210730 15:35:31.621"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:31.621" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:31.621" endtime="20210730 15:35:31.621"/>
</kw>
<msg timestamp="20210730 15:35:31.621" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:31.619" endtime="20210730 15:35:31.621"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:31.625" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:31.621" endtime="20210730 15:35:31.627"/>
</kw>
<status status="PASS" starttime="20210730 15:35:31.618" endtime="20210730 15:35:31.627"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:35:31.628" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:35:31.628" endtime="20210730 15:35:31.633"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:35:33.136" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:35:31.633" endtime="20210730 15:35:33.136"/>
</kw>
<status status="PASS" starttime="20210730 15:35:31.627" endtime="20210730 15:35:33.137"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:33.138" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:33.137" endtime="20210730 15:35:33.138"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:33.138" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:33.138" endtime="20210730 15:35:33.138"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:33.138" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:33.138" endtime="20210730 15:35:33.138"/>
</kw>
<msg timestamp="20210730 15:35:33.139" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:33.137" endtime="20210730 15:35:33.139"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:35:33.139" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:35:33.139" endtime="20210730 15:35:33.139"/>
</kw>
<status status="PASS" starttime="20210730 15:35:33.137" endtime="20210730 15:35:33.139"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:35:33.140" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:35:33.140" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:35:33.140" endtime="20210730 15:35:33.140"/>
</kw>
<status status="PASS" starttime="20210730 15:35:33.140" endtime="20210730 15:35:33.140"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:35:33.141" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:35:33.141" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:35:33.141" endtime="20210730 15:35:33.141"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:35:33.141" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:35:33.141" endtime="20210730 15:35:33.141"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:33.142" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:33.142" endtime="20210730 15:35:33.143"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:33.143" endtime="20210730 15:35:33.144"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:33.144" endtime="20210730 15:35:33.144"/>
</kw>
<status status="PASS" starttime="20210730 15:35:33.142" endtime="20210730 15:35:33.144"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:33.145" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:33.145" endtime="20210730 15:35:33.145"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:33.145" endtime="20210730 15:35:33.146"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:33.146" endtime="20210730 15:35:33.146"/>
</kw>
<status status="PASS" starttime="20210730 15:35:33.145" endtime="20210730 15:35:33.146"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:33.147" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:33.147" endtime="20210730 15:35:33.147"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:33.147" endtime="20210730 15:35:33.148"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:33.148" endtime="20210730 15:35:33.148"/>
</kw>
<status status="PASS" starttime="20210730 15:35:33.146" endtime="20210730 15:35:33.148"/>
</iter>
<status status="PASS" starttime="20210730 15:35:33.141" endtime="20210730 15:35:33.148"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:35:33.149" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:35:33.148" endtime="20210730 15:35:33.149"/>
</kw>
<status status="PASS" starttime="20210730 15:35:33.140" endtime="20210730 15:35:33.149"/>
</kw>
<status status="PASS" starttime="20210730 15:35:31.597" endtime="20210730 15:35:33.149"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=hakan123456789123456789</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:33.150" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:35:33.150" endtime="20210730 15:35:33.150"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:33.151" level="INFO">${payload} = {'username': 'hakan123456789123456789'}</msg>
<status status="PASS" starttime="20210730 15:35:33.150" endtime="20210730 15:35:33.151"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:33.160" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:33.161" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:33.151" endtime="20210730 15:35:33.161"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:33.161" endtime="20210730 15:35:33.161"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:33.161" endtime="20210730 15:35:33.161"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:33.151" endtime="20210730 15:35:33.161"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:33.151" endtime="20210730 15:35:33.161"/>
</for>
<status status="FAIL" starttime="20210730 15:35:33.149" endtime="20210730 15:35:33.161"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:33.149" endtime="20210730 15:35:33.161"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=hakan123456789123456789</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:33.162" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:35:33.162" endtime="20210730 15:35:33.162"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:33.163" level="INFO">${payload} = {'username': 'hakan123456789123456789'}</msg>
<status status="PASS" starttime="20210730 15:35:33.163" endtime="20210730 15:35:33.163"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:33.168" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:33.168" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:33.163" endtime="20210730 15:35:33.168"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:33.168" endtime="20210730 15:35:33.168"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:33.168" endtime="20210730 15:35:33.168"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:33.163" endtime="20210730 15:35:33.168"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:33.163" endtime="20210730 15:35:33.168"/>
</for>
<status status="FAIL" starttime="20210730 15:35:33.161" endtime="20210730 15:35:33.168"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:33.161" endtime="20210730 15:35:33.168"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=hakan123456789123456789</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:33.170" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:35:33.169" endtime="20210730 15:35:33.170"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:33.170" level="INFO">${payload} = {'username': 'hakan123456789123456789'}</msg>
<status status="PASS" starttime="20210730 15:35:33.170" endtime="20210730 15:35:33.170"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:33.174" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:33.174" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:33.170" endtime="20210730 15:35:33.174"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:33.174" endtime="20210730 15:35:33.174"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:33.175" endtime="20210730 15:35:33.175"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:33.170" endtime="20210730 15:35:33.175"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:33.170" endtime="20210730 15:35:33.175"/>
</for>
<status status="FAIL" starttime="20210730 15:35:33.169" endtime="20210730 15:35:33.175"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:33.169" endtime="20210730 15:35:33.175"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:33.149" endtime="20210730 15:35:33.175"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:33.180" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:33.190" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:33.190" level="INFO">${pids} = 4289
4296
4301</msg>
<status status="PASS" starttime="20210730 15:35:33.176" endtime="20210730 15:35:33.190"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:33.191" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:33.191" endtime="20210730 15:35:33.191"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:33.192" level="INFO">${pids} = ['4289', '4296', '4301']</msg>
<status status="PASS" starttime="20210730 15:35:33.192" endtime="20210730 15:35:33.192"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4289</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:33.195" level="INFO">Running command 'kill 4289 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:33.192" endtime="20210730 15:35:33.196"/>
</kw>
<status status="PASS" starttime="20210730 15:35:33.192" endtime="20210730 15:35:33.196"/>
</iter>
<iter>
<var name="${pid}">4296</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:33.199" level="INFO">Running command 'kill 4296 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:33.196" endtime="20210730 15:35:33.199"/>
</kw>
<status status="PASS" starttime="20210730 15:35:33.196" endtime="20210730 15:35:33.199"/>
</iter>
<iter>
<var name="${pid}">4301</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:33.203" level="INFO">Running command 'kill 4301 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:33.200" endtime="20210730 15:35:33.203"/>
</kw>
<status status="PASS" starttime="20210730 15:35:33.200" endtime="20210730 15:35:33.203"/>
</iter>
<status status="PASS" starttime="20210730 15:35:33.192" endtime="20210730 15:35:33.203"/>
</for>
<status status="PASS" starttime="20210730 15:35:33.191" endtime="20210730 15:35:33.203"/>
</branch>
<status status="PASS" starttime="20210730 15:35:33.191" endtime="20210730 15:35:33.203"/>
</if>
<status status="PASS" starttime="20210730 15:35:33.175" endtime="20210730 15:35:33.204"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": 'hakan123456789123456789'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:35:31.596" endtime="20210730 15:35:33.204">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t14" name="With Each Valid Token, Updating Username Of Each System User With #¤%123! Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:33.213" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:33.225" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:33.225" level="INFO">${pids} = 4330</msg>
<status status="PASS" starttime="20210730 15:35:33.206" endtime="20210730 15:35:33.225"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:33.226" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:33.225" endtime="20210730 15:35:33.226"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:33.227" level="INFO">${pids} = ['4330']</msg>
<status status="PASS" starttime="20210730 15:35:33.227" endtime="20210730 15:35:33.227"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4330</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:33.244" level="INFO">Running command 'kill 4330 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:33.227" endtime="20210730 15:35:33.245"/>
</kw>
<status status="PASS" starttime="20210730 15:35:33.227" endtime="20210730 15:35:33.245"/>
</iter>
<status status="PASS" starttime="20210730 15:35:33.227" endtime="20210730 15:35:33.245"/>
</for>
<status status="PASS" starttime="20210730 15:35:33.226" endtime="20210730 15:35:33.245"/>
</branch>
<status status="PASS" starttime="20210730 15:35:33.226" endtime="20210730 15:35:33.245"/>
</if>
<status status="PASS" starttime="20210730 15:35:33.206" endtime="20210730 15:35:33.246"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:33.247" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:33.246" endtime="20210730 15:35:33.247"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:33.248" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:33.248" endtime="20210730 15:35:33.248"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:33.248" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:33.248" endtime="20210730 15:35:33.248"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:33.249" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:33.249" endtime="20210730 15:35:33.249"/>
</kw>
<msg timestamp="20210730 15:35:33.249" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:33.247" endtime="20210730 15:35:33.249"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:33.252" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:33.249" endtime="20210730 15:35:33.254"/>
</kw>
<status status="PASS" starttime="20210730 15:35:33.246" endtime="20210730 15:35:33.254"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:35:33.256" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:35:33.255" endtime="20210730 15:35:33.260"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:35:34.762" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:35:33.261" endtime="20210730 15:35:34.762"/>
</kw>
<status status="PASS" starttime="20210730 15:35:33.255" endtime="20210730 15:35:34.762"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:34.763" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:34.763" endtime="20210730 15:35:34.763"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:34.764" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:34.763" endtime="20210730 15:35:34.764"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:34.764" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:34.764" endtime="20210730 15:35:34.764"/>
</kw>
<msg timestamp="20210730 15:35:34.764" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:34.763" endtime="20210730 15:35:34.764"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:35:34.765" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:35:34.764" endtime="20210730 15:35:34.765"/>
</kw>
<status status="PASS" starttime="20210730 15:35:34.762" endtime="20210730 15:35:34.765"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:35:34.766" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:35:34.766" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:35:34.766" endtime="20210730 15:35:34.766"/>
</kw>
<status status="PASS" starttime="20210730 15:35:34.765" endtime="20210730 15:35:34.766"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:35:34.767" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:35:34.767" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:35:34.767" endtime="20210730 15:35:34.767"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:35:34.767" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:35:34.767" endtime="20210730 15:35:34.767"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:34.768" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:34.768" endtime="20210730 15:35:34.768"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:34.768" endtime="20210730 15:35:34.769"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:34.769" endtime="20210730 15:35:34.769"/>
</kw>
<status status="PASS" starttime="20210730 15:35:34.767" endtime="20210730 15:35:34.769"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:34.769" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:34.769" endtime="20210730 15:35:34.769"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:34.769" endtime="20210730 15:35:34.770"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:34.770" endtime="20210730 15:35:34.770"/>
</kw>
<status status="PASS" starttime="20210730 15:35:34.769" endtime="20210730 15:35:34.770"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:34.771" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:34.771" endtime="20210730 15:35:34.771"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:34.771" endtime="20210730 15:35:34.772"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:34.772" endtime="20210730 15:35:34.772"/>
</kw>
<status status="PASS" starttime="20210730 15:35:34.771" endtime="20210730 15:35:34.772"/>
</iter>
<status status="PASS" starttime="20210730 15:35:34.767" endtime="20210730 15:35:34.772"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:35:34.773" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:35:34.772" endtime="20210730 15:35:34.773"/>
</kw>
<status status="PASS" starttime="20210730 15:35:34.766" endtime="20210730 15:35:34.773"/>
</kw>
<status status="PASS" starttime="20210730 15:35:33.205" endtime="20210730 15:35:34.773"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤%123!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:34.774" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:35:34.774" endtime="20210730 15:35:34.774"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:34.775" level="INFO">${payload} = {'username': '#¤%123!'}</msg>
<status status="PASS" starttime="20210730 15:35:34.774" endtime="20210730 15:35:34.775"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:34.785" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:34.785" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:34.775" endtime="20210730 15:35:34.785"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:34.786" endtime="20210730 15:35:34.786"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:34.786" endtime="20210730 15:35:34.786"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:34.775" endtime="20210730 15:35:34.786"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:34.775" endtime="20210730 15:35:34.786"/>
</for>
<status status="FAIL" starttime="20210730 15:35:34.773" endtime="20210730 15:35:34.786"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:34.773" endtime="20210730 15:35:34.786"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤%123!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:34.787" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:35:34.787" endtime="20210730 15:35:34.787"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:34.788" level="INFO">${payload} = {'username': '#¤%123!'}</msg>
<status status="PASS" starttime="20210730 15:35:34.788" endtime="20210730 15:35:34.788"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:34.792" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:34.793" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:34.788" endtime="20210730 15:35:34.793"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:34.793" endtime="20210730 15:35:34.793"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:34.793" endtime="20210730 15:35:34.793"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:34.788" endtime="20210730 15:35:34.793"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:34.788" endtime="20210730 15:35:34.793"/>
</for>
<status status="FAIL" starttime="20210730 15:35:34.786" endtime="20210730 15:35:34.793"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:34.786" endtime="20210730 15:35:34.793"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤%123!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:34.794" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:35:34.794" endtime="20210730 15:35:34.794"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:34.795" level="INFO">${payload} = {'username': '#¤%123!'}</msg>
<status status="PASS" starttime="20210730 15:35:34.794" endtime="20210730 15:35:34.795"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:34.799" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:34.799" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:34.795" endtime="20210730 15:35:34.800"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:34.800" endtime="20210730 15:35:34.800"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:34.800" endtime="20210730 15:35:34.800"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:34.795" endtime="20210730 15:35:34.800"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:34.795" endtime="20210730 15:35:34.800"/>
</for>
<status status="FAIL" starttime="20210730 15:35:34.793" endtime="20210730 15:35:34.800"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:34.793" endtime="20210730 15:35:34.800"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:34.773" endtime="20210730 15:35:34.800"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:34.805" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:34.815" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:34.815" level="INFO">${pids} = 4353
4364
4368</msg>
<status status="PASS" starttime="20210730 15:35:34.801" endtime="20210730 15:35:34.815"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:34.816" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:34.815" endtime="20210730 15:35:34.816"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:34.817" level="INFO">${pids} = ['4353', '4364', '4368']</msg>
<status status="PASS" starttime="20210730 15:35:34.816" endtime="20210730 15:35:34.817"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4353</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:34.820" level="INFO">Running command 'kill 4353 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:34.817" endtime="20210730 15:35:34.820"/>
</kw>
<status status="PASS" starttime="20210730 15:35:34.817" endtime="20210730 15:35:34.820"/>
</iter>
<iter>
<var name="${pid}">4364</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:34.823" level="INFO">Running command 'kill 4364 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:34.821" endtime="20210730 15:35:34.825"/>
</kw>
<status status="PASS" starttime="20210730 15:35:34.820" endtime="20210730 15:35:34.825"/>
</iter>
<iter>
<var name="${pid}">4368</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:34.829" level="INFO">Running command 'kill 4368 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:34.825" endtime="20210730 15:35:34.829"/>
</kw>
<status status="PASS" starttime="20210730 15:35:34.825" endtime="20210730 15:35:34.829"/>
</iter>
<status status="PASS" starttime="20210730 15:35:34.817" endtime="20210730 15:35:34.829"/>
</for>
<status status="PASS" starttime="20210730 15:35:34.816" endtime="20210730 15:35:34.829"/>
</branch>
<status status="PASS" starttime="20210730 15:35:34.816" endtime="20210730 15:35:34.829"/>
</if>
<status status="PASS" starttime="20210730 15:35:34.801" endtime="20210730 15:35:34.829"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤%123!'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:35:33.204" endtime="20210730 15:35:34.830">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t15" name="With Each Valid Token, Updating Username Of Each System User With #¤%123!&amp; Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:34.835" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:34.845" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:34.845" level="INFO">${pids} = 4397</msg>
<status status="PASS" starttime="20210730 15:35:34.832" endtime="20210730 15:35:34.845"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:34.846" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:34.845" endtime="20210730 15:35:34.846"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:34.847" level="INFO">${pids} = ['4397']</msg>
<status status="PASS" starttime="20210730 15:35:34.846" endtime="20210730 15:35:34.847"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4397</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:34.850" level="INFO">Running command 'kill 4397 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:34.847" endtime="20210730 15:35:34.851"/>
</kw>
<status status="PASS" starttime="20210730 15:35:34.847" endtime="20210730 15:35:34.851"/>
</iter>
<status status="PASS" starttime="20210730 15:35:34.847" endtime="20210730 15:35:34.851"/>
</for>
<status status="PASS" starttime="20210730 15:35:34.846" endtime="20210730 15:35:34.851"/>
</branch>
<status status="PASS" starttime="20210730 15:35:34.846" endtime="20210730 15:35:34.851"/>
</if>
<status status="PASS" starttime="20210730 15:35:34.831" endtime="20210730 15:35:34.851"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:34.853" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:34.852" endtime="20210730 15:35:34.853"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:34.853" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:34.853" endtime="20210730 15:35:34.853"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:34.854" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:34.853" endtime="20210730 15:35:34.854"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:34.854" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:34.854" endtime="20210730 15:35:34.854"/>
</kw>
<msg timestamp="20210730 15:35:34.855" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:34.853" endtime="20210730 15:35:34.855"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:34.860" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:34.855" endtime="20210730 15:35:34.862"/>
</kw>
<status status="PASS" starttime="20210730 15:35:34.852" endtime="20210730 15:35:34.862"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:35:34.864" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:35:34.863" endtime="20210730 15:35:34.870"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:35:36.373" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:35:34.870" endtime="20210730 15:35:36.374"/>
</kw>
<status status="PASS" starttime="20210730 15:35:34.862" endtime="20210730 15:35:36.374"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:36.376" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:36.375" endtime="20210730 15:35:36.376"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:36.377" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:36.376" endtime="20210730 15:35:36.377"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:36.378" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:36.378" endtime="20210730 15:35:36.378"/>
</kw>
<msg timestamp="20210730 15:35:36.378" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:36.375" endtime="20210730 15:35:36.379"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:35:36.379" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:35:36.379" endtime="20210730 15:35:36.380"/>
</kw>
<status status="PASS" starttime="20210730 15:35:36.374" endtime="20210730 15:35:36.380"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:35:36.381" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:35:36.381" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:35:36.381" endtime="20210730 15:35:36.381"/>
</kw>
<status status="PASS" starttime="20210730 15:35:36.380" endtime="20210730 15:35:36.381"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:35:36.382" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:35:36.383" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:35:36.382" endtime="20210730 15:35:36.383"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:35:36.383" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:35:36.383" endtime="20210730 15:35:36.383"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:36.384" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:36.383" endtime="20210730 15:35:36.384"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:36.384" endtime="20210730 15:35:36.385"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:36.385" endtime="20210730 15:35:36.385"/>
</kw>
<status status="PASS" starttime="20210730 15:35:36.383" endtime="20210730 15:35:36.385"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:36.386" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:36.386" endtime="20210730 15:35:36.386"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:36.386" endtime="20210730 15:35:36.387"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:36.387" endtime="20210730 15:35:36.387"/>
</kw>
<status status="PASS" starttime="20210730 15:35:36.385" endtime="20210730 15:35:36.387"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:36.388" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:36.387" endtime="20210730 15:35:36.388"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:36.388" endtime="20210730 15:35:36.389"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:36.389" endtime="20210730 15:35:36.389"/>
</kw>
<status status="PASS" starttime="20210730 15:35:36.387" endtime="20210730 15:35:36.389"/>
</iter>
<status status="PASS" starttime="20210730 15:35:36.383" endtime="20210730 15:35:36.389"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:35:36.390" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:35:36.390" endtime="20210730 15:35:36.390"/>
</kw>
<status status="PASS" starttime="20210730 15:35:36.382" endtime="20210730 15:35:36.390"/>
</kw>
<status status="PASS" starttime="20210730 15:35:34.831" endtime="20210730 15:35:36.390"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤%123!&amp;</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:36.393" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:35:36.391" endtime="20210730 15:35:36.393"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:36.394" level="INFO">${payload} = {'username': '#¤%123!&amp;'}</msg>
<status status="PASS" starttime="20210730 15:35:36.394" endtime="20210730 15:35:36.394"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:36.406" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:36.406" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:36.394" endtime="20210730 15:35:36.406"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:36.406" endtime="20210730 15:35:36.406"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:36.407" endtime="20210730 15:35:36.407"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:36.394" endtime="20210730 15:35:36.407"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:36.394" endtime="20210730 15:35:36.407"/>
</for>
<status status="FAIL" starttime="20210730 15:35:36.391" endtime="20210730 15:35:36.407"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:36.391" endtime="20210730 15:35:36.407"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤%123!&amp;</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:36.408" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:35:36.408" endtime="20210730 15:35:36.408"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:36.409" level="INFO">${payload} = {'username': '#¤%123!&amp;'}</msg>
<status status="PASS" starttime="20210730 15:35:36.408" endtime="20210730 15:35:36.409"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:36.414" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:36.414" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:36.409" endtime="20210730 15:35:36.414"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:36.415" endtime="20210730 15:35:36.415"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:36.415" endtime="20210730 15:35:36.415"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:36.409" endtime="20210730 15:35:36.415"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:36.409" endtime="20210730 15:35:36.415"/>
</for>
<status status="FAIL" starttime="20210730 15:35:36.407" endtime="20210730 15:35:36.415"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:36.407" endtime="20210730 15:35:36.415"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤%123!&amp;</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:36.416" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:35:36.416" endtime="20210730 15:35:36.416"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:36.417" level="INFO">${payload} = {'username': '#¤%123!&amp;'}</msg>
<status status="PASS" starttime="20210730 15:35:36.417" endtime="20210730 15:35:36.417"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:36.424" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:36.424" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:36.418" endtime="20210730 15:35:36.424"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:36.424" endtime="20210730 15:35:36.424"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:36.424" endtime="20210730 15:35:36.424"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:36.418" endtime="20210730 15:35:36.424"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:36.417" endtime="20210730 15:35:36.424"/>
</for>
<status status="FAIL" starttime="20210730 15:35:36.415" endtime="20210730 15:35:36.424"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:36.415" endtime="20210730 15:35:36.425"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:36.390" endtime="20210730 15:35:36.425"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:36.429" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:36.438" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:36.438" level="INFO">${pids} = 4420
4427
4437</msg>
<status status="PASS" starttime="20210730 15:35:36.425" endtime="20210730 15:35:36.438"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:36.439" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:36.439" endtime="20210730 15:35:36.439"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:36.440" level="INFO">${pids} = ['4420', '4427', '4437']</msg>
<status status="PASS" starttime="20210730 15:35:36.440" endtime="20210730 15:35:36.440"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4420</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:36.445" level="INFO">Running command 'kill 4420 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:36.441" endtime="20210730 15:35:36.446"/>
</kw>
<status status="PASS" starttime="20210730 15:35:36.441" endtime="20210730 15:35:36.446"/>
</iter>
<iter>
<var name="${pid}">4427</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:36.452" level="INFO">Running command 'kill 4427 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:36.446" endtime="20210730 15:35:36.456"/>
</kw>
<status status="PASS" starttime="20210730 15:35:36.446" endtime="20210730 15:35:36.456"/>
</iter>
<iter>
<var name="${pid}">4437</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:36.461" level="INFO">Running command 'kill 4437 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:36.457" endtime="20210730 15:35:36.462"/>
</kw>
<status status="PASS" starttime="20210730 15:35:36.457" endtime="20210730 15:35:36.462"/>
</iter>
<status status="PASS" starttime="20210730 15:35:36.440" endtime="20210730 15:35:36.462"/>
</for>
<status status="PASS" starttime="20210730 15:35:36.440" endtime="20210730 15:35:36.462"/>
</branch>
<status status="PASS" starttime="20210730 15:35:36.439" endtime="20210730 15:35:36.462"/>
</if>
<status status="PASS" starttime="20210730 15:35:36.425" endtime="20210730 15:35:36.462"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤%123!&amp;'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:35:34.830" endtime="20210730 15:35:36.462">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t16" name="With Each Valid Token, Updating Username Of Each System User With #¤%123!&amp;7683##()=?@#¤%&amp;34567 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:36.468" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:36.478" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:36.478" level="INFO">${pids} = 4466</msg>
<status status="PASS" starttime="20210730 15:35:36.465" endtime="20210730 15:35:36.478"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:36.479" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:36.478" endtime="20210730 15:35:36.479"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:36.480" level="INFO">${pids} = ['4466']</msg>
<status status="PASS" starttime="20210730 15:35:36.479" endtime="20210730 15:35:36.480"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4466</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:36.486" level="INFO">Running command 'kill 4466 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:36.480" endtime="20210730 15:35:36.486"/>
</kw>
<status status="PASS" starttime="20210730 15:35:36.480" endtime="20210730 15:35:36.486"/>
</iter>
<status status="PASS" starttime="20210730 15:35:36.480" endtime="20210730 15:35:36.486"/>
</for>
<status status="PASS" starttime="20210730 15:35:36.479" endtime="20210730 15:35:36.486"/>
</branch>
<status status="PASS" starttime="20210730 15:35:36.479" endtime="20210730 15:35:36.486"/>
</if>
<status status="PASS" starttime="20210730 15:35:36.464" endtime="20210730 15:35:36.487"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:36.488" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:36.487" endtime="20210730 15:35:36.488"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:36.488" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:36.488" endtime="20210730 15:35:36.488"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:36.489" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:36.489" endtime="20210730 15:35:36.489"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:36.489" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:36.489" endtime="20210730 15:35:36.489"/>
</kw>
<msg timestamp="20210730 15:35:36.490" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:36.488" endtime="20210730 15:35:36.490"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:36.493" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:36.490" endtime="20210730 15:35:36.495"/>
</kw>
<status status="PASS" starttime="20210730 15:35:36.487" endtime="20210730 15:35:36.495"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:35:36.496" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:35:36.496" endtime="20210730 15:35:36.502"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:35:38.018" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:35:36.503" endtime="20210730 15:35:38.018"/>
</kw>
<status status="PASS" starttime="20210730 15:35:36.495" endtime="20210730 15:35:38.018"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:38.019" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:38.019" endtime="20210730 15:35:38.019"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:38.020" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:38.019" endtime="20210730 15:35:38.020"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:38.020" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:38.020" endtime="20210730 15:35:38.020"/>
</kw>
<msg timestamp="20210730 15:35:38.021" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:38.019" endtime="20210730 15:35:38.021"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:35:38.021" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:35:38.021" endtime="20210730 15:35:38.021"/>
</kw>
<status status="PASS" starttime="20210730 15:35:38.018" endtime="20210730 15:35:38.022"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:35:38.022" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:35:38.022" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:35:38.022" endtime="20210730 15:35:38.022"/>
</kw>
<status status="PASS" starttime="20210730 15:35:38.022" endtime="20210730 15:35:38.022"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:35:38.023" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:35:38.023" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:35:38.023" endtime="20210730 15:35:38.023"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:35:38.024" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:35:38.023" endtime="20210730 15:35:38.024"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:38.024" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:38.024" endtime="20210730 15:35:38.024"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:38.024" endtime="20210730 15:35:38.026"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:38.026" endtime="20210730 15:35:38.026"/>
</kw>
<status status="PASS" starttime="20210730 15:35:38.024" endtime="20210730 15:35:38.026"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:38.027" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:38.026" endtime="20210730 15:35:38.027"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:38.027" endtime="20210730 15:35:38.028"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:38.028" endtime="20210730 15:35:38.028"/>
</kw>
<status status="PASS" starttime="20210730 15:35:38.026" endtime="20210730 15:35:38.028"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:38.029" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:38.028" endtime="20210730 15:35:38.029"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:38.029" endtime="20210730 15:35:38.030"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:38.030" endtime="20210730 15:35:38.030"/>
</kw>
<status status="PASS" starttime="20210730 15:35:38.028" endtime="20210730 15:35:38.030"/>
</iter>
<status status="PASS" starttime="20210730 15:35:38.024" endtime="20210730 15:35:38.030"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:35:38.031" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:35:38.030" endtime="20210730 15:35:38.031"/>
</kw>
<status status="PASS" starttime="20210730 15:35:38.023" endtime="20210730 15:35:38.031"/>
</kw>
<status status="PASS" starttime="20210730 15:35:36.464" endtime="20210730 15:35:38.031"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤%123!&amp;7683##()=?@#¤%&amp;34567</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:38.033" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:35:38.032" endtime="20210730 15:35:38.033"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:38.033" level="INFO">${payload} = {'username': '#¤%123!&amp;7683##()=?@#¤%&amp;34567'}</msg>
<status status="PASS" starttime="20210730 15:35:38.033" endtime="20210730 15:35:38.033"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:38.044" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:38.045" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:38.034" endtime="20210730 15:35:38.045"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:38.045" endtime="20210730 15:35:38.045"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:38.045" endtime="20210730 15:35:38.045"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:38.034" endtime="20210730 15:35:38.045"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:38.033" endtime="20210730 15:35:38.045"/>
</for>
<status status="FAIL" starttime="20210730 15:35:38.031" endtime="20210730 15:35:38.045"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:38.031" endtime="20210730 15:35:38.045"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤%123!&amp;7683##()=?@#¤%&amp;34567</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:38.047" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:35:38.046" endtime="20210730 15:35:38.047"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:38.047" level="INFO">${payload} = {'username': '#¤%123!&amp;7683##()=?@#¤%&amp;34567'}</msg>
<status status="PASS" starttime="20210730 15:35:38.047" endtime="20210730 15:35:38.047"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:38.053" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:38.053" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:38.048" endtime="20210730 15:35:38.053"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:38.053" endtime="20210730 15:35:38.053"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:38.053" endtime="20210730 15:35:38.053"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:38.047" endtime="20210730 15:35:38.053"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:38.047" endtime="20210730 15:35:38.053"/>
</for>
<status status="FAIL" starttime="20210730 15:35:38.046" endtime="20210730 15:35:38.054"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:38.045" endtime="20210730 15:35:38.054"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤%123!&amp;7683##()=?@#¤%&amp;34567</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:38.055" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:35:38.054" endtime="20210730 15:35:38.055"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:38.055" level="INFO">${payload} = {'username': '#¤%123!&amp;7683##()=?@#¤%&amp;34567'}</msg>
<status status="PASS" starttime="20210730 15:35:38.055" endtime="20210730 15:35:38.055"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:38.060" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:38.060" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:38.056" endtime="20210730 15:35:38.060"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:38.061" endtime="20210730 15:35:38.061"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:38.061" endtime="20210730 15:35:38.061"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:38.056" endtime="20210730 15:35:38.061"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:38.055" endtime="20210730 15:35:38.061"/>
</for>
<status status="FAIL" starttime="20210730 15:35:38.054" endtime="20210730 15:35:38.061"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:38.054" endtime="20210730 15:35:38.061"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:38.031" endtime="20210730 15:35:38.061"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:38.065" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:38.075" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:38.075" level="INFO">${pids} = 4489
4496
4501</msg>
<status status="PASS" starttime="20210730 15:35:38.062" endtime="20210730 15:35:38.075"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:38.076" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:38.076" endtime="20210730 15:35:38.076"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:38.078" level="INFO">${pids} = ['4489', '4496', '4501']</msg>
<status status="PASS" starttime="20210730 15:35:38.077" endtime="20210730 15:35:38.078"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4489</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:38.081" level="INFO">Running command 'kill 4489 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:38.078" endtime="20210730 15:35:38.081"/>
</kw>
<status status="PASS" starttime="20210730 15:35:38.078" endtime="20210730 15:35:38.081"/>
</iter>
<iter>
<var name="${pid}">4496</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:38.084" level="INFO">Running command 'kill 4496 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:38.082" endtime="20210730 15:35:38.086"/>
</kw>
<status status="PASS" starttime="20210730 15:35:38.082" endtime="20210730 15:35:38.086"/>
</iter>
<iter>
<var name="${pid}">4501</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:38.090" level="INFO">Running command 'kill 4501 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:38.087" endtime="20210730 15:35:38.090"/>
</kw>
<status status="PASS" starttime="20210730 15:35:38.086" endtime="20210730 15:35:38.090"/>
</iter>
<status status="PASS" starttime="20210730 15:35:38.078" endtime="20210730 15:35:38.090"/>
</for>
<status status="PASS" starttime="20210730 15:35:38.077" endtime="20210730 15:35:38.090"/>
</branch>
<status status="PASS" starttime="20210730 15:35:38.077" endtime="20210730 15:35:38.090"/>
</if>
<status status="PASS" starttime="20210730 15:35:38.062" endtime="20210730 15:35:38.091"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤%123!&amp;7683##()=?@#¤%&amp;34567'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:35:36.463" endtime="20210730 15:35:38.091">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t17" name="With Each Valid Token, Updating Username Of Each System User With #¤123ab Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:38.097" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:38.107" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:38.107" level="INFO">${pids} = 4530</msg>
<status status="PASS" starttime="20210730 15:35:38.094" endtime="20210730 15:35:38.108"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:38.109" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:38.108" endtime="20210730 15:35:38.109"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:38.110" level="INFO">${pids} = ['4530']</msg>
<status status="PASS" starttime="20210730 15:35:38.109" endtime="20210730 15:35:38.110"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4530</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:38.114" level="INFO">Running command 'kill 4530 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:38.110" endtime="20210730 15:35:38.114"/>
</kw>
<status status="PASS" starttime="20210730 15:35:38.110" endtime="20210730 15:35:38.114"/>
</iter>
<status status="PASS" starttime="20210730 15:35:38.110" endtime="20210730 15:35:38.114"/>
</for>
<status status="PASS" starttime="20210730 15:35:38.109" endtime="20210730 15:35:38.114"/>
</branch>
<status status="PASS" starttime="20210730 15:35:38.109" endtime="20210730 15:35:38.114"/>
</if>
<status status="PASS" starttime="20210730 15:35:38.093" endtime="20210730 15:35:38.114"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:38.115" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:38.115" endtime="20210730 15:35:38.116"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:38.116" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:38.116" endtime="20210730 15:35:38.116"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:38.117" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:38.116" endtime="20210730 15:35:38.117"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:38.117" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:38.117" endtime="20210730 15:35:38.117"/>
</kw>
<msg timestamp="20210730 15:35:38.117" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:38.116" endtime="20210730 15:35:38.117"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:38.122" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:38.118" endtime="20210730 15:35:38.124"/>
</kw>
<status status="PASS" starttime="20210730 15:35:38.115" endtime="20210730 15:35:38.124"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:35:38.126" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:35:38.125" endtime="20210730 15:35:38.130"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:35:39.634" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:35:38.131" endtime="20210730 15:35:39.634"/>
</kw>
<status status="PASS" starttime="20210730 15:35:38.125" endtime="20210730 15:35:39.635"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:39.636" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:39.636" endtime="20210730 15:35:39.636"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:39.636" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:39.636" endtime="20210730 15:35:39.636"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:39.637" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:39.636" endtime="20210730 15:35:39.637"/>
</kw>
<msg timestamp="20210730 15:35:39.637" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:39.635" endtime="20210730 15:35:39.637"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:35:39.638" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:35:39.637" endtime="20210730 15:35:39.638"/>
</kw>
<status status="PASS" starttime="20210730 15:35:39.635" endtime="20210730 15:35:39.638"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:35:39.638" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:35:39.638" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:35:39.638" endtime="20210730 15:35:39.639"/>
</kw>
<status status="PASS" starttime="20210730 15:35:39.638" endtime="20210730 15:35:39.639"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:35:39.639" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:35:39.639" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:35:39.639" endtime="20210730 15:35:39.639"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:35:39.640" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:35:39.640" endtime="20210730 15:35:39.640"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:39.640" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:39.640" endtime="20210730 15:35:39.640"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:39.641" endtime="20210730 15:35:39.641"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:39.641" endtime="20210730 15:35:39.642"/>
</kw>
<status status="PASS" starttime="20210730 15:35:39.640" endtime="20210730 15:35:39.642"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:39.643" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:39.642" endtime="20210730 15:35:39.643"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:39.643" endtime="20210730 15:35:39.644"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:39.644" endtime="20210730 15:35:39.645"/>
</kw>
<status status="PASS" starttime="20210730 15:35:39.642" endtime="20210730 15:35:39.645"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:39.645" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:39.645" endtime="20210730 15:35:39.645"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:39.645" endtime="20210730 15:35:39.646"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:39.646" endtime="20210730 15:35:39.646"/>
</kw>
<status status="PASS" starttime="20210730 15:35:39.645" endtime="20210730 15:35:39.646"/>
</iter>
<status status="PASS" starttime="20210730 15:35:39.640" endtime="20210730 15:35:39.646"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:35:39.647" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:35:39.647" endtime="20210730 15:35:39.647"/>
</kw>
<status status="PASS" starttime="20210730 15:35:39.639" endtime="20210730 15:35:39.647"/>
</kw>
<status status="PASS" starttime="20210730 15:35:38.093" endtime="20210730 15:35:39.647"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤123ab</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:39.649" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:35:39.648" endtime="20210730 15:35:39.649"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:39.649" level="INFO">${payload} = {'username': '#¤123ab'}</msg>
<status status="PASS" starttime="20210730 15:35:39.649" endtime="20210730 15:35:39.649"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:39.659" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:39.659" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:39.650" endtime="20210730 15:35:39.659"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:39.659" endtime="20210730 15:35:39.659"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:39.660" endtime="20210730 15:35:39.660"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:39.649" endtime="20210730 15:35:39.660"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:39.649" endtime="20210730 15:35:39.660"/>
</for>
<status status="FAIL" starttime="20210730 15:35:39.648" endtime="20210730 15:35:39.660"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:39.648" endtime="20210730 15:35:39.660"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤123ab</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:39.661" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:35:39.661" endtime="20210730 15:35:39.661"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:39.662" level="INFO">${payload} = {'username': '#¤123ab'}</msg>
<status status="PASS" starttime="20210730 15:35:39.661" endtime="20210730 15:35:39.662"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:39.666" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:39.666" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:39.662" endtime="20210730 15:35:39.666"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:39.666" endtime="20210730 15:35:39.666"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:39.666" endtime="20210730 15:35:39.666"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:39.662" endtime="20210730 15:35:39.666"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:39.662" endtime="20210730 15:35:39.666"/>
</for>
<status status="FAIL" starttime="20210730 15:35:39.660" endtime="20210730 15:35:39.667"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:39.660" endtime="20210730 15:35:39.667"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤123ab</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:39.668" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:35:39.667" endtime="20210730 15:35:39.668"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:39.668" level="INFO">${payload} = {'username': '#¤123ab'}</msg>
<status status="PASS" starttime="20210730 15:35:39.668" endtime="20210730 15:35:39.668"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:39.672" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:39.672" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:39.668" endtime="20210730 15:35:39.673"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:39.673" endtime="20210730 15:35:39.673"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:39.673" endtime="20210730 15:35:39.673"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:39.668" endtime="20210730 15:35:39.673"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:39.668" endtime="20210730 15:35:39.673"/>
</for>
<status status="FAIL" starttime="20210730 15:35:39.667" endtime="20210730 15:35:39.673"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:39.667" endtime="20210730 15:35:39.673"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:39.647" endtime="20210730 15:35:39.673"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:39.679" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:39.688" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:39.688" level="INFO">${pids} = 4553
4560
4568</msg>
<status status="PASS" starttime="20210730 15:35:39.674" endtime="20210730 15:35:39.688"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:39.689" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:39.689" endtime="20210730 15:35:39.689"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:39.690" level="INFO">${pids} = ['4553', '4560', '4568']</msg>
<status status="PASS" starttime="20210730 15:35:39.690" endtime="20210730 15:35:39.690"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4553</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:39.694" level="INFO">Running command 'kill 4553 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:39.690" endtime="20210730 15:35:39.694"/>
</kw>
<status status="PASS" starttime="20210730 15:35:39.690" endtime="20210730 15:35:39.694"/>
</iter>
<iter>
<var name="${pid}">4560</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:39.697" level="INFO">Running command 'kill 4560 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:39.694" endtime="20210730 15:35:39.699"/>
</kw>
<status status="PASS" starttime="20210730 15:35:39.694" endtime="20210730 15:35:39.699"/>
</iter>
<iter>
<var name="${pid}">4568</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:39.702" level="INFO">Running command 'kill 4568 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:39.699" endtime="20210730 15:35:39.702"/>
</kw>
<status status="PASS" starttime="20210730 15:35:39.699" endtime="20210730 15:35:39.702"/>
</iter>
<status status="PASS" starttime="20210730 15:35:39.690" endtime="20210730 15:35:39.702"/>
</for>
<status status="PASS" starttime="20210730 15:35:39.690" endtime="20210730 15:35:39.702"/>
</branch>
<status status="PASS" starttime="20210730 15:35:39.689" endtime="20210730 15:35:39.702"/>
</if>
<status status="PASS" starttime="20210730 15:35:39.674" endtime="20210730 15:35:39.703"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤123ab'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:35:38.092" endtime="20210730 15:35:39.703">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t18" name="With Each Valid Token, Updating Username Of Each System User With #¤123abc Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:39.713" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:39.722" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:39.722" level="INFO">${pids} = 4597</msg>
<status status="PASS" starttime="20210730 15:35:39.705" endtime="20210730 15:35:39.722"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:39.725" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:39.724" endtime="20210730 15:35:39.725"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:39.726" level="INFO">${pids} = ['4597']</msg>
<status status="PASS" starttime="20210730 15:35:39.726" endtime="20210730 15:35:39.726"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4597</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:39.743" level="INFO">Running command 'kill 4597 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:39.727" endtime="20210730 15:35:39.744"/>
</kw>
<status status="PASS" starttime="20210730 15:35:39.727" endtime="20210730 15:35:39.744"/>
</iter>
<status status="PASS" starttime="20210730 15:35:39.726" endtime="20210730 15:35:39.744"/>
</for>
<status status="PASS" starttime="20210730 15:35:39.726" endtime="20210730 15:35:39.745"/>
</branch>
<status status="PASS" starttime="20210730 15:35:39.725" endtime="20210730 15:35:39.745"/>
</if>
<status status="PASS" starttime="20210730 15:35:39.704" endtime="20210730 15:35:39.745"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:39.746" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:39.746" endtime="20210730 15:35:39.746"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:39.747" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:39.747" endtime="20210730 15:35:39.747"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:39.747" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:39.747" endtime="20210730 15:35:39.747"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:39.748" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:39.748" endtime="20210730 15:35:39.748"/>
</kw>
<msg timestamp="20210730 15:35:39.748" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:39.746" endtime="20210730 15:35:39.748"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:39.751" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:39.748" endtime="20210730 15:35:39.753"/>
</kw>
<status status="PASS" starttime="20210730 15:35:39.745" endtime="20210730 15:35:39.753"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:35:39.755" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:35:39.754" endtime="20210730 15:35:39.759"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:35:41.261" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:35:39.759" endtime="20210730 15:35:41.261"/>
</kw>
<status status="PASS" starttime="20210730 15:35:39.754" endtime="20210730 15:35:41.261"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:41.262" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:41.262" endtime="20210730 15:35:41.262"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:41.262" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:41.262" endtime="20210730 15:35:41.262"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:41.263" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:41.262" endtime="20210730 15:35:41.263"/>
</kw>
<msg timestamp="20210730 15:35:41.263" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:41.261" endtime="20210730 15:35:41.263"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:35:41.263" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:35:41.263" endtime="20210730 15:35:41.264"/>
</kw>
<status status="PASS" starttime="20210730 15:35:41.261" endtime="20210730 15:35:41.264"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:35:41.264" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:35:41.264" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:35:41.264" endtime="20210730 15:35:41.265"/>
</kw>
<status status="PASS" starttime="20210730 15:35:41.264" endtime="20210730 15:35:41.265"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:35:41.265" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:35:41.265" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:35:41.265" endtime="20210730 15:35:41.265"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:35:41.266" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:35:41.265" endtime="20210730 15:35:41.266"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:41.266" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:41.266" endtime="20210730 15:35:41.266"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:41.267" endtime="20210730 15:35:41.267"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:41.267" endtime="20210730 15:35:41.268"/>
</kw>
<status status="PASS" starttime="20210730 15:35:41.266" endtime="20210730 15:35:41.268"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:41.268" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:41.268" endtime="20210730 15:35:41.268"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:41.268" endtime="20210730 15:35:41.269"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:41.269" endtime="20210730 15:35:41.270"/>
</kw>
<status status="PASS" starttime="20210730 15:35:41.268" endtime="20210730 15:35:41.270"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:41.270" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:41.270" endtime="20210730 15:35:41.270"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:41.270" endtime="20210730 15:35:41.271"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:41.271" endtime="20210730 15:35:41.271"/>
</kw>
<status status="PASS" starttime="20210730 15:35:41.270" endtime="20210730 15:35:41.271"/>
</iter>
<status status="PASS" starttime="20210730 15:35:41.266" endtime="20210730 15:35:41.271"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:35:41.272" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:35:41.271" endtime="20210730 15:35:41.272"/>
</kw>
<status status="PASS" starttime="20210730 15:35:41.265" endtime="20210730 15:35:41.272"/>
</kw>
<status status="PASS" starttime="20210730 15:35:39.704" endtime="20210730 15:35:41.272"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤123abc</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:41.273" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:35:41.273" endtime="20210730 15:35:41.273"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:41.274" level="INFO">${payload} = {'username': '#¤123abc'}</msg>
<status status="PASS" starttime="20210730 15:35:41.274" endtime="20210730 15:35:41.274"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:41.285" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:41.285" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:41.274" endtime="20210730 15:35:41.285"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:41.285" endtime="20210730 15:35:41.285"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:41.285" endtime="20210730 15:35:41.285"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:41.274" endtime="20210730 15:35:41.285"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:41.274" endtime="20210730 15:35:41.285"/>
</for>
<status status="FAIL" starttime="20210730 15:35:41.273" endtime="20210730 15:35:41.286"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:41.272" endtime="20210730 15:35:41.286"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤123abc</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:41.287" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:35:41.286" endtime="20210730 15:35:41.287"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:41.287" level="INFO">${payload} = {'username': '#¤123abc'}</msg>
<status status="PASS" starttime="20210730 15:35:41.287" endtime="20210730 15:35:41.287"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:41.291" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:41.292" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:41.288" endtime="20210730 15:35:41.292"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:41.292" endtime="20210730 15:35:41.292"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:41.292" endtime="20210730 15:35:41.292"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:41.287" endtime="20210730 15:35:41.292"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:41.287" endtime="20210730 15:35:41.292"/>
</for>
<status status="FAIL" starttime="20210730 15:35:41.286" endtime="20210730 15:35:41.292"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:41.286" endtime="20210730 15:35:41.292"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤123abc</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:41.293" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:35:41.293" endtime="20210730 15:35:41.294"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:41.294" level="INFO">${payload} = {'username': '#¤123abc'}</msg>
<status status="PASS" starttime="20210730 15:35:41.294" endtime="20210730 15:35:41.294"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:41.298" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:41.299" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:41.294" endtime="20210730 15:35:41.299"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:41.299" endtime="20210730 15:35:41.299"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:41.299" endtime="20210730 15:35:41.299"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:41.294" endtime="20210730 15:35:41.299"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:41.294" endtime="20210730 15:35:41.299"/>
</for>
<status status="FAIL" starttime="20210730 15:35:41.293" endtime="20210730 15:35:41.299"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:41.292" endtime="20210730 15:35:41.299"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:41.272" endtime="20210730 15:35:41.299"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:41.304" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:41.314" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:41.314" level="INFO">${pids} = 4620
4627
4631</msg>
<status status="PASS" starttime="20210730 15:35:41.300" endtime="20210730 15:35:41.314"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:41.315" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:41.314" endtime="20210730 15:35:41.315"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:41.315" level="INFO">${pids} = ['4620', '4627', '4631']</msg>
<status status="PASS" starttime="20210730 15:35:41.315" endtime="20210730 15:35:41.315"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4620</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:41.319" level="INFO">Running command 'kill 4620 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:41.316" endtime="20210730 15:35:41.319"/>
</kw>
<status status="PASS" starttime="20210730 15:35:41.316" endtime="20210730 15:35:41.319"/>
</iter>
<iter>
<var name="${pid}">4627</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:41.322" level="INFO">Running command 'kill 4627 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:41.320" endtime="20210730 15:35:41.323"/>
</kw>
<status status="PASS" starttime="20210730 15:35:41.319" endtime="20210730 15:35:41.323"/>
</iter>
<iter>
<var name="${pid}">4631</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:41.326" level="INFO">Running command 'kill 4631 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:41.323" endtime="20210730 15:35:41.327"/>
</kw>
<status status="PASS" starttime="20210730 15:35:41.323" endtime="20210730 15:35:41.327"/>
</iter>
<status status="PASS" starttime="20210730 15:35:41.315" endtime="20210730 15:35:41.327"/>
</for>
<status status="PASS" starttime="20210730 15:35:41.315" endtime="20210730 15:35:41.327"/>
</branch>
<status status="PASS" starttime="20210730 15:35:41.315" endtime="20210730 15:35:41.327"/>
</if>
<status status="PASS" starttime="20210730 15:35:41.300" endtime="20210730 15:35:41.327"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤123abc'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:35:39.703" endtime="20210730 15:35:41.327">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t19" name="With Each Valid Token, Updating Username Of Each System User With #¤/&amp;¤!!123abc456hjk Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:41.333" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:41.343" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:41.343" level="INFO">${pids} = 4666</msg>
<status status="PASS" starttime="20210730 15:35:41.329" endtime="20210730 15:35:41.344"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:41.345" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:41.344" endtime="20210730 15:35:41.345"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:41.346" level="INFO">${pids} = ['4666']</msg>
<status status="PASS" starttime="20210730 15:35:41.345" endtime="20210730 15:35:41.346"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4666</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:41.349" level="INFO">Running command 'kill 4666 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:41.346" endtime="20210730 15:35:41.349"/>
</kw>
<status status="PASS" starttime="20210730 15:35:41.346" endtime="20210730 15:35:41.349"/>
</iter>
<status status="PASS" starttime="20210730 15:35:41.346" endtime="20210730 15:35:41.350"/>
</for>
<status status="PASS" starttime="20210730 15:35:41.345" endtime="20210730 15:35:41.350"/>
</branch>
<status status="PASS" starttime="20210730 15:35:41.345" endtime="20210730 15:35:41.350"/>
</if>
<status status="PASS" starttime="20210730 15:35:41.329" endtime="20210730 15:35:41.350"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:41.351" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:41.351" endtime="20210730 15:35:41.351"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:41.352" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:41.352" endtime="20210730 15:35:41.352"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:41.352" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:41.352" endtime="20210730 15:35:41.352"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:41.353" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:41.353" endtime="20210730 15:35:41.353"/>
</kw>
<msg timestamp="20210730 15:35:41.353" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:41.351" endtime="20210730 15:35:41.353"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:41.368" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:41.353" endtime="20210730 15:35:41.370"/>
</kw>
<status status="PASS" starttime="20210730 15:35:41.350" endtime="20210730 15:35:41.370"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:35:41.372" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:35:41.371" endtime="20210730 15:35:41.376"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:35:42.879" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:35:41.377" endtime="20210730 15:35:42.879"/>
</kw>
<status status="PASS" starttime="20210730 15:35:41.371" endtime="20210730 15:35:42.879"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:42.880" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:42.880" endtime="20210730 15:35:42.880"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:42.881" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:42.880" endtime="20210730 15:35:42.881"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:42.881" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:42.881" endtime="20210730 15:35:42.881"/>
</kw>
<msg timestamp="20210730 15:35:42.882" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:42.880" endtime="20210730 15:35:42.882"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:35:42.882" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:35:42.882" endtime="20210730 15:35:42.882"/>
</kw>
<status status="PASS" starttime="20210730 15:35:42.879" endtime="20210730 15:35:42.883"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:35:42.883" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:35:42.883" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:35:42.883" endtime="20210730 15:35:42.883"/>
</kw>
<status status="PASS" starttime="20210730 15:35:42.883" endtime="20210730 15:35:42.884"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:35:42.885" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:35:42.885" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:35:42.885" endtime="20210730 15:35:42.885"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:35:42.886" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:35:42.885" endtime="20210730 15:35:42.886"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:42.887" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:42.887" endtime="20210730 15:35:42.887"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:42.887" endtime="20210730 15:35:42.888"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:42.888" endtime="20210730 15:35:42.888"/>
</kw>
<status status="PASS" starttime="20210730 15:35:42.886" endtime="20210730 15:35:42.888"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:42.889" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:42.889" endtime="20210730 15:35:42.889"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:42.889" endtime="20210730 15:35:42.890"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:42.890" endtime="20210730 15:35:42.890"/>
</kw>
<status status="PASS" starttime="20210730 15:35:42.889" endtime="20210730 15:35:42.890"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:42.890" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:42.890" endtime="20210730 15:35:42.890"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:42.890" endtime="20210730 15:35:42.891"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:42.891" endtime="20210730 15:35:42.891"/>
</kw>
<status status="PASS" starttime="20210730 15:35:42.890" endtime="20210730 15:35:42.891"/>
</iter>
<status status="PASS" starttime="20210730 15:35:42.886" endtime="20210730 15:35:42.891"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:35:42.892" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:35:42.892" endtime="20210730 15:35:42.892"/>
</kw>
<status status="PASS" starttime="20210730 15:35:42.884" endtime="20210730 15:35:42.892"/>
</kw>
<status status="PASS" starttime="20210730 15:35:41.329" endtime="20210730 15:35:42.892"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/&amp;¤!!123abc456hjk</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:42.893" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:35:42.893" endtime="20210730 15:35:42.893"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:42.894" level="INFO">${payload} = {'username': '#¤/&amp;¤!!123abc456hjk'}</msg>
<status status="PASS" starttime="20210730 15:35:42.893" endtime="20210730 15:35:42.894"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:42.906" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:42.906" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:42.894" endtime="20210730 15:35:42.906"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:42.906" endtime="20210730 15:35:42.906"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:42.906" endtime="20210730 15:35:42.906"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:42.894" endtime="20210730 15:35:42.907"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:42.894" endtime="20210730 15:35:42.907"/>
</for>
<status status="FAIL" starttime="20210730 15:35:42.893" endtime="20210730 15:35:42.907"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:42.892" endtime="20210730 15:35:42.907"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/&amp;¤!!123abc456hjk</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:42.908" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:35:42.908" endtime="20210730 15:35:42.908"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:42.909" level="INFO">${payload} = {'username': '#¤/&amp;¤!!123abc456hjk'}</msg>
<status status="PASS" starttime="20210730 15:35:42.908" endtime="20210730 15:35:42.909"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:42.914" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:42.914" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:42.910" endtime="20210730 15:35:42.914"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:42.915" endtime="20210730 15:35:42.915"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:42.915" endtime="20210730 15:35:42.915"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:42.910" endtime="20210730 15:35:42.915"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:42.909" endtime="20210730 15:35:42.915"/>
</for>
<status status="FAIL" starttime="20210730 15:35:42.907" endtime="20210730 15:35:42.915"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:42.907" endtime="20210730 15:35:42.915"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/&amp;¤!!123abc456hjk</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:42.916" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:35:42.916" endtime="20210730 15:35:42.916"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:42.917" level="INFO">${payload} = {'username': '#¤/&amp;¤!!123abc456hjk'}</msg>
<status status="PASS" starttime="20210730 15:35:42.916" endtime="20210730 15:35:42.917"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:42.921" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:42.921" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:42.917" endtime="20210730 15:35:42.922"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:42.922" endtime="20210730 15:35:42.922"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:42.922" endtime="20210730 15:35:42.922"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:42.917" endtime="20210730 15:35:42.922"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:42.917" endtime="20210730 15:35:42.922"/>
</for>
<status status="FAIL" starttime="20210730 15:35:42.915" endtime="20210730 15:35:42.922"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:42.915" endtime="20210730 15:35:42.922"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:42.892" endtime="20210730 15:35:42.922"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:42.930" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:42.939" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:42.939" level="INFO">${pids} = 4695
4702
4710</msg>
<status status="PASS" starttime="20210730 15:35:42.924" endtime="20210730 15:35:42.939"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:42.940" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:42.940" endtime="20210730 15:35:42.940"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:42.941" level="INFO">${pids} = ['4695', '4702', '4710']</msg>
<status status="PASS" starttime="20210730 15:35:42.941" endtime="20210730 15:35:42.941"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4695</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:42.945" level="INFO">Running command 'kill 4695 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:42.941" endtime="20210730 15:35:42.946"/>
</kw>
<status status="PASS" starttime="20210730 15:35:42.941" endtime="20210730 15:35:42.946"/>
</iter>
<iter>
<var name="${pid}">4702</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:42.949" level="INFO">Running command 'kill 4702 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:42.946" endtime="20210730 15:35:42.951"/>
</kw>
<status status="PASS" starttime="20210730 15:35:42.946" endtime="20210730 15:35:42.951"/>
</iter>
<iter>
<var name="${pid}">4710</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:42.956" level="INFO">Running command 'kill 4710 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:42.952" endtime="20210730 15:35:42.957"/>
</kw>
<status status="PASS" starttime="20210730 15:35:42.952" endtime="20210730 15:35:42.957"/>
</iter>
<status status="PASS" starttime="20210730 15:35:42.941" endtime="20210730 15:35:42.957"/>
</for>
<status status="PASS" starttime="20210730 15:35:42.941" endtime="20210730 15:35:42.957"/>
</branch>
<status status="PASS" starttime="20210730 15:35:42.940" endtime="20210730 15:35:42.957"/>
</if>
<status status="PASS" starttime="20210730 15:35:42.923" endtime="20210730 15:35:42.957"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤/&amp;¤!!123abc456hjk'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:35:41.328" endtime="20210730 15:35:42.957">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t20" name="With Each Valid Token, Updating Username Of Each System User With #¤/abc! Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:42.963" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:42.973" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:42.973" level="INFO">${pids} = 4740</msg>
<status status="PASS" starttime="20210730 15:35:42.960" endtime="20210730 15:35:42.973"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:42.974" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:42.973" endtime="20210730 15:35:42.974"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:42.974" level="INFO">${pids} = ['4740']</msg>
<status status="PASS" starttime="20210730 15:35:42.974" endtime="20210730 15:35:42.974"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4740</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:42.979" level="INFO">Running command 'kill 4740 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:42.975" endtime="20210730 15:35:42.982"/>
</kw>
<status status="PASS" starttime="20210730 15:35:42.975" endtime="20210730 15:35:42.982"/>
</iter>
<status status="PASS" starttime="20210730 15:35:42.974" endtime="20210730 15:35:42.982"/>
</for>
<status status="PASS" starttime="20210730 15:35:42.974" endtime="20210730 15:35:42.982"/>
</branch>
<status status="PASS" starttime="20210730 15:35:42.974" endtime="20210730 15:35:42.982"/>
</if>
<status status="PASS" starttime="20210730 15:35:42.960" endtime="20210730 15:35:42.983"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:42.985" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:42.984" endtime="20210730 15:35:42.985"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:42.985" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:42.985" endtime="20210730 15:35:42.985"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:42.986" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:42.986" endtime="20210730 15:35:42.986"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:42.994" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:42.994" endtime="20210730 15:35:42.994"/>
</kw>
<msg timestamp="20210730 15:35:42.995" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:42.985" endtime="20210730 15:35:42.995"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:42.998" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:42.995" endtime="20210730 15:35:43.001"/>
</kw>
<status status="PASS" starttime="20210730 15:35:42.983" endtime="20210730 15:35:43.001"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:35:43.011" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:35:43.010" endtime="20210730 15:35:43.018"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:35:44.520" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:35:43.019" endtime="20210730 15:35:44.521"/>
</kw>
<status status="PASS" starttime="20210730 15:35:43.010" endtime="20210730 15:35:44.521"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:44.523" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:44.522" endtime="20210730 15:35:44.523"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:44.523" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:44.523" endtime="20210730 15:35:44.523"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:44.524" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:44.523" endtime="20210730 15:35:44.524"/>
</kw>
<msg timestamp="20210730 15:35:44.524" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:44.522" endtime="20210730 15:35:44.524"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:35:44.525" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:35:44.524" endtime="20210730 15:35:44.525"/>
</kw>
<status status="PASS" starttime="20210730 15:35:44.521" endtime="20210730 15:35:44.526"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:35:44.526" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:35:44.526" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:35:44.526" endtime="20210730 15:35:44.527"/>
</kw>
<status status="PASS" starttime="20210730 15:35:44.526" endtime="20210730 15:35:44.527"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:35:44.528" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:35:44.528" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:35:44.527" endtime="20210730 15:35:44.528"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:35:44.529" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:35:44.528" endtime="20210730 15:35:44.529"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:44.530" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:44.529" endtime="20210730 15:35:44.530"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:44.530" endtime="20210730 15:35:44.531"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:44.531" endtime="20210730 15:35:44.531"/>
</kw>
<status status="PASS" starttime="20210730 15:35:44.529" endtime="20210730 15:35:44.532"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:44.532" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:44.532" endtime="20210730 15:35:44.532"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:44.532" endtime="20210730 15:35:44.533"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:44.534" endtime="20210730 15:35:44.534"/>
</kw>
<status status="PASS" starttime="20210730 15:35:44.532" endtime="20210730 15:35:44.534"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:44.535" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:44.534" endtime="20210730 15:35:44.535"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:44.535" endtime="20210730 15:35:44.536"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:44.536" endtime="20210730 15:35:44.536"/>
</kw>
<status status="PASS" starttime="20210730 15:35:44.534" endtime="20210730 15:35:44.536"/>
</iter>
<status status="PASS" starttime="20210730 15:35:44.529" endtime="20210730 15:35:44.536"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:35:44.537" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:35:44.537" endtime="20210730 15:35:44.537"/>
</kw>
<status status="PASS" starttime="20210730 15:35:44.527" endtime="20210730 15:35:44.537"/>
</kw>
<status status="PASS" starttime="20210730 15:35:42.960" endtime="20210730 15:35:44.537"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/abc!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:44.539" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:35:44.539" endtime="20210730 15:35:44.539"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:44.540" level="INFO">${payload} = {'username': '#¤/abc!'}</msg>
<status status="PASS" starttime="20210730 15:35:44.539" endtime="20210730 15:35:44.540"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:44.553" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:44.553" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:44.540" endtime="20210730 15:35:44.553"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:44.553" endtime="20210730 15:35:44.553"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:44.553" endtime="20210730 15:35:44.553"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:44.540" endtime="20210730 15:35:44.554"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:44.540" endtime="20210730 15:35:44.554"/>
</for>
<status status="FAIL" starttime="20210730 15:35:44.538" endtime="20210730 15:35:44.554"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:44.538" endtime="20210730 15:35:44.554"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/abc!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:44.555" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:35:44.555" endtime="20210730 15:35:44.555"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:44.556" level="INFO">${payload} = {'username': '#¤/abc!'}</msg>
<status status="PASS" starttime="20210730 15:35:44.556" endtime="20210730 15:35:44.556"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:44.562" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:44.562" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:44.556" endtime="20210730 15:35:44.562"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:44.562" endtime="20210730 15:35:44.562"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:44.562" endtime="20210730 15:35:44.562"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:44.556" endtime="20210730 15:35:44.562"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:44.556" endtime="20210730 15:35:44.563"/>
</for>
<status status="FAIL" starttime="20210730 15:35:44.554" endtime="20210730 15:35:44.563"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:44.554" endtime="20210730 15:35:44.563"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/abc!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:44.564" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:35:44.564" endtime="20210730 15:35:44.565"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:44.565" level="INFO">${payload} = {'username': '#¤/abc!'}</msg>
<status status="PASS" starttime="20210730 15:35:44.565" endtime="20210730 15:35:44.565"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:44.571" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:44.571" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:44.566" endtime="20210730 15:35:44.572"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:44.572" endtime="20210730 15:35:44.572"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:44.572" endtime="20210730 15:35:44.572"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:44.566" endtime="20210730 15:35:44.572"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:44.565" endtime="20210730 15:35:44.572"/>
</for>
<status status="FAIL" starttime="20210730 15:35:44.563" endtime="20210730 15:35:44.572"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:44.563" endtime="20210730 15:35:44.572"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:44.538" endtime="20210730 15:35:44.573"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:44.578" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:44.599" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:44.600" level="INFO">${pids} = 4763
4770
4774</msg>
<status status="PASS" starttime="20210730 15:35:44.574" endtime="20210730 15:35:44.600"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:44.602" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:44.601" endtime="20210730 15:35:44.602"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:44.603" level="INFO">${pids} = ['4763', '4770', '4774']</msg>
<status status="PASS" starttime="20210730 15:35:44.602" endtime="20210730 15:35:44.603"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4763</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:44.608" level="INFO">Running command 'kill 4763 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:44.603" endtime="20210730 15:35:44.609"/>
</kw>
<status status="PASS" starttime="20210730 15:35:44.603" endtime="20210730 15:35:44.609"/>
</iter>
<iter>
<var name="${pid}">4770</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:44.615" level="INFO">Running command 'kill 4770 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:44.611" endtime="20210730 15:35:44.615"/>
</kw>
<status status="PASS" starttime="20210730 15:35:44.610" endtime="20210730 15:35:44.615"/>
</iter>
<iter>
<var name="${pid}">4774</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:44.619" level="INFO">Running command 'kill 4774 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:44.616" endtime="20210730 15:35:44.620"/>
</kw>
<status status="PASS" starttime="20210730 15:35:44.615" endtime="20210730 15:35:44.620"/>
</iter>
<status status="PASS" starttime="20210730 15:35:44.603" endtime="20210730 15:35:44.620"/>
</for>
<status status="PASS" starttime="20210730 15:35:44.602" endtime="20210730 15:35:44.620"/>
</branch>
<status status="PASS" starttime="20210730 15:35:44.602" endtime="20210730 15:35:44.620"/>
</if>
<status status="PASS" starttime="20210730 15:35:44.573" endtime="20210730 15:35:44.620"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤/abc!'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:35:42.958" endtime="20210730 15:35:44.620">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t21" name="With Each Valid Token, Updating Username Of Each System User With #¤/abc!g Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:44.631" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:44.642" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:44.642" level="INFO">${pids} = 4803</msg>
<status status="PASS" starttime="20210730 15:35:44.623" endtime="20210730 15:35:44.643"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:44.644" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:44.643" endtime="20210730 15:35:44.644"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:44.645" level="INFO">${pids} = ['4803']</msg>
<status status="PASS" starttime="20210730 15:35:44.645" endtime="20210730 15:35:44.645"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4803</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:44.659" level="INFO">Running command 'kill 4803 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:44.646" endtime="20210730 15:35:44.659"/>
</kw>
<status status="PASS" starttime="20210730 15:35:44.646" endtime="20210730 15:35:44.659"/>
</iter>
<status status="PASS" starttime="20210730 15:35:44.645" endtime="20210730 15:35:44.659"/>
</for>
<status status="PASS" starttime="20210730 15:35:44.644" endtime="20210730 15:35:44.660"/>
</branch>
<status status="PASS" starttime="20210730 15:35:44.644" endtime="20210730 15:35:44.660"/>
</if>
<status status="PASS" starttime="20210730 15:35:44.622" endtime="20210730 15:35:44.660"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:44.662" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:44.661" endtime="20210730 15:35:44.662"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:44.663" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:44.662" endtime="20210730 15:35:44.663"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:44.663" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:44.663" endtime="20210730 15:35:44.663"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:44.664" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:44.663" endtime="20210730 15:35:44.664"/>
</kw>
<msg timestamp="20210730 15:35:44.664" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:44.662" endtime="20210730 15:35:44.664"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:44.669" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:44.664" endtime="20210730 15:35:44.671"/>
</kw>
<status status="PASS" starttime="20210730 15:35:44.660" endtime="20210730 15:35:44.671"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:35:44.673" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:35:44.672" endtime="20210730 15:35:44.679"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:35:46.194" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:35:44.679" endtime="20210730 15:35:46.194"/>
</kw>
<status status="PASS" starttime="20210730 15:35:44.672" endtime="20210730 15:35:46.194"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:46.195" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:46.195" endtime="20210730 15:35:46.195"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:46.196" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:46.195" endtime="20210730 15:35:46.196"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:46.196" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:46.196" endtime="20210730 15:35:46.196"/>
</kw>
<msg timestamp="20210730 15:35:46.196" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:46.195" endtime="20210730 15:35:46.196"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:35:46.197" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:35:46.196" endtime="20210730 15:35:46.197"/>
</kw>
<status status="PASS" starttime="20210730 15:35:46.194" endtime="20210730 15:35:46.197"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:35:46.198" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:35:46.198" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:35:46.198" endtime="20210730 15:35:46.199"/>
</kw>
<status status="PASS" starttime="20210730 15:35:46.197" endtime="20210730 15:35:46.199"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:35:46.200" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:35:46.200" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:35:46.199" endtime="20210730 15:35:46.200"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:35:46.201" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:35:46.201" endtime="20210730 15:35:46.201"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:46.201" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:46.201" endtime="20210730 15:35:46.201"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:46.201" endtime="20210730 15:35:46.202"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:46.202" endtime="20210730 15:35:46.202"/>
</kw>
<status status="PASS" starttime="20210730 15:35:46.201" endtime="20210730 15:35:46.202"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:46.203" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:46.203" endtime="20210730 15:35:46.203"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:46.203" endtime="20210730 15:35:46.204"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:46.204" endtime="20210730 15:35:46.204"/>
</kw>
<status status="PASS" starttime="20210730 15:35:46.203" endtime="20210730 15:35:46.204"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:46.204" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:46.204" endtime="20210730 15:35:46.204"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:46.205" endtime="20210730 15:35:46.205"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:46.205" endtime="20210730 15:35:46.206"/>
</kw>
<status status="PASS" starttime="20210730 15:35:46.204" endtime="20210730 15:35:46.206"/>
</iter>
<status status="PASS" starttime="20210730 15:35:46.201" endtime="20210730 15:35:46.206"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:35:46.206" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:35:46.206" endtime="20210730 15:35:46.206"/>
</kw>
<status status="PASS" starttime="20210730 15:35:46.199" endtime="20210730 15:35:46.207"/>
</kw>
<status status="PASS" starttime="20210730 15:35:44.622" endtime="20210730 15:35:46.207"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/abc!g</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:46.208" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:35:46.207" endtime="20210730 15:35:46.208"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:46.208" level="INFO">${payload} = {'username': '#¤/abc!g'}</msg>
<status status="PASS" starttime="20210730 15:35:46.208" endtime="20210730 15:35:46.208"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:46.220" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:46.220" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:46.209" endtime="20210730 15:35:46.220"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:46.221" endtime="20210730 15:35:46.221"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:46.221" endtime="20210730 15:35:46.221"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:46.208" endtime="20210730 15:35:46.221"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:46.208" endtime="20210730 15:35:46.221"/>
</for>
<status status="FAIL" starttime="20210730 15:35:46.207" endtime="20210730 15:35:46.221"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:46.207" endtime="20210730 15:35:46.221"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/abc!g</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:46.222" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:35:46.222" endtime="20210730 15:35:46.222"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:46.223" level="INFO">${payload} = {'username': '#¤/abc!g'}</msg>
<status status="PASS" starttime="20210730 15:35:46.222" endtime="20210730 15:35:46.223"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:46.227" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:46.227" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:46.223" endtime="20210730 15:35:46.227"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:46.228" endtime="20210730 15:35:46.228"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:46.228" endtime="20210730 15:35:46.228"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:46.223" endtime="20210730 15:35:46.228"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:46.223" endtime="20210730 15:35:46.228"/>
</for>
<status status="FAIL" starttime="20210730 15:35:46.221" endtime="20210730 15:35:46.228"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:46.221" endtime="20210730 15:35:46.228"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/abc!g</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:46.229" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:35:46.229" endtime="20210730 15:35:46.229"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:46.230" level="INFO">${payload} = {'username': '#¤/abc!g'}</msg>
<status status="PASS" starttime="20210730 15:35:46.229" endtime="20210730 15:35:46.230"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:46.234" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:46.234" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:46.230" endtime="20210730 15:35:46.234"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:46.234" endtime="20210730 15:35:46.234"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:46.234" endtime="20210730 15:35:46.234"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:46.230" endtime="20210730 15:35:46.234"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:46.230" endtime="20210730 15:35:46.234"/>
</for>
<status status="FAIL" starttime="20210730 15:35:46.228" endtime="20210730 15:35:46.235"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:46.228" endtime="20210730 15:35:46.235"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:46.207" endtime="20210730 15:35:46.235"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:46.240" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:46.250" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:46.250" level="INFO">${pids} = 4826
4833
4837</msg>
<status status="PASS" starttime="20210730 15:35:46.237" endtime="20210730 15:35:46.250"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:46.251" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:46.250" endtime="20210730 15:35:46.251"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:46.252" level="INFO">${pids} = ['4826', '4833', '4837']</msg>
<status status="PASS" starttime="20210730 15:35:46.251" endtime="20210730 15:35:46.252"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4826</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:46.255" level="INFO">Running command 'kill 4826 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:46.252" endtime="20210730 15:35:46.255"/>
</kw>
<status status="PASS" starttime="20210730 15:35:46.252" endtime="20210730 15:35:46.255"/>
</iter>
<iter>
<var name="${pid}">4833</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:46.258" level="INFO">Running command 'kill 4833 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:46.256" endtime="20210730 15:35:46.259"/>
</kw>
<status status="PASS" starttime="20210730 15:35:46.255" endtime="20210730 15:35:46.259"/>
</iter>
<iter>
<var name="${pid}">4837</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:46.262" level="INFO">Running command 'kill 4837 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:46.259" endtime="20210730 15:35:46.263"/>
</kw>
<status status="PASS" starttime="20210730 15:35:46.259" endtime="20210730 15:35:46.263"/>
</iter>
<status status="PASS" starttime="20210730 15:35:46.252" endtime="20210730 15:35:46.263"/>
</for>
<status status="PASS" starttime="20210730 15:35:46.251" endtime="20210730 15:35:46.263"/>
</branch>
<status status="PASS" starttime="20210730 15:35:46.251" endtime="20210730 15:35:46.263"/>
</if>
<status status="PASS" starttime="20210730 15:35:46.236" endtime="20210730 15:35:46.263"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤/abc!g'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:35:44.621" endtime="20210730 15:35:46.263">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t22" name="With Each Valid Token, Updating Username Of Each System User With #¤/abc!g()=&amp;%¤fghjklQWERTY Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:46.269" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:46.280" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:46.280" level="INFO">${pids} = 4866</msg>
<status status="PASS" starttime="20210730 15:35:46.265" endtime="20210730 15:35:46.280"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:46.281" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:46.280" endtime="20210730 15:35:46.281"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:46.282" level="INFO">${pids} = ['4866']</msg>
<status status="PASS" starttime="20210730 15:35:46.281" endtime="20210730 15:35:46.282"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4866</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:46.286" level="INFO">Running command 'kill 4866 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:46.282" endtime="20210730 15:35:46.286"/>
</kw>
<status status="PASS" starttime="20210730 15:35:46.282" endtime="20210730 15:35:46.287"/>
</iter>
<status status="PASS" starttime="20210730 15:35:46.282" endtime="20210730 15:35:46.287"/>
</for>
<status status="PASS" starttime="20210730 15:35:46.281" endtime="20210730 15:35:46.287"/>
</branch>
<status status="PASS" starttime="20210730 15:35:46.281" endtime="20210730 15:35:46.287"/>
</if>
<status status="PASS" starttime="20210730 15:35:46.265" endtime="20210730 15:35:46.287"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:46.288" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:46.288" endtime="20210730 15:35:46.288"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:46.289" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:46.289" endtime="20210730 15:35:46.289"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:46.289" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:46.289" endtime="20210730 15:35:46.289"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:46.290" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:46.289" endtime="20210730 15:35:46.290"/>
</kw>
<msg timestamp="20210730 15:35:46.290" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:46.288" endtime="20210730 15:35:46.290"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:46.294" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:46.290" endtime="20210730 15:35:46.296"/>
</kw>
<status status="PASS" starttime="20210730 15:35:46.287" endtime="20210730 15:35:46.296"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:35:46.300" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:35:46.299" endtime="20210730 15:35:46.305"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:35:47.807" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:35:46.305" endtime="20210730 15:35:47.807"/>
</kw>
<status status="PASS" starttime="20210730 15:35:46.296" endtime="20210730 15:35:47.808"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:47.809" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:47.809" endtime="20210730 15:35:47.809"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:47.810" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:47.809" endtime="20210730 15:35:47.810"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:47.811" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:47.810" endtime="20210730 15:35:47.811"/>
</kw>
<msg timestamp="20210730 15:35:47.811" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:47.808" endtime="20210730 15:35:47.811"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:35:47.811" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:35:47.811" endtime="20210730 15:35:47.812"/>
</kw>
<status status="PASS" starttime="20210730 15:35:47.808" endtime="20210730 15:35:47.812"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:35:47.812" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:35:47.812" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:35:47.812" endtime="20210730 15:35:47.813"/>
</kw>
<status status="PASS" starttime="20210730 15:35:47.812" endtime="20210730 15:35:47.813"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:35:47.813" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:35:47.814" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:35:47.813" endtime="20210730 15:35:47.814"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:35:47.814" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:35:47.814" endtime="20210730 15:35:47.814"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:47.815" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:47.814" endtime="20210730 15:35:47.815"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:47.815" endtime="20210730 15:35:47.815"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:47.815" endtime="20210730 15:35:47.816"/>
</kw>
<status status="PASS" starttime="20210730 15:35:47.814" endtime="20210730 15:35:47.816"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:47.816" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:47.816" endtime="20210730 15:35:47.816"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:47.816" endtime="20210730 15:35:47.817"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:47.817" endtime="20210730 15:35:47.817"/>
</kw>
<status status="PASS" starttime="20210730 15:35:47.816" endtime="20210730 15:35:47.817"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:47.818" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:47.818" endtime="20210730 15:35:47.818"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:47.818" endtime="20210730 15:35:47.819"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:47.819" endtime="20210730 15:35:47.819"/>
</kw>
<status status="PASS" starttime="20210730 15:35:47.818" endtime="20210730 15:35:47.819"/>
</iter>
<status status="PASS" starttime="20210730 15:35:47.814" endtime="20210730 15:35:47.819"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:35:47.820" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:35:47.819" endtime="20210730 15:35:47.820"/>
</kw>
<status status="PASS" starttime="20210730 15:35:47.813" endtime="20210730 15:35:47.820"/>
</kw>
<status status="PASS" starttime="20210730 15:35:46.265" endtime="20210730 15:35:47.820"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/abc!g()=&amp;%¤fghjklQWERTY</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:47.821" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:35:47.821" endtime="20210730 15:35:47.821"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:47.822" level="INFO">${payload} = {'username': '#¤/abc!g()=&amp;%¤fghjklQWERTY'}</msg>
<status status="PASS" starttime="20210730 15:35:47.821" endtime="20210730 15:35:47.822"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:47.831" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:47.832" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:47.822" endtime="20210730 15:35:47.832"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:47.832" endtime="20210730 15:35:47.832"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:47.832" endtime="20210730 15:35:47.832"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:47.822" endtime="20210730 15:35:47.832"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:47.822" endtime="20210730 15:35:47.832"/>
</for>
<status status="FAIL" starttime="20210730 15:35:47.820" endtime="20210730 15:35:47.832"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:47.820" endtime="20210730 15:35:47.832"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/abc!g()=&amp;%¤fghjklQWERTY</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:47.833" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:35:47.833" endtime="20210730 15:35:47.833"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:47.834" level="INFO">${payload} = {'username': '#¤/abc!g()=&amp;%¤fghjklQWERTY'}</msg>
<status status="PASS" starttime="20210730 15:35:47.833" endtime="20210730 15:35:47.834"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:47.838" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:47.838" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:47.834" endtime="20210730 15:35:47.838"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:47.838" endtime="20210730 15:35:47.839"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:47.839" endtime="20210730 15:35:47.839"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:47.834" endtime="20210730 15:35:47.839"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:47.834" endtime="20210730 15:35:47.839"/>
</for>
<status status="FAIL" starttime="20210730 15:35:47.832" endtime="20210730 15:35:47.839"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:47.832" endtime="20210730 15:35:47.839"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/abc!g()=&amp;%¤fghjklQWERTY</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:47.840" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:35:47.840" endtime="20210730 15:35:47.840"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:47.840" level="INFO">${payload} = {'username': '#¤/abc!g()=&amp;%¤fghjklQWERTY'}</msg>
<status status="PASS" starttime="20210730 15:35:47.840" endtime="20210730 15:35:47.840"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:47.845" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:47.845" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:47.841" endtime="20210730 15:35:47.845"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:47.845" endtime="20210730 15:35:47.846"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:47.846" endtime="20210730 15:35:47.846"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:47.841" endtime="20210730 15:35:47.846"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:47.840" endtime="20210730 15:35:47.846"/>
</for>
<status status="FAIL" starttime="20210730 15:35:47.839" endtime="20210730 15:35:47.846"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:47.839" endtime="20210730 15:35:47.846"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:47.820" endtime="20210730 15:35:47.846"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:47.851" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:47.860" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:47.860" level="INFO">${pids} = 4889
4896
4901</msg>
<status status="PASS" starttime="20210730 15:35:47.847" endtime="20210730 15:35:47.860"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:47.861" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:47.861" endtime="20210730 15:35:47.861"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:47.862" level="INFO">${pids} = ['4889', '4896', '4901']</msg>
<status status="PASS" starttime="20210730 15:35:47.862" endtime="20210730 15:35:47.862"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4889</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:47.868" level="INFO">Running command 'kill 4889 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:47.862" endtime="20210730 15:35:47.869"/>
</kw>
<status status="PASS" starttime="20210730 15:35:47.862" endtime="20210730 15:35:47.869"/>
</iter>
<iter>
<var name="${pid}">4896</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:47.873" level="INFO">Running command 'kill 4896 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:47.869" endtime="20210730 15:35:47.875"/>
</kw>
<status status="PASS" starttime="20210730 15:35:47.869" endtime="20210730 15:35:47.875"/>
</iter>
<iter>
<var name="${pid}">4901</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:47.882" level="INFO">Running command 'kill 4901 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:47.876" endtime="20210730 15:35:47.883"/>
</kw>
<status status="PASS" starttime="20210730 15:35:47.875" endtime="20210730 15:35:47.883"/>
</iter>
<status status="PASS" starttime="20210730 15:35:47.862" endtime="20210730 15:35:47.883"/>
</for>
<status status="PASS" starttime="20210730 15:35:47.862" endtime="20210730 15:35:47.883"/>
</branch>
<status status="PASS" starttime="20210730 15:35:47.861" endtime="20210730 15:35:47.883"/>
</if>
<status status="PASS" starttime="20210730 15:35:47.847" endtime="20210730 15:35:47.883"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤/abc!g()=&amp;%¤fghjklQWERTY'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:35:46.264" endtime="20210730 15:35:47.883">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t23" name="With Each Valid Token, Updating Username Of Each System User With !# &amp;/¤% Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:47.888" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:47.898" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:47.898" level="INFO">${pids} = 4930</msg>
<status status="PASS" starttime="20210730 15:35:47.885" endtime="20210730 15:35:47.898"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:47.899" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:47.899" endtime="20210730 15:35:47.899"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:47.900" level="INFO">${pids} = ['4930']</msg>
<status status="PASS" starttime="20210730 15:35:47.900" endtime="20210730 15:35:47.900"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4930</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:47.903" level="INFO">Running command 'kill 4930 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:47.900" endtime="20210730 15:35:47.904"/>
</kw>
<status status="PASS" starttime="20210730 15:35:47.900" endtime="20210730 15:35:47.904"/>
</iter>
<status status="PASS" starttime="20210730 15:35:47.900" endtime="20210730 15:35:47.904"/>
</for>
<status status="PASS" starttime="20210730 15:35:47.899" endtime="20210730 15:35:47.904"/>
</branch>
<status status="PASS" starttime="20210730 15:35:47.899" endtime="20210730 15:35:47.904"/>
</if>
<status status="PASS" starttime="20210730 15:35:47.885" endtime="20210730 15:35:47.904"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:47.905" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:47.905" endtime="20210730 15:35:47.905"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:47.906" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:47.906" endtime="20210730 15:35:47.906"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:47.906" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:47.906" endtime="20210730 15:35:47.906"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:47.907" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:47.907" endtime="20210730 15:35:47.907"/>
</kw>
<msg timestamp="20210730 15:35:47.907" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:47.905" endtime="20210730 15:35:47.907"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:47.913" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:47.907" endtime="20210730 15:35:47.914"/>
</kw>
<status status="PASS" starttime="20210730 15:35:47.904" endtime="20210730 15:35:47.914"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:35:47.916" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:35:47.915" endtime="20210730 15:35:47.920"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:35:49.429" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:35:47.920" endtime="20210730 15:35:49.430"/>
</kw>
<status status="PASS" starttime="20210730 15:35:47.915" endtime="20210730 15:35:49.431"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:49.434" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:49.434" endtime="20210730 15:35:49.434"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:49.434" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:49.434" endtime="20210730 15:35:49.434"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:49.435" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:49.434" endtime="20210730 15:35:49.435"/>
</kw>
<msg timestamp="20210730 15:35:49.435" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:49.433" endtime="20210730 15:35:49.435"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:35:49.435" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:35:49.435" endtime="20210730 15:35:49.436"/>
</kw>
<status status="PASS" starttime="20210730 15:35:49.432" endtime="20210730 15:35:49.436"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:35:49.436" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:35:49.436" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:35:49.436" endtime="20210730 15:35:49.437"/>
</kw>
<status status="PASS" starttime="20210730 15:35:49.436" endtime="20210730 15:35:49.437"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:35:49.438" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:35:49.438" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:35:49.437" endtime="20210730 15:35:49.438"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:35:49.438" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:35:49.438" endtime="20210730 15:35:49.438"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:49.439" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:49.438" endtime="20210730 15:35:49.439"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:49.439" endtime="20210730 15:35:49.440"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:49.440" endtime="20210730 15:35:49.440"/>
</kw>
<status status="PASS" starttime="20210730 15:35:49.438" endtime="20210730 15:35:49.440"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:49.440" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:49.440" endtime="20210730 15:35:49.440"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:49.440" endtime="20210730 15:35:49.441"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:49.441" endtime="20210730 15:35:49.441"/>
</kw>
<status status="PASS" starttime="20210730 15:35:49.440" endtime="20210730 15:35:49.441"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:49.442" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:49.441" endtime="20210730 15:35:49.442"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:49.442" endtime="20210730 15:35:49.443"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:49.443" endtime="20210730 15:35:49.443"/>
</kw>
<status status="PASS" starttime="20210730 15:35:49.441" endtime="20210730 15:35:49.443"/>
</iter>
<status status="PASS" starttime="20210730 15:35:49.438" endtime="20210730 15:35:49.443"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:35:49.444" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:35:49.443" endtime="20210730 15:35:49.444"/>
</kw>
<status status="PASS" starttime="20210730 15:35:49.437" endtime="20210730 15:35:49.444"/>
</kw>
<status status="PASS" starttime="20210730 15:35:47.885" endtime="20210730 15:35:49.444"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!# &amp;/¤%</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:49.446" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:35:49.445" endtime="20210730 15:35:49.446"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:49.446" level="INFO">${payload} = {'username': '!# &amp;/¤%'}</msg>
<status status="PASS" starttime="20210730 15:35:49.446" endtime="20210730 15:35:49.446"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:49.456" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:49.456" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:49.446" endtime="20210730 15:35:49.456"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:49.456" endtime="20210730 15:35:49.456"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:49.456" endtime="20210730 15:35:49.456"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:49.446" endtime="20210730 15:35:49.456"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:49.446" endtime="20210730 15:35:49.456"/>
</for>
<status status="FAIL" starttime="20210730 15:35:49.445" endtime="20210730 15:35:49.457"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:49.445" endtime="20210730 15:35:49.457"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!# &amp;/¤%</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:49.458" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:35:49.458" endtime="20210730 15:35:49.458"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:49.459" level="INFO">${payload} = {'username': '!# &amp;/¤%'}</msg>
<status status="PASS" starttime="20210730 15:35:49.458" endtime="20210730 15:35:49.459"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:49.463" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:49.463" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:49.459" endtime="20210730 15:35:49.463"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:49.463" endtime="20210730 15:35:49.464"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:49.464" endtime="20210730 15:35:49.464"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:49.459" endtime="20210730 15:35:49.464"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:49.459" endtime="20210730 15:35:49.464"/>
</for>
<status status="FAIL" starttime="20210730 15:35:49.457" endtime="20210730 15:35:49.464"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:49.457" endtime="20210730 15:35:49.464"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!# &amp;/¤%</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:49.465" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:35:49.465" endtime="20210730 15:35:49.465"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:49.466" level="INFO">${payload} = {'username': '!# &amp;/¤%'}</msg>
<status status="PASS" starttime="20210730 15:35:49.465" endtime="20210730 15:35:49.466"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:49.470" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:49.470" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:49.466" endtime="20210730 15:35:49.470"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:49.470" endtime="20210730 15:35:49.471"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:49.471" endtime="20210730 15:35:49.471"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:49.466" endtime="20210730 15:35:49.471"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:49.466" endtime="20210730 15:35:49.471"/>
</for>
<status status="FAIL" starttime="20210730 15:35:49.464" endtime="20210730 15:35:49.471"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:49.464" endtime="20210730 15:35:49.471"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:49.444" endtime="20210730 15:35:49.471"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:49.479" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:49.488" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:49.488" level="INFO">${pids} = 4953
4960
4964</msg>
<status status="PASS" starttime="20210730 15:35:49.472" endtime="20210730 15:35:49.488"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:49.489" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:49.488" endtime="20210730 15:35:49.489"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:49.490" level="INFO">${pids} = ['4953', '4960', '4964']</msg>
<status status="PASS" starttime="20210730 15:35:49.489" endtime="20210730 15:35:49.490"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4953</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:49.493" level="INFO">Running command 'kill 4953 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:49.490" endtime="20210730 15:35:49.494"/>
</kw>
<status status="PASS" starttime="20210730 15:35:49.490" endtime="20210730 15:35:49.494"/>
</iter>
<iter>
<var name="${pid}">4960</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:49.497" level="INFO">Running command 'kill 4960 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:49.494" endtime="20210730 15:35:49.498"/>
</kw>
<status status="PASS" starttime="20210730 15:35:49.494" endtime="20210730 15:35:49.498"/>
</iter>
<iter>
<var name="${pid}">4964</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:49.505" level="INFO">Running command 'kill 4964 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:49.498" endtime="20210730 15:35:49.505"/>
</kw>
<status status="PASS" starttime="20210730 15:35:49.498" endtime="20210730 15:35:49.505"/>
</iter>
<status status="PASS" starttime="20210730 15:35:49.490" endtime="20210730 15:35:49.505"/>
</for>
<status status="PASS" starttime="20210730 15:35:49.489" endtime="20210730 15:35:49.505"/>
</branch>
<status status="PASS" starttime="20210730 15:35:49.489" endtime="20210730 15:35:49.505"/>
</if>
<status status="PASS" starttime="20210730 15:35:49.472" endtime="20210730 15:35:49.506"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '!# &amp;/¤%'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:35:47.884" endtime="20210730 15:35:49.507">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t24" name="With Each Valid Token, Updating Username Of Each System User With !#%&amp;/¤ = Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:49.513" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:49.522" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:49.522" level="INFO">${pids} = 4993</msg>
<status status="PASS" starttime="20210730 15:35:49.510" endtime="20210730 15:35:49.522"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:49.523" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:49.523" endtime="20210730 15:35:49.523"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:49.524" level="INFO">${pids} = ['4993']</msg>
<status status="PASS" starttime="20210730 15:35:49.524" endtime="20210730 15:35:49.524"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4993</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:49.527" level="INFO">Running command 'kill 4993 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:49.524" endtime="20210730 15:35:49.528"/>
</kw>
<status status="PASS" starttime="20210730 15:35:49.524" endtime="20210730 15:35:49.528"/>
</iter>
<status status="PASS" starttime="20210730 15:35:49.524" endtime="20210730 15:35:49.528"/>
</for>
<status status="PASS" starttime="20210730 15:35:49.523" endtime="20210730 15:35:49.528"/>
</branch>
<status status="PASS" starttime="20210730 15:35:49.523" endtime="20210730 15:35:49.528"/>
</if>
<status status="PASS" starttime="20210730 15:35:49.509" endtime="20210730 15:35:49.528"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:49.530" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:49.529" endtime="20210730 15:35:49.530"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:49.530" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:49.530" endtime="20210730 15:35:49.530"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:49.531" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:49.530" endtime="20210730 15:35:49.531"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:49.531" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:49.531" endtime="20210730 15:35:49.531"/>
</kw>
<msg timestamp="20210730 15:35:49.531" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:49.530" endtime="20210730 15:35:49.531"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:49.537" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:49.532" endtime="20210730 15:35:49.538"/>
</kw>
<status status="PASS" starttime="20210730 15:35:49.529" endtime="20210730 15:35:49.539"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:35:49.540" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:35:49.540" endtime="20210730 15:35:49.577"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:35:51.084" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:35:49.578" endtime="20210730 15:35:51.084"/>
</kw>
<status status="PASS" starttime="20210730 15:35:49.539" endtime="20210730 15:35:51.084"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:51.085" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:51.085" endtime="20210730 15:35:51.085"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:51.086" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:51.085" endtime="20210730 15:35:51.086"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:51.086" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:51.086" endtime="20210730 15:35:51.086"/>
</kw>
<msg timestamp="20210730 15:35:51.086" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:51.085" endtime="20210730 15:35:51.086"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:35:51.087" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:35:51.087" endtime="20210730 15:35:51.087"/>
</kw>
<status status="PASS" starttime="20210730 15:35:51.084" endtime="20210730 15:35:51.087"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:35:51.088" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:35:51.088" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:35:51.088" endtime="20210730 15:35:51.088"/>
</kw>
<status status="PASS" starttime="20210730 15:35:51.088" endtime="20210730 15:35:51.088"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:35:51.089" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:35:51.089" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:35:51.089" endtime="20210730 15:35:51.089"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:35:51.090" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:35:51.089" endtime="20210730 15:35:51.090"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:51.090" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:51.090" endtime="20210730 15:35:51.090"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:51.091" endtime="20210730 15:35:51.091"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:51.091" endtime="20210730 15:35:51.092"/>
</kw>
<status status="PASS" starttime="20210730 15:35:51.090" endtime="20210730 15:35:51.092"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:51.093" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:51.092" endtime="20210730 15:35:51.093"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:51.093" endtime="20210730 15:35:51.094"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:51.095" endtime="20210730 15:35:51.095"/>
</kw>
<status status="PASS" starttime="20210730 15:35:51.092" endtime="20210730 15:35:51.095"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:51.096" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:51.095" endtime="20210730 15:35:51.096"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:51.096" endtime="20210730 15:35:51.098"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:51.098" endtime="20210730 15:35:51.098"/>
</kw>
<status status="PASS" starttime="20210730 15:35:51.095" endtime="20210730 15:35:51.098"/>
</iter>
<status status="PASS" starttime="20210730 15:35:51.090" endtime="20210730 15:35:51.098"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:35:51.099" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:35:51.099" endtime="20210730 15:35:51.099"/>
</kw>
<status status="PASS" starttime="20210730 15:35:51.088" endtime="20210730 15:35:51.100"/>
</kw>
<status status="PASS" starttime="20210730 15:35:49.509" endtime="20210730 15:35:51.100"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤ =</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:51.102" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:35:51.102" endtime="20210730 15:35:51.102"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:51.103" level="INFO">${payload} = {'username': '!#%&amp;/¤ ='}</msg>
<status status="PASS" starttime="20210730 15:35:51.102" endtime="20210730 15:35:51.103"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:51.116" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:51.117" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:51.104" endtime="20210730 15:35:51.117"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:51.117" endtime="20210730 15:35:51.117"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:51.117" endtime="20210730 15:35:51.117"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:51.103" endtime="20210730 15:35:51.117"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:51.103" endtime="20210730 15:35:51.117"/>
</for>
<status status="FAIL" starttime="20210730 15:35:51.100" endtime="20210730 15:35:51.118"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:51.100" endtime="20210730 15:35:51.118"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤ =</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:51.119" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:35:51.118" endtime="20210730 15:35:51.119"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:51.120" level="INFO">${payload} = {'username': '!#%&amp;/¤ ='}</msg>
<status status="PASS" starttime="20210730 15:35:51.119" endtime="20210730 15:35:51.120"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:51.124" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:51.125" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:51.120" endtime="20210730 15:35:51.125"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:51.125" endtime="20210730 15:35:51.125"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:51.125" endtime="20210730 15:35:51.125"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:51.120" endtime="20210730 15:35:51.125"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:51.120" endtime="20210730 15:35:51.125"/>
</for>
<status status="FAIL" starttime="20210730 15:35:51.118" endtime="20210730 15:35:51.126"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:51.118" endtime="20210730 15:35:51.126"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤ =</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:51.127" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:35:51.127" endtime="20210730 15:35:51.127"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:51.128" level="INFO">${payload} = {'username': '!#%&amp;/¤ ='}</msg>
<status status="PASS" starttime="20210730 15:35:51.127" endtime="20210730 15:35:51.128"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:51.133" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:51.133" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:51.128" endtime="20210730 15:35:51.133"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:51.134" endtime="20210730 15:35:51.134"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:51.134" endtime="20210730 15:35:51.134"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:51.128" endtime="20210730 15:35:51.134"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:51.128" endtime="20210730 15:35:51.134"/>
</for>
<status status="FAIL" starttime="20210730 15:35:51.126" endtime="20210730 15:35:51.134"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:51.126" endtime="20210730 15:35:51.134"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:51.100" endtime="20210730 15:35:51.134"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:51.139" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:51.149" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:51.149" level="INFO">${pids} = 5016
5023
5027</msg>
<status status="PASS" starttime="20210730 15:35:51.135" endtime="20210730 15:35:51.149"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:51.150" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:51.149" endtime="20210730 15:35:51.150"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:51.151" level="INFO">${pids} = ['5016', '5023', '5027']</msg>
<status status="PASS" starttime="20210730 15:35:51.150" endtime="20210730 15:35:51.151"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5016</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:51.154" level="INFO">Running command 'kill 5016 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:51.151" endtime="20210730 15:35:51.154"/>
</kw>
<status status="PASS" starttime="20210730 15:35:51.151" endtime="20210730 15:35:51.154"/>
</iter>
<iter>
<var name="${pid}">5023</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:51.158" level="INFO">Running command 'kill 5023 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:51.155" endtime="20210730 15:35:51.158"/>
</kw>
<status status="PASS" starttime="20210730 15:35:51.155" endtime="20210730 15:35:51.158"/>
</iter>
<iter>
<var name="${pid}">5027</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:51.163" level="INFO">Running command 'kill 5027 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:51.159" endtime="20210730 15:35:51.163"/>
</kw>
<status status="PASS" starttime="20210730 15:35:51.158" endtime="20210730 15:35:51.163"/>
</iter>
<status status="PASS" starttime="20210730 15:35:51.151" endtime="20210730 15:35:51.163"/>
</for>
<status status="PASS" starttime="20210730 15:35:51.150" endtime="20210730 15:35:51.163"/>
</branch>
<status status="PASS" starttime="20210730 15:35:51.150" endtime="20210730 15:35:51.164"/>
</if>
<status status="PASS" starttime="20210730 15:35:51.135" endtime="20210730 15:35:51.164"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '!#%&amp;/¤ ='
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:35:49.508" endtime="20210730 15:35:51.164">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t25" name="With Each Valid Token, Updating Username Of Each System User With !#%&amp;/¤%= ()=? Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:51.169" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:51.179" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:51.180" level="INFO">${pids} = 5056</msg>
<status status="PASS" starttime="20210730 15:35:51.166" endtime="20210730 15:35:51.180"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:51.181" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:51.180" endtime="20210730 15:35:51.181"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:51.181" level="INFO">${pids} = ['5056']</msg>
<status status="PASS" starttime="20210730 15:35:51.181" endtime="20210730 15:35:51.181"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5056</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:51.185" level="INFO">Running command 'kill 5056 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:51.182" endtime="20210730 15:35:51.185"/>
</kw>
<status status="PASS" starttime="20210730 15:35:51.182" endtime="20210730 15:35:51.185"/>
</iter>
<status status="PASS" starttime="20210730 15:35:51.181" endtime="20210730 15:35:51.185"/>
</for>
<status status="PASS" starttime="20210730 15:35:51.181" endtime="20210730 15:35:51.186"/>
</branch>
<status status="PASS" starttime="20210730 15:35:51.181" endtime="20210730 15:35:51.186"/>
</if>
<status status="PASS" starttime="20210730 15:35:51.166" endtime="20210730 15:35:51.186"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:51.187" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:51.187" endtime="20210730 15:35:51.187"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:51.188" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:51.187" endtime="20210730 15:35:51.188"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:51.188" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:51.188" endtime="20210730 15:35:51.188"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:51.189" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:51.188" endtime="20210730 15:35:51.189"/>
</kw>
<msg timestamp="20210730 15:35:51.189" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:51.187" endtime="20210730 15:35:51.189"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:51.197" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:51.189" endtime="20210730 15:35:51.199"/>
</kw>
<status status="PASS" starttime="20210730 15:35:51.186" endtime="20210730 15:35:51.199"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:35:51.200" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:35:51.200" endtime="20210730 15:35:51.204"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:35:52.713" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:35:51.205" endtime="20210730 15:35:52.713"/>
</kw>
<status status="PASS" starttime="20210730 15:35:51.199" endtime="20210730 15:35:52.713"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:52.714" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:52.714" endtime="20210730 15:35:52.714"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:52.715" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:52.714" endtime="20210730 15:35:52.715"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:52.715" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:52.715" endtime="20210730 15:35:52.715"/>
</kw>
<msg timestamp="20210730 15:35:52.715" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:52.714" endtime="20210730 15:35:52.715"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:35:52.716" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:35:52.715" endtime="20210730 15:35:52.716"/>
</kw>
<status status="PASS" starttime="20210730 15:35:52.713" endtime="20210730 15:35:52.716"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:35:52.717" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:35:52.717" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:35:52.716" endtime="20210730 15:35:52.717"/>
</kw>
<status status="PASS" starttime="20210730 15:35:52.716" endtime="20210730 15:35:52.717"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:35:52.718" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:35:52.718" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:35:52.717" endtime="20210730 15:35:52.718"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:35:52.718" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:35:52.718" endtime="20210730 15:35:52.718"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:52.719" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:52.718" endtime="20210730 15:35:52.719"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:52.719" endtime="20210730 15:35:52.720"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:52.720" endtime="20210730 15:35:52.720"/>
</kw>
<status status="PASS" starttime="20210730 15:35:52.718" endtime="20210730 15:35:52.720"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:52.720" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:52.720" endtime="20210730 15:35:52.720"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:52.720" endtime="20210730 15:35:52.721"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:52.721" endtime="20210730 15:35:52.722"/>
</kw>
<status status="PASS" starttime="20210730 15:35:52.720" endtime="20210730 15:35:52.722"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:52.722" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:52.722" endtime="20210730 15:35:52.722"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:52.722" endtime="20210730 15:35:52.723"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:52.723" endtime="20210730 15:35:52.723"/>
</kw>
<status status="PASS" starttime="20210730 15:35:52.722" endtime="20210730 15:35:52.723"/>
</iter>
<status status="PASS" starttime="20210730 15:35:52.718" endtime="20210730 15:35:52.723"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:35:52.724" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:35:52.723" endtime="20210730 15:35:52.724"/>
</kw>
<status status="PASS" starttime="20210730 15:35:52.717" endtime="20210730 15:35:52.724"/>
</kw>
<status status="PASS" starttime="20210730 15:35:51.165" endtime="20210730 15:35:52.724"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤%= ()=?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:52.725" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:35:52.725" endtime="20210730 15:35:52.725"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:52.726" level="INFO">${payload} = {'username': '!#%&amp;/¤%= ()=?'}</msg>
<status status="PASS" starttime="20210730 15:35:52.725" endtime="20210730 15:35:52.726"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:52.735" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:52.735" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:52.726" endtime="20210730 15:35:52.736"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:52.736" endtime="20210730 15:35:52.736"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:52.736" endtime="20210730 15:35:52.736"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:52.726" endtime="20210730 15:35:52.736"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:52.726" endtime="20210730 15:35:52.736"/>
</for>
<status status="FAIL" starttime="20210730 15:35:52.724" endtime="20210730 15:35:52.736"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:52.724" endtime="20210730 15:35:52.736"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤%= ()=?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:52.738" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:35:52.737" endtime="20210730 15:35:52.738"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:52.738" level="INFO">${payload} = {'username': '!#%&amp;/¤%= ()=?'}</msg>
<status status="PASS" starttime="20210730 15:35:52.738" endtime="20210730 15:35:52.738"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:52.743" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:52.743" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:52.738" endtime="20210730 15:35:52.743"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:52.743" endtime="20210730 15:35:52.743"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:52.743" endtime="20210730 15:35:52.743"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:52.738" endtime="20210730 15:35:52.743"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:52.738" endtime="20210730 15:35:52.743"/>
</for>
<status status="FAIL" starttime="20210730 15:35:52.737" endtime="20210730 15:35:52.744"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:52.737" endtime="20210730 15:35:52.744"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤%= ()=?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:52.745" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:35:52.745" endtime="20210730 15:35:52.745"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:52.746" level="INFO">${payload} = {'username': '!#%&amp;/¤%= ()=?'}</msg>
<status status="PASS" starttime="20210730 15:35:52.745" endtime="20210730 15:35:52.746"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:52.751" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:52.751" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:52.746" endtime="20210730 15:35:52.751"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:52.751" endtime="20210730 15:35:52.751"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:52.752" endtime="20210730 15:35:52.752"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:52.746" endtime="20210730 15:35:52.752"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:52.746" endtime="20210730 15:35:52.752"/>
</for>
<status status="FAIL" starttime="20210730 15:35:52.744" endtime="20210730 15:35:52.753"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:52.744" endtime="20210730 15:35:52.753"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:52.724" endtime="20210730 15:35:52.753"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:52.758" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:52.767" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:52.768" level="INFO">${pids} = 5079
5086
5091</msg>
<status status="PASS" starttime="20210730 15:35:52.755" endtime="20210730 15:35:52.768"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:52.769" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:52.768" endtime="20210730 15:35:52.769"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:52.769" level="INFO">${pids} = ['5079', '5086', '5091']</msg>
<status status="PASS" starttime="20210730 15:35:52.769" endtime="20210730 15:35:52.769"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5079</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:52.773" level="INFO">Running command 'kill 5079 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:52.770" endtime="20210730 15:35:52.773"/>
</kw>
<status status="PASS" starttime="20210730 15:35:52.770" endtime="20210730 15:35:52.774"/>
</iter>
<iter>
<var name="${pid}">5086</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:52.778" level="INFO">Running command 'kill 5086 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:52.774" endtime="20210730 15:35:52.779"/>
</kw>
<status status="PASS" starttime="20210730 15:35:52.774" endtime="20210730 15:35:52.779"/>
</iter>
<iter>
<var name="${pid}">5091</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:52.784" level="INFO">Running command 'kill 5091 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:52.780" endtime="20210730 15:35:52.784"/>
</kw>
<status status="PASS" starttime="20210730 15:35:52.779" endtime="20210730 15:35:52.784"/>
</iter>
<status status="PASS" starttime="20210730 15:35:52.770" endtime="20210730 15:35:52.784"/>
</for>
<status status="PASS" starttime="20210730 15:35:52.769" endtime="20210730 15:35:52.784"/>
</branch>
<status status="PASS" starttime="20210730 15:35:52.769" endtime="20210730 15:35:52.784"/>
</if>
<status status="PASS" starttime="20210730 15:35:52.754" endtime="20210730 15:35:52.785"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '!#%&amp;/¤%= ()=?'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:35:51.165" endtime="20210730 15:35:52.785">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t26" name="With Each Valid Token, Updating Username Of Each System User With 1234 67 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:52.790" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:52.799" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:52.799" level="INFO">${pids} = 5120</msg>
<status status="PASS" starttime="20210730 15:35:52.787" endtime="20210730 15:35:52.799"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:52.800" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:52.800" endtime="20210730 15:35:52.800"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:52.801" level="INFO">${pids} = ['5120']</msg>
<status status="PASS" starttime="20210730 15:35:52.801" endtime="20210730 15:35:52.801"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5120</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:52.804" level="INFO">Running command 'kill 5120 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:52.802" endtime="20210730 15:35:52.805"/>
</kw>
<status status="PASS" starttime="20210730 15:35:52.801" endtime="20210730 15:35:52.805"/>
</iter>
<status status="PASS" starttime="20210730 15:35:52.801" endtime="20210730 15:35:52.805"/>
</for>
<status status="PASS" starttime="20210730 15:35:52.801" endtime="20210730 15:35:52.805"/>
</branch>
<status status="PASS" starttime="20210730 15:35:52.801" endtime="20210730 15:35:52.805"/>
</if>
<status status="PASS" starttime="20210730 15:35:52.787" endtime="20210730 15:35:52.805"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:52.806" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:52.806" endtime="20210730 15:35:52.806"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:52.807" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:52.806" endtime="20210730 15:35:52.807"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:52.807" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:52.807" endtime="20210730 15:35:52.807"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:52.807" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:52.807" endtime="20210730 15:35:52.807"/>
</kw>
<msg timestamp="20210730 15:35:52.808" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:52.806" endtime="20210730 15:35:52.808"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:52.812" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:52.808" endtime="20210730 15:35:52.813"/>
</kw>
<status status="PASS" starttime="20210730 15:35:52.805" endtime="20210730 15:35:52.814"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:35:52.815" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:35:52.814" endtime="20210730 15:35:52.822"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:35:54.323" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:35:52.822" endtime="20210730 15:35:54.323"/>
</kw>
<status status="PASS" starttime="20210730 15:35:52.814" endtime="20210730 15:35:54.323"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:54.325" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:54.324" endtime="20210730 15:35:54.325"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:54.325" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:54.325" endtime="20210730 15:35:54.325"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:54.325" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:54.325" endtime="20210730 15:35:54.326"/>
</kw>
<msg timestamp="20210730 15:35:54.326" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:54.324" endtime="20210730 15:35:54.326"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:35:54.326" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:35:54.326" endtime="20210730 15:35:54.327"/>
</kw>
<status status="PASS" starttime="20210730 15:35:54.324" endtime="20210730 15:35:54.327"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:35:54.327" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:35:54.327" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:35:54.327" endtime="20210730 15:35:54.328"/>
</kw>
<status status="PASS" starttime="20210730 15:35:54.327" endtime="20210730 15:35:54.328"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:35:54.328" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:35:54.329" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:35:54.328" endtime="20210730 15:35:54.329"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:35:54.329" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:35:54.329" endtime="20210730 15:35:54.329"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:54.329" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:54.329" endtime="20210730 15:35:54.329"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:54.330" endtime="20210730 15:35:54.330"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:54.330" endtime="20210730 15:35:54.331"/>
</kw>
<status status="PASS" starttime="20210730 15:35:54.329" endtime="20210730 15:35:54.331"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:54.331" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:54.331" endtime="20210730 15:35:54.331"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:54.331" endtime="20210730 15:35:54.332"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:54.332" endtime="20210730 15:35:54.332"/>
</kw>
<status status="PASS" starttime="20210730 15:35:54.331" endtime="20210730 15:35:54.332"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:54.332" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:54.332" endtime="20210730 15:35:54.332"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:54.333" endtime="20210730 15:35:54.333"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:54.333" endtime="20210730 15:35:54.334"/>
</kw>
<status status="PASS" starttime="20210730 15:35:54.332" endtime="20210730 15:35:54.334"/>
</iter>
<status status="PASS" starttime="20210730 15:35:54.329" endtime="20210730 15:35:54.334"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:35:54.334" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:35:54.334" endtime="20210730 15:35:54.334"/>
</kw>
<status status="PASS" starttime="20210730 15:35:54.328" endtime="20210730 15:35:54.334"/>
</kw>
<status status="PASS" starttime="20210730 15:35:52.786" endtime="20210730 15:35:54.334"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=1234 67</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:54.336" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:35:54.335" endtime="20210730 15:35:54.336"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:54.336" level="INFO">${payload} = {'username': '1234 67'}</msg>
<status status="PASS" starttime="20210730 15:35:54.336" endtime="20210730 15:35:54.336"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:54.348" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:54.348" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:54.336" endtime="20210730 15:35:54.348"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:54.348" endtime="20210730 15:35:54.348"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:54.348" endtime="20210730 15:35:54.348"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:54.336" endtime="20210730 15:35:54.349"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:54.336" endtime="20210730 15:35:54.349"/>
</for>
<status status="FAIL" starttime="20210730 15:35:54.335" endtime="20210730 15:35:54.349"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:54.335" endtime="20210730 15:35:54.349"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=1234 67</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:54.350" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:35:54.350" endtime="20210730 15:35:54.350"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:54.351" level="INFO">${payload} = {'username': '1234 67'}</msg>
<status status="PASS" starttime="20210730 15:35:54.350" endtime="20210730 15:35:54.351"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:54.355" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:54.355" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:54.351" endtime="20210730 15:35:54.355"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:54.355" endtime="20210730 15:35:54.355"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:54.355" endtime="20210730 15:35:54.355"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:54.351" endtime="20210730 15:35:54.355"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:54.351" endtime="20210730 15:35:54.355"/>
</for>
<status status="FAIL" starttime="20210730 15:35:54.349" endtime="20210730 15:35:54.356"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:54.349" endtime="20210730 15:35:54.356"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=1234 67</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:54.357" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:35:54.356" endtime="20210730 15:35:54.357"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:54.357" level="INFO">${payload} = {'username': '1234 67'}</msg>
<status status="PASS" starttime="20210730 15:35:54.357" endtime="20210730 15:35:54.357"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:54.362" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:54.362" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:54.358" endtime="20210730 15:35:54.362"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:54.362" endtime="20210730 15:35:54.362"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:54.363" endtime="20210730 15:35:54.363"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:54.358" endtime="20210730 15:35:54.363"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:54.357" endtime="20210730 15:35:54.363"/>
</for>
<status status="FAIL" starttime="20210730 15:35:54.356" endtime="20210730 15:35:54.363"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:54.356" endtime="20210730 15:35:54.363"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:54.335" endtime="20210730 15:35:54.363"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:54.367" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:54.376" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:54.376" level="INFO">${pids} = 5143
5150
5154</msg>
<status status="PASS" starttime="20210730 15:35:54.364" endtime="20210730 15:35:54.376"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:54.378" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:54.377" endtime="20210730 15:35:54.378"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:54.378" level="INFO">${pids} = ['5143', '5150', '5154']</msg>
<status status="PASS" starttime="20210730 15:35:54.378" endtime="20210730 15:35:54.379"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5143</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:54.382" level="INFO">Running command 'kill 5143 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:54.379" endtime="20210730 15:35:54.382"/>
</kw>
<status status="PASS" starttime="20210730 15:35:54.379" endtime="20210730 15:35:54.382"/>
</iter>
<iter>
<var name="${pid}">5150</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:54.385" level="INFO">Running command 'kill 5150 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:54.383" endtime="20210730 15:35:54.385"/>
</kw>
<status status="PASS" starttime="20210730 15:35:54.382" endtime="20210730 15:35:54.385"/>
</iter>
<iter>
<var name="${pid}">5154</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:54.390" level="INFO">Running command 'kill 5154 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:54.386" endtime="20210730 15:35:54.390"/>
</kw>
<status status="PASS" starttime="20210730 15:35:54.386" endtime="20210730 15:35:54.390"/>
</iter>
<status status="PASS" starttime="20210730 15:35:54.379" endtime="20210730 15:35:54.390"/>
</for>
<status status="PASS" starttime="20210730 15:35:54.378" endtime="20210730 15:35:54.390"/>
</branch>
<status status="PASS" starttime="20210730 15:35:54.378" endtime="20210730 15:35:54.390"/>
</if>
<status status="PASS" starttime="20210730 15:35:54.363" endtime="20210730 15:35:54.390"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '1234 67'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:35:52.786" endtime="20210730 15:35:54.391">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t27" name="With Each Valid Token, Updating Username Of Each System User With 123456 8 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:54.397" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:54.407" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:54.407" level="INFO">${pids} = 5183</msg>
<status status="PASS" starttime="20210730 15:35:54.393" endtime="20210730 15:35:54.407"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:54.408" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:54.408" endtime="20210730 15:35:54.408"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:54.409" level="INFO">${pids} = ['5183']</msg>
<status status="PASS" starttime="20210730 15:35:54.409" endtime="20210730 15:35:54.409"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5183</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:54.414" level="INFO">Running command 'kill 5183 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:54.410" endtime="20210730 15:35:54.414"/>
</kw>
<status status="PASS" starttime="20210730 15:35:54.409" endtime="20210730 15:35:54.414"/>
</iter>
<status status="PASS" starttime="20210730 15:35:54.409" endtime="20210730 15:35:54.415"/>
</for>
<status status="PASS" starttime="20210730 15:35:54.408" endtime="20210730 15:35:54.415"/>
</branch>
<status status="PASS" starttime="20210730 15:35:54.408" endtime="20210730 15:35:54.415"/>
</if>
<status status="PASS" starttime="20210730 15:35:54.392" endtime="20210730 15:35:54.415"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:54.416" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:54.416" endtime="20210730 15:35:54.416"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:54.417" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:54.417" endtime="20210730 15:35:54.417"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:54.417" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:54.417" endtime="20210730 15:35:54.417"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:54.418" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:54.418" endtime="20210730 15:35:54.418"/>
</kw>
<msg timestamp="20210730 15:35:54.418" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:54.416" endtime="20210730 15:35:54.418"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:54.426" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:54.418" endtime="20210730 15:35:54.428"/>
</kw>
<status status="PASS" starttime="20210730 15:35:54.415" endtime="20210730 15:35:54.429"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:35:54.430" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:35:54.429" endtime="20210730 15:35:54.434"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:35:55.937" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:35:54.434" endtime="20210730 15:35:55.937"/>
</kw>
<status status="PASS" starttime="20210730 15:35:54.429" endtime="20210730 15:35:55.937"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:55.938" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:55.938" endtime="20210730 15:35:55.938"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:55.939" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:55.939" endtime="20210730 15:35:55.939"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:55.939" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:55.939" endtime="20210730 15:35:55.939"/>
</kw>
<msg timestamp="20210730 15:35:55.939" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:55.938" endtime="20210730 15:35:55.939"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:35:55.940" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:35:55.939" endtime="20210730 15:35:55.940"/>
</kw>
<status status="PASS" starttime="20210730 15:35:55.937" endtime="20210730 15:35:55.940"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:35:55.941" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:35:55.941" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:35:55.941" endtime="20210730 15:35:55.941"/>
</kw>
<status status="PASS" starttime="20210730 15:35:55.940" endtime="20210730 15:35:55.941"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:35:55.943" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:35:55.943" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:35:55.941" endtime="20210730 15:35:55.943"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:35:55.944" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:35:55.943" endtime="20210730 15:35:55.944"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:55.945" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:55.944" endtime="20210730 15:35:55.945"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:55.945" endtime="20210730 15:35:55.946"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:55.946" endtime="20210730 15:35:55.947"/>
</kw>
<status status="PASS" starttime="20210730 15:35:55.944" endtime="20210730 15:35:55.947"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:55.947" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:55.947" endtime="20210730 15:35:55.947"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:55.947" endtime="20210730 15:35:55.948"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:55.948" endtime="20210730 15:35:55.948"/>
</kw>
<status status="PASS" starttime="20210730 15:35:55.947" endtime="20210730 15:35:55.948"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:55.948" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:55.948" endtime="20210730 15:35:55.948"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:55.949" endtime="20210730 15:35:55.949"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:55.949" endtime="20210730 15:35:55.950"/>
</kw>
<status status="PASS" starttime="20210730 15:35:55.948" endtime="20210730 15:35:55.950"/>
</iter>
<status status="PASS" starttime="20210730 15:35:55.944" endtime="20210730 15:35:55.950"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:35:55.950" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:35:55.950" endtime="20210730 15:35:55.950"/>
</kw>
<status status="PASS" starttime="20210730 15:35:55.941" endtime="20210730 15:35:55.950"/>
</kw>
<status status="PASS" starttime="20210730 15:35:54.392" endtime="20210730 15:35:55.950"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=123456 8</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:55.952" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:35:55.951" endtime="20210730 15:35:55.952"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:55.952" level="INFO">${payload} = {'username': '123456 8'}</msg>
<status status="PASS" starttime="20210730 15:35:55.952" endtime="20210730 15:35:55.952"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:55.961" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:55.961" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:55.952" endtime="20210730 15:35:55.962"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:55.962" endtime="20210730 15:35:55.962"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:55.962" endtime="20210730 15:35:55.962"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:55.952" endtime="20210730 15:35:55.962"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:55.952" endtime="20210730 15:35:55.962"/>
</for>
<status status="FAIL" starttime="20210730 15:35:55.951" endtime="20210730 15:35:55.962"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:55.951" endtime="20210730 15:35:55.962"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=123456 8</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:55.963" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:35:55.963" endtime="20210730 15:35:55.963"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:55.964" level="INFO">${payload} = {'username': '123456 8'}</msg>
<status status="PASS" starttime="20210730 15:35:55.963" endtime="20210730 15:35:55.964"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:55.968" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:55.968" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:55.964" endtime="20210730 15:35:55.968"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:55.968" endtime="20210730 15:35:55.968"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:55.968" endtime="20210730 15:35:55.968"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:55.964" endtime="20210730 15:35:55.968"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:55.964" endtime="20210730 15:35:55.969"/>
</for>
<status status="FAIL" starttime="20210730 15:35:55.962" endtime="20210730 15:35:55.969"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:55.962" endtime="20210730 15:35:55.969"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=123456 8</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:55.970" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:35:55.969" endtime="20210730 15:35:55.970"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:55.970" level="INFO">${payload} = {'username': '123456 8'}</msg>
<status status="PASS" starttime="20210730 15:35:55.970" endtime="20210730 15:35:55.970"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:55.974" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:55.974" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:55.970" endtime="20210730 15:35:55.974"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:55.975" endtime="20210730 15:35:55.975"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:55.975" endtime="20210730 15:35:55.975"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:55.970" endtime="20210730 15:35:55.975"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:55.970" endtime="20210730 15:35:55.975"/>
</for>
<status status="FAIL" starttime="20210730 15:35:55.969" endtime="20210730 15:35:55.975"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:55.969" endtime="20210730 15:35:55.975"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:55.951" endtime="20210730 15:35:55.975"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:55.981" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:55.991" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:55.991" level="INFO">${pids} = 5206
5213
5217</msg>
<status status="PASS" starttime="20210730 15:35:55.977" endtime="20210730 15:35:55.991"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:55.992" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:55.991" endtime="20210730 15:35:55.992"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:55.993" level="INFO">${pids} = ['5206', '5213', '5217']</msg>
<status status="PASS" starttime="20210730 15:35:55.992" endtime="20210730 15:35:55.993"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5206</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:55.997" level="INFO">Running command 'kill 5206 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:55.993" endtime="20210730 15:35:55.998"/>
</kw>
<status status="PASS" starttime="20210730 15:35:55.993" endtime="20210730 15:35:55.998"/>
</iter>
<iter>
<var name="${pid}">5213</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:56.001" level="INFO">Running command 'kill 5213 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:55.998" endtime="20210730 15:35:56.001"/>
</kw>
<status status="PASS" starttime="20210730 15:35:55.998" endtime="20210730 15:35:56.001"/>
</iter>
<iter>
<var name="${pid}">5217</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:56.004" level="INFO">Running command 'kill 5217 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:56.002" endtime="20210730 15:35:56.005"/>
</kw>
<status status="PASS" starttime="20210730 15:35:56.001" endtime="20210730 15:35:56.005"/>
</iter>
<status status="PASS" starttime="20210730 15:35:55.993" endtime="20210730 15:35:56.005"/>
</for>
<status status="PASS" starttime="20210730 15:35:55.992" endtime="20210730 15:35:56.005"/>
</branch>
<status status="PASS" starttime="20210730 15:35:55.992" endtime="20210730 15:35:56.005"/>
</if>
<status status="PASS" starttime="20210730 15:35:55.975" endtime="20210730 15:35:56.005"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '123456 8'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:35:54.391" endtime="20210730 15:35:56.005">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t28" name="With Each Valid Token, Updating Username Of Each System User With 12345678 12345 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:56.013" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:56.023" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:56.023" level="INFO">${pids} = 5246</msg>
<status status="PASS" starttime="20210730 15:35:56.007" endtime="20210730 15:35:56.023"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:56.025" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:56.024" endtime="20210730 15:35:56.025"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:56.025" level="INFO">${pids} = ['5246']</msg>
<status status="PASS" starttime="20210730 15:35:56.025" endtime="20210730 15:35:56.025"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5246</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:56.031" level="INFO">Running command 'kill 5246 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:56.026" endtime="20210730 15:35:56.032"/>
</kw>
<status status="PASS" starttime="20210730 15:35:56.026" endtime="20210730 15:35:56.032"/>
</iter>
<status status="PASS" starttime="20210730 15:35:56.026" endtime="20210730 15:35:56.032"/>
</for>
<status status="PASS" starttime="20210730 15:35:56.025" endtime="20210730 15:35:56.032"/>
</branch>
<status status="PASS" starttime="20210730 15:35:56.025" endtime="20210730 15:35:56.032"/>
</if>
<status status="PASS" starttime="20210730 15:35:56.007" endtime="20210730 15:35:56.032"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:56.033" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:56.033" endtime="20210730 15:35:56.033"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:56.034" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:56.034" endtime="20210730 15:35:56.034"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:56.034" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:56.034" endtime="20210730 15:35:56.034"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:56.035" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:56.034" endtime="20210730 15:35:56.035"/>
</kw>
<msg timestamp="20210730 15:35:56.035" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:56.033" endtime="20210730 15:35:56.035"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:56.046" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:56.035" endtime="20210730 15:35:56.047"/>
</kw>
<status status="PASS" starttime="20210730 15:35:56.032" endtime="20210730 15:35:56.048"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:35:56.049" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:35:56.048" endtime="20210730 15:35:56.053"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:35:57.554" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:35:56.053" endtime="20210730 15:35:57.555"/>
</kw>
<status status="PASS" starttime="20210730 15:35:56.048" endtime="20210730 15:35:57.556"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:57.559" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:57.559" endtime="20210730 15:35:57.559"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:57.559" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:57.559" endtime="20210730 15:35:57.559"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:57.560" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:57.560" endtime="20210730 15:35:57.560"/>
</kw>
<msg timestamp="20210730 15:35:57.560" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:57.559" endtime="20210730 15:35:57.560"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:35:57.561" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:35:57.560" endtime="20210730 15:35:57.561"/>
</kw>
<status status="PASS" starttime="20210730 15:35:57.557" endtime="20210730 15:35:57.561"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:35:57.561" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:35:57.562" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:35:57.561" endtime="20210730 15:35:57.562"/>
</kw>
<status status="PASS" starttime="20210730 15:35:57.561" endtime="20210730 15:35:57.562"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:35:57.562" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:35:57.563" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:35:57.562" endtime="20210730 15:35:57.563"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:35:57.563" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:35:57.563" endtime="20210730 15:35:57.563"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:57.563" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:57.563" endtime="20210730 15:35:57.563"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:57.564" endtime="20210730 15:35:57.564"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:57.564" endtime="20210730 15:35:57.564"/>
</kw>
<status status="PASS" starttime="20210730 15:35:57.563" endtime="20210730 15:35:57.564"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:57.565" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:57.565" endtime="20210730 15:35:57.565"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:57.565" endtime="20210730 15:35:57.566"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:57.566" endtime="20210730 15:35:57.566"/>
</kw>
<status status="PASS" starttime="20210730 15:35:57.565" endtime="20210730 15:35:57.566"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:57.566" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:57.566" endtime="20210730 15:35:57.566"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:57.567" endtime="20210730 15:35:57.567"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:57.567" endtime="20210730 15:35:57.568"/>
</kw>
<status status="PASS" starttime="20210730 15:35:57.566" endtime="20210730 15:35:57.568"/>
</iter>
<status status="PASS" starttime="20210730 15:35:57.563" endtime="20210730 15:35:57.568"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:35:57.568" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:35:57.568" endtime="20210730 15:35:57.568"/>
</kw>
<status status="PASS" starttime="20210730 15:35:57.562" endtime="20210730 15:35:57.568"/>
</kw>
<status status="PASS" starttime="20210730 15:35:56.007" endtime="20210730 15:35:57.568"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=12345678 12345</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:57.569" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:35:57.569" endtime="20210730 15:35:57.570"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:57.570" level="INFO">${payload} = {'username': '12345678 12345'}</msg>
<status status="PASS" starttime="20210730 15:35:57.570" endtime="20210730 15:35:57.570"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:57.581" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:57.581" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:57.570" endtime="20210730 15:35:57.581"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:57.582" endtime="20210730 15:35:57.582"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:57.582" endtime="20210730 15:35:57.582"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:57.570" endtime="20210730 15:35:57.582"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:57.570" endtime="20210730 15:35:57.582"/>
</for>
<status status="FAIL" starttime="20210730 15:35:57.569" endtime="20210730 15:35:57.582"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:57.569" endtime="20210730 15:35:57.582"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=12345678 12345</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:57.583" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:35:57.583" endtime="20210730 15:35:57.583"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:57.583" level="INFO">${payload} = {'username': '12345678 12345'}</msg>
<status status="PASS" starttime="20210730 15:35:57.583" endtime="20210730 15:35:57.583"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:57.587" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:57.588" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:57.584" endtime="20210730 15:35:57.588"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:57.588" endtime="20210730 15:35:57.588"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:57.588" endtime="20210730 15:35:57.588"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:57.584" endtime="20210730 15:35:57.588"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:57.583" endtime="20210730 15:35:57.588"/>
</for>
<status status="FAIL" starttime="20210730 15:35:57.582" endtime="20210730 15:35:57.588"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:57.582" endtime="20210730 15:35:57.588"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=12345678 12345</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:57.589" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:35:57.589" endtime="20210730 15:35:57.589"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:57.590" level="INFO">${payload} = {'username': '12345678 12345'}</msg>
<status status="PASS" starttime="20210730 15:35:57.589" endtime="20210730 15:35:57.590"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:57.594" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:57.594" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:57.590" endtime="20210730 15:35:57.594"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:57.594" endtime="20210730 15:35:57.594"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:57.595" endtime="20210730 15:35:57.595"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:57.590" endtime="20210730 15:35:57.595"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:57.590" endtime="20210730 15:35:57.595"/>
</for>
<status status="FAIL" starttime="20210730 15:35:57.588" endtime="20210730 15:35:57.595"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:57.588" endtime="20210730 15:35:57.595"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:57.568" endtime="20210730 15:35:57.595"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:57.600" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:57.613" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:57.613" level="INFO">${pids} = 5269
5276
5281</msg>
<status status="PASS" starttime="20210730 15:35:57.596" endtime="20210730 15:35:57.613"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:57.614" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:57.613" endtime="20210730 15:35:57.614"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:57.615" level="INFO">${pids} = ['5269', '5276', '5281']</msg>
<status status="PASS" starttime="20210730 15:35:57.614" endtime="20210730 15:35:57.615"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5269</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:57.629" level="INFO">Running command 'kill 5269 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:57.615" endtime="20210730 15:35:57.629"/>
</kw>
<status status="PASS" starttime="20210730 15:35:57.615" endtime="20210730 15:35:57.629"/>
</iter>
<iter>
<var name="${pid}">5276</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:57.639" level="INFO">Running command 'kill 5276 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:57.630" endtime="20210730 15:35:57.639"/>
</kw>
<status status="PASS" starttime="20210730 15:35:57.630" endtime="20210730 15:35:57.639"/>
</iter>
<iter>
<var name="${pid}">5281</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:57.655" level="INFO">Running command 'kill 5281 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:57.640" endtime="20210730 15:35:57.656"/>
</kw>
<status status="PASS" starttime="20210730 15:35:57.640" endtime="20210730 15:35:57.656"/>
</iter>
<status status="PASS" starttime="20210730 15:35:57.615" endtime="20210730 15:35:57.656"/>
</for>
<status status="PASS" starttime="20210730 15:35:57.614" endtime="20210730 15:35:57.656"/>
</branch>
<status status="PASS" starttime="20210730 15:35:57.614" endtime="20210730 15:35:57.656"/>
</if>
<status status="PASS" starttime="20210730 15:35:57.596" endtime="20210730 15:35:57.656"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '12345678 12345'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:35:56.006" endtime="20210730 15:35:57.656">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t29" name="With Each Valid Token, Updating Username Of Each System User With abcd fg Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:57.664" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:57.674" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:57.674" level="INFO">${pids} = 5310</msg>
<status status="PASS" starttime="20210730 15:35:57.659" endtime="20210730 15:35:57.675"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:57.676" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:57.675" endtime="20210730 15:35:57.676"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:57.677" level="INFO">${pids} = ['5310']</msg>
<status status="PASS" starttime="20210730 15:35:57.676" endtime="20210730 15:35:57.677"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5310</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:57.682" level="INFO">Running command 'kill 5310 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:57.679" endtime="20210730 15:35:57.683"/>
</kw>
<status status="PASS" starttime="20210730 15:35:57.679" endtime="20210730 15:35:57.683"/>
</iter>
<status status="PASS" starttime="20210730 15:35:57.677" endtime="20210730 15:35:57.683"/>
</for>
<status status="PASS" starttime="20210730 15:35:57.676" endtime="20210730 15:35:57.683"/>
</branch>
<status status="PASS" starttime="20210730 15:35:57.676" endtime="20210730 15:35:57.683"/>
</if>
<status status="PASS" starttime="20210730 15:35:57.659" endtime="20210730 15:35:57.683"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:57.684" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:57.684" endtime="20210730 15:35:57.684"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:57.685" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:57.685" endtime="20210730 15:35:57.685"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:57.686" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:57.685" endtime="20210730 15:35:57.686"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:57.686" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:57.686" endtime="20210730 15:35:57.686"/>
</kw>
<msg timestamp="20210730 15:35:57.686" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:57.685" endtime="20210730 15:35:57.686"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:57.692" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:57.686" endtime="20210730 15:35:57.693"/>
</kw>
<status status="PASS" starttime="20210730 15:35:57.684" endtime="20210730 15:35:57.693"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:35:57.695" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:35:57.694" endtime="20210730 15:35:57.699"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:35:59.200" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:35:57.700" endtime="20210730 15:35:59.201"/>
</kw>
<status status="PASS" starttime="20210730 15:35:57.694" endtime="20210730 15:35:59.201"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:59.202" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:59.202" endtime="20210730 15:35:59.202"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:59.202" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:59.202" endtime="20210730 15:35:59.202"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:59.203" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:59.202" endtime="20210730 15:35:59.203"/>
</kw>
<msg timestamp="20210730 15:35:59.203" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:59.201" endtime="20210730 15:35:59.203"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:35:59.203" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:35:59.203" endtime="20210730 15:35:59.204"/>
</kw>
<status status="PASS" starttime="20210730 15:35:59.201" endtime="20210730 15:35:59.204"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:35:59.204" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:35:59.204" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:35:59.204" endtime="20210730 15:35:59.204"/>
</kw>
<status status="PASS" starttime="20210730 15:35:59.204" endtime="20210730 15:35:59.205"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:35:59.205" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:35:59.205" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:35:59.205" endtime="20210730 15:35:59.205"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:35:59.206" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:35:59.206" endtime="20210730 15:35:59.206"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:59.207" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:59.206" endtime="20210730 15:35:59.207"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:59.207" endtime="20210730 15:35:59.208"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:59.208" endtime="20210730 15:35:59.209"/>
</kw>
<status status="PASS" starttime="20210730 15:35:59.206" endtime="20210730 15:35:59.209"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:59.209" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:59.209" endtime="20210730 15:35:59.209"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:59.209" endtime="20210730 15:35:59.210"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:59.211" endtime="20210730 15:35:59.211"/>
</kw>
<status status="PASS" starttime="20210730 15:35:59.209" endtime="20210730 15:35:59.211"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:59.211" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:35:59.211" endtime="20210730 15:35:59.211"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:35:59.211" endtime="20210730 15:35:59.212"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:35:59.212" endtime="20210730 15:35:59.212"/>
</kw>
<status status="PASS" starttime="20210730 15:35:59.211" endtime="20210730 15:35:59.212"/>
</iter>
<status status="PASS" starttime="20210730 15:35:59.206" endtime="20210730 15:35:59.213"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:35:59.213" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:35:59.213" endtime="20210730 15:35:59.213"/>
</kw>
<status status="PASS" starttime="20210730 15:35:59.205" endtime="20210730 15:35:59.213"/>
</kw>
<status status="PASS" starttime="20210730 15:35:57.658" endtime="20210730 15:35:59.213"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcd fg</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:59.214" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:35:59.214" endtime="20210730 15:35:59.215"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:59.215" level="INFO">${payload} = {'username': 'abcd fg'}</msg>
<status status="PASS" starttime="20210730 15:35:59.215" endtime="20210730 15:35:59.215"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:59.224" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:59.225" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:59.215" endtime="20210730 15:35:59.225"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:59.225" endtime="20210730 15:35:59.225"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:59.225" endtime="20210730 15:35:59.225"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:59.215" endtime="20210730 15:35:59.225"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:59.215" endtime="20210730 15:35:59.225"/>
</for>
<status status="FAIL" starttime="20210730 15:35:59.214" endtime="20210730 15:35:59.225"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:59.214" endtime="20210730 15:35:59.225"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcd fg</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:59.227" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:35:59.226" endtime="20210730 15:35:59.227"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:59.227" level="INFO">${payload} = {'username': 'abcd fg'}</msg>
<status status="PASS" starttime="20210730 15:35:59.227" endtime="20210730 15:35:59.227"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:59.231" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:59.232" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:59.227" endtime="20210730 15:35:59.232"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:59.232" endtime="20210730 15:35:59.232"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:59.232" endtime="20210730 15:35:59.232"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:59.227" endtime="20210730 15:35:59.232"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:59.227" endtime="20210730 15:35:59.232"/>
</for>
<status status="FAIL" starttime="20210730 15:35:59.226" endtime="20210730 15:35:59.232"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:59.226" endtime="20210730 15:35:59.232"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcd fg</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:59.233" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:35:59.233" endtime="20210730 15:35:59.233"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:35:59.234" level="INFO">${payload} = {'username': 'abcd fg'}</msg>
<status status="PASS" starttime="20210730 15:35:59.233" endtime="20210730 15:35:59.234"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:35:59.238" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:35:59.238" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:35:59.234" endtime="20210730 15:35:59.238"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:35:59.238" endtime="20210730 15:35:59.239"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:35:59.239" endtime="20210730 15:35:59.239"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:59.234" endtime="20210730 15:35:59.239"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:59.234" endtime="20210730 15:35:59.239"/>
</for>
<status status="FAIL" starttime="20210730 15:35:59.232" endtime="20210730 15:35:59.239"/>
</kw>
<status status="FAIL" starttime="20210730 15:35:59.232" endtime="20210730 15:35:59.239"/>
</iter>
<status status="FAIL" starttime="20210730 15:35:59.213" endtime="20210730 15:35:59.239"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:59.248" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:59.257" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:59.257" level="INFO">${pids} = 5333
5340
5344</msg>
<status status="PASS" starttime="20210730 15:35:59.240" endtime="20210730 15:35:59.257"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:59.258" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:59.258" endtime="20210730 15:35:59.258"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:59.259" level="INFO">${pids} = ['5333', '5340', '5344']</msg>
<status status="PASS" starttime="20210730 15:35:59.259" endtime="20210730 15:35:59.259"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5333</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:59.262" level="INFO">Running command 'kill 5333 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:59.259" endtime="20210730 15:35:59.263"/>
</kw>
<status status="PASS" starttime="20210730 15:35:59.259" endtime="20210730 15:35:59.263"/>
</iter>
<iter>
<var name="${pid}">5340</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:59.266" level="INFO">Running command 'kill 5340 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:59.263" endtime="20210730 15:35:59.266"/>
</kw>
<status status="PASS" starttime="20210730 15:35:59.263" endtime="20210730 15:35:59.266"/>
</iter>
<iter>
<var name="${pid}">5344</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:59.272" level="INFO">Running command 'kill 5344 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:59.267" endtime="20210730 15:35:59.272"/>
</kw>
<status status="PASS" starttime="20210730 15:35:59.267" endtime="20210730 15:35:59.272"/>
</iter>
<status status="PASS" starttime="20210730 15:35:59.259" endtime="20210730 15:35:59.272"/>
</for>
<status status="PASS" starttime="20210730 15:35:59.259" endtime="20210730 15:35:59.272"/>
</branch>
<status status="PASS" starttime="20210730 15:35:59.258" endtime="20210730 15:35:59.272"/>
</if>
<status status="PASS" starttime="20210730 15:35:59.239" endtime="20210730 15:35:59.273"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": 'abcd fg'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:35:57.657" endtime="20210730 15:35:59.273">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t30" name="With Each Valid Token, Updating Username Of Each System User With ab defgh Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:35:59.280" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:35:59.290" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:35:59.291" level="INFO">${pids} = 5373</msg>
<status status="PASS" starttime="20210730 15:35:59.275" endtime="20210730 15:35:59.291"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:59.292" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:35:59.291" endtime="20210730 15:35:59.292"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:35:59.292" level="INFO">${pids} = ['5373']</msg>
<status status="PASS" starttime="20210730 15:35:59.292" endtime="20210730 15:35:59.292"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5373</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:59.296" level="INFO">Running command 'kill 5373 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:59.293" endtime="20210730 15:35:59.296"/>
</kw>
<status status="PASS" starttime="20210730 15:35:59.293" endtime="20210730 15:35:59.296"/>
</iter>
<status status="PASS" starttime="20210730 15:35:59.292" endtime="20210730 15:35:59.296"/>
</for>
<status status="PASS" starttime="20210730 15:35:59.292" endtime="20210730 15:35:59.296"/>
</branch>
<status status="PASS" starttime="20210730 15:35:59.292" endtime="20210730 15:35:59.296"/>
</if>
<status status="PASS" starttime="20210730 15:35:59.275" endtime="20210730 15:35:59.296"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:59.298" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:59.297" endtime="20210730 15:35:59.298"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:59.298" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:35:59.298" endtime="20210730 15:35:59.298"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:35:59.299" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:35:59.298" endtime="20210730 15:35:59.299"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:35:59.299" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:59.299" endtime="20210730 15:35:59.299"/>
</kw>
<msg timestamp="20210730 15:35:59.299" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:35:59.298" endtime="20210730 15:35:59.299"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:35:59.304" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:35:59.299" endtime="20210730 15:35:59.308"/>
</kw>
<status status="PASS" starttime="20210730 15:35:59.297" endtime="20210730 15:35:59.309"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:35:59.311" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:35:59.310" endtime="20210730 15:35:59.315"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:36:00.822" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:35:59.316" endtime="20210730 15:36:00.822"/>
</kw>
<status status="PASS" starttime="20210730 15:35:59.310" endtime="20210730 15:36:00.822"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:00.823" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:00.823" endtime="20210730 15:36:00.823"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:00.824" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:00.823" endtime="20210730 15:36:00.824"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:00.824" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:00.824" endtime="20210730 15:36:00.824"/>
</kw>
<msg timestamp="20210730 15:36:00.824" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:00.823" endtime="20210730 15:36:00.824"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:36:00.825" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:36:00.824" endtime="20210730 15:36:00.825"/>
</kw>
<status status="PASS" starttime="20210730 15:36:00.822" endtime="20210730 15:36:00.825"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:36:00.826" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:36:00.826" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:36:00.826" endtime="20210730 15:36:00.826"/>
</kw>
<status status="PASS" starttime="20210730 15:36:00.826" endtime="20210730 15:36:00.826"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:36:00.827" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:36:00.827" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:36:00.827" endtime="20210730 15:36:00.827"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:36:00.828" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:36:00.827" endtime="20210730 15:36:00.828"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:00.828" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:00.828" endtime="20210730 15:36:00.828"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:00.828" endtime="20210730 15:36:00.829"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:00.829" endtime="20210730 15:36:00.829"/>
</kw>
<status status="PASS" starttime="20210730 15:36:00.828" endtime="20210730 15:36:00.829"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:00.830" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:00.830" endtime="20210730 15:36:00.830"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:00.830" endtime="20210730 15:36:00.831"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:00.831" endtime="20210730 15:36:00.831"/>
</kw>
<status status="PASS" starttime="20210730 15:36:00.829" endtime="20210730 15:36:00.831"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:00.831" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:00.831" endtime="20210730 15:36:00.831"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:00.831" endtime="20210730 15:36:00.832"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:00.832" endtime="20210730 15:36:00.833"/>
</kw>
<status status="PASS" starttime="20210730 15:36:00.831" endtime="20210730 15:36:00.833"/>
</iter>
<status status="PASS" starttime="20210730 15:36:00.828" endtime="20210730 15:36:00.833"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:36:00.833" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:36:00.833" endtime="20210730 15:36:00.833"/>
</kw>
<status status="PASS" starttime="20210730 15:36:00.827" endtime="20210730 15:36:00.833"/>
</kw>
<status status="PASS" starttime="20210730 15:35:59.275" endtime="20210730 15:36:00.833"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=ab defgh</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:00.835" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:36:00.834" endtime="20210730 15:36:00.835"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:00.835" level="INFO">${payload} = {'username': 'ab defgh'}</msg>
<status status="PASS" starttime="20210730 15:36:00.835" endtime="20210730 15:36:00.835"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:00.847" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:00.848" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:00.836" endtime="20210730 15:36:00.848"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:00.848" endtime="20210730 15:36:00.848"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:00.848" endtime="20210730 15:36:00.848"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:00.835" endtime="20210730 15:36:00.848"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:00.835" endtime="20210730 15:36:00.848"/>
</for>
<status status="FAIL" starttime="20210730 15:36:00.834" endtime="20210730 15:36:00.848"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:00.834" endtime="20210730 15:36:00.848"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=ab defgh</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:00.849" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:36:00.849" endtime="20210730 15:36:00.849"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:00.850" level="INFO">${payload} = {'username': 'ab defgh'}</msg>
<status status="PASS" starttime="20210730 15:36:00.850" endtime="20210730 15:36:00.850"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:00.854" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:00.855" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:00.850" endtime="20210730 15:36:00.855"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:00.855" endtime="20210730 15:36:00.855"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:00.855" endtime="20210730 15:36:00.855"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:00.850" endtime="20210730 15:36:00.855"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:00.850" endtime="20210730 15:36:00.855"/>
</for>
<status status="FAIL" starttime="20210730 15:36:00.848" endtime="20210730 15:36:00.855"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:00.848" endtime="20210730 15:36:00.856"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=ab defgh</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:00.857" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:36:00.856" endtime="20210730 15:36:00.857"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:00.858" level="INFO">${payload} = {'username': 'ab defgh'}</msg>
<status status="PASS" starttime="20210730 15:36:00.857" endtime="20210730 15:36:00.858"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:00.864" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:00.864" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:00.858" endtime="20210730 15:36:00.864"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:00.865" endtime="20210730 15:36:00.865"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:00.865" endtime="20210730 15:36:00.865"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:00.858" endtime="20210730 15:36:00.865"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:00.858" endtime="20210730 15:36:00.865"/>
</for>
<status status="FAIL" starttime="20210730 15:36:00.856" endtime="20210730 15:36:00.865"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:00.856" endtime="20210730 15:36:00.865"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:00.834" endtime="20210730 15:36:00.866"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:00.870" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:00.880" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:00.880" level="INFO">${pids} = 5396
5403
5408</msg>
<status status="PASS" starttime="20210730 15:36:00.867" endtime="20210730 15:36:00.880"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:00.881" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:00.881" endtime="20210730 15:36:00.881"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:00.882" level="INFO">${pids} = ['5396', '5403', '5408']</msg>
<status status="PASS" starttime="20210730 15:36:00.882" endtime="20210730 15:36:00.882"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5396</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:00.885" level="INFO">Running command 'kill 5396 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:00.882" endtime="20210730 15:36:00.886"/>
</kw>
<status status="PASS" starttime="20210730 15:36:00.882" endtime="20210730 15:36:00.886"/>
</iter>
<iter>
<var name="${pid}">5403</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:00.890" level="INFO">Running command 'kill 5403 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:00.886" endtime="20210730 15:36:00.891"/>
</kw>
<status status="PASS" starttime="20210730 15:36:00.886" endtime="20210730 15:36:00.891"/>
</iter>
<iter>
<var name="${pid}">5408</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:00.895" level="INFO">Running command 'kill 5408 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:00.892" endtime="20210730 15:36:00.896"/>
</kw>
<status status="PASS" starttime="20210730 15:36:00.891" endtime="20210730 15:36:00.896"/>
</iter>
<status status="PASS" starttime="20210730 15:36:00.882" endtime="20210730 15:36:00.896"/>
</for>
<status status="PASS" starttime="20210730 15:36:00.881" endtime="20210730 15:36:00.896"/>
</branch>
<status status="PASS" starttime="20210730 15:36:00.881" endtime="20210730 15:36:00.896"/>
</if>
<status status="PASS" starttime="20210730 15:36:00.866" endtime="20210730 15:36:00.896"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": 'ab defgh'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:35:59.274" endtime="20210730 15:36:00.896">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t31" name="With Each Valid Token, Updating Username Of Each System User With abcdefghijklmnp stop Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:00.901" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:00.912" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:00.912" level="INFO">${pids} = 5437</msg>
<status status="PASS" starttime="20210730 15:36:00.898" endtime="20210730 15:36:00.912"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:00.913" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:00.912" endtime="20210730 15:36:00.913"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:00.914" level="INFO">${pids} = ['5437']</msg>
<status status="PASS" starttime="20210730 15:36:00.913" endtime="20210730 15:36:00.914"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5437</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:00.917" level="INFO">Running command 'kill 5437 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:00.914" endtime="20210730 15:36:00.917"/>
</kw>
<status status="PASS" starttime="20210730 15:36:00.914" endtime="20210730 15:36:00.917"/>
</iter>
<status status="PASS" starttime="20210730 15:36:00.914" endtime="20210730 15:36:00.917"/>
</for>
<status status="PASS" starttime="20210730 15:36:00.913" endtime="20210730 15:36:00.917"/>
</branch>
<status status="PASS" starttime="20210730 15:36:00.913" endtime="20210730 15:36:00.917"/>
</if>
<status status="PASS" starttime="20210730 15:36:00.898" endtime="20210730 15:36:00.918"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:00.919" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:00.918" endtime="20210730 15:36:00.919"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:00.919" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:00.919" endtime="20210730 15:36:00.919"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:00.920" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:00.920" endtime="20210730 15:36:00.920"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:00.920" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:00.920" endtime="20210730 15:36:00.920"/>
</kw>
<msg timestamp="20210730 15:36:00.921" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:00.919" endtime="20210730 15:36:00.921"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:00.925" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:00.921" endtime="20210730 15:36:00.928"/>
</kw>
<status status="PASS" starttime="20210730 15:36:00.918" endtime="20210730 15:36:00.928"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:36:00.930" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:36:00.929" endtime="20210730 15:36:00.934"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:36:02.435" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:36:00.934" endtime="20210730 15:36:02.436"/>
</kw>
<status status="PASS" starttime="20210730 15:36:00.929" endtime="20210730 15:36:02.436"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:02.438" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:02.437" endtime="20210730 15:36:02.438"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:02.438" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:02.438" endtime="20210730 15:36:02.438"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:02.438" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:02.438" endtime="20210730 15:36:02.438"/>
</kw>
<msg timestamp="20210730 15:36:02.439" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:02.437" endtime="20210730 15:36:02.439"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:36:02.439" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:36:02.439" endtime="20210730 15:36:02.439"/>
</kw>
<status status="PASS" starttime="20210730 15:36:02.436" endtime="20210730 15:36:02.439"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:36:02.440" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:36:02.440" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:36:02.440" endtime="20210730 15:36:02.440"/>
</kw>
<status status="PASS" starttime="20210730 15:36:02.440" endtime="20210730 15:36:02.440"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:36:02.441" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:36:02.441" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:36:02.440" endtime="20210730 15:36:02.441"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:36:02.441" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:36:02.441" endtime="20210730 15:36:02.441"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:02.442" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:02.442" endtime="20210730 15:36:02.443"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:02.443" endtime="20210730 15:36:02.444"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:02.444" endtime="20210730 15:36:02.445"/>
</kw>
<status status="PASS" starttime="20210730 15:36:02.442" endtime="20210730 15:36:02.445"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:02.445" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:02.445" endtime="20210730 15:36:02.445"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:02.445" endtime="20210730 15:36:02.446"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:02.446" endtime="20210730 15:36:02.446"/>
</kw>
<status status="PASS" starttime="20210730 15:36:02.445" endtime="20210730 15:36:02.446"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:02.447" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:02.447" endtime="20210730 15:36:02.447"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:02.447" endtime="20210730 15:36:02.448"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:02.448" endtime="20210730 15:36:02.448"/>
</kw>
<status status="PASS" starttime="20210730 15:36:02.447" endtime="20210730 15:36:02.448"/>
</iter>
<status status="PASS" starttime="20210730 15:36:02.441" endtime="20210730 15:36:02.448"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:36:02.448" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:36:02.448" endtime="20210730 15:36:02.448"/>
</kw>
<status status="PASS" starttime="20210730 15:36:02.440" endtime="20210730 15:36:02.449"/>
</kw>
<status status="PASS" starttime="20210730 15:36:00.898" endtime="20210730 15:36:02.449"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcdefghijklmnp stop</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:02.450" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:36:02.449" endtime="20210730 15:36:02.450"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:02.450" level="INFO">${payload} = {'username': 'abcdefghijklmnp stop'}</msg>
<status status="PASS" starttime="20210730 15:36:02.450" endtime="20210730 15:36:02.450"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:02.461" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:02.461" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:02.451" endtime="20210730 15:36:02.461"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:02.461" endtime="20210730 15:36:02.461"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:02.461" endtime="20210730 15:36:02.461"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:02.450" endtime="20210730 15:36:02.461"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:02.450" endtime="20210730 15:36:02.461"/>
</for>
<status status="FAIL" starttime="20210730 15:36:02.449" endtime="20210730 15:36:02.462"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:02.449" endtime="20210730 15:36:02.462"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcdefghijklmnp stop</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:02.463" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:36:02.463" endtime="20210730 15:36:02.463"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:02.463" level="INFO">${payload} = {'username': 'abcdefghijklmnp stop'}</msg>
<status status="PASS" starttime="20210730 15:36:02.463" endtime="20210730 15:36:02.463"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:02.468" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:02.468" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:02.464" endtime="20210730 15:36:02.468"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:02.468" endtime="20210730 15:36:02.468"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:02.468" endtime="20210730 15:36:02.468"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:02.464" endtime="20210730 15:36:02.468"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:02.463" endtime="20210730 15:36:02.468"/>
</for>
<status status="FAIL" starttime="20210730 15:36:02.462" endtime="20210730 15:36:02.468"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:02.462" endtime="20210730 15:36:02.468"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcdefghijklmnp stop</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:02.469" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:36:02.469" endtime="20210730 15:36:02.469"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:02.470" level="INFO">${payload} = {'username': 'abcdefghijklmnp stop'}</msg>
<status status="PASS" starttime="20210730 15:36:02.470" endtime="20210730 15:36:02.470"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:02.474" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:02.474" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:02.470" endtime="20210730 15:36:02.474"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:02.474" endtime="20210730 15:36:02.474"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:02.474" endtime="20210730 15:36:02.474"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:02.470" endtime="20210730 15:36:02.474"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:02.470" endtime="20210730 15:36:02.474"/>
</for>
<status status="FAIL" starttime="20210730 15:36:02.469" endtime="20210730 15:36:02.474"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:02.468" endtime="20210730 15:36:02.474"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:02.449" endtime="20210730 15:36:02.474"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:02.481" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:02.490" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:02.490" level="INFO">${pids} = 5460
5467
5472</msg>
<status status="PASS" starttime="20210730 15:36:02.475" endtime="20210730 15:36:02.490"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:02.491" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:02.491" endtime="20210730 15:36:02.491"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:02.492" level="INFO">${pids} = ['5460', '5467', '5472']</msg>
<status status="PASS" starttime="20210730 15:36:02.492" endtime="20210730 15:36:02.492"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5460</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:02.495" level="INFO">Running command 'kill 5460 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:02.492" endtime="20210730 15:36:02.496"/>
</kw>
<status status="PASS" starttime="20210730 15:36:02.492" endtime="20210730 15:36:02.496"/>
</iter>
<iter>
<var name="${pid}">5467</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:02.499" level="INFO">Running command 'kill 5467 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:02.496" endtime="20210730 15:36:02.499"/>
</kw>
<status status="PASS" starttime="20210730 15:36:02.496" endtime="20210730 15:36:02.499"/>
</iter>
<iter>
<var name="${pid}">5472</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:02.503" level="INFO">Running command 'kill 5472 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:02.500" endtime="20210730 15:36:02.503"/>
</kw>
<status status="PASS" starttime="20210730 15:36:02.500" endtime="20210730 15:36:02.503"/>
</iter>
<status status="PASS" starttime="20210730 15:36:02.492" endtime="20210730 15:36:02.503"/>
</for>
<status status="PASS" starttime="20210730 15:36:02.491" endtime="20210730 15:36:02.503"/>
</branch>
<status status="PASS" starttime="20210730 15:36:02.491" endtime="20210730 15:36:02.503"/>
</if>
<status status="PASS" starttime="20210730 15:36:02.475" endtime="20210730 15:36:02.503"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": 'abcdefghijklmnp stop'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:36:00.897" endtime="20210730 15:36:02.504">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t32" name="With Each Valid Token, Updating Username Of Each System User With haka 12 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:02.511" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:02.521" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:02.521" level="INFO">${pids} = 5501</msg>
<status status="PASS" starttime="20210730 15:36:02.505" endtime="20210730 15:36:02.522"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:02.522" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:02.522" endtime="20210730 15:36:02.522"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:02.523" level="INFO">${pids} = ['5501']</msg>
<status status="PASS" starttime="20210730 15:36:02.523" endtime="20210730 15:36:02.523"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5501</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:02.529" level="INFO">Running command 'kill 5501 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:02.523" endtime="20210730 15:36:02.529"/>
</kw>
<status status="PASS" starttime="20210730 15:36:02.523" endtime="20210730 15:36:02.537"/>
</iter>
<status status="PASS" starttime="20210730 15:36:02.523" endtime="20210730 15:36:02.537"/>
</for>
<status status="PASS" starttime="20210730 15:36:02.523" endtime="20210730 15:36:02.537"/>
</branch>
<status status="PASS" starttime="20210730 15:36:02.523" endtime="20210730 15:36:02.537"/>
</if>
<status status="PASS" starttime="20210730 15:36:02.505" endtime="20210730 15:36:02.537"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:02.538" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:02.538" endtime="20210730 15:36:02.539"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:02.539" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:02.539" endtime="20210730 15:36:02.539"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:02.540" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:02.539" endtime="20210730 15:36:02.540"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:02.540" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:02.540" endtime="20210730 15:36:02.540"/>
</kw>
<msg timestamp="20210730 15:36:02.540" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:02.539" endtime="20210730 15:36:02.540"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:02.547" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:02.541" endtime="20210730 15:36:02.548"/>
</kw>
<status status="PASS" starttime="20210730 15:36:02.538" endtime="20210730 15:36:02.549"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:36:02.550" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:36:02.550" endtime="20210730 15:36:02.554"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:36:04.056" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:36:02.555" endtime="20210730 15:36:04.056"/>
</kw>
<status status="PASS" starttime="20210730 15:36:02.549" endtime="20210730 15:36:04.056"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:04.057" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:04.057" endtime="20210730 15:36:04.057"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:04.058" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:04.057" endtime="20210730 15:36:04.058"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:04.058" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:04.058" endtime="20210730 15:36:04.058"/>
</kw>
<msg timestamp="20210730 15:36:04.058" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:04.057" endtime="20210730 15:36:04.058"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:36:04.059" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:36:04.058" endtime="20210730 15:36:04.059"/>
</kw>
<status status="PASS" starttime="20210730 15:36:04.056" endtime="20210730 15:36:04.059"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:36:04.060" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:36:04.060" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:36:04.060" endtime="20210730 15:36:04.060"/>
</kw>
<status status="PASS" starttime="20210730 15:36:04.059" endtime="20210730 15:36:04.060"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:36:04.061" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:36:04.061" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:36:04.060" endtime="20210730 15:36:04.061"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:36:04.061" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:36:04.061" endtime="20210730 15:36:04.061"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:04.062" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:04.062" endtime="20210730 15:36:04.062"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:04.062" endtime="20210730 15:36:04.063"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:04.063" endtime="20210730 15:36:04.063"/>
</kw>
<status status="PASS" starttime="20210730 15:36:04.061" endtime="20210730 15:36:04.063"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:04.063" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:04.063" endtime="20210730 15:36:04.063"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:04.063" endtime="20210730 15:36:04.064"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:04.064" endtime="20210730 15:36:04.064"/>
</kw>
<status status="PASS" starttime="20210730 15:36:04.063" endtime="20210730 15:36:04.064"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:04.065" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:04.065" endtime="20210730 15:36:04.065"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:04.065" endtime="20210730 15:36:04.066"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:04.066" endtime="20210730 15:36:04.066"/>
</kw>
<status status="PASS" starttime="20210730 15:36:04.065" endtime="20210730 15:36:04.066"/>
</iter>
<status status="PASS" starttime="20210730 15:36:04.061" endtime="20210730 15:36:04.066"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:36:04.067" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:36:04.066" endtime="20210730 15:36:04.067"/>
</kw>
<status status="PASS" starttime="20210730 15:36:04.060" endtime="20210730 15:36:04.067"/>
</kw>
<status status="PASS" starttime="20210730 15:36:02.505" endtime="20210730 15:36:04.067"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=haka 12</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:04.068" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:36:04.068" endtime="20210730 15:36:04.068"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:04.069" level="INFO">${payload} = {'username': 'haka 12'}</msg>
<status status="PASS" starttime="20210730 15:36:04.068" endtime="20210730 15:36:04.069"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:04.080" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:04.080" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:04.069" endtime="20210730 15:36:04.080"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:04.080" endtime="20210730 15:36:04.080"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:04.080" endtime="20210730 15:36:04.081"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:04.069" endtime="20210730 15:36:04.081"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:04.069" endtime="20210730 15:36:04.081"/>
</for>
<status status="FAIL" starttime="20210730 15:36:04.067" endtime="20210730 15:36:04.081"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:04.067" endtime="20210730 15:36:04.081"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=haka 12</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:04.082" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:36:04.082" endtime="20210730 15:36:04.082"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:04.083" level="INFO">${payload} = {'username': 'haka 12'}</msg>
<status status="PASS" starttime="20210730 15:36:04.082" endtime="20210730 15:36:04.083"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:04.087" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:04.087" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:04.083" endtime="20210730 15:36:04.087"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:04.087" endtime="20210730 15:36:04.087"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:04.087" endtime="20210730 15:36:04.087"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:04.083" endtime="20210730 15:36:04.087"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:04.083" endtime="20210730 15:36:04.087"/>
</for>
<status status="FAIL" starttime="20210730 15:36:04.081" endtime="20210730 15:36:04.088"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:04.081" endtime="20210730 15:36:04.088"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=haka 12</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:04.089" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:36:04.088" endtime="20210730 15:36:04.089"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:04.089" level="INFO">${payload} = {'username': 'haka 12'}</msg>
<status status="PASS" starttime="20210730 15:36:04.089" endtime="20210730 15:36:04.089"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:04.093" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:04.094" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:04.089" endtime="20210730 15:36:04.094"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:04.094" endtime="20210730 15:36:04.094"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:04.094" endtime="20210730 15:36:04.094"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:04.089" endtime="20210730 15:36:04.094"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:04.089" endtime="20210730 15:36:04.094"/>
</for>
<status status="FAIL" starttime="20210730 15:36:04.088" endtime="20210730 15:36:04.094"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:04.088" endtime="20210730 15:36:04.094"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:04.067" endtime="20210730 15:36:04.094"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:04.099" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:04.108" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:04.109" level="INFO">${pids} = 5524
5531
5539</msg>
<status status="PASS" starttime="20210730 15:36:04.095" endtime="20210730 15:36:04.109"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:04.110" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:04.109" endtime="20210730 15:36:04.110"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:04.111" level="INFO">${pids} = ['5524', '5531', '5539']</msg>
<status status="PASS" starttime="20210730 15:36:04.111" endtime="20210730 15:36:04.111"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5524</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:04.115" level="INFO">Running command 'kill 5524 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:04.111" endtime="20210730 15:36:04.115"/>
</kw>
<status status="PASS" starttime="20210730 15:36:04.111" endtime="20210730 15:36:04.115"/>
</iter>
<iter>
<var name="${pid}">5531</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:04.118" level="INFO">Running command 'kill 5531 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:04.115" endtime="20210730 15:36:04.118"/>
</kw>
<status status="PASS" starttime="20210730 15:36:04.115" endtime="20210730 15:36:04.119"/>
</iter>
<iter>
<var name="${pid}">5539</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:04.122" level="INFO">Running command 'kill 5539 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:04.119" endtime="20210730 15:36:04.123"/>
</kw>
<status status="PASS" starttime="20210730 15:36:04.119" endtime="20210730 15:36:04.123"/>
</iter>
<status status="PASS" starttime="20210730 15:36:04.111" endtime="20210730 15:36:04.123"/>
</for>
<status status="PASS" starttime="20210730 15:36:04.110" endtime="20210730 15:36:04.123"/>
</branch>
<status status="PASS" starttime="20210730 15:36:04.110" endtime="20210730 15:36:04.123"/>
</if>
<status status="PASS" starttime="20210730 15:36:04.095" endtime="20210730 15:36:04.123"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": 'haka 12'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:36:02.504" endtime="20210730 15:36:04.123">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t33" name="With Each Valid Token, Updating Username Of Each System User With haka 123 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:04.132" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:04.142" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:04.142" level="INFO">${pids} = 5568</msg>
<status status="PASS" starttime="20210730 15:36:04.125" endtime="20210730 15:36:04.142"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:04.143" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:04.142" endtime="20210730 15:36:04.143"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:04.144" level="INFO">${pids} = ['5568']</msg>
<status status="PASS" starttime="20210730 15:36:04.144" endtime="20210730 15:36:04.144"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5568</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:04.149" level="INFO">Running command 'kill 5568 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:04.145" endtime="20210730 15:36:04.149"/>
</kw>
<status status="PASS" starttime="20210730 15:36:04.145" endtime="20210730 15:36:04.149"/>
</iter>
<status status="PASS" starttime="20210730 15:36:04.145" endtime="20210730 15:36:04.149"/>
</for>
<status status="PASS" starttime="20210730 15:36:04.144" endtime="20210730 15:36:04.149"/>
</branch>
<status status="PASS" starttime="20210730 15:36:04.143" endtime="20210730 15:36:04.149"/>
</if>
<status status="PASS" starttime="20210730 15:36:04.125" endtime="20210730 15:36:04.150"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:04.151" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:04.150" endtime="20210730 15:36:04.151"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:04.151" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:04.151" endtime="20210730 15:36:04.151"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:04.152" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:04.152" endtime="20210730 15:36:04.152"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:04.152" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:04.152" endtime="20210730 15:36:04.152"/>
</kw>
<msg timestamp="20210730 15:36:04.153" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:04.151" endtime="20210730 15:36:04.153"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:04.162" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:04.153" endtime="20210730 15:36:04.163"/>
</kw>
<status status="PASS" starttime="20210730 15:36:04.150" endtime="20210730 15:36:04.164"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:36:04.165" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:36:04.165" endtime="20210730 15:36:04.169"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:36:05.670" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:36:04.170" endtime="20210730 15:36:05.671"/>
</kw>
<status status="PASS" starttime="20210730 15:36:04.164" endtime="20210730 15:36:05.671"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:05.672" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:05.672" endtime="20210730 15:36:05.672"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:05.672" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:05.672" endtime="20210730 15:36:05.673"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:05.673" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:05.673" endtime="20210730 15:36:05.673"/>
</kw>
<msg timestamp="20210730 15:36:05.673" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:05.672" endtime="20210730 15:36:05.673"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:36:05.674" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:36:05.673" endtime="20210730 15:36:05.674"/>
</kw>
<status status="PASS" starttime="20210730 15:36:05.671" endtime="20210730 15:36:05.674"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:36:05.675" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:36:05.675" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:36:05.674" endtime="20210730 15:36:05.675"/>
</kw>
<status status="PASS" starttime="20210730 15:36:05.674" endtime="20210730 15:36:05.675"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:36:05.677" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:36:05.677" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:36:05.676" endtime="20210730 15:36:05.677"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:36:05.678" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:36:05.677" endtime="20210730 15:36:05.678"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:05.679" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:05.678" endtime="20210730 15:36:05.679"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:05.679" endtime="20210730 15:36:05.680"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:05.680" endtime="20210730 15:36:05.680"/>
</kw>
<status status="PASS" starttime="20210730 15:36:05.678" endtime="20210730 15:36:05.680"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:05.681" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:05.681" endtime="20210730 15:36:05.681"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:05.681" endtime="20210730 15:36:05.682"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:05.682" endtime="20210730 15:36:05.682"/>
</kw>
<status status="PASS" starttime="20210730 15:36:05.680" endtime="20210730 15:36:05.682"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:05.683" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:05.683" endtime="20210730 15:36:05.683"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:05.683" endtime="20210730 15:36:05.684"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:05.684" endtime="20210730 15:36:05.685"/>
</kw>
<status status="PASS" starttime="20210730 15:36:05.683" endtime="20210730 15:36:05.685"/>
</iter>
<status status="PASS" starttime="20210730 15:36:05.678" endtime="20210730 15:36:05.685"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:36:05.686" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:36:05.685" endtime="20210730 15:36:05.686"/>
</kw>
<status status="PASS" starttime="20210730 15:36:05.675" endtime="20210730 15:36:05.686"/>
</kw>
<status status="PASS" starttime="20210730 15:36:04.125" endtime="20210730 15:36:05.686"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=haka 123</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:05.688" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:36:05.688" endtime="20210730 15:36:05.688"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:05.689" level="INFO">${payload} = {'username': 'haka 123'}</msg>
<status status="PASS" starttime="20210730 15:36:05.689" endtime="20210730 15:36:05.689"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:05.702" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:05.703" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:05.689" endtime="20210730 15:36:05.703"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:05.703" endtime="20210730 15:36:05.703"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:05.703" endtime="20210730 15:36:05.703"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:05.689" endtime="20210730 15:36:05.703"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:05.689" endtime="20210730 15:36:05.703"/>
</for>
<status status="FAIL" starttime="20210730 15:36:05.687" endtime="20210730 15:36:05.703"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:05.687" endtime="20210730 15:36:05.703"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=haka 123</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:05.705" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:36:05.704" endtime="20210730 15:36:05.705"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:05.705" level="INFO">${payload} = {'username': 'haka 123'}</msg>
<status status="PASS" starttime="20210730 15:36:05.705" endtime="20210730 15:36:05.705"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:05.711" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:05.711" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:05.705" endtime="20210730 15:36:05.711"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:05.711" endtime="20210730 15:36:05.711"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:05.711" endtime="20210730 15:36:05.711"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:05.705" endtime="20210730 15:36:05.711"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:05.705" endtime="20210730 15:36:05.712"/>
</for>
<status status="FAIL" starttime="20210730 15:36:05.704" endtime="20210730 15:36:05.712"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:05.704" endtime="20210730 15:36:05.712"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=haka 123</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:05.713" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:36:05.713" endtime="20210730 15:36:05.713"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:05.714" level="INFO">${payload} = {'username': 'haka 123'}</msg>
<status status="PASS" starttime="20210730 15:36:05.713" endtime="20210730 15:36:05.714"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:05.721" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:05.721" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:05.714" endtime="20210730 15:36:05.721"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:05.722" endtime="20210730 15:36:05.722"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:05.722" endtime="20210730 15:36:05.722"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:05.714" endtime="20210730 15:36:05.722"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:05.714" endtime="20210730 15:36:05.722"/>
</for>
<status status="FAIL" starttime="20210730 15:36:05.712" endtime="20210730 15:36:05.722"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:05.712" endtime="20210730 15:36:05.722"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:05.686" endtime="20210730 15:36:05.722"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:05.731" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:05.741" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:05.741" level="INFO">${pids} = 5591
5598
5610</msg>
<status status="PASS" starttime="20210730 15:36:05.723" endtime="20210730 15:36:05.741"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:05.742" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:05.741" endtime="20210730 15:36:05.742"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:05.743" level="INFO">${pids} = ['5591', '5598', '5610']</msg>
<status status="PASS" starttime="20210730 15:36:05.743" endtime="20210730 15:36:05.743"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5591</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:05.750" level="INFO">Running command 'kill 5591 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:05.744" endtime="20210730 15:36:05.751"/>
</kw>
<status status="PASS" starttime="20210730 15:36:05.744" endtime="20210730 15:36:05.751"/>
</iter>
<iter>
<var name="${pid}">5598</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:05.755" level="INFO">Running command 'kill 5598 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:05.752" endtime="20210730 15:36:05.757"/>
</kw>
<status status="PASS" starttime="20210730 15:36:05.751" endtime="20210730 15:36:05.757"/>
</iter>
<iter>
<var name="${pid}">5610</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:05.760" level="INFO">Running command 'kill 5610 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:05.757" endtime="20210730 15:36:05.761"/>
</kw>
<status status="PASS" starttime="20210730 15:36:05.757" endtime="20210730 15:36:05.761"/>
</iter>
<status status="PASS" starttime="20210730 15:36:05.743" endtime="20210730 15:36:05.761"/>
</for>
<status status="PASS" starttime="20210730 15:36:05.742" endtime="20210730 15:36:05.761"/>
</branch>
<status status="PASS" starttime="20210730 15:36:05.742" endtime="20210730 15:36:05.761"/>
</if>
<status status="PASS" starttime="20210730 15:36:05.723" endtime="20210730 15:36:05.762"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": 'haka 123'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:36:04.124" endtime="20210730 15:36:05.762">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t34" name="With Each Valid Token, Updating Username Of Each System User With haka 123456789123456789 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:05.767" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:05.782" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:05.782" level="INFO">${pids} = 5639</msg>
<status status="PASS" starttime="20210730 15:36:05.764" endtime="20210730 15:36:05.782"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:05.783" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:05.782" endtime="20210730 15:36:05.783"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:05.784" level="INFO">${pids} = ['5639']</msg>
<status status="PASS" starttime="20210730 15:36:05.783" endtime="20210730 15:36:05.784"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5639</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:05.787" level="INFO">Running command 'kill 5639 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:05.784" endtime="20210730 15:36:05.788"/>
</kw>
<status status="PASS" starttime="20210730 15:36:05.784" endtime="20210730 15:36:05.788"/>
</iter>
<status status="PASS" starttime="20210730 15:36:05.784" endtime="20210730 15:36:05.788"/>
</for>
<status status="PASS" starttime="20210730 15:36:05.783" endtime="20210730 15:36:05.788"/>
</branch>
<status status="PASS" starttime="20210730 15:36:05.783" endtime="20210730 15:36:05.788"/>
</if>
<status status="PASS" starttime="20210730 15:36:05.764" endtime="20210730 15:36:05.788"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:05.789" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:05.789" endtime="20210730 15:36:05.790"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:05.790" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:05.790" endtime="20210730 15:36:05.790"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:05.791" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:05.790" endtime="20210730 15:36:05.791"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:05.791" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:05.791" endtime="20210730 15:36:05.791"/>
</kw>
<msg timestamp="20210730 15:36:05.791" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:05.790" endtime="20210730 15:36:05.791"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:05.796" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:05.791" endtime="20210730 15:36:05.809"/>
</kw>
<status status="PASS" starttime="20210730 15:36:05.789" endtime="20210730 15:36:05.810"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:36:05.812" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:36:05.811" endtime="20210730 15:36:05.816"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:36:07.320" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:36:05.816" endtime="20210730 15:36:07.320"/>
</kw>
<status status="PASS" starttime="20210730 15:36:05.810" endtime="20210730 15:36:07.320"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:07.321" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:07.321" endtime="20210730 15:36:07.321"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:07.322" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:07.321" endtime="20210730 15:36:07.322"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:07.322" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:07.322" endtime="20210730 15:36:07.322"/>
</kw>
<msg timestamp="20210730 15:36:07.322" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:07.321" endtime="20210730 15:36:07.322"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:36:07.323" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:36:07.322" endtime="20210730 15:36:07.323"/>
</kw>
<status status="PASS" starttime="20210730 15:36:07.320" endtime="20210730 15:36:07.323"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:36:07.324" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:36:07.324" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:36:07.324" endtime="20210730 15:36:07.324"/>
</kw>
<status status="PASS" starttime="20210730 15:36:07.323" endtime="20210730 15:36:07.324"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:36:07.325" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:36:07.325" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:36:07.324" endtime="20210730 15:36:07.325"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:36:07.325" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:36:07.325" endtime="20210730 15:36:07.325"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:07.326" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:07.326" endtime="20210730 15:36:07.326"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:07.326" endtime="20210730 15:36:07.327"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:07.327" endtime="20210730 15:36:07.327"/>
</kw>
<status status="PASS" starttime="20210730 15:36:07.326" endtime="20210730 15:36:07.327"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:07.328" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:07.328" endtime="20210730 15:36:07.328"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:07.328" endtime="20210730 15:36:07.328"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:07.329" endtime="20210730 15:36:07.329"/>
</kw>
<status status="PASS" starttime="20210730 15:36:07.327" endtime="20210730 15:36:07.329"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:07.329" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:07.329" endtime="20210730 15:36:07.329"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:07.329" endtime="20210730 15:36:07.330"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:07.330" endtime="20210730 15:36:07.330"/>
</kw>
<status status="PASS" starttime="20210730 15:36:07.329" endtime="20210730 15:36:07.330"/>
</iter>
<status status="PASS" starttime="20210730 15:36:07.325" endtime="20210730 15:36:07.330"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:36:07.331" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:36:07.331" endtime="20210730 15:36:07.331"/>
</kw>
<status status="PASS" starttime="20210730 15:36:07.324" endtime="20210730 15:36:07.331"/>
</kw>
<status status="PASS" starttime="20210730 15:36:05.763" endtime="20210730 15:36:07.331"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=haka 123456789123456789</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:07.332" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:36:07.332" endtime="20210730 15:36:07.332"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:07.333" level="INFO">${payload} = {'username': 'haka 123456789123456789'}</msg>
<status status="PASS" starttime="20210730 15:36:07.333" endtime="20210730 15:36:07.333"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:07.342" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:07.342" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:07.333" endtime="20210730 15:36:07.342"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:07.343" endtime="20210730 15:36:07.343"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:07.343" endtime="20210730 15:36:07.343"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:07.333" endtime="20210730 15:36:07.343"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:07.333" endtime="20210730 15:36:07.343"/>
</for>
<status status="FAIL" starttime="20210730 15:36:07.332" endtime="20210730 15:36:07.343"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:07.331" endtime="20210730 15:36:07.343"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=haka 123456789123456789</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:07.344" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:36:07.344" endtime="20210730 15:36:07.344"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:07.345" level="INFO">${payload} = {'username': 'haka 123456789123456789'}</msg>
<status status="PASS" starttime="20210730 15:36:07.345" endtime="20210730 15:36:07.345"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:07.349" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:07.349" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:07.345" endtime="20210730 15:36:07.350"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:07.350" endtime="20210730 15:36:07.350"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:07.350" endtime="20210730 15:36:07.350"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:07.345" endtime="20210730 15:36:07.350"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:07.345" endtime="20210730 15:36:07.350"/>
</for>
<status status="FAIL" starttime="20210730 15:36:07.343" endtime="20210730 15:36:07.350"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:07.343" endtime="20210730 15:36:07.350"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=haka 123456789123456789</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:07.351" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:36:07.351" endtime="20210730 15:36:07.351"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:07.352" level="INFO">${payload} = {'username': 'haka 123456789123456789'}</msg>
<status status="PASS" starttime="20210730 15:36:07.352" endtime="20210730 15:36:07.352"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:07.356" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:07.356" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:07.352" endtime="20210730 15:36:07.357"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:07.357" endtime="20210730 15:36:07.357"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:07.357" endtime="20210730 15:36:07.357"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:07.352" endtime="20210730 15:36:07.357"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:07.352" endtime="20210730 15:36:07.357"/>
</for>
<status status="FAIL" starttime="20210730 15:36:07.350" endtime="20210730 15:36:07.357"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:07.350" endtime="20210730 15:36:07.358"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:07.331" endtime="20210730 15:36:07.358"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:07.363" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:07.372" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:07.372" level="INFO">${pids} = 5662
5669
5674</msg>
<status status="PASS" starttime="20210730 15:36:07.359" endtime="20210730 15:36:07.372"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:07.373" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:07.373" endtime="20210730 15:36:07.373"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:07.374" level="INFO">${pids} = ['5662', '5669', '5674']</msg>
<status status="PASS" starttime="20210730 15:36:07.374" endtime="20210730 15:36:07.374"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5662</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:07.380" level="INFO">Running command 'kill 5662 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:07.375" endtime="20210730 15:36:07.380"/>
</kw>
<status status="PASS" starttime="20210730 15:36:07.375" endtime="20210730 15:36:07.381"/>
</iter>
<iter>
<var name="${pid}">5669</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:07.384" level="INFO">Running command 'kill 5669 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:07.381" endtime="20210730 15:36:07.386"/>
</kw>
<status status="PASS" starttime="20210730 15:36:07.381" endtime="20210730 15:36:07.386"/>
</iter>
<iter>
<var name="${pid}">5674</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:07.389" level="INFO">Running command 'kill 5674 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:07.386" endtime="20210730 15:36:07.390"/>
</kw>
<status status="PASS" starttime="20210730 15:36:07.386" endtime="20210730 15:36:07.390"/>
</iter>
<status status="PASS" starttime="20210730 15:36:07.374" endtime="20210730 15:36:07.390"/>
</for>
<status status="PASS" starttime="20210730 15:36:07.374" endtime="20210730 15:36:07.390"/>
</branch>
<status status="PASS" starttime="20210730 15:36:07.374" endtime="20210730 15:36:07.390"/>
</if>
<status status="PASS" starttime="20210730 15:36:07.358" endtime="20210730 15:36:07.390"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": 'haka 123456789123456789'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:36:05.762" endtime="20210730 15:36:07.390">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t35" name="With Each Valid Token, Updating Username Of Each System User With #¤% 23! Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:07.396" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:07.405" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:07.405" level="INFO">${pids} = 5703</msg>
<status status="PASS" starttime="20210730 15:36:07.393" endtime="20210730 15:36:07.405"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:07.406" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:07.406" endtime="20210730 15:36:07.406"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:07.407" level="INFO">${pids} = ['5703']</msg>
<status status="PASS" starttime="20210730 15:36:07.407" endtime="20210730 15:36:07.407"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5703</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:07.411" level="INFO">Running command 'kill 5703 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:07.407" endtime="20210730 15:36:07.412"/>
</kw>
<status status="PASS" starttime="20210730 15:36:07.407" endtime="20210730 15:36:07.412"/>
</iter>
<status status="PASS" starttime="20210730 15:36:07.407" endtime="20210730 15:36:07.412"/>
</for>
<status status="PASS" starttime="20210730 15:36:07.406" endtime="20210730 15:36:07.412"/>
</branch>
<status status="PASS" starttime="20210730 15:36:07.406" endtime="20210730 15:36:07.412"/>
</if>
<status status="PASS" starttime="20210730 15:36:07.392" endtime="20210730 15:36:07.412"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:07.413" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:07.413" endtime="20210730 15:36:07.413"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:07.414" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:07.414" endtime="20210730 15:36:07.414"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:07.414" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:07.414" endtime="20210730 15:36:07.414"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:07.415" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:07.414" endtime="20210730 15:36:07.415"/>
</kw>
<msg timestamp="20210730 15:36:07.415" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:07.413" endtime="20210730 15:36:07.415"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:07.418" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:07.415" endtime="20210730 15:36:07.420"/>
</kw>
<status status="PASS" starttime="20210730 15:36:07.412" endtime="20210730 15:36:07.420"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:36:07.424" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:36:07.422" endtime="20210730 15:36:07.429"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:36:08.931" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:36:07.430" endtime="20210730 15:36:08.931"/>
</kw>
<status status="PASS" starttime="20210730 15:36:07.420" endtime="20210730 15:36:08.932"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:08.933" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:08.933" endtime="20210730 15:36:08.933"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:08.933" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:08.933" endtime="20210730 15:36:08.933"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:08.934" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:08.933" endtime="20210730 15:36:08.934"/>
</kw>
<msg timestamp="20210730 15:36:08.934" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:08.932" endtime="20210730 15:36:08.934"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:36:08.934" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:36:08.934" endtime="20210730 15:36:08.935"/>
</kw>
<status status="PASS" starttime="20210730 15:36:08.932" endtime="20210730 15:36:08.935"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:36:08.935" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:36:08.935" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:36:08.935" endtime="20210730 15:36:08.936"/>
</kw>
<status status="PASS" starttime="20210730 15:36:08.935" endtime="20210730 15:36:08.936"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:36:08.937" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:36:08.937" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:36:08.936" endtime="20210730 15:36:08.937"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:36:08.937" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:36:08.937" endtime="20210730 15:36:08.937"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:08.938" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:08.937" endtime="20210730 15:36:08.938"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:08.938" endtime="20210730 15:36:08.939"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:08.939" endtime="20210730 15:36:08.939"/>
</kw>
<status status="PASS" starttime="20210730 15:36:08.937" endtime="20210730 15:36:08.939"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:08.939" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:08.939" endtime="20210730 15:36:08.939"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:08.939" endtime="20210730 15:36:08.940"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:08.940" endtime="20210730 15:36:08.941"/>
</kw>
<status status="PASS" starttime="20210730 15:36:08.939" endtime="20210730 15:36:08.941"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:08.941" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:08.941" endtime="20210730 15:36:08.941"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:08.941" endtime="20210730 15:36:08.942"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:08.943" endtime="20210730 15:36:08.943"/>
</kw>
<status status="PASS" starttime="20210730 15:36:08.941" endtime="20210730 15:36:08.943"/>
</iter>
<status status="PASS" starttime="20210730 15:36:08.937" endtime="20210730 15:36:08.943"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:36:08.944" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:36:08.943" endtime="20210730 15:36:08.944"/>
</kw>
<status status="PASS" starttime="20210730 15:36:08.936" endtime="20210730 15:36:08.945"/>
</kw>
<status status="PASS" starttime="20210730 15:36:07.392" endtime="20210730 15:36:08.945"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤% 23!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:08.946" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:36:08.946" endtime="20210730 15:36:08.946"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:08.947" level="INFO">${payload} = {'username': '#¤% 23!'}</msg>
<status status="PASS" starttime="20210730 15:36:08.946" endtime="20210730 15:36:08.947"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:08.955" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:08.956" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:08.947" endtime="20210730 15:36:08.956"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:08.956" endtime="20210730 15:36:08.956"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:08.956" endtime="20210730 15:36:08.956"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:08.947" endtime="20210730 15:36:08.956"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:08.947" endtime="20210730 15:36:08.956"/>
</for>
<status status="FAIL" starttime="20210730 15:36:08.945" endtime="20210730 15:36:08.957"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:08.945" endtime="20210730 15:36:08.957"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤% 23!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:08.958" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:36:08.958" endtime="20210730 15:36:08.958"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:08.958" level="INFO">${payload} = {'username': '#¤% 23!'}</msg>
<status status="PASS" starttime="20210730 15:36:08.958" endtime="20210730 15:36:08.958"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:08.963" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:08.963" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:08.959" endtime="20210730 15:36:08.963"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:08.963" endtime="20210730 15:36:08.963"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:08.963" endtime="20210730 15:36:08.963"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:08.959" endtime="20210730 15:36:08.963"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:08.959" endtime="20210730 15:36:08.964"/>
</for>
<status status="FAIL" starttime="20210730 15:36:08.957" endtime="20210730 15:36:08.964"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:08.957" endtime="20210730 15:36:08.964"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤% 23!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:08.965" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:36:08.964" endtime="20210730 15:36:08.965"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:08.965" level="INFO">${payload} = {'username': '#¤% 23!'}</msg>
<status status="PASS" starttime="20210730 15:36:08.965" endtime="20210730 15:36:08.965"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:08.969" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:08.970" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:08.966" endtime="20210730 15:36:08.970"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:08.970" endtime="20210730 15:36:08.970"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:08.970" endtime="20210730 15:36:08.970"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:08.965" endtime="20210730 15:36:08.970"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:08.965" endtime="20210730 15:36:08.970"/>
</for>
<status status="FAIL" starttime="20210730 15:36:08.964" endtime="20210730 15:36:08.970"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:08.964" endtime="20210730 15:36:08.970"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:08.945" endtime="20210730 15:36:08.970"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:08.978" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:08.988" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:08.988" level="INFO">${pids} = 5726
5733
5739</msg>
<status status="PASS" starttime="20210730 15:36:08.971" endtime="20210730 15:36:08.988"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:08.989" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:08.989" endtime="20210730 15:36:08.989"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:08.990" level="INFO">${pids} = ['5726', '5733', '5739']</msg>
<status status="PASS" starttime="20210730 15:36:08.990" endtime="20210730 15:36:08.990"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5726</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:08.994" level="INFO">Running command 'kill 5726 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:08.990" endtime="20210730 15:36:08.994"/>
</kw>
<status status="PASS" starttime="20210730 15:36:08.990" endtime="20210730 15:36:08.994"/>
</iter>
<iter>
<var name="${pid}">5733</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:08.998" level="INFO">Running command 'kill 5733 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:08.995" endtime="20210730 15:36:08.998"/>
</kw>
<status status="PASS" starttime="20210730 15:36:08.994" endtime="20210730 15:36:08.998"/>
</iter>
<iter>
<var name="${pid}">5739</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:09.001" level="INFO">Running command 'kill 5739 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:08.998" endtime="20210730 15:36:09.002"/>
</kw>
<status status="PASS" starttime="20210730 15:36:08.998" endtime="20210730 15:36:09.002"/>
</iter>
<status status="PASS" starttime="20210730 15:36:08.990" endtime="20210730 15:36:09.002"/>
</for>
<status status="PASS" starttime="20210730 15:36:08.989" endtime="20210730 15:36:09.002"/>
</branch>
<status status="PASS" starttime="20210730 15:36:08.989" endtime="20210730 15:36:09.002"/>
</if>
<status status="PASS" starttime="20210730 15:36:08.971" endtime="20210730 15:36:09.002"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤% 23!'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:36:07.391" endtime="20210730 15:36:09.002">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t36" name="With Each Valid Token, Updating Username Of Each System User With # %123!&amp; Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:09.009" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:09.019" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:09.019" level="INFO">${pids} = 5768</msg>
<status status="PASS" starttime="20210730 15:36:09.004" endtime="20210730 15:36:09.019"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:09.020" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:09.020" endtime="20210730 15:36:09.020"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:09.021" level="INFO">${pids} = ['5768']</msg>
<status status="PASS" starttime="20210730 15:36:09.020" endtime="20210730 15:36:09.021"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5768</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:09.024" level="INFO">Running command 'kill 5768 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:09.021" endtime="20210730 15:36:09.024"/>
</kw>
<status status="PASS" starttime="20210730 15:36:09.021" endtime="20210730 15:36:09.024"/>
</iter>
<status status="PASS" starttime="20210730 15:36:09.021" endtime="20210730 15:36:09.024"/>
</for>
<status status="PASS" starttime="20210730 15:36:09.020" endtime="20210730 15:36:09.024"/>
</branch>
<status status="PASS" starttime="20210730 15:36:09.020" endtime="20210730 15:36:09.025"/>
</if>
<status status="PASS" starttime="20210730 15:36:09.004" endtime="20210730 15:36:09.025"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:09.026" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:09.026" endtime="20210730 15:36:09.026"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:09.027" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:09.027" endtime="20210730 15:36:09.027"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:09.027" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:09.027" endtime="20210730 15:36:09.027"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:09.028" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:09.027" endtime="20210730 15:36:09.028"/>
</kw>
<msg timestamp="20210730 15:36:09.028" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:09.026" endtime="20210730 15:36:09.028"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:09.031" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:09.028" endtime="20210730 15:36:09.032"/>
</kw>
<status status="PASS" starttime="20210730 15:36:09.025" endtime="20210730 15:36:09.033"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:36:09.034" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:36:09.034" endtime="20210730 15:36:09.041"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:36:10.546" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:36:09.042" endtime="20210730 15:36:10.547"/>
</kw>
<status status="PASS" starttime="20210730 15:36:09.033" endtime="20210730 15:36:10.547"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:10.548" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:10.548" endtime="20210730 15:36:10.548"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:10.548" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:10.548" endtime="20210730 15:36:10.548"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:10.549" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:10.548" endtime="20210730 15:36:10.549"/>
</kw>
<msg timestamp="20210730 15:36:10.549" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:10.547" endtime="20210730 15:36:10.549"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:36:10.550" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:36:10.549" endtime="20210730 15:36:10.550"/>
</kw>
<status status="PASS" starttime="20210730 15:36:10.547" endtime="20210730 15:36:10.550"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:36:10.551" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:36:10.551" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:36:10.550" endtime="20210730 15:36:10.551"/>
</kw>
<status status="PASS" starttime="20210730 15:36:10.550" endtime="20210730 15:36:10.551"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:36:10.552" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:36:10.552" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:36:10.551" endtime="20210730 15:36:10.552"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:36:10.552" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:36:10.552" endtime="20210730 15:36:10.552"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:10.553" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:10.552" endtime="20210730 15:36:10.553"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:10.553" endtime="20210730 15:36:10.553"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:10.554" endtime="20210730 15:36:10.554"/>
</kw>
<status status="PASS" starttime="20210730 15:36:10.552" endtime="20210730 15:36:10.554"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:10.554" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:10.554" endtime="20210730 15:36:10.554"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:10.554" endtime="20210730 15:36:10.555"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:10.555" endtime="20210730 15:36:10.555"/>
</kw>
<status status="PASS" starttime="20210730 15:36:10.554" endtime="20210730 15:36:10.555"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:10.556" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:10.556" endtime="20210730 15:36:10.556"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:10.556" endtime="20210730 15:36:10.557"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:10.557" endtime="20210730 15:36:10.557"/>
</kw>
<status status="PASS" starttime="20210730 15:36:10.555" endtime="20210730 15:36:10.557"/>
</iter>
<status status="PASS" starttime="20210730 15:36:10.552" endtime="20210730 15:36:10.557"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:36:10.558" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:36:10.557" endtime="20210730 15:36:10.558"/>
</kw>
<status status="PASS" starttime="20210730 15:36:10.551" endtime="20210730 15:36:10.558"/>
</kw>
<status status="PASS" starttime="20210730 15:36:09.003" endtime="20210730 15:36:10.558"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=# %123!&amp;</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:10.574" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:36:10.573" endtime="20210730 15:36:10.574"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:10.574" level="INFO">${payload} = {'username': '# %123!&amp;'}</msg>
<status status="PASS" starttime="20210730 15:36:10.574" endtime="20210730 15:36:10.574"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:10.584" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:10.585" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:10.574" endtime="20210730 15:36:10.585"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:10.585" endtime="20210730 15:36:10.585"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:10.585" endtime="20210730 15:36:10.585"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:10.574" endtime="20210730 15:36:10.585"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:10.574" endtime="20210730 15:36:10.585"/>
</for>
<status status="FAIL" starttime="20210730 15:36:10.572" endtime="20210730 15:36:10.585"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:10.572" endtime="20210730 15:36:10.585"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=# %123!&amp;</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:10.586" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:36:10.586" endtime="20210730 15:36:10.586"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:10.587" level="INFO">${payload} = {'username': '# %123!&amp;'}</msg>
<status status="PASS" starttime="20210730 15:36:10.587" endtime="20210730 15:36:10.587"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:10.592" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:10.592" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:10.587" endtime="20210730 15:36:10.592"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:10.592" endtime="20210730 15:36:10.592"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:10.592" endtime="20210730 15:36:10.592"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:10.587" endtime="20210730 15:36:10.592"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:10.587" endtime="20210730 15:36:10.593"/>
</for>
<status status="FAIL" starttime="20210730 15:36:10.586" endtime="20210730 15:36:10.593"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:10.585" endtime="20210730 15:36:10.593"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=# %123!&amp;</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:10.594" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:36:10.594" endtime="20210730 15:36:10.594"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:10.594" level="INFO">${payload} = {'username': '# %123!&amp;'}</msg>
<status status="PASS" starttime="20210730 15:36:10.594" endtime="20210730 15:36:10.594"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:10.599" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:10.599" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:10.595" endtime="20210730 15:36:10.599"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:10.599" endtime="20210730 15:36:10.600"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:10.600" endtime="20210730 15:36:10.600"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:10.595" endtime="20210730 15:36:10.600"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:10.595" endtime="20210730 15:36:10.600"/>
</for>
<status status="FAIL" starttime="20210730 15:36:10.593" endtime="20210730 15:36:10.600"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:10.593" endtime="20210730 15:36:10.600"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:10.572" endtime="20210730 15:36:10.600"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:10.604" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:10.614" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:10.614" level="INFO">${pids} = 5791
5798
5802</msg>
<status status="PASS" starttime="20210730 15:36:10.601" endtime="20210730 15:36:10.615"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:10.616" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:10.615" endtime="20210730 15:36:10.616"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:10.616" level="INFO">${pids} = ['5791', '5798', '5802']</msg>
<status status="PASS" starttime="20210730 15:36:10.616" endtime="20210730 15:36:10.616"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5791</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:10.620" level="INFO">Running command 'kill 5791 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:10.617" endtime="20210730 15:36:10.620"/>
</kw>
<status status="PASS" starttime="20210730 15:36:10.617" endtime="20210730 15:36:10.620"/>
</iter>
<iter>
<var name="${pid}">5798</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:10.624" level="INFO">Running command 'kill 5798 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:10.621" endtime="20210730 15:36:10.624"/>
</kw>
<status status="PASS" starttime="20210730 15:36:10.621" endtime="20210730 15:36:10.624"/>
</iter>
<iter>
<var name="${pid}">5802</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:10.628" level="INFO">Running command 'kill 5802 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:10.625" endtime="20210730 15:36:10.629"/>
</kw>
<status status="PASS" starttime="20210730 15:36:10.625" endtime="20210730 15:36:10.629"/>
</iter>
<status status="PASS" starttime="20210730 15:36:10.616" endtime="20210730 15:36:10.629"/>
</for>
<status status="PASS" starttime="20210730 15:36:10.616" endtime="20210730 15:36:10.629"/>
</branch>
<status status="PASS" starttime="20210730 15:36:10.616" endtime="20210730 15:36:10.629"/>
</if>
<status status="PASS" starttime="20210730 15:36:10.600" endtime="20210730 15:36:10.629"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '# %123!&amp;'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:36:09.003" endtime="20210730 15:36:10.630">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t37" name="With Each Valid Token, Updating Username Of Each System User With #¤%123!&amp;7683##() ?@#¤%&amp;34567 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:10.634" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:10.648" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:10.648" level="INFO">${pids} = 5831</msg>
<status status="PASS" starttime="20210730 15:36:10.631" endtime="20210730 15:36:10.648"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:10.650" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:10.649" endtime="20210730 15:36:10.650"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:10.652" level="INFO">${pids} = ['5831']</msg>
<status status="PASS" starttime="20210730 15:36:10.651" endtime="20210730 15:36:10.652"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5831</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:10.657" level="INFO">Running command 'kill 5831 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:10.652" endtime="20210730 15:36:10.657"/>
</kw>
<status status="PASS" starttime="20210730 15:36:10.652" endtime="20210730 15:36:10.657"/>
</iter>
<status status="PASS" starttime="20210730 15:36:10.652" endtime="20210730 15:36:10.658"/>
</for>
<status status="PASS" starttime="20210730 15:36:10.651" endtime="20210730 15:36:10.658"/>
</branch>
<status status="PASS" starttime="20210730 15:36:10.650" endtime="20210730 15:36:10.658"/>
</if>
<status status="PASS" starttime="20210730 15:36:10.631" endtime="20210730 15:36:10.658"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:10.659" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:10.659" endtime="20210730 15:36:10.659"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:10.660" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:10.660" endtime="20210730 15:36:10.660"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:10.660" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:10.660" endtime="20210730 15:36:10.660"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:10.661" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:10.661" endtime="20210730 15:36:10.661"/>
</kw>
<msg timestamp="20210730 15:36:10.661" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:10.659" endtime="20210730 15:36:10.661"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:10.664" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:10.661" endtime="20210730 15:36:10.666"/>
</kw>
<status status="PASS" starttime="20210730 15:36:10.658" endtime="20210730 15:36:10.666"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:36:10.667" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:36:10.667" endtime="20210730 15:36:10.681"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:36:12.184" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:36:10.682" endtime="20210730 15:36:12.184"/>
</kw>
<status status="PASS" starttime="20210730 15:36:10.666" endtime="20210730 15:36:12.185"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:12.186" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:12.185" endtime="20210730 15:36:12.186"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:12.186" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:12.186" endtime="20210730 15:36:12.186"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:12.187" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:12.186" endtime="20210730 15:36:12.187"/>
</kw>
<msg timestamp="20210730 15:36:12.187" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:12.185" endtime="20210730 15:36:12.187"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:36:12.187" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:36:12.187" endtime="20210730 15:36:12.188"/>
</kw>
<status status="PASS" starttime="20210730 15:36:12.185" endtime="20210730 15:36:12.188"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:36:12.188" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:36:12.188" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:36:12.188" endtime="20210730 15:36:12.188"/>
</kw>
<status status="PASS" starttime="20210730 15:36:12.188" endtime="20210730 15:36:12.188"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:36:12.189" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:36:12.189" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:36:12.189" endtime="20210730 15:36:12.189"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:36:12.190" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:36:12.190" endtime="20210730 15:36:12.190"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:12.190" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:12.190" endtime="20210730 15:36:12.190"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:12.191" endtime="20210730 15:36:12.191"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:12.191" endtime="20210730 15:36:12.192"/>
</kw>
<status status="PASS" starttime="20210730 15:36:12.190" endtime="20210730 15:36:12.192"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:12.192" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:12.192" endtime="20210730 15:36:12.192"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:12.192" endtime="20210730 15:36:12.193"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:12.193" endtime="20210730 15:36:12.193"/>
</kw>
<status status="PASS" starttime="20210730 15:36:12.192" endtime="20210730 15:36:12.193"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:12.194" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:12.194" endtime="20210730 15:36:12.194"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:12.194" endtime="20210730 15:36:12.195"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:12.195" endtime="20210730 15:36:12.195"/>
</kw>
<status status="PASS" starttime="20210730 15:36:12.193" endtime="20210730 15:36:12.195"/>
</iter>
<status status="PASS" starttime="20210730 15:36:12.190" endtime="20210730 15:36:12.195"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:36:12.195" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:36:12.195" endtime="20210730 15:36:12.195"/>
</kw>
<status status="PASS" starttime="20210730 15:36:12.189" endtime="20210730 15:36:12.196"/>
</kw>
<status status="PASS" starttime="20210730 15:36:10.631" endtime="20210730 15:36:12.196"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤%123!&amp;7683##() ?@#¤%&amp;34567</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:12.197" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:36:12.197" endtime="20210730 15:36:12.197"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:12.197" level="INFO">${payload} = {'username': '#¤%123!&amp;7683##() ?@#¤%&amp;34567'}</msg>
<status status="PASS" starttime="20210730 15:36:12.197" endtime="20210730 15:36:12.197"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:12.207" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:12.207" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:12.198" endtime="20210730 15:36:12.207"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:12.207" endtime="20210730 15:36:12.207"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:12.207" endtime="20210730 15:36:12.207"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:12.198" endtime="20210730 15:36:12.208"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:12.197" endtime="20210730 15:36:12.208"/>
</for>
<status status="FAIL" starttime="20210730 15:36:12.196" endtime="20210730 15:36:12.208"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:12.196" endtime="20210730 15:36:12.208"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤%123!&amp;7683##() ?@#¤%&amp;34567</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:12.209" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:36:12.209" endtime="20210730 15:36:12.209"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:12.210" level="INFO">${payload} = {'username': '#¤%123!&amp;7683##() ?@#¤%&amp;34567'}</msg>
<status status="PASS" starttime="20210730 15:36:12.209" endtime="20210730 15:36:12.210"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:12.216" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:12.216" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:12.212" endtime="20210730 15:36:12.216"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:12.216" endtime="20210730 15:36:12.217"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:12.217" endtime="20210730 15:36:12.217"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:12.211" endtime="20210730 15:36:12.217"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:12.210" endtime="20210730 15:36:12.217"/>
</for>
<status status="FAIL" starttime="20210730 15:36:12.208" endtime="20210730 15:36:12.217"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:12.208" endtime="20210730 15:36:12.217"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤%123!&amp;7683##() ?@#¤%&amp;34567</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:12.218" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:36:12.218" endtime="20210730 15:36:12.218"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:12.218" level="INFO">${payload} = {'username': '#¤%123!&amp;7683##() ?@#¤%&amp;34567'}</msg>
<status status="PASS" starttime="20210730 15:36:12.218" endtime="20210730 15:36:12.218"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:12.222" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:12.223" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:12.219" endtime="20210730 15:36:12.223"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:12.223" endtime="20210730 15:36:12.223"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:12.223" endtime="20210730 15:36:12.223"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:12.219" endtime="20210730 15:36:12.223"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:12.218" endtime="20210730 15:36:12.223"/>
</for>
<status status="FAIL" starttime="20210730 15:36:12.217" endtime="20210730 15:36:12.223"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:12.217" endtime="20210730 15:36:12.223"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:12.196" endtime="20210730 15:36:12.223"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:12.228" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:12.237" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:12.237" level="INFO">${pids} = 5854
5861
5866</msg>
<status status="PASS" starttime="20210730 15:36:12.224" endtime="20210730 15:36:12.237"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:12.238" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:12.238" endtime="20210730 15:36:12.238"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:12.239" level="INFO">${pids} = ['5854', '5861', '5866']</msg>
<status status="PASS" starttime="20210730 15:36:12.239" endtime="20210730 15:36:12.239"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5854</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:12.244" level="INFO">Running command 'kill 5854 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:12.239" endtime="20210730 15:36:12.245"/>
</kw>
<status status="PASS" starttime="20210730 15:36:12.239" endtime="20210730 15:36:12.245"/>
</iter>
<iter>
<var name="${pid}">5861</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:12.249" level="INFO">Running command 'kill 5861 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:12.246" endtime="20210730 15:36:12.250"/>
</kw>
<status status="PASS" starttime="20210730 15:36:12.246" endtime="20210730 15:36:12.250"/>
</iter>
<iter>
<var name="${pid}">5866</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:12.254" level="INFO">Running command 'kill 5866 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:12.251" endtime="20210730 15:36:12.255"/>
</kw>
<status status="PASS" starttime="20210730 15:36:12.251" endtime="20210730 15:36:12.255"/>
</iter>
<status status="PASS" starttime="20210730 15:36:12.239" endtime="20210730 15:36:12.255"/>
</for>
<status status="PASS" starttime="20210730 15:36:12.238" endtime="20210730 15:36:12.255"/>
</branch>
<status status="PASS" starttime="20210730 15:36:12.238" endtime="20210730 15:36:12.255"/>
</if>
<status status="PASS" starttime="20210730 15:36:12.224" endtime="20210730 15:36:12.255"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤%123!&amp;7683##() ?@#¤%&amp;34567'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:36:10.630" endtime="20210730 15:36:12.256">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t38" name="With Each Valid Token, Updating Username Of Each System User With #¤12 ab Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:12.261" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:12.271" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:12.271" level="INFO">${pids} = 5895</msg>
<status status="PASS" starttime="20210730 15:36:12.258" endtime="20210730 15:36:12.271"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:12.272" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:12.271" endtime="20210730 15:36:12.272"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:12.273" level="INFO">${pids} = ['5895']</msg>
<status status="PASS" starttime="20210730 15:36:12.272" endtime="20210730 15:36:12.273"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5895</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:12.278" level="INFO">Running command 'kill 5895 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:12.273" endtime="20210730 15:36:12.279"/>
</kw>
<status status="PASS" starttime="20210730 15:36:12.273" endtime="20210730 15:36:12.279"/>
</iter>
<status status="PASS" starttime="20210730 15:36:12.273" endtime="20210730 15:36:12.279"/>
</for>
<status status="PASS" starttime="20210730 15:36:12.272" endtime="20210730 15:36:12.279"/>
</branch>
<status status="PASS" starttime="20210730 15:36:12.272" endtime="20210730 15:36:12.279"/>
</if>
<status status="PASS" starttime="20210730 15:36:12.258" endtime="20210730 15:36:12.279"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:12.280" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:12.280" endtime="20210730 15:36:12.280"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:12.281" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:12.281" endtime="20210730 15:36:12.281"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:12.281" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:12.281" endtime="20210730 15:36:12.281"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:12.282" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:12.282" endtime="20210730 15:36:12.282"/>
</kw>
<msg timestamp="20210730 15:36:12.282" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:12.280" endtime="20210730 15:36:12.282"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:12.289" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:12.282" endtime="20210730 15:36:12.291"/>
</kw>
<status status="PASS" starttime="20210730 15:36:12.279" endtime="20210730 15:36:12.292"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:36:12.293" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:36:12.293" endtime="20210730 15:36:12.297"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:36:13.799" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:36:12.298" endtime="20210730 15:36:13.799"/>
</kw>
<status status="PASS" starttime="20210730 15:36:12.292" endtime="20210730 15:36:13.799"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:13.800" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:13.800" endtime="20210730 15:36:13.800"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:13.801" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:13.800" endtime="20210730 15:36:13.801"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:13.801" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:13.801" endtime="20210730 15:36:13.801"/>
</kw>
<msg timestamp="20210730 15:36:13.801" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:13.800" endtime="20210730 15:36:13.801"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:36:13.802" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:36:13.801" endtime="20210730 15:36:13.802"/>
</kw>
<status status="PASS" starttime="20210730 15:36:13.799" endtime="20210730 15:36:13.802"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:36:13.803" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:36:13.803" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:36:13.803" endtime="20210730 15:36:13.803"/>
</kw>
<status status="PASS" starttime="20210730 15:36:13.802" endtime="20210730 15:36:13.803"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:36:13.804" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:36:13.804" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:36:13.803" endtime="20210730 15:36:13.804"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:36:13.804" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:36:13.804" endtime="20210730 15:36:13.804"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:13.805" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:13.805" endtime="20210730 15:36:13.805"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:13.805" endtime="20210730 15:36:13.806"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:13.806" endtime="20210730 15:36:13.806"/>
</kw>
<status status="PASS" starttime="20210730 15:36:13.805" endtime="20210730 15:36:13.806"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:13.807" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:13.807" endtime="20210730 15:36:13.807"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:13.807" endtime="20210730 15:36:13.808"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:13.808" endtime="20210730 15:36:13.808"/>
</kw>
<status status="PASS" starttime="20210730 15:36:13.807" endtime="20210730 15:36:13.808"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:13.809" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:13.808" endtime="20210730 15:36:13.809"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:13.809" endtime="20210730 15:36:13.810"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:13.810" endtime="20210730 15:36:13.810"/>
</kw>
<status status="PASS" starttime="20210730 15:36:13.808" endtime="20210730 15:36:13.810"/>
</iter>
<status status="PASS" starttime="20210730 15:36:13.804" endtime="20210730 15:36:13.810"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:36:13.811" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:36:13.811" endtime="20210730 15:36:13.811"/>
</kw>
<status status="PASS" starttime="20210730 15:36:13.803" endtime="20210730 15:36:13.811"/>
</kw>
<status status="PASS" starttime="20210730 15:36:12.258" endtime="20210730 15:36:13.811"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤12 ab</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:13.813" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:36:13.813" endtime="20210730 15:36:13.813"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:13.814" level="INFO">${payload} = {'username': '#¤12 ab'}</msg>
<status status="PASS" starttime="20210730 15:36:13.814" endtime="20210730 15:36:13.814"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:13.823" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:13.824" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:13.814" endtime="20210730 15:36:13.824"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:13.824" endtime="20210730 15:36:13.824"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:13.824" endtime="20210730 15:36:13.824"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:13.814" endtime="20210730 15:36:13.824"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:13.814" endtime="20210730 15:36:13.824"/>
</for>
<status status="FAIL" starttime="20210730 15:36:13.812" endtime="20210730 15:36:13.824"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:13.812" endtime="20210730 15:36:13.824"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤12 ab</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:13.826" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:36:13.825" endtime="20210730 15:36:13.826"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:13.826" level="INFO">${payload} = {'username': '#¤12 ab'}</msg>
<status status="PASS" starttime="20210730 15:36:13.826" endtime="20210730 15:36:13.826"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:13.831" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:13.831" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:13.827" endtime="20210730 15:36:13.831"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:13.831" endtime="20210730 15:36:13.831"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:13.831" endtime="20210730 15:36:13.831"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:13.826" endtime="20210730 15:36:13.831"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:13.826" endtime="20210730 15:36:13.831"/>
</for>
<status status="FAIL" starttime="20210730 15:36:13.825" endtime="20210730 15:36:13.831"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:13.825" endtime="20210730 15:36:13.831"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤12 ab</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:13.832" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:36:13.832" endtime="20210730 15:36:13.832"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:13.833" level="INFO">${payload} = {'username': '#¤12 ab'}</msg>
<status status="PASS" starttime="20210730 15:36:13.833" endtime="20210730 15:36:13.833"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:13.837" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:13.838" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:13.833" endtime="20210730 15:36:13.838"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:13.838" endtime="20210730 15:36:13.838"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:13.838" endtime="20210730 15:36:13.838"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:13.833" endtime="20210730 15:36:13.838"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:13.833" endtime="20210730 15:36:13.838"/>
</for>
<status status="FAIL" starttime="20210730 15:36:13.832" endtime="20210730 15:36:13.838"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:13.831" endtime="20210730 15:36:13.839"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:13.812" endtime="20210730 15:36:13.839"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:13.845" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:13.856" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:13.856" level="INFO">${pids} = 5918
5925
5929</msg>
<status status="PASS" starttime="20210730 15:36:13.840" endtime="20210730 15:36:13.856"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:13.857" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:13.857" endtime="20210730 15:36:13.857"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:13.858" level="INFO">${pids} = ['5918', '5925', '5929']</msg>
<status status="PASS" starttime="20210730 15:36:13.858" endtime="20210730 15:36:13.858"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5918</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:13.862" level="INFO">Running command 'kill 5918 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:13.859" endtime="20210730 15:36:13.862"/>
</kw>
<status status="PASS" starttime="20210730 15:36:13.858" endtime="20210730 15:36:13.862"/>
</iter>
<iter>
<var name="${pid}">5925</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:13.868" level="INFO">Running command 'kill 5925 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:13.862" endtime="20210730 15:36:13.870"/>
</kw>
<status status="PASS" starttime="20210730 15:36:13.862" endtime="20210730 15:36:13.870"/>
</iter>
<iter>
<var name="${pid}">5929</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:13.876" level="INFO">Running command 'kill 5929 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:13.871" endtime="20210730 15:36:13.876"/>
</kw>
<status status="PASS" starttime="20210730 15:36:13.871" endtime="20210730 15:36:13.876"/>
</iter>
<status status="PASS" starttime="20210730 15:36:13.858" endtime="20210730 15:36:13.876"/>
</for>
<status status="PASS" starttime="20210730 15:36:13.858" endtime="20210730 15:36:13.876"/>
</branch>
<status status="PASS" starttime="20210730 15:36:13.857" endtime="20210730 15:36:13.877"/>
</if>
<status status="PASS" starttime="20210730 15:36:13.839" endtime="20210730 15:36:13.877"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤12 ab'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:36:12.257" endtime="20210730 15:36:13.878">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t39" name="With Each Valid Token, Updating Username Of Each System User With # 123abc Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:13.883" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:13.893" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:13.893" level="INFO">${pids} = 5958</msg>
<status status="PASS" starttime="20210730 15:36:13.880" endtime="20210730 15:36:13.893"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:13.894" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:13.894" endtime="20210730 15:36:13.894"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:13.895" level="INFO">${pids} = ['5958']</msg>
<status status="PASS" starttime="20210730 15:36:13.895" endtime="20210730 15:36:13.895"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5958</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:13.899" level="INFO">Running command 'kill 5958 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:13.895" endtime="20210730 15:36:13.899"/>
</kw>
<status status="PASS" starttime="20210730 15:36:13.895" endtime="20210730 15:36:13.899"/>
</iter>
<status status="PASS" starttime="20210730 15:36:13.895" endtime="20210730 15:36:13.899"/>
</for>
<status status="PASS" starttime="20210730 15:36:13.894" endtime="20210730 15:36:13.899"/>
</branch>
<status status="PASS" starttime="20210730 15:36:13.894" endtime="20210730 15:36:13.899"/>
</if>
<status status="PASS" starttime="20210730 15:36:13.880" endtime="20210730 15:36:13.899"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:13.900" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:13.900" endtime="20210730 15:36:13.901"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:13.901" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:13.901" endtime="20210730 15:36:13.901"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:13.902" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:13.901" endtime="20210730 15:36:13.902"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:13.902" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:13.902" endtime="20210730 15:36:13.902"/>
</kw>
<msg timestamp="20210730 15:36:13.902" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:13.901" endtime="20210730 15:36:13.902"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:13.908" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:13.903" endtime="20210730 15:36:13.910"/>
</kw>
<status status="PASS" starttime="20210730 15:36:13.900" endtime="20210730 15:36:13.910"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:36:13.912" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:36:13.911" endtime="20210730 15:36:13.916"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:36:15.419" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:36:13.916" endtime="20210730 15:36:15.419"/>
</kw>
<status status="PASS" starttime="20210730 15:36:13.911" endtime="20210730 15:36:15.419"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:15.420" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:15.420" endtime="20210730 15:36:15.420"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:15.421" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:15.420" endtime="20210730 15:36:15.421"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:15.421" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:15.421" endtime="20210730 15:36:15.421"/>
</kw>
<msg timestamp="20210730 15:36:15.421" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:15.420" endtime="20210730 15:36:15.421"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:36:15.422" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:36:15.421" endtime="20210730 15:36:15.422"/>
</kw>
<status status="PASS" starttime="20210730 15:36:15.419" endtime="20210730 15:36:15.422"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:36:15.423" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:36:15.423" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:36:15.423" endtime="20210730 15:36:15.423"/>
</kw>
<status status="PASS" starttime="20210730 15:36:15.422" endtime="20210730 15:36:15.423"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:36:15.424" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:36:15.424" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:36:15.423" endtime="20210730 15:36:15.424"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:36:15.424" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:36:15.424" endtime="20210730 15:36:15.424"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:15.425" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:15.425" endtime="20210730 15:36:15.425"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:15.425" endtime="20210730 15:36:15.426"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:15.427" endtime="20210730 15:36:15.427"/>
</kw>
<status status="PASS" starttime="20210730 15:36:15.425" endtime="20210730 15:36:15.427"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:15.427" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:15.427" endtime="20210730 15:36:15.427"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:15.427" endtime="20210730 15:36:15.428"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:15.428" endtime="20210730 15:36:15.428"/>
</kw>
<status status="PASS" starttime="20210730 15:36:15.427" endtime="20210730 15:36:15.428"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:15.429" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:15.429" endtime="20210730 15:36:15.429"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:15.429" endtime="20210730 15:36:15.430"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:15.430" endtime="20210730 15:36:15.430"/>
</kw>
<status status="PASS" starttime="20210730 15:36:15.428" endtime="20210730 15:36:15.430"/>
</iter>
<status status="PASS" starttime="20210730 15:36:15.425" endtime="20210730 15:36:15.430"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:36:15.431" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:36:15.430" endtime="20210730 15:36:15.431"/>
</kw>
<status status="PASS" starttime="20210730 15:36:15.423" endtime="20210730 15:36:15.431"/>
</kw>
<status status="PASS" starttime="20210730 15:36:13.879" endtime="20210730 15:36:15.431"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=# 123abc</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:15.432" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:36:15.432" endtime="20210730 15:36:15.432"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:15.433" level="INFO">${payload} = {'username': '# 123abc'}</msg>
<status status="PASS" starttime="20210730 15:36:15.432" endtime="20210730 15:36:15.433"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:15.443" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:15.444" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:15.433" endtime="20210730 15:36:15.444"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:15.444" endtime="20210730 15:36:15.444"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:15.445" endtime="20210730 15:36:15.445"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:15.433" endtime="20210730 15:36:15.445"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:15.433" endtime="20210730 15:36:15.445"/>
</for>
<status status="FAIL" starttime="20210730 15:36:15.431" endtime="20210730 15:36:15.445"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:15.431" endtime="20210730 15:36:15.445"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=# 123abc</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:15.446" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:36:15.446" endtime="20210730 15:36:15.446"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:15.447" level="INFO">${payload} = {'username': '# 123abc'}</msg>
<status status="PASS" starttime="20210730 15:36:15.447" endtime="20210730 15:36:15.447"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:15.451" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:15.452" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:15.447" endtime="20210730 15:36:15.452"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:15.452" endtime="20210730 15:36:15.452"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:15.452" endtime="20210730 15:36:15.452"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:15.447" endtime="20210730 15:36:15.452"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:15.447" endtime="20210730 15:36:15.452"/>
</for>
<status status="FAIL" starttime="20210730 15:36:15.445" endtime="20210730 15:36:15.452"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:15.445" endtime="20210730 15:36:15.452"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=# 123abc</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:15.454" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:36:15.453" endtime="20210730 15:36:15.454"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:15.454" level="INFO">${payload} = {'username': '# 123abc'}</msg>
<status status="PASS" starttime="20210730 15:36:15.454" endtime="20210730 15:36:15.454"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:15.459" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:15.459" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:15.454" endtime="20210730 15:36:15.459"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:15.459" endtime="20210730 15:36:15.459"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:15.459" endtime="20210730 15:36:15.459"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:15.454" endtime="20210730 15:36:15.460"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:15.454" endtime="20210730 15:36:15.460"/>
</for>
<status status="FAIL" starttime="20210730 15:36:15.453" endtime="20210730 15:36:15.460"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:15.452" endtime="20210730 15:36:15.460"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:15.431" endtime="20210730 15:36:15.460"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:15.465" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:15.475" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:15.475" level="INFO">${pids} = 5981
5988
5992</msg>
<status status="PASS" starttime="20210730 15:36:15.461" endtime="20210730 15:36:15.475"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:15.477" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:15.475" endtime="20210730 15:36:15.477"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:15.478" level="INFO">${pids} = ['5981', '5988', '5992']</msg>
<status status="PASS" starttime="20210730 15:36:15.477" endtime="20210730 15:36:15.478"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5981</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:15.481" level="INFO">Running command 'kill 5981 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:15.478" endtime="20210730 15:36:15.482"/>
</kw>
<status status="PASS" starttime="20210730 15:36:15.478" endtime="20210730 15:36:15.482"/>
</iter>
<iter>
<var name="${pid}">5988</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:15.485" level="INFO">Running command 'kill 5988 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:15.482" endtime="20210730 15:36:15.485"/>
</kw>
<status status="PASS" starttime="20210730 15:36:15.482" endtime="20210730 15:36:15.485"/>
</iter>
<iter>
<var name="${pid}">5992</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:15.489" level="INFO">Running command 'kill 5992 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:15.486" endtime="20210730 15:36:15.489"/>
</kw>
<status status="PASS" starttime="20210730 15:36:15.485" endtime="20210730 15:36:15.489"/>
</iter>
<status status="PASS" starttime="20210730 15:36:15.478" endtime="20210730 15:36:15.489"/>
</for>
<status status="PASS" starttime="20210730 15:36:15.477" endtime="20210730 15:36:15.490"/>
</branch>
<status status="PASS" starttime="20210730 15:36:15.477" endtime="20210730 15:36:15.490"/>
</if>
<status status="PASS" starttime="20210730 15:36:15.460" endtime="20210730 15:36:15.490"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '# 123abc'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:36:13.878" endtime="20210730 15:36:15.490">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t40" name="With Each Valid Token, Updating Username Of Each System User With #¤/&amp;  !123abc456hjk Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:15.496" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:15.505" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:15.505" level="INFO">${pids} = 6021</msg>
<status status="PASS" starttime="20210730 15:36:15.492" endtime="20210730 15:36:15.505"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:15.506" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:15.506" endtime="20210730 15:36:15.506"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:15.507" level="INFO">${pids} = ['6021']</msg>
<status status="PASS" starttime="20210730 15:36:15.507" endtime="20210730 15:36:15.507"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">6021</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:15.512" level="INFO">Running command 'kill 6021 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:15.508" endtime="20210730 15:36:15.512"/>
</kw>
<status status="PASS" starttime="20210730 15:36:15.507" endtime="20210730 15:36:15.512"/>
</iter>
<status status="PASS" starttime="20210730 15:36:15.507" endtime="20210730 15:36:15.512"/>
</for>
<status status="PASS" starttime="20210730 15:36:15.507" endtime="20210730 15:36:15.512"/>
</branch>
<status status="PASS" starttime="20210730 15:36:15.507" endtime="20210730 15:36:15.513"/>
</if>
<status status="PASS" starttime="20210730 15:36:15.492" endtime="20210730 15:36:15.513"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:15.514" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:15.514" endtime="20210730 15:36:15.514"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:15.515" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:15.515" endtime="20210730 15:36:15.515"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:15.515" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:15.515" endtime="20210730 15:36:15.515"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:15.516" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:15.515" endtime="20210730 15:36:15.516"/>
</kw>
<msg timestamp="20210730 15:36:15.516" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:15.514" endtime="20210730 15:36:15.516"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:15.520" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:15.516" endtime="20210730 15:36:15.524"/>
</kw>
<status status="PASS" starttime="20210730 15:36:15.513" endtime="20210730 15:36:15.524"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:36:15.526" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:36:15.525" endtime="20210730 15:36:15.532"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:36:17.034" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:36:15.532" endtime="20210730 15:36:17.034"/>
</kw>
<status status="PASS" starttime="20210730 15:36:15.525" endtime="20210730 15:36:17.034"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:17.035" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:17.035" endtime="20210730 15:36:17.035"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:17.036" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:17.036" endtime="20210730 15:36:17.036"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:17.036" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:17.036" endtime="20210730 15:36:17.036"/>
</kw>
<msg timestamp="20210730 15:36:17.037" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:17.035" endtime="20210730 15:36:17.037"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:36:17.037" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:36:17.037" endtime="20210730 15:36:17.038"/>
</kw>
<status status="PASS" starttime="20210730 15:36:17.034" endtime="20210730 15:36:17.038"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:36:17.039" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:36:17.039" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:36:17.038" endtime="20210730 15:36:17.039"/>
</kw>
<status status="PASS" starttime="20210730 15:36:17.038" endtime="20210730 15:36:17.039"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:36:17.040" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:36:17.040" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:36:17.039" endtime="20210730 15:36:17.040"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:36:17.040" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:36:17.040" endtime="20210730 15:36:17.040"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:17.040" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:17.040" endtime="20210730 15:36:17.041"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:17.041" endtime="20210730 15:36:17.041"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:17.041" endtime="20210730 15:36:17.042"/>
</kw>
<status status="PASS" starttime="20210730 15:36:17.040" endtime="20210730 15:36:17.042"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:17.042" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:17.042" endtime="20210730 15:36:17.043"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:17.043" endtime="20210730 15:36:17.044"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:17.044" endtime="20210730 15:36:17.044"/>
</kw>
<status status="PASS" starttime="20210730 15:36:17.042" endtime="20210730 15:36:17.044"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:17.045" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:17.045" endtime="20210730 15:36:17.045"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:17.045" endtime="20210730 15:36:17.046"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:17.046" endtime="20210730 15:36:17.046"/>
</kw>
<status status="PASS" starttime="20210730 15:36:17.045" endtime="20210730 15:36:17.046"/>
</iter>
<status status="PASS" starttime="20210730 15:36:17.040" endtime="20210730 15:36:17.046"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:36:17.047" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:36:17.046" endtime="20210730 15:36:17.047"/>
</kw>
<status status="PASS" starttime="20210730 15:36:17.039" endtime="20210730 15:36:17.047"/>
</kw>
<status status="PASS" starttime="20210730 15:36:15.492" endtime="20210730 15:36:17.047"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/&amp;\ \ !123abc456hjk</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:17.048" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:36:17.048" endtime="20210730 15:36:17.049"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:17.049" level="INFO">${payload} = {'username': '#¤/&amp;  !123abc456hjk'}</msg>
<status status="PASS" starttime="20210730 15:36:17.049" endtime="20210730 15:36:17.049"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:17.058" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:17.059" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:17.049" endtime="20210730 15:36:17.059"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:17.059" endtime="20210730 15:36:17.059"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:17.059" endtime="20210730 15:36:17.059"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:17.049" endtime="20210730 15:36:17.059"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:17.049" endtime="20210730 15:36:17.059"/>
</for>
<status status="FAIL" starttime="20210730 15:36:17.048" endtime="20210730 15:36:17.059"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:17.047" endtime="20210730 15:36:17.059"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/&amp;\ \ !123abc456hjk</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:17.061" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:36:17.060" endtime="20210730 15:36:17.061"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:17.061" level="INFO">${payload} = {'username': '#¤/&amp;  !123abc456hjk'}</msg>
<status status="PASS" starttime="20210730 15:36:17.061" endtime="20210730 15:36:17.061"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:17.065" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:17.065" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:17.061" endtime="20210730 15:36:17.065"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:17.065" endtime="20210730 15:36:17.066"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:17.066" endtime="20210730 15:36:17.066"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:17.061" endtime="20210730 15:36:17.066"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:17.061" endtime="20210730 15:36:17.066"/>
</for>
<status status="FAIL" starttime="20210730 15:36:17.060" endtime="20210730 15:36:17.066"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:17.060" endtime="20210730 15:36:17.066"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/&amp;\ \ !123abc456hjk</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:17.068" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:36:17.067" endtime="20210730 15:36:17.068"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:17.068" level="INFO">${payload} = {'username': '#¤/&amp;  !123abc456hjk'}</msg>
<status status="PASS" starttime="20210730 15:36:17.068" endtime="20210730 15:36:17.068"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:17.072" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:17.073" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:17.068" endtime="20210730 15:36:17.073"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:17.073" endtime="20210730 15:36:17.073"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:17.073" endtime="20210730 15:36:17.073"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:17.068" endtime="20210730 15:36:17.073"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:17.068" endtime="20210730 15:36:17.073"/>
</for>
<status status="FAIL" starttime="20210730 15:36:17.067" endtime="20210730 15:36:17.073"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:17.066" endtime="20210730 15:36:17.073"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:17.047" endtime="20210730 15:36:17.073"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:17.080" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:17.090" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:17.090" level="INFO">${pids} = 6057
6067
6078</msg>
<status status="PASS" starttime="20210730 15:36:17.074" endtime="20210730 15:36:17.090"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:17.091" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:17.090" endtime="20210730 15:36:17.091"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:17.092" level="INFO">${pids} = ['6057', '6067', '6078']</msg>
<status status="PASS" starttime="20210730 15:36:17.091" endtime="20210730 15:36:17.092"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">6057</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:17.095" level="INFO">Running command 'kill 6057 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:17.092" endtime="20210730 15:36:17.095"/>
</kw>
<status status="PASS" starttime="20210730 15:36:17.092" endtime="20210730 15:36:17.095"/>
</iter>
<iter>
<var name="${pid}">6067</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:17.099" level="INFO">Running command 'kill 6067 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:17.096" endtime="20210730 15:36:17.100"/>
</kw>
<status status="PASS" starttime="20210730 15:36:17.095" endtime="20210730 15:36:17.100"/>
</iter>
<iter>
<var name="${pid}">6078</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:17.105" level="INFO">Running command 'kill 6078 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:17.100" endtime="20210730 15:36:17.105"/>
</kw>
<status status="PASS" starttime="20210730 15:36:17.100" endtime="20210730 15:36:17.105"/>
</iter>
<status status="PASS" starttime="20210730 15:36:17.092" endtime="20210730 15:36:17.106"/>
</for>
<status status="PASS" starttime="20210730 15:36:17.091" endtime="20210730 15:36:17.106"/>
</branch>
<status status="PASS" starttime="20210730 15:36:17.091" endtime="20210730 15:36:17.106"/>
</if>
<status status="PASS" starttime="20210730 15:36:17.074" endtime="20210730 15:36:17.106"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤/&amp; !123abc456hjk'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:36:15.491" endtime="20210730 15:36:17.106">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t41" name="With Each Valid Token, Updating Username Of Each System User With #¤ abc! Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:17.112" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:17.123" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:17.123" level="INFO">${pids} = 6125</msg>
<status status="PASS" starttime="20210730 15:36:17.109" endtime="20210730 15:36:17.123"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:17.124" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:17.124" endtime="20210730 15:36:17.124"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:17.125" level="INFO">${pids} = ['6125']</msg>
<status status="PASS" starttime="20210730 15:36:17.125" endtime="20210730 15:36:17.125"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">6125</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:17.129" level="INFO">Running command 'kill 6125 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:17.126" endtime="20210730 15:36:17.130"/>
</kw>
<status status="PASS" starttime="20210730 15:36:17.126" endtime="20210730 15:36:17.130"/>
</iter>
<status status="PASS" starttime="20210730 15:36:17.125" endtime="20210730 15:36:17.130"/>
</for>
<status status="PASS" starttime="20210730 15:36:17.124" endtime="20210730 15:36:17.130"/>
</branch>
<status status="PASS" starttime="20210730 15:36:17.124" endtime="20210730 15:36:17.130"/>
</if>
<status status="PASS" starttime="20210730 15:36:17.108" endtime="20210730 15:36:17.130"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:17.131" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:17.131" endtime="20210730 15:36:17.131"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:17.132" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:17.131" endtime="20210730 15:36:17.132"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:17.132" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:17.132" endtime="20210730 15:36:17.132"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:17.133" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:17.132" endtime="20210730 15:36:17.133"/>
</kw>
<msg timestamp="20210730 15:36:17.133" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:17.131" endtime="20210730 15:36:17.133"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:17.136" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:17.133" endtime="20210730 15:36:17.138"/>
</kw>
<status status="PASS" starttime="20210730 15:36:17.130" endtime="20210730 15:36:17.139"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:36:17.140" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:36:17.140" endtime="20210730 15:36:17.145"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:36:18.648" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:36:17.145" endtime="20210730 15:36:18.648"/>
</kw>
<status status="PASS" starttime="20210730 15:36:17.139" endtime="20210730 15:36:18.648"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:18.649" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:18.649" endtime="20210730 15:36:18.649"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:18.650" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:18.649" endtime="20210730 15:36:18.650"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:18.650" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:18.650" endtime="20210730 15:36:18.650"/>
</kw>
<msg timestamp="20210730 15:36:18.650" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:18.649" endtime="20210730 15:36:18.650"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:36:18.651" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:36:18.650" endtime="20210730 15:36:18.651"/>
</kw>
<status status="PASS" starttime="20210730 15:36:18.648" endtime="20210730 15:36:18.651"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:36:18.652" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:36:18.652" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:36:18.651" endtime="20210730 15:36:18.652"/>
</kw>
<status status="PASS" starttime="20210730 15:36:18.651" endtime="20210730 15:36:18.652"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:36:18.653" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:36:18.653" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:36:18.652" endtime="20210730 15:36:18.653"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:36:18.653" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:36:18.653" endtime="20210730 15:36:18.653"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:18.654" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:18.653" endtime="20210730 15:36:18.654"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:18.654" endtime="20210730 15:36:18.654"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:18.655" endtime="20210730 15:36:18.655"/>
</kw>
<status status="PASS" starttime="20210730 15:36:18.653" endtime="20210730 15:36:18.655"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:18.655" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:18.655" endtime="20210730 15:36:18.655"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:18.655" endtime="20210730 15:36:18.656"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:18.656" endtime="20210730 15:36:18.656"/>
</kw>
<status status="PASS" starttime="20210730 15:36:18.655" endtime="20210730 15:36:18.656"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:18.657" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:18.656" endtime="20210730 15:36:18.657"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:18.657" endtime="20210730 15:36:18.658"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:18.659" endtime="20210730 15:36:18.659"/>
</kw>
<status status="PASS" starttime="20210730 15:36:18.656" endtime="20210730 15:36:18.659"/>
</iter>
<status status="PASS" starttime="20210730 15:36:18.653" endtime="20210730 15:36:18.659"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:36:18.660" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:36:18.659" endtime="20210730 15:36:18.660"/>
</kw>
<status status="PASS" starttime="20210730 15:36:18.652" endtime="20210730 15:36:18.660"/>
</kw>
<status status="PASS" starttime="20210730 15:36:17.108" endtime="20210730 15:36:18.660"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤ abc!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:18.664" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:36:18.662" endtime="20210730 15:36:18.664"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:18.665" level="INFO">${payload} = {'username': '#¤ abc!'}</msg>
<status status="PASS" starttime="20210730 15:36:18.665" endtime="20210730 15:36:18.665"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:18.676" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:18.676" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:18.667" endtime="20210730 15:36:18.676"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:18.677" endtime="20210730 15:36:18.678"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:18.678" endtime="20210730 15:36:18.678"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:18.666" endtime="20210730 15:36:18.679"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:18.665" endtime="20210730 15:36:18.679"/>
</for>
<status status="FAIL" starttime="20210730 15:36:18.660" endtime="20210730 15:36:18.679"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:18.660" endtime="20210730 15:36:18.679"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤ abc!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:18.680" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:36:18.680" endtime="20210730 15:36:18.680"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:18.680" level="INFO">${payload} = {'username': '#¤ abc!'}</msg>
<status status="PASS" starttime="20210730 15:36:18.680" endtime="20210730 15:36:18.680"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:18.685" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:18.685" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:18.681" endtime="20210730 15:36:18.685"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:18.685" endtime="20210730 15:36:18.685"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:18.685" endtime="20210730 15:36:18.685"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:18.681" endtime="20210730 15:36:18.685"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:18.680" endtime="20210730 15:36:18.685"/>
</for>
<status status="FAIL" starttime="20210730 15:36:18.679" endtime="20210730 15:36:18.686"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:18.679" endtime="20210730 15:36:18.686"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤ abc!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:18.687" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:36:18.686" endtime="20210730 15:36:18.687"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:18.687" level="INFO">${payload} = {'username': '#¤ abc!'}</msg>
<status status="PASS" starttime="20210730 15:36:18.687" endtime="20210730 15:36:18.687"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:18.692" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:18.693" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:18.688" endtime="20210730 15:36:18.693"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:18.693" endtime="20210730 15:36:18.693"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:18.693" endtime="20210730 15:36:18.693"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:18.688" endtime="20210730 15:36:18.693"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:18.687" endtime="20210730 15:36:18.693"/>
</for>
<status status="FAIL" starttime="20210730 15:36:18.686" endtime="20210730 15:36:18.694"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:18.686" endtime="20210730 15:36:18.694"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:18.660" endtime="20210730 15:36:18.694"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:18.698" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:18.708" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:18.708" level="INFO">${pids} = 6149
6157
6162</msg>
<status status="PASS" starttime="20210730 15:36:18.695" endtime="20210730 15:36:18.708"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:18.709" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:18.708" endtime="20210730 15:36:18.709"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:18.712" level="INFO">${pids} = ['6149', '6157', '6162']</msg>
<status status="PASS" starttime="20210730 15:36:18.710" endtime="20210730 15:36:18.712"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">6149</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:18.716" level="INFO">Running command 'kill 6149 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:18.713" endtime="20210730 15:36:18.716"/>
</kw>
<status status="PASS" starttime="20210730 15:36:18.713" endtime="20210730 15:36:18.716"/>
</iter>
<iter>
<var name="${pid}">6157</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:18.721" level="INFO">Running command 'kill 6157 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:18.717" endtime="20210730 15:36:18.722"/>
</kw>
<status status="PASS" starttime="20210730 15:36:18.716" endtime="20210730 15:36:18.722"/>
</iter>
<iter>
<var name="${pid}">6162</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:18.727" level="INFO">Running command 'kill 6162 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:18.723" endtime="20210730 15:36:18.727"/>
</kw>
<status status="PASS" starttime="20210730 15:36:18.722" endtime="20210730 15:36:18.727"/>
</iter>
<status status="PASS" starttime="20210730 15:36:18.712" endtime="20210730 15:36:18.727"/>
</for>
<status status="PASS" starttime="20210730 15:36:18.710" endtime="20210730 15:36:18.727"/>
</branch>
<status status="PASS" starttime="20210730 15:36:18.709" endtime="20210730 15:36:18.727"/>
</if>
<status status="PASS" starttime="20210730 15:36:18.694" endtime="20210730 15:36:18.728"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤ abc!'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:36:17.107" endtime="20210730 15:36:18.728">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t42" name="With Each Valid Token, Updating Username Of Each System User With #¤ abc!g Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:18.733" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:18.744" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:18.744" level="INFO">${pids} = 6197</msg>
<status status="PASS" starttime="20210730 15:36:18.730" endtime="20210730 15:36:18.744"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:18.745" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:18.744" endtime="20210730 15:36:18.745"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:18.746" level="INFO">${pids} = ['6197']</msg>
<status status="PASS" starttime="20210730 15:36:18.746" endtime="20210730 15:36:18.746"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">6197</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:18.751" level="INFO">Running command 'kill 6197 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:18.746" endtime="20210730 15:36:18.752"/>
</kw>
<status status="PASS" starttime="20210730 15:36:18.746" endtime="20210730 15:36:18.752"/>
</iter>
<status status="PASS" starttime="20210730 15:36:18.746" endtime="20210730 15:36:18.752"/>
</for>
<status status="PASS" starttime="20210730 15:36:18.745" endtime="20210730 15:36:18.752"/>
</branch>
<status status="PASS" starttime="20210730 15:36:18.745" endtime="20210730 15:36:18.752"/>
</if>
<status status="PASS" starttime="20210730 15:36:18.730" endtime="20210730 15:36:18.753"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:18.754" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:18.753" endtime="20210730 15:36:18.754"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:18.754" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:18.754" endtime="20210730 15:36:18.755"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:18.755" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:18.755" endtime="20210730 15:36:18.755"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:18.755" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:18.755" endtime="20210730 15:36:18.755"/>
</kw>
<msg timestamp="20210730 15:36:18.756" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:18.754" endtime="20210730 15:36:18.756"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:18.759" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:18.756" endtime="20210730 15:36:18.761"/>
</kw>
<status status="PASS" starttime="20210730 15:36:18.753" endtime="20210730 15:36:18.762"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:36:18.763" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:36:18.762" endtime="20210730 15:36:18.767"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:36:20.268" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:36:18.767" endtime="20210730 15:36:20.269"/>
</kw>
<status status="PASS" starttime="20210730 15:36:18.762" endtime="20210730 15:36:20.270"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:20.273" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:20.273" endtime="20210730 15:36:20.273"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:20.274" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:20.273" endtime="20210730 15:36:20.274"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:20.274" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:20.274" endtime="20210730 15:36:20.274"/>
</kw>
<msg timestamp="20210730 15:36:20.274" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:20.273" endtime="20210730 15:36:20.274"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:36:20.275" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:36:20.274" endtime="20210730 15:36:20.275"/>
</kw>
<status status="PASS" starttime="20210730 15:36:20.271" endtime="20210730 15:36:20.275"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:36:20.276" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:36:20.276" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:36:20.276" endtime="20210730 15:36:20.277"/>
</kw>
<status status="PASS" starttime="20210730 15:36:20.275" endtime="20210730 15:36:20.277"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:36:20.279" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:36:20.279" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:36:20.278" endtime="20210730 15:36:20.279"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:36:20.279" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:36:20.279" endtime="20210730 15:36:20.279"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:20.280" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:20.280" endtime="20210730 15:36:20.280"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:20.280" endtime="20210730 15:36:20.281"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:20.281" endtime="20210730 15:36:20.281"/>
</kw>
<status status="PASS" starttime="20210730 15:36:20.279" endtime="20210730 15:36:20.281"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:20.281" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:20.281" endtime="20210730 15:36:20.281"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:20.281" endtime="20210730 15:36:20.282"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:20.282" endtime="20210730 15:36:20.282"/>
</kw>
<status status="PASS" starttime="20210730 15:36:20.281" endtime="20210730 15:36:20.282"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:20.283" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:20.283" endtime="20210730 15:36:20.283"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:20.283" endtime="20210730 15:36:20.284"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:20.284" endtime="20210730 15:36:20.284"/>
</kw>
<status status="PASS" starttime="20210730 15:36:20.283" endtime="20210730 15:36:20.284"/>
</iter>
<status status="PASS" starttime="20210730 15:36:20.279" endtime="20210730 15:36:20.284"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:36:20.284" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:36:20.284" endtime="20210730 15:36:20.284"/>
</kw>
<status status="PASS" starttime="20210730 15:36:20.278" endtime="20210730 15:36:20.285"/>
</kw>
<status status="PASS" starttime="20210730 15:36:18.729" endtime="20210730 15:36:20.285"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤ abc!g</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:20.286" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:36:20.286" endtime="20210730 15:36:20.286"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:20.286" level="INFO">${payload} = {'username': '#¤ abc!g'}</msg>
<status status="PASS" starttime="20210730 15:36:20.286" endtime="20210730 15:36:20.286"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:20.295" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:20.296" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:20.287" endtime="20210730 15:36:20.296"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:20.296" endtime="20210730 15:36:20.296"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:20.296" endtime="20210730 15:36:20.296"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:20.287" endtime="20210730 15:36:20.296"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:20.286" endtime="20210730 15:36:20.296"/>
</for>
<status status="FAIL" starttime="20210730 15:36:20.285" endtime="20210730 15:36:20.297"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:20.285" endtime="20210730 15:36:20.297"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤ abc!g</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:20.298" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:36:20.298" endtime="20210730 15:36:20.298"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:20.298" level="INFO">${payload} = {'username': '#¤ abc!g'}</msg>
<status status="PASS" starttime="20210730 15:36:20.298" endtime="20210730 15:36:20.298"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:20.302" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:20.302" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:20.299" endtime="20210730 15:36:20.303"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:20.303" endtime="20210730 15:36:20.303"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:20.303" endtime="20210730 15:36:20.303"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:20.299" endtime="20210730 15:36:20.303"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:20.298" endtime="20210730 15:36:20.303"/>
</for>
<status status="FAIL" starttime="20210730 15:36:20.297" endtime="20210730 15:36:20.303"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:20.297" endtime="20210730 15:36:20.303"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤ abc!g</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:20.304" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:36:20.304" endtime="20210730 15:36:20.304"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:20.304" level="INFO">${payload} = {'username': '#¤ abc!g'}</msg>
<status status="PASS" starttime="20210730 15:36:20.304" endtime="20210730 15:36:20.304"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:20.308" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:20.309" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:20.305" endtime="20210730 15:36:20.309"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:20.309" endtime="20210730 15:36:20.309"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:20.309" endtime="20210730 15:36:20.309"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:20.305" endtime="20210730 15:36:20.309"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:20.304" endtime="20210730 15:36:20.310"/>
</for>
<status status="FAIL" starttime="20210730 15:36:20.303" endtime="20210730 15:36:20.310"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:20.303" endtime="20210730 15:36:20.310"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:20.285" endtime="20210730 15:36:20.310"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:20.317" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:20.327" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:20.327" level="INFO">${pids} = 6234
6248
6258</msg>
<status status="PASS" starttime="20210730 15:36:20.313" endtime="20210730 15:36:20.327"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:20.328" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:20.327" endtime="20210730 15:36:20.328"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:20.328" level="INFO">${pids} = ['6234', '6248', '6258']</msg>
<status status="PASS" starttime="20210730 15:36:20.328" endtime="20210730 15:36:20.328"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">6234</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:20.332" level="INFO">Running command 'kill 6234 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:20.329" endtime="20210730 15:36:20.333"/>
</kw>
<status status="PASS" starttime="20210730 15:36:20.329" endtime="20210730 15:36:20.333"/>
</iter>
<iter>
<var name="${pid}">6248</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:20.336" level="INFO">Running command 'kill 6248 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:20.333" endtime="20210730 15:36:20.336"/>
</kw>
<status status="PASS" starttime="20210730 15:36:20.333" endtime="20210730 15:36:20.336"/>
</iter>
<iter>
<var name="${pid}">6258</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:20.340" level="INFO">Running command 'kill 6258 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:20.337" endtime="20210730 15:36:20.340"/>
</kw>
<status status="PASS" starttime="20210730 15:36:20.336" endtime="20210730 15:36:20.340"/>
</iter>
<status status="PASS" starttime="20210730 15:36:20.329" endtime="20210730 15:36:20.340"/>
</for>
<status status="PASS" starttime="20210730 15:36:20.328" endtime="20210730 15:36:20.340"/>
</branch>
<status status="PASS" starttime="20210730 15:36:20.328" endtime="20210730 15:36:20.340"/>
</if>
<status status="PASS" starttime="20210730 15:36:20.312" endtime="20210730 15:36:20.341"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤ abc!g'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:36:18.728" endtime="20210730 15:36:20.341">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t43" name="With Each Valid Token, Updating Username Of Each System User With #¤/abc!g() &amp;%¤fghjklQWERTY Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:20.350" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:20.359" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:20.359" level="INFO">${pids} = 6308</msg>
<status status="PASS" starttime="20210730 15:36:20.345" endtime="20210730 15:36:20.360"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:20.360" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:20.360" endtime="20210730 15:36:20.360"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:20.361" level="INFO">${pids} = ['6308']</msg>
<status status="PASS" starttime="20210730 15:36:20.361" endtime="20210730 15:36:20.361"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">6308</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:20.365" level="INFO">Running command 'kill 6308 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:20.362" endtime="20210730 15:36:20.365"/>
</kw>
<status status="PASS" starttime="20210730 15:36:20.361" endtime="20210730 15:36:20.365"/>
</iter>
<status status="PASS" starttime="20210730 15:36:20.361" endtime="20210730 15:36:20.365"/>
</for>
<status status="PASS" starttime="20210730 15:36:20.361" endtime="20210730 15:36:20.365"/>
</branch>
<status status="PASS" starttime="20210730 15:36:20.361" endtime="20210730 15:36:20.365"/>
</if>
<status status="PASS" starttime="20210730 15:36:20.344" endtime="20210730 15:36:20.366"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:20.367" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:20.366" endtime="20210730 15:36:20.367"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:20.367" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:20.367" endtime="20210730 15:36:20.367"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:20.368" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:20.367" endtime="20210730 15:36:20.368"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:20.368" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:20.368" endtime="20210730 15:36:20.368"/>
</kw>
<msg timestamp="20210730 15:36:20.368" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:20.367" endtime="20210730 15:36:20.368"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:20.372" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:20.369" endtime="20210730 15:36:20.375"/>
</kw>
<status status="PASS" starttime="20210730 15:36:20.366" endtime="20210730 15:36:20.375"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:36:20.378" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:36:20.377" endtime="20210730 15:36:20.383"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:36:21.889" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:36:20.383" endtime="20210730 15:36:21.889"/>
</kw>
<status status="PASS" starttime="20210730 15:36:20.376" endtime="20210730 15:36:21.889"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:21.891" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:21.890" endtime="20210730 15:36:21.891"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:21.891" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:21.891" endtime="20210730 15:36:21.891"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:21.896" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:21.891" endtime="20210730 15:36:21.896"/>
</kw>
<msg timestamp="20210730 15:36:21.896" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:21.890" endtime="20210730 15:36:21.896"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:36:21.896" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:36:21.896" endtime="20210730 15:36:21.897"/>
</kw>
<status status="PASS" starttime="20210730 15:36:21.889" endtime="20210730 15:36:21.897"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:36:21.898" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:36:21.898" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:36:21.897" endtime="20210730 15:36:21.898"/>
</kw>
<status status="PASS" starttime="20210730 15:36:21.897" endtime="20210730 15:36:21.898"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:36:21.899" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:36:21.899" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:36:21.898" endtime="20210730 15:36:21.899"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:36:21.899" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:36:21.899" endtime="20210730 15:36:21.899"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:21.900" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:21.900" endtime="20210730 15:36:21.900"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:21.900" endtime="20210730 15:36:21.901"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:21.901" endtime="20210730 15:36:21.901"/>
</kw>
<status status="PASS" starttime="20210730 15:36:21.900" endtime="20210730 15:36:21.902"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:21.902" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:21.902" endtime="20210730 15:36:21.902"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:21.902" endtime="20210730 15:36:21.903"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:21.903" endtime="20210730 15:36:21.903"/>
</kw>
<status status="PASS" starttime="20210730 15:36:21.902" endtime="20210730 15:36:21.903"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:21.904" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:21.904" endtime="20210730 15:36:21.904"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:21.904" endtime="20210730 15:36:21.905"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:21.905" endtime="20210730 15:36:21.905"/>
</kw>
<status status="PASS" starttime="20210730 15:36:21.903" endtime="20210730 15:36:21.905"/>
</iter>
<status status="PASS" starttime="20210730 15:36:21.899" endtime="20210730 15:36:21.905"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:36:21.906" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:36:21.905" endtime="20210730 15:36:21.906"/>
</kw>
<status status="PASS" starttime="20210730 15:36:21.898" endtime="20210730 15:36:21.906"/>
</kw>
<status status="PASS" starttime="20210730 15:36:20.344" endtime="20210730 15:36:21.906"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/abc!g() &amp;%¤fghjklQWERTY</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:21.908" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:36:21.907" endtime="20210730 15:36:21.908"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:21.908" level="INFO">${payload} = {'username': '#¤/abc!g() &amp;%¤fghjklQWERTY'}</msg>
<status status="PASS" starttime="20210730 15:36:21.908" endtime="20210730 15:36:21.908"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:21.923" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:21.923" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:21.908" endtime="20210730 15:36:21.924"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:21.924" endtime="20210730 15:36:21.924"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:21.924" endtime="20210730 15:36:21.924"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:21.908" endtime="20210730 15:36:21.924"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:21.908" endtime="20210730 15:36:21.924"/>
</for>
<status status="FAIL" starttime="20210730 15:36:21.907" endtime="20210730 15:36:21.924"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:21.907" endtime="20210730 15:36:21.924"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/abc!g() &amp;%¤fghjklQWERTY</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:21.928" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:36:21.927" endtime="20210730 15:36:21.928"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:21.929" level="INFO">${payload} = {'username': '#¤/abc!g() &amp;%¤fghjklQWERTY'}</msg>
<status status="PASS" starttime="20210730 15:36:21.928" endtime="20210730 15:36:21.929"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:21.934" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:21.934" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:21.930" endtime="20210730 15:36:21.934"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:21.935" endtime="20210730 15:36:21.935"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:21.935" endtime="20210730 15:36:21.935"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:21.929" endtime="20210730 15:36:21.935"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:21.929" endtime="20210730 15:36:21.935"/>
</for>
<status status="FAIL" starttime="20210730 15:36:21.925" endtime="20210730 15:36:21.935"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:21.925" endtime="20210730 15:36:21.935"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/abc!g() &amp;%¤fghjklQWERTY</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:21.937" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:36:21.937" endtime="20210730 15:36:21.937"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:21.938" level="INFO">${payload} = {'username': '#¤/abc!g() &amp;%¤fghjklQWERTY'}</msg>
<status status="PASS" starttime="20210730 15:36:21.938" endtime="20210730 15:36:21.938"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:21.943" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:21.944" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:21.938" endtime="20210730 15:36:21.944"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:21.944" endtime="20210730 15:36:21.944"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:21.944" endtime="20210730 15:36:21.944"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:21.938" endtime="20210730 15:36:21.944"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:21.938" endtime="20210730 15:36:21.944"/>
</for>
<status status="FAIL" starttime="20210730 15:36:21.935" endtime="20210730 15:36:21.944"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:21.935" endtime="20210730 15:36:21.945"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:21.906" endtime="20210730 15:36:21.945"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:21.949" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:21.960" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:21.960" level="INFO">${pids} = 6334
6341
6345</msg>
<status status="PASS" starttime="20210730 15:36:21.946" endtime="20210730 15:36:21.960"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:21.961" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:21.960" endtime="20210730 15:36:21.961"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:21.962" level="INFO">${pids} = ['6334', '6341', '6345']</msg>
<status status="PASS" starttime="20210730 15:36:21.961" endtime="20210730 15:36:21.962"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">6334</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:21.969" level="INFO">Running command 'kill 6334 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:21.963" endtime="20210730 15:36:21.970"/>
</kw>
<status status="PASS" starttime="20210730 15:36:21.962" endtime="20210730 15:36:21.970"/>
</iter>
<iter>
<var name="${pid}">6341</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:21.975" level="INFO">Running command 'kill 6341 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:21.971" endtime="20210730 15:36:21.975"/>
</kw>
<status status="PASS" starttime="20210730 15:36:21.970" endtime="20210730 15:36:21.976"/>
</iter>
<iter>
<var name="${pid}">6345</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:21.981" level="INFO">Running command 'kill 6345 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:21.976" endtime="20210730 15:36:21.981"/>
</kw>
<status status="PASS" starttime="20210730 15:36:21.976" endtime="20210730 15:36:21.981"/>
</iter>
<status status="PASS" starttime="20210730 15:36:21.962" endtime="20210730 15:36:21.981"/>
</for>
<status status="PASS" starttime="20210730 15:36:21.961" endtime="20210730 15:36:21.981"/>
</branch>
<status status="PASS" starttime="20210730 15:36:21.961" endtime="20210730 15:36:21.981"/>
</if>
<status status="PASS" starttime="20210730 15:36:21.945" endtime="20210730 15:36:21.982"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤/abc!g() &amp;%¤fghjklQWERTY'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:36:20.343" endtime="20210730 15:36:21.982">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t44" name="With Each Valid Token, Updating Password Of Each System User With '' Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:21.987" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:21.997" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:21.997" level="INFO">${pids} = 6374</msg>
<status status="PASS" starttime="20210730 15:36:21.984" endtime="20210730 15:36:21.997"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:21.999" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:21.998" endtime="20210730 15:36:21.999"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:21.999" level="INFO">${pids} = ['6374']</msg>
<status status="PASS" starttime="20210730 15:36:21.999" endtime="20210730 15:36:21.999"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">6374</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:22.003" level="INFO">Running command 'kill 6374 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:22.000" endtime="20210730 15:36:22.004"/>
</kw>
<status status="PASS" starttime="20210730 15:36:22.000" endtime="20210730 15:36:22.004"/>
</iter>
<status status="PASS" starttime="20210730 15:36:21.999" endtime="20210730 15:36:22.004"/>
</for>
<status status="PASS" starttime="20210730 15:36:21.999" endtime="20210730 15:36:22.004"/>
</branch>
<status status="PASS" starttime="20210730 15:36:21.999" endtime="20210730 15:36:22.004"/>
</if>
<status status="PASS" starttime="20210730 15:36:21.984" endtime="20210730 15:36:22.004"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:22.005" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:22.005" endtime="20210730 15:36:22.005"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:22.006" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:22.006" endtime="20210730 15:36:22.006"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:22.006" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:22.006" endtime="20210730 15:36:22.006"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:22.007" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:22.006" endtime="20210730 15:36:22.007"/>
</kw>
<msg timestamp="20210730 15:36:22.007" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:22.005" endtime="20210730 15:36:22.007"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:22.011" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:22.007" endtime="20210730 15:36:22.013"/>
</kw>
<status status="PASS" starttime="20210730 15:36:22.004" endtime="20210730 15:36:22.013"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:36:22.016" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:36:22.014" endtime="20210730 15:36:22.032"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:36:23.540" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:36:22.032" endtime="20210730 15:36:23.540"/>
</kw>
<status status="PASS" starttime="20210730 15:36:22.013" endtime="20210730 15:36:23.541"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:23.542" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:23.542" endtime="20210730 15:36:23.542"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:23.543" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:23.542" endtime="20210730 15:36:23.543"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:23.543" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:23.543" endtime="20210730 15:36:23.544"/>
</kw>
<msg timestamp="20210730 15:36:23.544" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:23.541" endtime="20210730 15:36:23.544"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:36:23.545" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:36:23.545" endtime="20210730 15:36:23.546"/>
</kw>
<status status="PASS" starttime="20210730 15:36:23.541" endtime="20210730 15:36:23.546"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:36:23.546" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:36:23.546" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:36:23.546" endtime="20210730 15:36:23.547"/>
</kw>
<status status="PASS" starttime="20210730 15:36:23.546" endtime="20210730 15:36:23.547"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:36:23.548" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:36:23.548" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:36:23.547" endtime="20210730 15:36:23.548"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:36:23.548" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:36:23.548" endtime="20210730 15:36:23.548"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:23.549" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:23.548" endtime="20210730 15:36:23.549"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:23.549" endtime="20210730 15:36:23.549"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:23.550" endtime="20210730 15:36:23.550"/>
</kw>
<status status="PASS" starttime="20210730 15:36:23.548" endtime="20210730 15:36:23.550"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:23.550" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:23.550" endtime="20210730 15:36:23.550"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:23.550" endtime="20210730 15:36:23.551"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:23.551" endtime="20210730 15:36:23.551"/>
</kw>
<status status="PASS" starttime="20210730 15:36:23.550" endtime="20210730 15:36:23.551"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:23.552" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:23.551" endtime="20210730 15:36:23.552"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:23.552" endtime="20210730 15:36:23.553"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:23.553" endtime="20210730 15:36:23.553"/>
</kw>
<status status="PASS" starttime="20210730 15:36:23.551" endtime="20210730 15:36:23.553"/>
</iter>
<status status="PASS" starttime="20210730 15:36:23.548" endtime="20210730 15:36:23.553"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:36:23.553" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:36:23.553" endtime="20210730 15:36:23.553"/>
</kw>
<status status="PASS" starttime="20210730 15:36:23.547" endtime="20210730 15:36:23.554"/>
</kw>
<status status="PASS" starttime="20210730 15:36:21.983" endtime="20210730 15:36:23.554"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=${EMPTY}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:23.555" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:36:23.555" endtime="20210730 15:36:23.555"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:23.556" level="INFO">${payload} = {'password': ''}</msg>
<status status="PASS" starttime="20210730 15:36:23.555" endtime="20210730 15:36:23.556"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:23.565" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:23.565" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:23.556" endtime="20210730 15:36:23.565"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:23.566" endtime="20210730 15:36:23.566"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:23.566" endtime="20210730 15:36:23.566"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:23.556" endtime="20210730 15:36:23.566"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:23.556" endtime="20210730 15:36:23.566"/>
</for>
<status status="FAIL" starttime="20210730 15:36:23.554" endtime="20210730 15:36:23.567"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:23.554" endtime="20210730 15:36:23.567"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=${EMPTY}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:23.568" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:36:23.568" endtime="20210730 15:36:23.568"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:23.569" level="INFO">${payload} = {'password': ''}</msg>
<status status="PASS" starttime="20210730 15:36:23.568" endtime="20210730 15:36:23.569"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:23.573" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:23.573" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:23.569" endtime="20210730 15:36:23.573"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:23.573" endtime="20210730 15:36:23.573"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:23.573" endtime="20210730 15:36:23.573"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:23.569" endtime="20210730 15:36:23.573"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:23.569" endtime="20210730 15:36:23.573"/>
</for>
<status status="FAIL" starttime="20210730 15:36:23.567" endtime="20210730 15:36:23.573"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:23.567" endtime="20210730 15:36:23.574"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=${EMPTY}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:23.575" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:36:23.575" endtime="20210730 15:36:23.575"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:23.576" level="INFO">${payload} = {'password': ''}</msg>
<status status="PASS" starttime="20210730 15:36:23.575" endtime="20210730 15:36:23.576"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:23.580" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:23.581" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:23.576" endtime="20210730 15:36:23.581"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:23.581" endtime="20210730 15:36:23.581"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:23.581" endtime="20210730 15:36:23.581"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:23.576" endtime="20210730 15:36:23.581"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:23.576" endtime="20210730 15:36:23.581"/>
</for>
<status status="FAIL" starttime="20210730 15:36:23.574" endtime="20210730 15:36:23.581"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:23.574" endtime="20210730 15:36:23.582"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:23.554" endtime="20210730 15:36:23.582"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:23.587" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:23.597" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:23.597" level="INFO">${pids} = 6408
6415
6423</msg>
<status status="PASS" starttime="20210730 15:36:23.584" endtime="20210730 15:36:23.597"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:23.598" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:23.598" endtime="20210730 15:36:23.598"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:23.599" level="INFO">${pids} = ['6408', '6415', '6423']</msg>
<status status="PASS" starttime="20210730 15:36:23.599" endtime="20210730 15:36:23.599"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">6408</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:23.602" level="INFO">Running command 'kill 6408 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:23.599" endtime="20210730 15:36:23.603"/>
</kw>
<status status="PASS" starttime="20210730 15:36:23.599" endtime="20210730 15:36:23.603"/>
</iter>
<iter>
<var name="${pid}">6415</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:23.606" level="INFO">Running command 'kill 6415 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:23.603" endtime="20210730 15:36:23.608"/>
</kw>
<status status="PASS" starttime="20210730 15:36:23.603" endtime="20210730 15:36:23.608"/>
</iter>
<iter>
<var name="${pid}">6423</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:23.615" level="INFO">Running command 'kill 6423 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:23.608" endtime="20210730 15:36:23.616"/>
</kw>
<status status="PASS" starttime="20210730 15:36:23.608" endtime="20210730 15:36:23.616"/>
</iter>
<status status="PASS" starttime="20210730 15:36:23.599" endtime="20210730 15:36:23.616"/>
</for>
<status status="PASS" starttime="20210730 15:36:23.599" endtime="20210730 15:36:23.616"/>
</branch>
<status status="PASS" starttime="20210730 15:36:23.599" endtime="20210730 15:36:23.616"/>
</if>
<status status="PASS" starttime="20210730 15:36:23.582" endtime="20210730 15:36:23.616"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": ''
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:36:21.982" endtime="20210730 15:36:23.617">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t45" name="With Each Valid Token, Updating Password Of Each System User With abcdefg Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:23.622" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:23.632" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:23.632" level="INFO">${pids} = 6501</msg>
<status status="PASS" starttime="20210730 15:36:23.619" endtime="20210730 15:36:23.632"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:23.633" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:23.632" endtime="20210730 15:36:23.633"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:23.633" level="INFO">${pids} = ['6501']</msg>
<status status="PASS" starttime="20210730 15:36:23.633" endtime="20210730 15:36:23.633"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">6501</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:23.637" level="INFO">Running command 'kill 6501 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:23.634" endtime="20210730 15:36:23.637"/>
</kw>
<status status="PASS" starttime="20210730 15:36:23.634" endtime="20210730 15:36:23.637"/>
</iter>
<status status="PASS" starttime="20210730 15:36:23.633" endtime="20210730 15:36:23.637"/>
</for>
<status status="PASS" starttime="20210730 15:36:23.633" endtime="20210730 15:36:23.637"/>
</branch>
<status status="PASS" starttime="20210730 15:36:23.633" endtime="20210730 15:36:23.637"/>
</if>
<status status="PASS" starttime="20210730 15:36:23.619" endtime="20210730 15:36:23.638"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:23.639" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:23.638" endtime="20210730 15:36:23.639"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:23.639" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:23.639" endtime="20210730 15:36:23.639"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:23.640" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:23.639" endtime="20210730 15:36:23.640"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:23.640" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:23.640" endtime="20210730 15:36:23.640"/>
</kw>
<msg timestamp="20210730 15:36:23.640" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:23.639" endtime="20210730 15:36:23.640"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:23.648" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:23.641" endtime="20210730 15:36:23.650"/>
</kw>
<status status="PASS" starttime="20210730 15:36:23.638" endtime="20210730 15:36:23.650"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:36:23.651" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:36:23.651" endtime="20210730 15:36:23.656"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:36:25.157" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:36:23.656" endtime="20210730 15:36:25.157"/>
</kw>
<status status="PASS" starttime="20210730 15:36:23.650" endtime="20210730 15:36:25.158"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:25.159" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:25.159" endtime="20210730 15:36:25.159"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:25.159" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:25.159" endtime="20210730 15:36:25.159"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:25.160" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:25.159" endtime="20210730 15:36:25.160"/>
</kw>
<msg timestamp="20210730 15:36:25.160" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:25.158" endtime="20210730 15:36:25.160"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:36:25.160" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:36:25.160" endtime="20210730 15:36:25.161"/>
</kw>
<status status="PASS" starttime="20210730 15:36:25.158" endtime="20210730 15:36:25.161"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:36:25.161" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:36:25.161" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:36:25.161" endtime="20210730 15:36:25.162"/>
</kw>
<status status="PASS" starttime="20210730 15:36:25.161" endtime="20210730 15:36:25.162"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:36:25.163" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:36:25.163" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:36:25.162" endtime="20210730 15:36:25.163"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:36:25.163" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:36:25.163" endtime="20210730 15:36:25.163"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:25.164" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:25.163" endtime="20210730 15:36:25.164"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:25.164" endtime="20210730 15:36:25.164"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:25.165" endtime="20210730 15:36:25.165"/>
</kw>
<status status="PASS" starttime="20210730 15:36:25.163" endtime="20210730 15:36:25.165"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:25.165" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:25.165" endtime="20210730 15:36:25.165"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:25.165" endtime="20210730 15:36:25.167"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:25.167" endtime="20210730 15:36:25.167"/>
</kw>
<status status="PASS" starttime="20210730 15:36:25.165" endtime="20210730 15:36:25.167"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:25.167" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:25.167" endtime="20210730 15:36:25.167"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:25.167" endtime="20210730 15:36:25.168"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:25.168" endtime="20210730 15:36:25.168"/>
</kw>
<status status="PASS" starttime="20210730 15:36:25.167" endtime="20210730 15:36:25.168"/>
</iter>
<status status="PASS" starttime="20210730 15:36:25.163" endtime="20210730 15:36:25.168"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:36:25.169" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:36:25.169" endtime="20210730 15:36:25.169"/>
</kw>
<status status="PASS" starttime="20210730 15:36:25.162" endtime="20210730 15:36:25.169"/>
</kw>
<status status="PASS" starttime="20210730 15:36:23.618" endtime="20210730 15:36:25.169"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdefg</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:25.170" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:36:25.170" endtime="20210730 15:36:25.170"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:25.171" level="INFO">${payload} = {'password': 'abcdefg'}</msg>
<status status="PASS" starttime="20210730 15:36:25.171" endtime="20210730 15:36:25.171"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:25.181" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:25.182" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:25.171" endtime="20210730 15:36:25.182"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:25.182" endtime="20210730 15:36:25.182"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:25.182" endtime="20210730 15:36:25.182"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:25.171" endtime="20210730 15:36:25.182"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:25.171" endtime="20210730 15:36:25.182"/>
</for>
<status status="FAIL" starttime="20210730 15:36:25.170" endtime="20210730 15:36:25.182"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:25.170" endtime="20210730 15:36:25.182"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdefg</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:25.183" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:36:25.183" endtime="20210730 15:36:25.183"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:25.184" level="INFO">${payload} = {'password': 'abcdefg'}</msg>
<status status="PASS" starttime="20210730 15:36:25.183" endtime="20210730 15:36:25.184"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:25.188" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:25.188" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:25.184" endtime="20210730 15:36:25.188"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:25.188" endtime="20210730 15:36:25.189"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:25.189" endtime="20210730 15:36:25.189"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:25.184" endtime="20210730 15:36:25.189"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:25.184" endtime="20210730 15:36:25.189"/>
</for>
<status status="FAIL" starttime="20210730 15:36:25.182" endtime="20210730 15:36:25.189"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:25.182" endtime="20210730 15:36:25.189"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdefg</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:25.190" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:36:25.190" endtime="20210730 15:36:25.190"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:25.190" level="INFO">${payload} = {'password': 'abcdefg'}</msg>
<status status="PASS" starttime="20210730 15:36:25.190" endtime="20210730 15:36:25.190"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:25.194" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:25.195" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:25.191" endtime="20210730 15:36:25.195"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:25.195" endtime="20210730 15:36:25.195"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:25.195" endtime="20210730 15:36:25.195"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:25.190" endtime="20210730 15:36:25.195"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:25.190" endtime="20210730 15:36:25.195"/>
</for>
<status status="FAIL" starttime="20210730 15:36:25.189" endtime="20210730 15:36:25.195"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:25.189" endtime="20210730 15:36:25.195"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:25.169" endtime="20210730 15:36:25.195"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:25.202" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:25.212" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:25.212" level="INFO">${pids} = 6544
6551
6558</msg>
<status status="PASS" starttime="20210730 15:36:25.197" endtime="20210730 15:36:25.212"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:25.213" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:25.212" endtime="20210730 15:36:25.213"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:25.214" level="INFO">${pids} = ['6544', '6551', '6558']</msg>
<status status="PASS" starttime="20210730 15:36:25.214" endtime="20210730 15:36:25.214"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">6544</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:25.217" level="INFO">Running command 'kill 6544 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:25.214" endtime="20210730 15:36:25.218"/>
</kw>
<status status="PASS" starttime="20210730 15:36:25.214" endtime="20210730 15:36:25.218"/>
</iter>
<iter>
<var name="${pid}">6551</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:25.221" level="INFO">Running command 'kill 6551 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:25.218" endtime="20210730 15:36:25.221"/>
</kw>
<status status="PASS" starttime="20210730 15:36:25.218" endtime="20210730 15:36:25.222"/>
</iter>
<iter>
<var name="${pid}">6558</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:25.225" level="INFO">Running command 'kill 6558 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:25.222" endtime="20210730 15:36:25.225"/>
</kw>
<status status="PASS" starttime="20210730 15:36:25.222" endtime="20210730 15:36:25.225"/>
</iter>
<status status="PASS" starttime="20210730 15:36:25.214" endtime="20210730 15:36:25.225"/>
</for>
<status status="PASS" starttime="20210730 15:36:25.213" endtime="20210730 15:36:25.225"/>
</branch>
<status status="PASS" starttime="20210730 15:36:25.213" endtime="20210730 15:36:25.226"/>
</if>
<status status="PASS" starttime="20210730 15:36:25.196" endtime="20210730 15:36:25.226"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcdefg'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:36:23.617" endtime="20210730 15:36:25.226">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t46" name="With Each Valid Token, Updating Password Of Each System User With abcdefgh Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:25.234" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:25.245" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:25.245" level="INFO">${pids} = 6655</msg>
<status status="PASS" starttime="20210730 15:36:25.228" endtime="20210730 15:36:25.245"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:25.246" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:25.245" endtime="20210730 15:36:25.246"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:25.247" level="INFO">${pids} = ['6655']</msg>
<status status="PASS" starttime="20210730 15:36:25.246" endtime="20210730 15:36:25.247"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">6655</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:25.250" level="INFO">Running command 'kill 6655 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:25.247" endtime="20210730 15:36:25.250"/>
</kw>
<status status="PASS" starttime="20210730 15:36:25.247" endtime="20210730 15:36:25.250"/>
</iter>
<status status="PASS" starttime="20210730 15:36:25.247" endtime="20210730 15:36:25.250"/>
</for>
<status status="PASS" starttime="20210730 15:36:25.246" endtime="20210730 15:36:25.250"/>
</branch>
<status status="PASS" starttime="20210730 15:36:25.246" endtime="20210730 15:36:25.250"/>
</if>
<status status="PASS" starttime="20210730 15:36:25.228" endtime="20210730 15:36:25.251"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:25.251" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:25.251" endtime="20210730 15:36:25.251"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:25.252" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:25.252" endtime="20210730 15:36:25.252"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:25.252" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:25.252" endtime="20210730 15:36:25.252"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:25.253" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:25.253" endtime="20210730 15:36:25.253"/>
</kw>
<msg timestamp="20210730 15:36:25.253" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:25.252" endtime="20210730 15:36:25.253"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:25.256" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:25.253" endtime="20210730 15:36:25.257"/>
</kw>
<status status="PASS" starttime="20210730 15:36:25.251" endtime="20210730 15:36:25.258"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:36:25.259" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:36:25.259" endtime="20210730 15:36:25.266"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:36:26.771" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:36:25.266" endtime="20210730 15:36:26.771"/>
</kw>
<status status="PASS" starttime="20210730 15:36:25.258" endtime="20210730 15:36:26.771"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:26.773" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:26.772" endtime="20210730 15:36:26.773"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:26.773" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:26.773" endtime="20210730 15:36:26.773"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:26.773" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:26.773" endtime="20210730 15:36:26.774"/>
</kw>
<msg timestamp="20210730 15:36:26.774" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:26.772" endtime="20210730 15:36:26.774"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:36:26.774" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:36:26.774" endtime="20210730 15:36:26.775"/>
</kw>
<status status="PASS" starttime="20210730 15:36:26.772" endtime="20210730 15:36:26.775"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:36:26.775" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:36:26.775" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:36:26.775" endtime="20210730 15:36:26.775"/>
</kw>
<status status="PASS" starttime="20210730 15:36:26.775" endtime="20210730 15:36:26.776"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:36:26.777" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:36:26.777" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:36:26.776" endtime="20210730 15:36:26.777"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:36:26.778" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:36:26.778" endtime="20210730 15:36:26.778"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:26.779" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:26.778" endtime="20210730 15:36:26.779"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:26.779" endtime="20210730 15:36:26.780"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:26.780" endtime="20210730 15:36:26.780"/>
</kw>
<status status="PASS" starttime="20210730 15:36:26.778" endtime="20210730 15:36:26.780"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:26.780" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:26.780" endtime="20210730 15:36:26.780"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:26.780" endtime="20210730 15:36:26.781"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:26.781" endtime="20210730 15:36:26.781"/>
</kw>
<status status="PASS" starttime="20210730 15:36:26.780" endtime="20210730 15:36:26.781"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:26.782" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:26.782" endtime="20210730 15:36:26.782"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:26.782" endtime="20210730 15:36:26.783"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:26.783" endtime="20210730 15:36:26.783"/>
</kw>
<status status="PASS" starttime="20210730 15:36:26.782" endtime="20210730 15:36:26.783"/>
</iter>
<status status="PASS" starttime="20210730 15:36:26.778" endtime="20210730 15:36:26.783"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:36:26.784" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:36:26.783" endtime="20210730 15:36:26.784"/>
</kw>
<status status="PASS" starttime="20210730 15:36:26.776" endtime="20210730 15:36:26.784"/>
</kw>
<status status="PASS" starttime="20210730 15:36:25.228" endtime="20210730 15:36:26.784"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdefgh</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:26.785" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:36:26.785" endtime="20210730 15:36:26.785"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:26.786" level="INFO">${payload} = {'password': 'abcdefgh'}</msg>
<status status="PASS" starttime="20210730 15:36:26.786" endtime="20210730 15:36:26.786"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:26.795" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:26.795" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:26.786" endtime="20210730 15:36:26.795"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:26.795" endtime="20210730 15:36:26.796"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:26.796" endtime="20210730 15:36:26.796"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:26.786" endtime="20210730 15:36:26.796"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:26.786" endtime="20210730 15:36:26.796"/>
</for>
<status status="FAIL" starttime="20210730 15:36:26.784" endtime="20210730 15:36:26.796"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:26.784" endtime="20210730 15:36:26.796"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdefgh</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:26.798" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:36:26.797" endtime="20210730 15:36:26.798"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:26.798" level="INFO">${payload} = {'password': 'abcdefgh'}</msg>
<status status="PASS" starttime="20210730 15:36:26.798" endtime="20210730 15:36:26.798"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:26.803" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:26.803" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:26.799" endtime="20210730 15:36:26.803"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:26.803" endtime="20210730 15:36:26.803"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:26.803" endtime="20210730 15:36:26.803"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:26.799" endtime="20210730 15:36:26.804"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:26.798" endtime="20210730 15:36:26.804"/>
</for>
<status status="FAIL" starttime="20210730 15:36:26.797" endtime="20210730 15:36:26.804"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:26.797" endtime="20210730 15:36:26.804"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdefgh</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:26.805" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:36:26.805" endtime="20210730 15:36:26.805"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:26.805" level="INFO">${payload} = {'password': 'abcdefgh'}</msg>
<status status="PASS" starttime="20210730 15:36:26.805" endtime="20210730 15:36:26.806"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:26.812" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:26.812" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:26.806" endtime="20210730 15:36:26.812"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:26.812" endtime="20210730 15:36:26.812"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:26.812" endtime="20210730 15:36:26.812"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:26.806" endtime="20210730 15:36:26.812"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:26.806" endtime="20210730 15:36:26.812"/>
</for>
<status status="FAIL" starttime="20210730 15:36:26.804" endtime="20210730 15:36:26.813"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:26.804" endtime="20210730 15:36:26.813"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:26.784" endtime="20210730 15:36:26.813"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:26.818" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:26.828" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:26.828" level="INFO">${pids} = 6681
6688
6694</msg>
<status status="PASS" starttime="20210730 15:36:26.814" endtime="20210730 15:36:26.828"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:26.829" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:26.828" endtime="20210730 15:36:26.829"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:26.830" level="INFO">${pids} = ['6681', '6688', '6694']</msg>
<status status="PASS" starttime="20210730 15:36:26.829" endtime="20210730 15:36:26.830"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">6681</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:26.833" level="INFO">Running command 'kill 6681 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:26.830" endtime="20210730 15:36:26.834"/>
</kw>
<status status="PASS" starttime="20210730 15:36:26.830" endtime="20210730 15:36:26.834"/>
</iter>
<iter>
<var name="${pid}">6688</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:26.838" level="INFO">Running command 'kill 6688 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:26.834" endtime="20210730 15:36:26.838"/>
</kw>
<status status="PASS" starttime="20210730 15:36:26.834" endtime="20210730 15:36:26.839"/>
</iter>
<iter>
<var name="${pid}">6694</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:26.845" level="INFO">Running command 'kill 6694 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:26.839" endtime="20210730 15:36:26.845"/>
</kw>
<status status="PASS" starttime="20210730 15:36:26.839" endtime="20210730 15:36:26.845"/>
</iter>
<status status="PASS" starttime="20210730 15:36:26.830" endtime="20210730 15:36:26.846"/>
</for>
<status status="PASS" starttime="20210730 15:36:26.829" endtime="20210730 15:36:26.846"/>
</branch>
<status status="PASS" starttime="20210730 15:36:26.829" endtime="20210730 15:36:26.846"/>
</if>
<status status="PASS" starttime="20210730 15:36:26.813" endtime="20210730 15:36:26.846"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcdefgh'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:36:25.227" endtime="20210730 15:36:26.846">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t47" name="With Each Valid Token, Updating Password Of Each System User With abcdefghjklmnprstoöuüvyz Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:26.852" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:26.864" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:26.864" level="INFO">${pids} = 6723</msg>
<status status="PASS" starttime="20210730 15:36:26.849" endtime="20210730 15:36:26.864"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:26.865" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:26.864" endtime="20210730 15:36:26.865"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:26.865" level="INFO">${pids} = ['6723']</msg>
<status status="PASS" starttime="20210730 15:36:26.865" endtime="20210730 15:36:26.865"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">6723</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:26.873" level="INFO">Running command 'kill 6723 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:26.866" endtime="20210730 15:36:26.873"/>
</kw>
<status status="PASS" starttime="20210730 15:36:26.866" endtime="20210730 15:36:26.873"/>
</iter>
<status status="PASS" starttime="20210730 15:36:26.866" endtime="20210730 15:36:26.873"/>
</for>
<status status="PASS" starttime="20210730 15:36:26.865" endtime="20210730 15:36:26.873"/>
</branch>
<status status="PASS" starttime="20210730 15:36:26.865" endtime="20210730 15:36:26.873"/>
</if>
<status status="PASS" starttime="20210730 15:36:26.848" endtime="20210730 15:36:26.874"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:26.877" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:26.876" endtime="20210730 15:36:26.877"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:26.879" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:26.879" endtime="20210730 15:36:26.879"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:26.880" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:26.880" endtime="20210730 15:36:26.880"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:26.881" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:26.880" endtime="20210730 15:36:26.881"/>
</kw>
<msg timestamp="20210730 15:36:26.881" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:26.877" endtime="20210730 15:36:26.881"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:26.885" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:26.881" endtime="20210730 15:36:26.886"/>
</kw>
<status status="PASS" starttime="20210730 15:36:26.874" endtime="20210730 15:36:26.887"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:36:26.888" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:36:26.887" endtime="20210730 15:36:26.894"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:36:28.396" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:36:26.894" endtime="20210730 15:36:28.396"/>
</kw>
<status status="PASS" starttime="20210730 15:36:26.887" endtime="20210730 15:36:28.397"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:28.399" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:28.398" endtime="20210730 15:36:28.399"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:28.399" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:28.399" endtime="20210730 15:36:28.399"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:28.399" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:28.399" endtime="20210730 15:36:28.399"/>
</kw>
<msg timestamp="20210730 15:36:28.399" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:28.398" endtime="20210730 15:36:28.399"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:36:28.400" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:36:28.400" endtime="20210730 15:36:28.400"/>
</kw>
<status status="PASS" starttime="20210730 15:36:28.398" endtime="20210730 15:36:28.400"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:36:28.401" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:36:28.401" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:36:28.401" endtime="20210730 15:36:28.401"/>
</kw>
<status status="PASS" starttime="20210730 15:36:28.400" endtime="20210730 15:36:28.401"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:36:28.402" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:36:28.402" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:36:28.401" endtime="20210730 15:36:28.402"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:36:28.402" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:36:28.402" endtime="20210730 15:36:28.402"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:28.403" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:28.403" endtime="20210730 15:36:28.403"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:28.403" endtime="20210730 15:36:28.404"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:28.404" endtime="20210730 15:36:28.404"/>
</kw>
<status status="PASS" starttime="20210730 15:36:28.402" endtime="20210730 15:36:28.404"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:28.405" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:28.404" endtime="20210730 15:36:28.405"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:28.405" endtime="20210730 15:36:28.406"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:28.406" endtime="20210730 15:36:28.406"/>
</kw>
<status status="PASS" starttime="20210730 15:36:28.404" endtime="20210730 15:36:28.406"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:28.407" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:28.406" endtime="20210730 15:36:28.407"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:28.407" endtime="20210730 15:36:28.407"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:28.407" endtime="20210730 15:36:28.408"/>
</kw>
<status status="PASS" starttime="20210730 15:36:28.406" endtime="20210730 15:36:28.408"/>
</iter>
<status status="PASS" starttime="20210730 15:36:28.402" endtime="20210730 15:36:28.408"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:36:28.408" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:36:28.408" endtime="20210730 15:36:28.408"/>
</kw>
<status status="PASS" starttime="20210730 15:36:28.401" endtime="20210730 15:36:28.408"/>
</kw>
<status status="PASS" starttime="20210730 15:36:26.848" endtime="20210730 15:36:28.408"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdefghjklmnprstoöuüvyz</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:28.411" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:36:28.411" endtime="20210730 15:36:28.412"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:28.413" level="INFO">${payload} = {'password': 'abcdefghjklmnprstoöuüvyz'}</msg>
<status status="PASS" starttime="20210730 15:36:28.412" endtime="20210730 15:36:28.413"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:28.422" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:28.422" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:28.413" endtime="20210730 15:36:28.422"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:28.422" endtime="20210730 15:36:28.422"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:28.422" endtime="20210730 15:36:28.422"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:28.413" endtime="20210730 15:36:28.422"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:28.413" endtime="20210730 15:36:28.422"/>
</for>
<status status="FAIL" starttime="20210730 15:36:28.409" endtime="20210730 15:36:28.423"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:28.409" endtime="20210730 15:36:28.423"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdefghjklmnprstoöuüvyz</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:28.424" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:36:28.423" endtime="20210730 15:36:28.424"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:28.424" level="INFO">${payload} = {'password': 'abcdefghjklmnprstoöuüvyz'}</msg>
<status status="PASS" starttime="20210730 15:36:28.424" endtime="20210730 15:36:28.424"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:28.429" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:28.429" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:28.424" endtime="20210730 15:36:28.429"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:28.429" endtime="20210730 15:36:28.429"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:28.429" endtime="20210730 15:36:28.429"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:28.424" endtime="20210730 15:36:28.429"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:28.424" endtime="20210730 15:36:28.429"/>
</for>
<status status="FAIL" starttime="20210730 15:36:28.423" endtime="20210730 15:36:28.429"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:28.423" endtime="20210730 15:36:28.430"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdefghjklmnprstoöuüvyz</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:28.431" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:36:28.430" endtime="20210730 15:36:28.431"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:28.431" level="INFO">${payload} = {'password': 'abcdefghjklmnprstoöuüvyz'}</msg>
<status status="PASS" starttime="20210730 15:36:28.431" endtime="20210730 15:36:28.431"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:28.435" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:28.435" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:28.431" endtime="20210730 15:36:28.435"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:28.435" endtime="20210730 15:36:28.435"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:28.435" endtime="20210730 15:36:28.435"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:28.431" endtime="20210730 15:36:28.435"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:28.431" endtime="20210730 15:36:28.435"/>
</for>
<status status="FAIL" starttime="20210730 15:36:28.430" endtime="20210730 15:36:28.436"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:28.430" endtime="20210730 15:36:28.436"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:28.409" endtime="20210730 15:36:28.436"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:28.440" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:28.452" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:28.452" level="INFO">${pids} = 6746
6757
6778</msg>
<status status="PASS" starttime="20210730 15:36:28.437" endtime="20210730 15:36:28.452"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:28.453" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:28.452" endtime="20210730 15:36:28.453"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:28.453" level="INFO">${pids} = ['6746', '6757', '6778']</msg>
<status status="PASS" starttime="20210730 15:36:28.453" endtime="20210730 15:36:28.454"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">6746</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:28.458" level="INFO">Running command 'kill 6746 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:28.454" endtime="20210730 15:36:28.458"/>
</kw>
<status status="PASS" starttime="20210730 15:36:28.454" endtime="20210730 15:36:28.458"/>
</iter>
<iter>
<var name="${pid}">6757</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:28.462" level="INFO">Running command 'kill 6757 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:28.459" endtime="20210730 15:36:28.464"/>
</kw>
<status status="PASS" starttime="20210730 15:36:28.458" endtime="20210730 15:36:28.464"/>
</iter>
<iter>
<var name="${pid}">6778</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:28.468" level="INFO">Running command 'kill 6778 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:28.464" endtime="20210730 15:36:28.468"/>
</kw>
<status status="PASS" starttime="20210730 15:36:28.464" endtime="20210730 15:36:28.468"/>
</iter>
<status status="PASS" starttime="20210730 15:36:28.454" endtime="20210730 15:36:28.468"/>
</for>
<status status="PASS" starttime="20210730 15:36:28.453" endtime="20210730 15:36:28.468"/>
</branch>
<status status="PASS" starttime="20210730 15:36:28.453" endtime="20210730 15:36:28.468"/>
</if>
<status status="PASS" starttime="20210730 15:36:28.436" endtime="20210730 15:36:28.468"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcdefghjklmnprstoöuüvyz'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:36:26.847" endtime="20210730 15:36:28.469">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t48" name="With Each Valid Token, Updating Password Of Each System User With ABCDEFG Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:28.474" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:28.485" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:28.485" level="INFO">${pids} = 6836</msg>
<status status="PASS" starttime="20210730 15:36:28.471" endtime="20210730 15:36:28.485"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:28.486" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:28.485" endtime="20210730 15:36:28.486"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:28.487" level="INFO">${pids} = ['6836']</msg>
<status status="PASS" starttime="20210730 15:36:28.487" endtime="20210730 15:36:28.487"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">6836</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:28.491" level="INFO">Running command 'kill 6836 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:28.488" endtime="20210730 15:36:28.492"/>
</kw>
<status status="PASS" starttime="20210730 15:36:28.487" endtime="20210730 15:36:28.492"/>
</iter>
<status status="PASS" starttime="20210730 15:36:28.487" endtime="20210730 15:36:28.492"/>
</for>
<status status="PASS" starttime="20210730 15:36:28.486" endtime="20210730 15:36:28.492"/>
</branch>
<status status="PASS" starttime="20210730 15:36:28.486" endtime="20210730 15:36:28.492"/>
</if>
<status status="PASS" starttime="20210730 15:36:28.470" endtime="20210730 15:36:28.492"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:28.493" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:28.493" endtime="20210730 15:36:28.493"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:28.494" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:28.494" endtime="20210730 15:36:28.494"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:28.494" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:28.494" endtime="20210730 15:36:28.495"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:28.495" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:28.495" endtime="20210730 15:36:28.495"/>
</kw>
<msg timestamp="20210730 15:36:28.495" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:28.494" endtime="20210730 15:36:28.495"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:28.498" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:28.495" endtime="20210730 15:36:28.500"/>
</kw>
<status status="PASS" starttime="20210730 15:36:28.492" endtime="20210730 15:36:28.500"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:36:28.502" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:36:28.501" endtime="20210730 15:36:28.507"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:36:30.008" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:36:28.508" endtime="20210730 15:36:30.009"/>
</kw>
<status status="PASS" starttime="20210730 15:36:28.501" endtime="20210730 15:36:30.009"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:30.011" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:30.011" endtime="20210730 15:36:30.011"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:30.012" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:30.012" endtime="20210730 15:36:30.012"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:30.012" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:30.012" endtime="20210730 15:36:30.012"/>
</kw>
<msg timestamp="20210730 15:36:30.013" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:30.010" endtime="20210730 15:36:30.013"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:36:30.013" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:36:30.013" endtime="20210730 15:36:30.013"/>
</kw>
<status status="PASS" starttime="20210730 15:36:30.010" endtime="20210730 15:36:30.013"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:36:30.014" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:36:30.014" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:36:30.014" endtime="20210730 15:36:30.014"/>
</kw>
<status status="PASS" starttime="20210730 15:36:30.014" endtime="20210730 15:36:30.014"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:36:30.015" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:36:30.015" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:36:30.015" endtime="20210730 15:36:30.015"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:36:30.016" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:36:30.015" endtime="20210730 15:36:30.016"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:30.016" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:30.016" endtime="20210730 15:36:30.016"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:30.016" endtime="20210730 15:36:30.017"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:30.017" endtime="20210730 15:36:30.017"/>
</kw>
<status status="PASS" starttime="20210730 15:36:30.016" endtime="20210730 15:36:30.017"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:30.018" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:30.018" endtime="20210730 15:36:30.018"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:30.018" endtime="20210730 15:36:30.018"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:30.019" endtime="20210730 15:36:30.019"/>
</kw>
<status status="PASS" starttime="20210730 15:36:30.017" endtime="20210730 15:36:30.019"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:30.019" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:30.019" endtime="20210730 15:36:30.019"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:30.019" endtime="20210730 15:36:30.020"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:30.020" endtime="20210730 15:36:30.020"/>
</kw>
<status status="PASS" starttime="20210730 15:36:30.019" endtime="20210730 15:36:30.020"/>
</iter>
<status status="PASS" starttime="20210730 15:36:30.016" endtime="20210730 15:36:30.020"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:36:30.021" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:36:30.021" endtime="20210730 15:36:30.021"/>
</kw>
<status status="PASS" starttime="20210730 15:36:30.014" endtime="20210730 15:36:30.021"/>
</kw>
<status status="PASS" starttime="20210730 15:36:28.470" endtime="20210730 15:36:30.021"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCDEFG</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:30.022" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:36:30.022" endtime="20210730 15:36:30.022"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:30.023" level="INFO">${payload} = {'password': 'ABCDEFG'}</msg>
<status status="PASS" starttime="20210730 15:36:30.022" endtime="20210730 15:36:30.023"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:30.032" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:30.032" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:30.023" endtime="20210730 15:36:30.032"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:30.033" endtime="20210730 15:36:30.033"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:30.033" endtime="20210730 15:36:30.033"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:30.023" endtime="20210730 15:36:30.033"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:30.023" endtime="20210730 15:36:30.033"/>
</for>
<status status="FAIL" starttime="20210730 15:36:30.022" endtime="20210730 15:36:30.033"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:30.021" endtime="20210730 15:36:30.033"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCDEFG</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:30.034" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:36:30.034" endtime="20210730 15:36:30.034"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:30.035" level="INFO">${payload} = {'password': 'ABCDEFG'}</msg>
<status status="PASS" starttime="20210730 15:36:30.034" endtime="20210730 15:36:30.035"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:30.039" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:30.039" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:30.035" endtime="20210730 15:36:30.039"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:30.039" endtime="20210730 15:36:30.039"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:30.039" endtime="20210730 15:36:30.039"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:30.035" endtime="20210730 15:36:30.039"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:30.035" endtime="20210730 15:36:30.040"/>
</for>
<status status="FAIL" starttime="20210730 15:36:30.033" endtime="20210730 15:36:30.040"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:30.033" endtime="20210730 15:36:30.040"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCDEFG</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:30.041" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:36:30.040" endtime="20210730 15:36:30.041"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:30.041" level="INFO">${payload} = {'password': 'ABCDEFG'}</msg>
<status status="PASS" starttime="20210730 15:36:30.041" endtime="20210730 15:36:30.041"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:30.046" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:30.046" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:30.042" endtime="20210730 15:36:30.046"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:30.046" endtime="20210730 15:36:30.047"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:30.047" endtime="20210730 15:36:30.047"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:30.041" endtime="20210730 15:36:30.047"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:30.041" endtime="20210730 15:36:30.047"/>
</for>
<status status="FAIL" starttime="20210730 15:36:30.040" endtime="20210730 15:36:30.047"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:30.040" endtime="20210730 15:36:30.047"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:30.021" endtime="20210730 15:36:30.047"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:30.052" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:30.062" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:30.062" level="INFO">${pids} = 6859
6866
6870</msg>
<status status="PASS" starttime="20210730 15:36:30.048" endtime="20210730 15:36:30.062"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:30.063" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:30.063" endtime="20210730 15:36:30.063"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:30.064" level="INFO">${pids} = ['6859', '6866', '6870']</msg>
<status status="PASS" starttime="20210730 15:36:30.063" endtime="20210730 15:36:30.064"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">6859</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:30.067" level="INFO">Running command 'kill 6859 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:30.064" endtime="20210730 15:36:30.068"/>
</kw>
<status status="PASS" starttime="20210730 15:36:30.064" endtime="20210730 15:36:30.068"/>
</iter>
<iter>
<var name="${pid}">6866</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:30.072" level="INFO">Running command 'kill 6866 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:30.068" endtime="20210730 15:36:30.072"/>
</kw>
<status status="PASS" starttime="20210730 15:36:30.068" endtime="20210730 15:36:30.072"/>
</iter>
<iter>
<var name="${pid}">6870</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:30.075" level="INFO">Running command 'kill 6870 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:30.073" endtime="20210730 15:36:30.076"/>
</kw>
<status status="PASS" starttime="20210730 15:36:30.072" endtime="20210730 15:36:30.076"/>
</iter>
<status status="PASS" starttime="20210730 15:36:30.064" endtime="20210730 15:36:30.076"/>
</for>
<status status="PASS" starttime="20210730 15:36:30.063" endtime="20210730 15:36:30.076"/>
</branch>
<status status="PASS" starttime="20210730 15:36:30.063" endtime="20210730 15:36:30.076"/>
</if>
<status status="PASS" starttime="20210730 15:36:30.047" endtime="20210730 15:36:30.077"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABCDEFG'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:36:28.469" endtime="20210730 15:36:30.077">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t49" name="With Each Valid Token, Updating Password Of Each System User With ABCDEFGH Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:30.084" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:30.094" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:30.094" level="INFO">${pids} = 6899</msg>
<status status="PASS" starttime="20210730 15:36:30.080" endtime="20210730 15:36:30.094"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:30.095" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:30.094" endtime="20210730 15:36:30.095"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:30.096" level="INFO">${pids} = ['6899']</msg>
<status status="PASS" starttime="20210730 15:36:30.095" endtime="20210730 15:36:30.096"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">6899</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:30.099" level="INFO">Running command 'kill 6899 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:30.096" endtime="20210730 15:36:30.099"/>
</kw>
<status status="PASS" starttime="20210730 15:36:30.096" endtime="20210730 15:36:30.099"/>
</iter>
<status status="PASS" starttime="20210730 15:36:30.096" endtime="20210730 15:36:30.099"/>
</for>
<status status="PASS" starttime="20210730 15:36:30.095" endtime="20210730 15:36:30.100"/>
</branch>
<status status="PASS" starttime="20210730 15:36:30.095" endtime="20210730 15:36:30.100"/>
</if>
<status status="PASS" starttime="20210730 15:36:30.079" endtime="20210730 15:36:30.100"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:30.101" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:30.101" endtime="20210730 15:36:30.101"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:30.102" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:30.101" endtime="20210730 15:36:30.102"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:30.102" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:30.102" endtime="20210730 15:36:30.102"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:30.102" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:30.102" endtime="20210730 15:36:30.102"/>
</kw>
<msg timestamp="20210730 15:36:30.103" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:30.101" endtime="20210730 15:36:30.103"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:30.106" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:30.103" endtime="20210730 15:36:30.107"/>
</kw>
<status status="PASS" starttime="20210730 15:36:30.100" endtime="20210730 15:36:30.108"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:36:30.109" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:36:30.108" endtime="20210730 15:36:30.119"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:36:31.636" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:36:30.120" endtime="20210730 15:36:31.636"/>
</kw>
<status status="PASS" starttime="20210730 15:36:30.108" endtime="20210730 15:36:31.637"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:31.638" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:31.637" endtime="20210730 15:36:31.638"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:31.638" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:31.638" endtime="20210730 15:36:31.638"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:31.638" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:31.638" endtime="20210730 15:36:31.638"/>
</kw>
<msg timestamp="20210730 15:36:31.639" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:31.637" endtime="20210730 15:36:31.639"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:36:31.639" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:36:31.639" endtime="20210730 15:36:31.639"/>
</kw>
<status status="PASS" starttime="20210730 15:36:31.637" endtime="20210730 15:36:31.640"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:36:31.640" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:36:31.640" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:36:31.640" endtime="20210730 15:36:31.640"/>
</kw>
<status status="PASS" starttime="20210730 15:36:31.640" endtime="20210730 15:36:31.640"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:36:31.641" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:36:31.641" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:36:31.641" endtime="20210730 15:36:31.641"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:36:31.642" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:36:31.642" endtime="20210730 15:36:31.642"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:31.643" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:31.643" endtime="20210730 15:36:31.643"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:31.644" endtime="20210730 15:36:31.645"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:31.646" endtime="20210730 15:36:31.646"/>
</kw>
<status status="PASS" starttime="20210730 15:36:31.642" endtime="20210730 15:36:31.646"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:31.647" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:31.646" endtime="20210730 15:36:31.647"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:31.647" endtime="20210730 15:36:31.647"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:31.648" endtime="20210730 15:36:31.648"/>
</kw>
<status status="PASS" starttime="20210730 15:36:31.646" endtime="20210730 15:36:31.648"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:31.648" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:31.648" endtime="20210730 15:36:31.648"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:31.648" endtime="20210730 15:36:31.649"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:31.649" endtime="20210730 15:36:31.649"/>
</kw>
<status status="PASS" starttime="20210730 15:36:31.648" endtime="20210730 15:36:31.649"/>
</iter>
<status status="PASS" starttime="20210730 15:36:31.642" endtime="20210730 15:36:31.650"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:36:31.650" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:36:31.650" endtime="20210730 15:36:31.650"/>
</kw>
<status status="PASS" starttime="20210730 15:36:31.640" endtime="20210730 15:36:31.650"/>
</kw>
<status status="PASS" starttime="20210730 15:36:30.079" endtime="20210730 15:36:31.650"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCDEFGH</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:31.651" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:36:31.651" endtime="20210730 15:36:31.652"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:31.652" level="INFO">${payload} = {'password': 'ABCDEFGH'}</msg>
<status status="PASS" starttime="20210730 15:36:31.652" endtime="20210730 15:36:31.652"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:31.662" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:31.662" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:31.652" endtime="20210730 15:36:31.662"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:31.662" endtime="20210730 15:36:31.662"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:31.663" endtime="20210730 15:36:31.663"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:31.652" endtime="20210730 15:36:31.663"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:31.652" endtime="20210730 15:36:31.663"/>
</for>
<status status="FAIL" starttime="20210730 15:36:31.651" endtime="20210730 15:36:31.663"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:31.651" endtime="20210730 15:36:31.663"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCDEFGH</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:31.665" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:36:31.664" endtime="20210730 15:36:31.666"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:31.667" level="INFO">${payload} = {'password': 'ABCDEFGH'}</msg>
<status status="PASS" starttime="20210730 15:36:31.666" endtime="20210730 15:36:31.667"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:31.672" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:31.672" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:31.668" endtime="20210730 15:36:31.672"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:31.672" endtime="20210730 15:36:31.673"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:31.673" endtime="20210730 15:36:31.673"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:31.667" endtime="20210730 15:36:31.673"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:31.667" endtime="20210730 15:36:31.673"/>
</for>
<status status="FAIL" starttime="20210730 15:36:31.663" endtime="20210730 15:36:31.673"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:31.663" endtime="20210730 15:36:31.673"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCDEFGH</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:31.674" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:36:31.674" endtime="20210730 15:36:31.674"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:31.675" level="INFO">${payload} = {'password': 'ABCDEFGH'}</msg>
<status status="PASS" starttime="20210730 15:36:31.674" endtime="20210730 15:36:31.675"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:31.680" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:31.681" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:31.675" endtime="20210730 15:36:31.681"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:31.681" endtime="20210730 15:36:31.681"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:31.681" endtime="20210730 15:36:31.681"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:31.675" endtime="20210730 15:36:31.681"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:31.675" endtime="20210730 15:36:31.681"/>
</for>
<status status="FAIL" starttime="20210730 15:36:31.673" endtime="20210730 15:36:31.681"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:31.673" endtime="20210730 15:36:31.681"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:31.650" endtime="20210730 15:36:31.682"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:31.690" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:31.700" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:31.700" level="INFO">${pids} = 6928
6935
6946</msg>
<status status="PASS" starttime="20210730 15:36:31.683" endtime="20210730 15:36:31.700"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:31.701" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:31.700" endtime="20210730 15:36:31.701"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:31.702" level="INFO">${pids} = ['6928', '6935', '6946']</msg>
<status status="PASS" starttime="20210730 15:36:31.701" endtime="20210730 15:36:31.702"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">6928</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:31.706" level="INFO">Running command 'kill 6928 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:31.702" endtime="20210730 15:36:31.706"/>
</kw>
<status status="PASS" starttime="20210730 15:36:31.702" endtime="20210730 15:36:31.706"/>
</iter>
<iter>
<var name="${pid}">6935</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:31.711" level="INFO">Running command 'kill 6935 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:31.707" endtime="20210730 15:36:31.714"/>
</kw>
<status status="PASS" starttime="20210730 15:36:31.706" endtime="20210730 15:36:31.714"/>
</iter>
<iter>
<var name="${pid}">6946</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:31.718" level="INFO">Running command 'kill 6946 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:31.714" endtime="20210730 15:36:31.718"/>
</kw>
<status status="PASS" starttime="20210730 15:36:31.714" endtime="20210730 15:36:31.718"/>
</iter>
<status status="PASS" starttime="20210730 15:36:31.702" endtime="20210730 15:36:31.718"/>
</for>
<status status="PASS" starttime="20210730 15:36:31.701" endtime="20210730 15:36:31.718"/>
</branch>
<status status="PASS" starttime="20210730 15:36:31.701" endtime="20210730 15:36:31.718"/>
</if>
<status status="PASS" starttime="20210730 15:36:31.682" endtime="20210730 15:36:31.719"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABCDEFGH'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:36:30.078" endtime="20210730 15:36:31.719">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t50" name="With Each Valid Token, Updating Password Of Each System User With ABCDEFGHJKLMNPRSTOÖUÜVYZ Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:31.724" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:31.734" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:31.735" level="INFO">${pids} = 6977</msg>
<status status="PASS" starttime="20210730 15:36:31.721" endtime="20210730 15:36:31.735"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:31.736" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:31.735" endtime="20210730 15:36:31.736"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:31.737" level="INFO">${pids} = ['6977']</msg>
<status status="PASS" starttime="20210730 15:36:31.736" endtime="20210730 15:36:31.737"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">6977</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:31.744" level="INFO">Running command 'kill 6977 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:31.737" endtime="20210730 15:36:31.744"/>
</kw>
<status status="PASS" starttime="20210730 15:36:31.737" endtime="20210730 15:36:31.745"/>
</iter>
<status status="PASS" starttime="20210730 15:36:31.737" endtime="20210730 15:36:31.745"/>
</for>
<status status="PASS" starttime="20210730 15:36:31.736" endtime="20210730 15:36:31.745"/>
</branch>
<status status="PASS" starttime="20210730 15:36:31.736" endtime="20210730 15:36:31.745"/>
</if>
<status status="PASS" starttime="20210730 15:36:31.720" endtime="20210730 15:36:31.745"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:31.747" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:31.747" endtime="20210730 15:36:31.747"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:31.748" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:31.748" endtime="20210730 15:36:31.748"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:31.749" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:31.748" endtime="20210730 15:36:31.749"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:31.749" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:31.749" endtime="20210730 15:36:31.749"/>
</kw>
<msg timestamp="20210730 15:36:31.749" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:31.748" endtime="20210730 15:36:31.749"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:31.753" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:31.750" endtime="20210730 15:36:31.755"/>
</kw>
<status status="PASS" starttime="20210730 15:36:31.746" endtime="20210730 15:36:31.755"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:36:31.757" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:36:31.756" endtime="20210730 15:36:31.773"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:36:33.275" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:36:31.773" endtime="20210730 15:36:33.275"/>
</kw>
<status status="PASS" starttime="20210730 15:36:31.756" endtime="20210730 15:36:33.277"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:33.280" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:33.280" endtime="20210730 15:36:33.280"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:33.281" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:33.281" endtime="20210730 15:36:33.281"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:33.281" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:33.281" endtime="20210730 15:36:33.281"/>
</kw>
<msg timestamp="20210730 15:36:33.281" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:33.280" endtime="20210730 15:36:33.281"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:36:33.282" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:36:33.282" endtime="20210730 15:36:33.282"/>
</kw>
<status status="PASS" starttime="20210730 15:36:33.278" endtime="20210730 15:36:33.282"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:36:33.283" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:36:33.283" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:36:33.283" endtime="20210730 15:36:33.283"/>
</kw>
<status status="PASS" starttime="20210730 15:36:33.282" endtime="20210730 15:36:33.283"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:36:33.284" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:36:33.284" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:36:33.283" endtime="20210730 15:36:33.284"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:36:33.284" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:36:33.284" endtime="20210730 15:36:33.284"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:33.285" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:33.285" endtime="20210730 15:36:33.285"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:33.285" endtime="20210730 15:36:33.286"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:33.286" endtime="20210730 15:36:33.286"/>
</kw>
<status status="PASS" starttime="20210730 15:36:33.285" endtime="20210730 15:36:33.286"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:33.287" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:33.287" endtime="20210730 15:36:33.287"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:33.287" endtime="20210730 15:36:33.287"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:33.288" endtime="20210730 15:36:33.288"/>
</kw>
<status status="PASS" starttime="20210730 15:36:33.286" endtime="20210730 15:36:33.288"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:33.288" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:33.288" endtime="20210730 15:36:33.288"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:33.288" endtime="20210730 15:36:33.289"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:33.289" endtime="20210730 15:36:33.289"/>
</kw>
<status status="PASS" starttime="20210730 15:36:33.288" endtime="20210730 15:36:33.289"/>
</iter>
<status status="PASS" starttime="20210730 15:36:33.284" endtime="20210730 15:36:33.289"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:36:33.290" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:36:33.289" endtime="20210730 15:36:33.290"/>
</kw>
<status status="PASS" starttime="20210730 15:36:33.283" endtime="20210730 15:36:33.290"/>
</kw>
<status status="PASS" starttime="20210730 15:36:31.720" endtime="20210730 15:36:33.290"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCDEFGHJKLMNPRSTOÖUÜVYZ</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:33.291" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:36:33.291" endtime="20210730 15:36:33.291"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:33.292" level="INFO">${payload} = {'password': 'ABCDEFGHJKLMNPRSTOÖUÜVYZ'}</msg>
<status status="PASS" starttime="20210730 15:36:33.291" endtime="20210730 15:36:33.292"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:33.302" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:33.302" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:33.292" endtime="20210730 15:36:33.302"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:33.302" endtime="20210730 15:36:33.302"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:33.302" endtime="20210730 15:36:33.302"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:33.292" endtime="20210730 15:36:33.302"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:33.292" endtime="20210730 15:36:33.302"/>
</for>
<status status="FAIL" starttime="20210730 15:36:33.290" endtime="20210730 15:36:33.302"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:33.290" endtime="20210730 15:36:33.303"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCDEFGHJKLMNPRSTOÖUÜVYZ</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:33.304" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:36:33.303" endtime="20210730 15:36:33.304"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:33.304" level="INFO">${payload} = {'password': 'ABCDEFGHJKLMNPRSTOÖUÜVYZ'}</msg>
<status status="PASS" starttime="20210730 15:36:33.304" endtime="20210730 15:36:33.304"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:33.308" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:33.308" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:33.304" endtime="20210730 15:36:33.308"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:33.308" endtime="20210730 15:36:33.308"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:33.309" endtime="20210730 15:36:33.309"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:33.304" endtime="20210730 15:36:33.309"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:33.304" endtime="20210730 15:36:33.309"/>
</for>
<status status="FAIL" starttime="20210730 15:36:33.303" endtime="20210730 15:36:33.309"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:33.303" endtime="20210730 15:36:33.309"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCDEFGHJKLMNPRSTOÖUÜVYZ</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:33.311" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:36:33.311" endtime="20210730 15:36:33.311"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:33.312" level="INFO">${payload} = {'password': 'ABCDEFGHJKLMNPRSTOÖUÜVYZ'}</msg>
<status status="PASS" starttime="20210730 15:36:33.311" endtime="20210730 15:36:33.312"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:33.316" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:33.316" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:33.312" endtime="20210730 15:36:33.316"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:33.317" endtime="20210730 15:36:33.317"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:33.317" endtime="20210730 15:36:33.317"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:33.312" endtime="20210730 15:36:33.317"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:33.312" endtime="20210730 15:36:33.317"/>
</for>
<status status="FAIL" starttime="20210730 15:36:33.309" endtime="20210730 15:36:33.317"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:33.309" endtime="20210730 15:36:33.317"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:33.290" endtime="20210730 15:36:33.317"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:33.323" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:33.333" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:33.333" level="INFO">${pids} = 7000
7007
7012</msg>
<status status="PASS" starttime="20210730 15:36:33.318" endtime="20210730 15:36:33.333"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:33.334" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:33.334" endtime="20210730 15:36:33.335"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:33.335" level="INFO">${pids} = ['7000', '7007', '7012']</msg>
<status status="PASS" starttime="20210730 15:36:33.335" endtime="20210730 15:36:33.335"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">7000</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:33.339" level="INFO">Running command 'kill 7000 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:33.336" endtime="20210730 15:36:33.339"/>
</kw>
<status status="PASS" starttime="20210730 15:36:33.336" endtime="20210730 15:36:33.339"/>
</iter>
<iter>
<var name="${pid}">7007</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:33.343" level="INFO">Running command 'kill 7007 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:33.340" endtime="20210730 15:36:33.344"/>
</kw>
<status status="PASS" starttime="20210730 15:36:33.339" endtime="20210730 15:36:33.344"/>
</iter>
<iter>
<var name="${pid}">7012</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:33.350" level="INFO">Running command 'kill 7012 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:33.344" endtime="20210730 15:36:33.351"/>
</kw>
<status status="PASS" starttime="20210730 15:36:33.344" endtime="20210730 15:36:33.351"/>
</iter>
<status status="PASS" starttime="20210730 15:36:33.335" endtime="20210730 15:36:33.351"/>
</for>
<status status="PASS" starttime="20210730 15:36:33.335" endtime="20210730 15:36:33.351"/>
</branch>
<status status="PASS" starttime="20210730 15:36:33.335" endtime="20210730 15:36:33.351"/>
</if>
<status status="PASS" starttime="20210730 15:36:33.318" endtime="20210730 15:36:33.351"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABCDEFGHJKLMNPRSTOÖUÜVYZ'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:36:31.719" endtime="20210730 15:36:33.351">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t51" name="With Each Valid Token, Updating Password Of Each System User With 0123456 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:33.357" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:33.367" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:33.367" level="INFO">${pids} = 7041</msg>
<status status="PASS" starttime="20210730 15:36:33.354" endtime="20210730 15:36:33.367"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:33.368" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:33.367" endtime="20210730 15:36:33.368"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:33.368" level="INFO">${pids} = ['7041']</msg>
<status status="PASS" starttime="20210730 15:36:33.368" endtime="20210730 15:36:33.369"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">7041</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:33.372" level="INFO">Running command 'kill 7041 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:33.369" endtime="20210730 15:36:33.372"/>
</kw>
<status status="PASS" starttime="20210730 15:36:33.369" endtime="20210730 15:36:33.372"/>
</iter>
<status status="PASS" starttime="20210730 15:36:33.369" endtime="20210730 15:36:33.372"/>
</for>
<status status="PASS" starttime="20210730 15:36:33.368" endtime="20210730 15:36:33.372"/>
</branch>
<status status="PASS" starttime="20210730 15:36:33.368" endtime="20210730 15:36:33.372"/>
</if>
<status status="PASS" starttime="20210730 15:36:33.354" endtime="20210730 15:36:33.373"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:33.374" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:33.373" endtime="20210730 15:36:33.374"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:33.374" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:33.374" endtime="20210730 15:36:33.374"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:33.375" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:33.375" endtime="20210730 15:36:33.375"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:33.375" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:33.375" endtime="20210730 15:36:33.375"/>
</kw>
<msg timestamp="20210730 15:36:33.376" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:33.374" endtime="20210730 15:36:33.376"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:33.382" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:33.376" endtime="20210730 15:36:33.383"/>
</kw>
<status status="PASS" starttime="20210730 15:36:33.373" endtime="20210730 15:36:33.384"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:36:33.385" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:36:33.385" endtime="20210730 15:36:33.390"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:36:34.894" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:36:33.390" endtime="20210730 15:36:34.894"/>
</kw>
<status status="PASS" starttime="20210730 15:36:33.384" endtime="20210730 15:36:34.894"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:34.895" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:34.895" endtime="20210730 15:36:34.895"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:34.896" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:34.896" endtime="20210730 15:36:34.896"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:34.897" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:34.896" endtime="20210730 15:36:34.897"/>
</kw>
<msg timestamp="20210730 15:36:34.897" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:34.895" endtime="20210730 15:36:34.897"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:36:34.898" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:36:34.897" endtime="20210730 15:36:34.898"/>
</kw>
<status status="PASS" starttime="20210730 15:36:34.894" endtime="20210730 15:36:34.898"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:36:34.899" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:36:34.899" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:36:34.898" endtime="20210730 15:36:34.899"/>
</kw>
<status status="PASS" starttime="20210730 15:36:34.898" endtime="20210730 15:36:34.899"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:36:34.900" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:36:34.900" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:36:34.899" endtime="20210730 15:36:34.900"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:36:34.900" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:36:34.900" endtime="20210730 15:36:34.900"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:34.901" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:34.901" endtime="20210730 15:36:34.901"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:34.901" endtime="20210730 15:36:34.902"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:34.902" endtime="20210730 15:36:34.902"/>
</kw>
<status status="PASS" starttime="20210730 15:36:34.900" endtime="20210730 15:36:34.902"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:34.902" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:34.902" endtime="20210730 15:36:34.902"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:34.903" endtime="20210730 15:36:34.903"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:34.903" endtime="20210730 15:36:34.903"/>
</kw>
<status status="PASS" starttime="20210730 15:36:34.902" endtime="20210730 15:36:34.904"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:34.904" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:34.904" endtime="20210730 15:36:34.904"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:34.904" endtime="20210730 15:36:34.905"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:34.905" endtime="20210730 15:36:34.905"/>
</kw>
<status status="PASS" starttime="20210730 15:36:34.904" endtime="20210730 15:36:34.905"/>
</iter>
<status status="PASS" starttime="20210730 15:36:34.900" endtime="20210730 15:36:34.905"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:36:34.906" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:36:34.905" endtime="20210730 15:36:34.906"/>
</kw>
<status status="PASS" starttime="20210730 15:36:34.899" endtime="20210730 15:36:34.906"/>
</kw>
<status status="PASS" starttime="20210730 15:36:33.353" endtime="20210730 15:36:34.906"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=0123456</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:34.907" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:36:34.907" endtime="20210730 15:36:34.907"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:34.907" level="INFO">${payload} = {'password': '0123456'}</msg>
<status status="PASS" starttime="20210730 15:36:34.907" endtime="20210730 15:36:34.907"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:34.917" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:34.918" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:34.908" endtime="20210730 15:36:34.918"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:34.918" endtime="20210730 15:36:34.918"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:34.918" endtime="20210730 15:36:34.918"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:34.908" endtime="20210730 15:36:34.918"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:34.907" endtime="20210730 15:36:34.918"/>
</for>
<status status="FAIL" starttime="20210730 15:36:34.906" endtime="20210730 15:36:34.918"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:34.906" endtime="20210730 15:36:34.918"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=0123456</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:34.919" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:36:34.919" endtime="20210730 15:36:34.919"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:34.920" level="INFO">${payload} = {'password': '0123456'}</msg>
<status status="PASS" starttime="20210730 15:36:34.920" endtime="20210730 15:36:34.920"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:34.924" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:34.924" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:34.920" endtime="20210730 15:36:34.924"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:34.925" endtime="20210730 15:36:34.925"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:34.925" endtime="20210730 15:36:34.925"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:34.920" endtime="20210730 15:36:34.925"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:34.920" endtime="20210730 15:36:34.925"/>
</for>
<status status="FAIL" starttime="20210730 15:36:34.918" endtime="20210730 15:36:34.925"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:34.918" endtime="20210730 15:36:34.925"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=0123456</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:34.926" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:36:34.926" endtime="20210730 15:36:34.926"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:34.927" level="INFO">${payload} = {'password': '0123456'}</msg>
<status status="PASS" starttime="20210730 15:36:34.926" endtime="20210730 15:36:34.927"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:34.931" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:34.931" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:34.927" endtime="20210730 15:36:34.931"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:34.931" endtime="20210730 15:36:34.931"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:34.931" endtime="20210730 15:36:34.931"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:34.927" endtime="20210730 15:36:34.931"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:34.927" endtime="20210730 15:36:34.931"/>
</for>
<status status="FAIL" starttime="20210730 15:36:34.925" endtime="20210730 15:36:34.931"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:34.925" endtime="20210730 15:36:34.931"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:34.906" endtime="20210730 15:36:34.932"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:34.954" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:34.966" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:34.966" level="INFO">${pids} = 7064
7071
7075</msg>
<status status="PASS" starttime="20210730 15:36:34.951" endtime="20210730 15:36:34.966"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:34.967" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:34.966" endtime="20210730 15:36:34.967"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:34.968" level="INFO">${pids} = ['7064', '7071', '7075']</msg>
<status status="PASS" starttime="20210730 15:36:34.967" endtime="20210730 15:36:34.968"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">7064</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:34.971" level="INFO">Running command 'kill 7064 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:34.968" endtime="20210730 15:36:34.972"/>
</kw>
<status status="PASS" starttime="20210730 15:36:34.968" endtime="20210730 15:36:34.972"/>
</iter>
<iter>
<var name="${pid}">7071</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:34.975" level="INFO">Running command 'kill 7071 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:34.972" endtime="20210730 15:36:34.977"/>
</kw>
<status status="PASS" starttime="20210730 15:36:34.972" endtime="20210730 15:36:34.978"/>
</iter>
<iter>
<var name="${pid}">7075</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:34.981" level="INFO">Running command 'kill 7075 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:34.978" endtime="20210730 15:36:34.982"/>
</kw>
<status status="PASS" starttime="20210730 15:36:34.978" endtime="20210730 15:36:34.982"/>
</iter>
<status status="PASS" starttime="20210730 15:36:34.968" endtime="20210730 15:36:34.982"/>
</for>
<status status="PASS" starttime="20210730 15:36:34.967" endtime="20210730 15:36:34.982"/>
</branch>
<status status="PASS" starttime="20210730 15:36:34.967" endtime="20210730 15:36:34.982"/>
</if>
<status status="PASS" starttime="20210730 15:36:34.932" endtime="20210730 15:36:34.982"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": '0123456'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:36:33.352" endtime="20210730 15:36:34.983">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t52" name="With Each Valid Token, Updating Password Of Each System User With 01234567 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:34.987" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:34.998" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:34.998" level="INFO">${pids} = 7104</msg>
<status status="PASS" starttime="20210730 15:36:34.984" endtime="20210730 15:36:34.998"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:34.999" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:34.999" endtime="20210730 15:36:34.999"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:35.000" level="INFO">${pids} = ['7104']</msg>
<status status="PASS" starttime="20210730 15:36:35.000" endtime="20210730 15:36:35.000"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">7104</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:35.004" level="INFO">Running command 'kill 7104 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:35.001" endtime="20210730 15:36:35.005"/>
</kw>
<status status="PASS" starttime="20210730 15:36:35.001" endtime="20210730 15:36:35.005"/>
</iter>
<status status="PASS" starttime="20210730 15:36:35.000" endtime="20210730 15:36:35.005"/>
</for>
<status status="PASS" starttime="20210730 15:36:35.000" endtime="20210730 15:36:35.005"/>
</branch>
<status status="PASS" starttime="20210730 15:36:34.999" endtime="20210730 15:36:35.005"/>
</if>
<status status="PASS" starttime="20210730 15:36:34.984" endtime="20210730 15:36:35.005"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:35.006" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:35.006" endtime="20210730 15:36:35.006"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:35.007" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:35.007" endtime="20210730 15:36:35.007"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:35.007" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:35.007" endtime="20210730 15:36:35.007"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:35.008" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:35.007" endtime="20210730 15:36:35.008"/>
</kw>
<msg timestamp="20210730 15:36:35.008" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:35.007" endtime="20210730 15:36:35.008"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:35.012" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:35.008" endtime="20210730 15:36:35.013"/>
</kw>
<status status="PASS" starttime="20210730 15:36:35.006" endtime="20210730 15:36:35.014"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:36:35.015" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:36:35.014" endtime="20210730 15:36:35.032"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:36:36.534" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:36:35.033" endtime="20210730 15:36:36.534"/>
</kw>
<status status="PASS" starttime="20210730 15:36:35.014" endtime="20210730 15:36:36.535"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:36.536" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:36.536" endtime="20210730 15:36:36.536"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:36.536" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:36.536" endtime="20210730 15:36:36.536"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:36.537" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:36.536" endtime="20210730 15:36:36.537"/>
</kw>
<msg timestamp="20210730 15:36:36.537" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:36.535" endtime="20210730 15:36:36.537"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:36:36.537" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:36:36.537" endtime="20210730 15:36:36.538"/>
</kw>
<status status="PASS" starttime="20210730 15:36:36.535" endtime="20210730 15:36:36.538"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:36:36.538" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:36:36.538" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:36:36.538" endtime="20210730 15:36:36.539"/>
</kw>
<status status="PASS" starttime="20210730 15:36:36.538" endtime="20210730 15:36:36.539"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:36:36.539" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:36:36.539" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:36:36.539" endtime="20210730 15:36:36.539"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:36:36.540" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:36:36.540" endtime="20210730 15:36:36.540"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:36.540" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:36.540" endtime="20210730 15:36:36.540"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:36.540" endtime="20210730 15:36:36.541"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:36.541" endtime="20210730 15:36:36.542"/>
</kw>
<status status="PASS" starttime="20210730 15:36:36.540" endtime="20210730 15:36:36.542"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:36.542" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:36.542" endtime="20210730 15:36:36.542"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:36.542" endtime="20210730 15:36:36.544"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:36.544" endtime="20210730 15:36:36.545"/>
</kw>
<status status="PASS" starttime="20210730 15:36:36.542" endtime="20210730 15:36:36.545"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:36.546" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:36.545" endtime="20210730 15:36:36.546"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:36.547" endtime="20210730 15:36:36.547"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:36.548" endtime="20210730 15:36:36.548"/>
</kw>
<status status="PASS" starttime="20210730 15:36:36.545" endtime="20210730 15:36:36.548"/>
</iter>
<status status="PASS" starttime="20210730 15:36:36.540" endtime="20210730 15:36:36.548"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:36:36.548" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:36:36.548" endtime="20210730 15:36:36.548"/>
</kw>
<status status="PASS" starttime="20210730 15:36:36.539" endtime="20210730 15:36:36.549"/>
</kw>
<status status="PASS" starttime="20210730 15:36:34.984" endtime="20210730 15:36:36.549"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=01234567</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:36.550" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:36:36.550" endtime="20210730 15:36:36.550"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:36.550" level="INFO">${payload} = {'password': '01234567'}</msg>
<status status="PASS" starttime="20210730 15:36:36.550" endtime="20210730 15:36:36.551"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:36.559" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:36.559" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:36.551" endtime="20210730 15:36:36.559"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:36.560" endtime="20210730 15:36:36.560"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:36.560" endtime="20210730 15:36:36.560"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:36.551" endtime="20210730 15:36:36.560"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:36.551" endtime="20210730 15:36:36.560"/>
</for>
<status status="FAIL" starttime="20210730 15:36:36.549" endtime="20210730 15:36:36.560"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:36.549" endtime="20210730 15:36:36.560"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=01234567</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:36.561" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:36:36.561" endtime="20210730 15:36:36.561"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:36.562" level="INFO">${payload} = {'password': '01234567'}</msg>
<status status="PASS" starttime="20210730 15:36:36.561" endtime="20210730 15:36:36.562"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:36.566" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:36.567" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:36.562" endtime="20210730 15:36:36.567"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:36.567" endtime="20210730 15:36:36.567"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:36.567" endtime="20210730 15:36:36.567"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:36.562" endtime="20210730 15:36:36.567"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:36.562" endtime="20210730 15:36:36.567"/>
</for>
<status status="FAIL" starttime="20210730 15:36:36.560" endtime="20210730 15:36:36.567"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:36.560" endtime="20210730 15:36:36.568"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=01234567</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:36.569" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:36:36.568" endtime="20210730 15:36:36.569"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:36.569" level="INFO">${payload} = {'password': '01234567'}</msg>
<status status="PASS" starttime="20210730 15:36:36.569" endtime="20210730 15:36:36.569"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:36.573" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:36.573" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:36.569" endtime="20210730 15:36:36.573"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:36.573" endtime="20210730 15:36:36.573"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:36.574" endtime="20210730 15:36:36.574"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:36.569" endtime="20210730 15:36:36.574"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:36.569" endtime="20210730 15:36:36.574"/>
</for>
<status status="FAIL" starttime="20210730 15:36:36.568" endtime="20210730 15:36:36.574"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:36.568" endtime="20210730 15:36:36.574"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:36.549" endtime="20210730 15:36:36.574"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:36.579" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:36.589" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:36.589" level="INFO">${pids} = 7142
7151
7160</msg>
<status status="PASS" starttime="20210730 15:36:36.575" endtime="20210730 15:36:36.589"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:36.590" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:36.589" endtime="20210730 15:36:36.590"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:36.591" level="INFO">${pids} = ['7142', '7151', '7160']</msg>
<status status="PASS" starttime="20210730 15:36:36.590" endtime="20210730 15:36:36.591"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">7142</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:36.594" level="INFO">Running command 'kill 7142 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:36.591" endtime="20210730 15:36:36.595"/>
</kw>
<status status="PASS" starttime="20210730 15:36:36.591" endtime="20210730 15:36:36.595"/>
</iter>
<iter>
<var name="${pid}">7151</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:36.599" level="INFO">Running command 'kill 7151 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:36.595" endtime="20210730 15:36:36.600"/>
</kw>
<status status="PASS" starttime="20210730 15:36:36.595" endtime="20210730 15:36:36.600"/>
</iter>
<iter>
<var name="${pid}">7160</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:36.603" level="INFO">Running command 'kill 7160 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:36.600" endtime="20210730 15:36:36.604"/>
</kw>
<status status="PASS" starttime="20210730 15:36:36.600" endtime="20210730 15:36:36.604"/>
</iter>
<status status="PASS" starttime="20210730 15:36:36.591" endtime="20210730 15:36:36.604"/>
</for>
<status status="PASS" starttime="20210730 15:36:36.590" endtime="20210730 15:36:36.604"/>
</branch>
<status status="PASS" starttime="20210730 15:36:36.590" endtime="20210730 15:36:36.604"/>
</if>
<status status="PASS" starttime="20210730 15:36:36.574" endtime="20210730 15:36:36.604"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": '01234567'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:36:34.983" endtime="20210730 15:36:36.604">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t53" name="With Each Valid Token, Updating Password Of Each System User With 01234567890123456789 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:36.613" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:36.623" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:36.623" level="INFO">${pids} = 7193</msg>
<status status="PASS" starttime="20210730 15:36:36.606" endtime="20210730 15:36:36.623"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:36.625" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:36.624" endtime="20210730 15:36:36.625"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:36.626" level="INFO">${pids} = ['7193']</msg>
<status status="PASS" starttime="20210730 15:36:36.625" endtime="20210730 15:36:36.626"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">7193</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:36.638" level="INFO">Running command 'kill 7193 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:36.626" endtime="20210730 15:36:36.638"/>
</kw>
<status status="PASS" starttime="20210730 15:36:36.626" endtime="20210730 15:36:36.638"/>
</iter>
<status status="PASS" starttime="20210730 15:36:36.626" endtime="20210730 15:36:36.639"/>
</for>
<status status="PASS" starttime="20210730 15:36:36.625" endtime="20210730 15:36:36.639"/>
</branch>
<status status="PASS" starttime="20210730 15:36:36.625" endtime="20210730 15:36:36.639"/>
</if>
<status status="PASS" starttime="20210730 15:36:36.606" endtime="20210730 15:36:36.639"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:36.640" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:36.640" endtime="20210730 15:36:36.640"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:36.641" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:36.641" endtime="20210730 15:36:36.641"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:36.642" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:36.641" endtime="20210730 15:36:36.642"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:36.642" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:36.642" endtime="20210730 15:36:36.642"/>
</kw>
<msg timestamp="20210730 15:36:36.643" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:36.640" endtime="20210730 15:36:36.643"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:36.648" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:36.643" endtime="20210730 15:36:36.650"/>
</kw>
<status status="PASS" starttime="20210730 15:36:36.639" endtime="20210730 15:36:36.650"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:36:36.652" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:36:36.651" endtime="20210730 15:36:36.656"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:36:38.158" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:36:36.657" endtime="20210730 15:36:38.158"/>
</kw>
<status status="PASS" starttime="20210730 15:36:36.650" endtime="20210730 15:36:38.158"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:38.159" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:38.159" endtime="20210730 15:36:38.159"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:38.160" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:38.159" endtime="20210730 15:36:38.160"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:38.160" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:38.160" endtime="20210730 15:36:38.160"/>
</kw>
<msg timestamp="20210730 15:36:38.160" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:38.159" endtime="20210730 15:36:38.160"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:36:38.161" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:36:38.160" endtime="20210730 15:36:38.161"/>
</kw>
<status status="PASS" starttime="20210730 15:36:38.158" endtime="20210730 15:36:38.161"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:36:38.162" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:36:38.162" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:36:38.162" endtime="20210730 15:36:38.162"/>
</kw>
<status status="PASS" starttime="20210730 15:36:38.161" endtime="20210730 15:36:38.162"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:36:38.163" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:36:38.163" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:36:38.162" endtime="20210730 15:36:38.163"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:36:38.163" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:36:38.163" endtime="20210730 15:36:38.163"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:38.164" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:38.163" endtime="20210730 15:36:38.164"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:38.164" endtime="20210730 15:36:38.164"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:38.165" endtime="20210730 15:36:38.165"/>
</kw>
<status status="PASS" starttime="20210730 15:36:38.163" endtime="20210730 15:36:38.165"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:38.165" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:38.165" endtime="20210730 15:36:38.165"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:38.166" endtime="20210730 15:36:38.167"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:38.167" endtime="20210730 15:36:38.167"/>
</kw>
<status status="PASS" starttime="20210730 15:36:38.165" endtime="20210730 15:36:38.167"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:38.167" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:38.167" endtime="20210730 15:36:38.167"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:38.167" endtime="20210730 15:36:38.168"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:38.168" endtime="20210730 15:36:38.168"/>
</kw>
<status status="PASS" starttime="20210730 15:36:38.167" endtime="20210730 15:36:38.168"/>
</iter>
<status status="PASS" starttime="20210730 15:36:38.163" endtime="20210730 15:36:38.169"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:36:38.169" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:36:38.169" endtime="20210730 15:36:38.169"/>
</kw>
<status status="PASS" starttime="20210730 15:36:38.162" endtime="20210730 15:36:38.169"/>
</kw>
<status status="PASS" starttime="20210730 15:36:36.606" endtime="20210730 15:36:38.169"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=01234567890123456789</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:38.171" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:36:38.170" endtime="20210730 15:36:38.171"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:38.171" level="INFO">${payload} = {'password': '01234567890123456789'}</msg>
<status status="PASS" starttime="20210730 15:36:38.171" endtime="20210730 15:36:38.171"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:38.181" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:38.182" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:38.172" endtime="20210730 15:36:38.182"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:38.182" endtime="20210730 15:36:38.182"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:38.182" endtime="20210730 15:36:38.182"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:38.171" endtime="20210730 15:36:38.182"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:38.171" endtime="20210730 15:36:38.182"/>
</for>
<status status="FAIL" starttime="20210730 15:36:38.170" endtime="20210730 15:36:38.182"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:38.170" endtime="20210730 15:36:38.182"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=01234567890123456789</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:38.184" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:36:38.183" endtime="20210730 15:36:38.184"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:38.184" level="INFO">${payload} = {'password': '01234567890123456789'}</msg>
<status status="PASS" starttime="20210730 15:36:38.184" endtime="20210730 15:36:38.184"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:38.188" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:38.189" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:38.184" endtime="20210730 15:36:38.189"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:38.189" endtime="20210730 15:36:38.189"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:38.189" endtime="20210730 15:36:38.189"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:38.184" endtime="20210730 15:36:38.189"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:38.184" endtime="20210730 15:36:38.189"/>
</for>
<status status="FAIL" starttime="20210730 15:36:38.183" endtime="20210730 15:36:38.189"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:38.183" endtime="20210730 15:36:38.189"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=01234567890123456789</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:38.190" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:36:38.190" endtime="20210730 15:36:38.190"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:38.191" level="INFO">${payload} = {'password': '01234567890123456789'}</msg>
<status status="PASS" starttime="20210730 15:36:38.191" endtime="20210730 15:36:38.191"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:38.195" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:38.196" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:38.191" endtime="20210730 15:36:38.196"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:38.196" endtime="20210730 15:36:38.196"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:38.196" endtime="20210730 15:36:38.196"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:38.191" endtime="20210730 15:36:38.196"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:38.191" endtime="20210730 15:36:38.196"/>
</for>
<status status="FAIL" starttime="20210730 15:36:38.190" endtime="20210730 15:36:38.196"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:38.189" endtime="20210730 15:36:38.196"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:38.170" endtime="20210730 15:36:38.197"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:38.202" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:38.212" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:38.212" level="INFO">${pids} = 7216
7223
7228</msg>
<status status="PASS" starttime="20210730 15:36:38.197" endtime="20210730 15:36:38.212"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:38.213" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:38.212" endtime="20210730 15:36:38.213"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:38.214" level="INFO">${pids} = ['7216', '7223', '7228']</msg>
<status status="PASS" starttime="20210730 15:36:38.213" endtime="20210730 15:36:38.214"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">7216</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:38.217" level="INFO">Running command 'kill 7216 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:38.214" endtime="20210730 15:36:38.218"/>
</kw>
<status status="PASS" starttime="20210730 15:36:38.214" endtime="20210730 15:36:38.218"/>
</iter>
<iter>
<var name="${pid}">7223</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:38.221" level="INFO">Running command 'kill 7223 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:38.218" endtime="20210730 15:36:38.222"/>
</kw>
<status status="PASS" starttime="20210730 15:36:38.218" endtime="20210730 15:36:38.222"/>
</iter>
<iter>
<var name="${pid}">7228</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:38.225" level="INFO">Running command 'kill 7228 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:38.222" endtime="20210730 15:36:38.225"/>
</kw>
<status status="PASS" starttime="20210730 15:36:38.222" endtime="20210730 15:36:38.225"/>
</iter>
<status status="PASS" starttime="20210730 15:36:38.214" endtime="20210730 15:36:38.225"/>
</for>
<status status="PASS" starttime="20210730 15:36:38.213" endtime="20210730 15:36:38.225"/>
</branch>
<status status="PASS" starttime="20210730 15:36:38.213" endtime="20210730 15:36:38.225"/>
</if>
<status status="PASS" starttime="20210730 15:36:38.197" endtime="20210730 15:36:38.226"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": '01234567890123456789'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:36:36.605" endtime="20210730 15:36:38.226">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t54" name="With Each Valid Token, Updating Password Of Each System User With !?.?!.! Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:38.233" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:38.242" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:38.242" level="INFO">${pids} = 7258</msg>
<status status="PASS" starttime="20210730 15:36:38.228" endtime="20210730 15:36:38.242"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:38.243" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:38.243" endtime="20210730 15:36:38.243"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:38.244" level="INFO">${pids} = ['7258']</msg>
<status status="PASS" starttime="20210730 15:36:38.244" endtime="20210730 15:36:38.244"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">7258</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:38.248" level="INFO">Running command 'kill 7258 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:38.245" endtime="20210730 15:36:38.248"/>
</kw>
<status status="PASS" starttime="20210730 15:36:38.244" endtime="20210730 15:36:38.248"/>
</iter>
<status status="PASS" starttime="20210730 15:36:38.244" endtime="20210730 15:36:38.248"/>
</for>
<status status="PASS" starttime="20210730 15:36:38.244" endtime="20210730 15:36:38.248"/>
</branch>
<status status="PASS" starttime="20210730 15:36:38.244" endtime="20210730 15:36:38.248"/>
</if>
<status status="PASS" starttime="20210730 15:36:38.228" endtime="20210730 15:36:38.249"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:38.250" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:38.250" endtime="20210730 15:36:38.250"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:38.251" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:38.250" endtime="20210730 15:36:38.251"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:38.251" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:38.251" endtime="20210730 15:36:38.251"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:38.251" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:38.251" endtime="20210730 15:36:38.251"/>
</kw>
<msg timestamp="20210730 15:36:38.252" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:38.250" endtime="20210730 15:36:38.252"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:38.255" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:38.252" endtime="20210730 15:36:38.257"/>
</kw>
<status status="PASS" starttime="20210730 15:36:38.249" endtime="20210730 15:36:38.257"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:36:38.259" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:36:38.258" endtime="20210730 15:36:38.266"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:36:39.770" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:36:38.266" endtime="20210730 15:36:39.771"/>
</kw>
<status status="PASS" starttime="20210730 15:36:38.258" endtime="20210730 15:36:39.771"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:39.772" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:39.772" endtime="20210730 15:36:39.772"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:39.773" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:39.773" endtime="20210730 15:36:39.773"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:39.773" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:39.773" endtime="20210730 15:36:39.773"/>
</kw>
<msg timestamp="20210730 15:36:39.774" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:39.772" endtime="20210730 15:36:39.774"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:36:39.774" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:36:39.774" endtime="20210730 15:36:39.775"/>
</kw>
<status status="PASS" starttime="20210730 15:36:39.771" endtime="20210730 15:36:39.775"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:36:39.776" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:36:39.776" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:36:39.775" endtime="20210730 15:36:39.776"/>
</kw>
<status status="PASS" starttime="20210730 15:36:39.775" endtime="20210730 15:36:39.776"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:36:39.778" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:36:39.778" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:36:39.777" endtime="20210730 15:36:39.778"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:36:39.779" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:36:39.778" endtime="20210730 15:36:39.779"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:39.779" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:39.779" endtime="20210730 15:36:39.779"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:39.780" endtime="20210730 15:36:39.780"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:39.780" endtime="20210730 15:36:39.781"/>
</kw>
<status status="PASS" starttime="20210730 15:36:39.779" endtime="20210730 15:36:39.781"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:39.781" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:39.781" endtime="20210730 15:36:39.781"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:39.781" endtime="20210730 15:36:39.782"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:39.782" endtime="20210730 15:36:39.782"/>
</kw>
<status status="PASS" starttime="20210730 15:36:39.781" endtime="20210730 15:36:39.782"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:39.782" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:39.782" endtime="20210730 15:36:39.782"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:39.783" endtime="20210730 15:36:39.783"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:39.783" endtime="20210730 15:36:39.784"/>
</kw>
<status status="PASS" starttime="20210730 15:36:39.782" endtime="20210730 15:36:39.784"/>
</iter>
<status status="PASS" starttime="20210730 15:36:39.779" endtime="20210730 15:36:39.784"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:36:39.784" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:36:39.784" endtime="20210730 15:36:39.784"/>
</kw>
<status status="PASS" starttime="20210730 15:36:39.777" endtime="20210730 15:36:39.784"/>
</kw>
<status status="PASS" starttime="20210730 15:36:38.227" endtime="20210730 15:36:39.784"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=!?.?!.!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:39.786" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:36:39.785" endtime="20210730 15:36:39.786"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:39.786" level="INFO">${payload} = {'password': '!?.?!.!'}</msg>
<status status="PASS" starttime="20210730 15:36:39.786" endtime="20210730 15:36:39.786"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:39.795" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:39.795" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:39.786" endtime="20210730 15:36:39.795"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:39.796" endtime="20210730 15:36:39.796"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:39.796" endtime="20210730 15:36:39.796"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:39.786" endtime="20210730 15:36:39.796"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:39.786" endtime="20210730 15:36:39.796"/>
</for>
<status status="FAIL" starttime="20210730 15:36:39.785" endtime="20210730 15:36:39.797"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:39.785" endtime="20210730 15:36:39.797"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=!?.?!.!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:39.798" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:36:39.798" endtime="20210730 15:36:39.798"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:39.798" level="INFO">${payload} = {'password': '!?.?!.!'}</msg>
<status status="PASS" starttime="20210730 15:36:39.798" endtime="20210730 15:36:39.798"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:39.803" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:39.803" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:39.799" endtime="20210730 15:36:39.803"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:39.803" endtime="20210730 15:36:39.803"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:39.803" endtime="20210730 15:36:39.803"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:39.799" endtime="20210730 15:36:39.803"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:39.798" endtime="20210730 15:36:39.803"/>
</for>
<status status="FAIL" starttime="20210730 15:36:39.797" endtime="20210730 15:36:39.803"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:39.797" endtime="20210730 15:36:39.803"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=!?.?!.!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:39.804" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:36:39.804" endtime="20210730 15:36:39.804"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:39.805" level="INFO">${payload} = {'password': '!?.?!.!'}</msg>
<status status="PASS" starttime="20210730 15:36:39.804" endtime="20210730 15:36:39.805"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:39.810" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:39.810" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:39.805" endtime="20210730 15:36:39.810"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:39.811" endtime="20210730 15:36:39.811"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:39.811" endtime="20210730 15:36:39.811"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:39.805" endtime="20210730 15:36:39.811"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:39.805" endtime="20210730 15:36:39.811"/>
</for>
<status status="FAIL" starttime="20210730 15:36:39.803" endtime="20210730 15:36:39.812"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:39.803" endtime="20210730 15:36:39.812"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:39.785" endtime="20210730 15:36:39.812"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:39.817" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:39.827" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:39.827" level="INFO">${pids} = 7286
7293
7297</msg>
<status status="PASS" starttime="20210730 15:36:39.813" endtime="20210730 15:36:39.827"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:39.828" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:39.827" endtime="20210730 15:36:39.828"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:39.829" level="INFO">${pids} = ['7286', '7293', '7297']</msg>
<status status="PASS" starttime="20210730 15:36:39.828" endtime="20210730 15:36:39.829"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">7286</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:39.832" level="INFO">Running command 'kill 7286 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:39.829" endtime="20210730 15:36:39.832"/>
</kw>
<status status="PASS" starttime="20210730 15:36:39.829" endtime="20210730 15:36:39.833"/>
</iter>
<iter>
<var name="${pid}">7293</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:39.835" level="INFO">Running command 'kill 7293 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:39.833" endtime="20210730 15:36:39.837"/>
</kw>
<status status="PASS" starttime="20210730 15:36:39.833" endtime="20210730 15:36:39.837"/>
</iter>
<iter>
<var name="${pid}">7297</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:39.841" level="INFO">Running command 'kill 7297 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:39.838" endtime="20210730 15:36:39.841"/>
</kw>
<status status="PASS" starttime="20210730 15:36:39.838" endtime="20210730 15:36:39.841"/>
</iter>
<status status="PASS" starttime="20210730 15:36:39.829" endtime="20210730 15:36:39.841"/>
</for>
<status status="PASS" starttime="20210730 15:36:39.828" endtime="20210730 15:36:39.841"/>
</branch>
<status status="PASS" starttime="20210730 15:36:39.828" endtime="20210730 15:36:39.842"/>
</if>
<status status="PASS" starttime="20210730 15:36:39.812" endtime="20210730 15:36:39.842"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": '!?.?!.!'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:36:38.227" endtime="20210730 15:36:39.843">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t55" name="With Each Valid Token, Updating Password Of Each System User With !?.?!.!? Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:39.850" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:39.861" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:39.861" level="INFO">${pids} = 7327</msg>
<status status="PASS" starttime="20210730 15:36:39.847" endtime="20210730 15:36:39.861"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:39.862" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:39.861" endtime="20210730 15:36:39.862"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:39.863" level="INFO">${pids} = ['7327']</msg>
<status status="PASS" starttime="20210730 15:36:39.862" endtime="20210730 15:36:39.863"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">7327</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:39.867" level="INFO">Running command 'kill 7327 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:39.863" endtime="20210730 15:36:39.867"/>
</kw>
<status status="PASS" starttime="20210730 15:36:39.863" endtime="20210730 15:36:39.867"/>
</iter>
<status status="PASS" starttime="20210730 15:36:39.863" endtime="20210730 15:36:39.867"/>
</for>
<status status="PASS" starttime="20210730 15:36:39.862" endtime="20210730 15:36:39.867"/>
</branch>
<status status="PASS" starttime="20210730 15:36:39.862" endtime="20210730 15:36:39.867"/>
</if>
<status status="PASS" starttime="20210730 15:36:39.846" endtime="20210730 15:36:39.868"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:39.870" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:39.869" endtime="20210730 15:36:39.870"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:39.871" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:39.870" endtime="20210730 15:36:39.871"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:39.871" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:39.871" endtime="20210730 15:36:39.871"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:39.872" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:39.871" endtime="20210730 15:36:39.872"/>
</kw>
<msg timestamp="20210730 15:36:39.872" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:39.870" endtime="20210730 15:36:39.872"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:39.878" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:39.872" endtime="20210730 15:36:39.882"/>
</kw>
<status status="PASS" starttime="20210730 15:36:39.868" endtime="20210730 15:36:39.882"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:36:39.883" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:36:39.883" endtime="20210730 15:36:39.888"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:36:41.390" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:36:39.888" endtime="20210730 15:36:41.390"/>
</kw>
<status status="PASS" starttime="20210730 15:36:39.882" endtime="20210730 15:36:41.390"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:41.392" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:41.391" endtime="20210730 15:36:41.392"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:41.392" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:41.392" endtime="20210730 15:36:41.392"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:41.393" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:41.392" endtime="20210730 15:36:41.393"/>
</kw>
<msg timestamp="20210730 15:36:41.393" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:41.391" endtime="20210730 15:36:41.393"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:36:41.393" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:36:41.393" endtime="20210730 15:36:41.394"/>
</kw>
<status status="PASS" starttime="20210730 15:36:41.390" endtime="20210730 15:36:41.394"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:36:41.394" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:36:41.394" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:36:41.394" endtime="20210730 15:36:41.395"/>
</kw>
<status status="PASS" starttime="20210730 15:36:41.394" endtime="20210730 15:36:41.395"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:36:41.395" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:36:41.395" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:36:41.395" endtime="20210730 15:36:41.396"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:36:41.396" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:36:41.396" endtime="20210730 15:36:41.396"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:41.397" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:41.396" endtime="20210730 15:36:41.397"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:41.397" endtime="20210730 15:36:41.397"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:41.398" endtime="20210730 15:36:41.398"/>
</kw>
<status status="PASS" starttime="20210730 15:36:41.396" endtime="20210730 15:36:41.398"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:41.398" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:41.398" endtime="20210730 15:36:41.398"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:41.398" endtime="20210730 15:36:41.399"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:41.399" endtime="20210730 15:36:41.399"/>
</kw>
<status status="PASS" starttime="20210730 15:36:41.398" endtime="20210730 15:36:41.399"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:41.400" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:41.400" endtime="20210730 15:36:41.400"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:41.400" endtime="20210730 15:36:41.401"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:41.401" endtime="20210730 15:36:41.401"/>
</kw>
<status status="PASS" starttime="20210730 15:36:41.400" endtime="20210730 15:36:41.401"/>
</iter>
<status status="PASS" starttime="20210730 15:36:41.396" endtime="20210730 15:36:41.401"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:36:41.402" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:36:41.401" endtime="20210730 15:36:41.402"/>
</kw>
<status status="PASS" starttime="20210730 15:36:41.395" endtime="20210730 15:36:41.402"/>
</kw>
<status status="PASS" starttime="20210730 15:36:39.845" endtime="20210730 15:36:41.402"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=!?.?!.!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:41.403" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:36:41.403" endtime="20210730 15:36:41.403"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:41.403" level="INFO">${payload} = {'password': '!?.?!.!?'}</msg>
<status status="PASS" starttime="20210730 15:36:41.403" endtime="20210730 15:36:41.404"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:41.414" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:41.414" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:41.404" endtime="20210730 15:36:41.414"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:41.415" endtime="20210730 15:36:41.415"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:41.415" endtime="20210730 15:36:41.415"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:41.404" endtime="20210730 15:36:41.415"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:41.404" endtime="20210730 15:36:41.415"/>
</for>
<status status="FAIL" starttime="20210730 15:36:41.402" endtime="20210730 15:36:41.415"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:41.402" endtime="20210730 15:36:41.415"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=!?.?!.!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:41.416" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:36:41.416" endtime="20210730 15:36:41.416"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:41.417" level="INFO">${payload} = {'password': '!?.?!.!?'}</msg>
<status status="PASS" starttime="20210730 15:36:41.416" endtime="20210730 15:36:41.417"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:41.422" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:41.422" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:41.417" endtime="20210730 15:36:41.422"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:41.422" endtime="20210730 15:36:41.422"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:41.422" endtime="20210730 15:36:41.422"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:41.417" endtime="20210730 15:36:41.422"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:41.417" endtime="20210730 15:36:41.422"/>
</for>
<status status="FAIL" starttime="20210730 15:36:41.415" endtime="20210730 15:36:41.423"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:41.415" endtime="20210730 15:36:41.423"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=!?.?!.!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:41.424" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:36:41.423" endtime="20210730 15:36:41.424"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:41.424" level="INFO">${payload} = {'password': '!?.?!.!?'}</msg>
<status status="PASS" starttime="20210730 15:36:41.424" endtime="20210730 15:36:41.424"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:41.428" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:41.429" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:41.424" endtime="20210730 15:36:41.429"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:41.429" endtime="20210730 15:36:41.429"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:41.429" endtime="20210730 15:36:41.429"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:41.424" endtime="20210730 15:36:41.429"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:41.424" endtime="20210730 15:36:41.429"/>
</for>
<status status="FAIL" starttime="20210730 15:36:41.423" endtime="20210730 15:36:41.429"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:41.423" endtime="20210730 15:36:41.430"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:41.402" endtime="20210730 15:36:41.430"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:41.436" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:41.446" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:41.446" level="INFO">${pids} = 7350
7357
7363</msg>
<status status="PASS" starttime="20210730 15:36:41.430" endtime="20210730 15:36:41.446"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:41.447" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:41.446" endtime="20210730 15:36:41.447"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:41.448" level="INFO">${pids} = ['7350', '7357', '7363']</msg>
<status status="PASS" starttime="20210730 15:36:41.447" endtime="20210730 15:36:41.448"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">7350</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:41.452" level="INFO">Running command 'kill 7350 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:41.448" endtime="20210730 15:36:41.452"/>
</kw>
<status status="PASS" starttime="20210730 15:36:41.448" endtime="20210730 15:36:41.452"/>
</iter>
<iter>
<var name="${pid}">7357</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:41.455" level="INFO">Running command 'kill 7357 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:41.453" endtime="20210730 15:36:41.457"/>
</kw>
<status status="PASS" starttime="20210730 15:36:41.452" endtime="20210730 15:36:41.458"/>
</iter>
<iter>
<var name="${pid}">7363</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:41.463" level="INFO">Running command 'kill 7363 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:41.458" endtime="20210730 15:36:41.464"/>
</kw>
<status status="PASS" starttime="20210730 15:36:41.458" endtime="20210730 15:36:41.465"/>
</iter>
<status status="PASS" starttime="20210730 15:36:41.448" endtime="20210730 15:36:41.465"/>
</for>
<status status="PASS" starttime="20210730 15:36:41.447" endtime="20210730 15:36:41.465"/>
</branch>
<status status="PASS" starttime="20210730 15:36:41.447" endtime="20210730 15:36:41.465"/>
</if>
<status status="PASS" starttime="20210730 15:36:41.430" endtime="20210730 15:36:41.465"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": '!?.?!.!?'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:36:39.844" endtime="20210730 15:36:41.465">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t56" name="With Each Valid Token, Updating Password Of Each System User With !?.?!.!?!?.?!.!?!.!. Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:41.471" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:41.481" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:41.481" level="INFO">${pids} = 7394</msg>
<status status="PASS" starttime="20210730 15:36:41.468" endtime="20210730 15:36:41.481"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:41.482" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:41.482" endtime="20210730 15:36:41.482"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:41.483" level="INFO">${pids} = ['7394']</msg>
<status status="PASS" starttime="20210730 15:36:41.483" endtime="20210730 15:36:41.483"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">7394</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:41.487" level="INFO">Running command 'kill 7394 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:41.483" endtime="20210730 15:36:41.488"/>
</kw>
<status status="PASS" starttime="20210730 15:36:41.483" endtime="20210730 15:36:41.488"/>
</iter>
<status status="PASS" starttime="20210730 15:36:41.483" endtime="20210730 15:36:41.488"/>
</for>
<status status="PASS" starttime="20210730 15:36:41.483" endtime="20210730 15:36:41.488"/>
</branch>
<status status="PASS" starttime="20210730 15:36:41.482" endtime="20210730 15:36:41.488"/>
</if>
<status status="PASS" starttime="20210730 15:36:41.468" endtime="20210730 15:36:41.488"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:41.489" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:41.489" endtime="20210730 15:36:41.489"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:41.490" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:41.490" endtime="20210730 15:36:41.490"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:41.491" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:41.490" endtime="20210730 15:36:41.491"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:41.491" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:41.491" endtime="20210730 15:36:41.492"/>
</kw>
<msg timestamp="20210730 15:36:41.492" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:41.489" endtime="20210730 15:36:41.492"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:41.497" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:41.493" endtime="20210730 15:36:41.499"/>
</kw>
<status status="PASS" starttime="20210730 15:36:41.488" endtime="20210730 15:36:41.499"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:36:41.501" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:36:41.500" endtime="20210730 15:36:41.504"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:36:43.006" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:36:41.505" endtime="20210730 15:36:43.006"/>
</kw>
<status status="PASS" starttime="20210730 15:36:41.500" endtime="20210730 15:36:43.006"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:43.008" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:43.007" endtime="20210730 15:36:43.008"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:43.008" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:43.008" endtime="20210730 15:36:43.008"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:43.008" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:43.008" endtime="20210730 15:36:43.009"/>
</kw>
<msg timestamp="20210730 15:36:43.009" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:43.007" endtime="20210730 15:36:43.009"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:36:43.009" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:36:43.009" endtime="20210730 15:36:43.010"/>
</kw>
<status status="PASS" starttime="20210730 15:36:43.007" endtime="20210730 15:36:43.010"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:36:43.011" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:36:43.011" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:36:43.010" endtime="20210730 15:36:43.011"/>
</kw>
<status status="PASS" starttime="20210730 15:36:43.010" endtime="20210730 15:36:43.011"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:36:43.012" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:36:43.012" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:36:43.011" endtime="20210730 15:36:43.012"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:36:43.012" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:36:43.012" endtime="20210730 15:36:43.012"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:43.013" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:43.012" endtime="20210730 15:36:43.013"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:43.013" endtime="20210730 15:36:43.014"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:43.014" endtime="20210730 15:36:43.014"/>
</kw>
<status status="PASS" starttime="20210730 15:36:43.012" endtime="20210730 15:36:43.014"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:43.014" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:43.014" endtime="20210730 15:36:43.014"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:43.015" endtime="20210730 15:36:43.015"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:43.015" endtime="20210730 15:36:43.016"/>
</kw>
<status status="PASS" starttime="20210730 15:36:43.014" endtime="20210730 15:36:43.016"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:43.016" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:43.016" endtime="20210730 15:36:43.016"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:43.016" endtime="20210730 15:36:43.017"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:43.017" endtime="20210730 15:36:43.017"/>
</kw>
<status status="PASS" starttime="20210730 15:36:43.016" endtime="20210730 15:36:43.017"/>
</iter>
<status status="PASS" starttime="20210730 15:36:43.012" endtime="20210730 15:36:43.017"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:36:43.018" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:36:43.017" endtime="20210730 15:36:43.018"/>
</kw>
<status status="PASS" starttime="20210730 15:36:43.011" endtime="20210730 15:36:43.018"/>
</kw>
<status status="PASS" starttime="20210730 15:36:41.468" endtime="20210730 15:36:43.018"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=!?.?!.!?!?.?!.!?!.!.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:43.019" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:36:43.019" endtime="20210730 15:36:43.019"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:43.020" level="INFO">${payload} = {'password': '!?.?!.!?!?.?!.!?!.!.'}</msg>
<status status="PASS" starttime="20210730 15:36:43.019" endtime="20210730 15:36:43.020"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:43.029" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:43.030" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:43.020" endtime="20210730 15:36:43.030"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:43.030" endtime="20210730 15:36:43.030"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:43.030" endtime="20210730 15:36:43.030"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:43.020" endtime="20210730 15:36:43.030"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:43.020" endtime="20210730 15:36:43.030"/>
</for>
<status status="FAIL" starttime="20210730 15:36:43.018" endtime="20210730 15:36:43.031"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:43.018" endtime="20210730 15:36:43.031"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=!?.?!.!?!?.?!.!?!.!.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:43.032" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:36:43.032" endtime="20210730 15:36:43.032"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:43.032" level="INFO">${payload} = {'password': '!?.?!.!?!?.?!.!?!.!.'}</msg>
<status status="PASS" starttime="20210730 15:36:43.032" endtime="20210730 15:36:43.032"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:43.036" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:43.036" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:43.033" endtime="20210730 15:36:43.037"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:43.037" endtime="20210730 15:36:43.037"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:43.037" endtime="20210730 15:36:43.037"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:43.032" endtime="20210730 15:36:43.037"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:43.032" endtime="20210730 15:36:43.037"/>
</for>
<status status="FAIL" starttime="20210730 15:36:43.031" endtime="20210730 15:36:43.037"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:43.031" endtime="20210730 15:36:43.037"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=!?.?!.!?!?.?!.!?!.!.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:43.038" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:36:43.038" endtime="20210730 15:36:43.038"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:43.039" level="INFO">${payload} = {'password': '!?.?!.!?!?.?!.!?!.!.'}</msg>
<status status="PASS" starttime="20210730 15:36:43.038" endtime="20210730 15:36:43.039"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:43.043" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:43.043" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:43.039" endtime="20210730 15:36:43.043"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:43.043" endtime="20210730 15:36:43.043"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:43.043" endtime="20210730 15:36:43.044"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:43.039" endtime="20210730 15:36:43.044"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:43.039" endtime="20210730 15:36:43.044"/>
</for>
<status status="FAIL" starttime="20210730 15:36:43.037" endtime="20210730 15:36:43.044"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:43.037" endtime="20210730 15:36:43.044"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:43.018" endtime="20210730 15:36:43.044"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:43.050" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:43.060" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:43.060" level="INFO">${pids} = 7417
7424
7433</msg>
<status status="PASS" starttime="20210730 15:36:43.045" endtime="20210730 15:36:43.060"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:43.061" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:43.060" endtime="20210730 15:36:43.061"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:43.062" level="INFO">${pids} = ['7417', '7424', '7433']</msg>
<status status="PASS" starttime="20210730 15:36:43.061" endtime="20210730 15:36:43.062"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">7417</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:43.065" level="INFO">Running command 'kill 7417 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:43.062" endtime="20210730 15:36:43.066"/>
</kw>
<status status="PASS" starttime="20210730 15:36:43.062" endtime="20210730 15:36:43.066"/>
</iter>
<iter>
<var name="${pid}">7424</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:43.068" level="INFO">Running command 'kill 7424 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:43.066" endtime="20210730 15:36:43.069"/>
</kw>
<status status="PASS" starttime="20210730 15:36:43.066" endtime="20210730 15:36:43.069"/>
</iter>
<iter>
<var name="${pid}">7433</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:43.072" level="INFO">Running command 'kill 7433 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:43.069" endtime="20210730 15:36:43.072"/>
</kw>
<status status="PASS" starttime="20210730 15:36:43.069" endtime="20210730 15:36:43.072"/>
</iter>
<status status="PASS" starttime="20210730 15:36:43.062" endtime="20210730 15:36:43.072"/>
</for>
<status status="PASS" starttime="20210730 15:36:43.061" endtime="20210730 15:36:43.072"/>
</branch>
<status status="PASS" starttime="20210730 15:36:43.061" endtime="20210730 15:36:43.072"/>
</if>
<status status="PASS" starttime="20210730 15:36:43.045" endtime="20210730 15:36:43.073"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": '!?.?!.!?!?.?!.!?!.!.'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:36:41.467" endtime="20210730 15:36:43.073">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t57" name="With Each Valid Token, Updating Password Of Each System User With abcdABC Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:43.086" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:43.095" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:43.095" level="INFO">${pids} = 7462</msg>
<status status="PASS" starttime="20210730 15:36:43.075" endtime="20210730 15:36:43.095"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:43.097" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:43.096" endtime="20210730 15:36:43.097"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:43.098" level="INFO">${pids} = ['7462']</msg>
<status status="PASS" starttime="20210730 15:36:43.097" endtime="20210730 15:36:43.098"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">7462</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:43.113" level="INFO">Running command 'kill 7462 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:43.098" endtime="20210730 15:36:43.114"/>
</kw>
<status status="PASS" starttime="20210730 15:36:43.098" endtime="20210730 15:36:43.114"/>
</iter>
<status status="PASS" starttime="20210730 15:36:43.098" endtime="20210730 15:36:43.114"/>
</for>
<status status="PASS" starttime="20210730 15:36:43.097" endtime="20210730 15:36:43.114"/>
</branch>
<status status="PASS" starttime="20210730 15:36:43.097" endtime="20210730 15:36:43.114"/>
</if>
<status status="PASS" starttime="20210730 15:36:43.074" endtime="20210730 15:36:43.114"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:43.116" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:43.115" endtime="20210730 15:36:43.116"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:43.116" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:43.116" endtime="20210730 15:36:43.116"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:43.117" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:43.117" endtime="20210730 15:36:43.117"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:43.117" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:43.117" endtime="20210730 15:36:43.117"/>
</kw>
<msg timestamp="20210730 15:36:43.118" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:43.116" endtime="20210730 15:36:43.118"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:43.121" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:43.118" endtime="20210730 15:36:43.122"/>
</kw>
<status status="PASS" starttime="20210730 15:36:43.115" endtime="20210730 15:36:43.123"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:36:43.124" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:36:43.123" endtime="20210730 15:36:43.128"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:36:44.631" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:36:43.129" endtime="20210730 15:36:44.632"/>
</kw>
<status status="PASS" starttime="20210730 15:36:43.123" endtime="20210730 15:36:44.633"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:44.637" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:44.637" endtime="20210730 15:36:44.637"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:44.637" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:44.637" endtime="20210730 15:36:44.637"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:44.638" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:44.637" endtime="20210730 15:36:44.638"/>
</kw>
<msg timestamp="20210730 15:36:44.638" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:44.635" endtime="20210730 15:36:44.638"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:36:44.638" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:36:44.638" endtime="20210730 15:36:44.639"/>
</kw>
<status status="PASS" starttime="20210730 15:36:44.634" endtime="20210730 15:36:44.639"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:36:44.639" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:36:44.639" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:36:44.639" endtime="20210730 15:36:44.639"/>
</kw>
<status status="PASS" starttime="20210730 15:36:44.639" endtime="20210730 15:36:44.640"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:36:44.640" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:36:44.640" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:36:44.640" endtime="20210730 15:36:44.640"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:36:44.640" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:36:44.640" endtime="20210730 15:36:44.640"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:44.641" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:44.641" endtime="20210730 15:36:44.641"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:44.641" endtime="20210730 15:36:44.642"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:44.643" endtime="20210730 15:36:44.643"/>
</kw>
<status status="PASS" starttime="20210730 15:36:44.641" endtime="20210730 15:36:44.643"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:44.644" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:44.644" endtime="20210730 15:36:44.644"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:44.644" endtime="20210730 15:36:44.645"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:44.645" endtime="20210730 15:36:44.646"/>
</kw>
<status status="PASS" starttime="20210730 15:36:44.643" endtime="20210730 15:36:44.646"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:44.646" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:44.646" endtime="20210730 15:36:44.646"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:44.646" endtime="20210730 15:36:44.647"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:44.647" endtime="20210730 15:36:44.647"/>
</kw>
<status status="PASS" starttime="20210730 15:36:44.646" endtime="20210730 15:36:44.647"/>
</iter>
<status status="PASS" starttime="20210730 15:36:44.641" endtime="20210730 15:36:44.647"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:36:44.648" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:36:44.648" endtime="20210730 15:36:44.648"/>
</kw>
<status status="PASS" starttime="20210730 15:36:44.640" endtime="20210730 15:36:44.648"/>
</kw>
<status status="PASS" starttime="20210730 15:36:43.074" endtime="20210730 15:36:44.648"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdABC</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:44.649" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:36:44.649" endtime="20210730 15:36:44.649"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:44.650" level="INFO">${payload} = {'password': 'abcdABC'}</msg>
<status status="PASS" starttime="20210730 15:36:44.649" endtime="20210730 15:36:44.650"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:44.659" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:44.660" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:44.650" endtime="20210730 15:36:44.660"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:44.660" endtime="20210730 15:36:44.660"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:44.660" endtime="20210730 15:36:44.660"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:44.650" endtime="20210730 15:36:44.660"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:44.650" endtime="20210730 15:36:44.660"/>
</for>
<status status="FAIL" starttime="20210730 15:36:44.649" endtime="20210730 15:36:44.660"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:44.648" endtime="20210730 15:36:44.660"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdABC</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:44.662" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:36:44.661" endtime="20210730 15:36:44.662"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:44.662" level="INFO">${payload} = {'password': 'abcdABC'}</msg>
<status status="PASS" starttime="20210730 15:36:44.662" endtime="20210730 15:36:44.662"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:44.666" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:44.666" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:44.662" endtime="20210730 15:36:44.666"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:44.667" endtime="20210730 15:36:44.667"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:44.667" endtime="20210730 15:36:44.667"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:44.662" endtime="20210730 15:36:44.667"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:44.662" endtime="20210730 15:36:44.667"/>
</for>
<status status="FAIL" starttime="20210730 15:36:44.660" endtime="20210730 15:36:44.667"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:44.660" endtime="20210730 15:36:44.667"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdABC</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:44.668" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:36:44.668" endtime="20210730 15:36:44.668"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:44.668" level="INFO">${payload} = {'password': 'abcdABC'}</msg>
<status status="PASS" starttime="20210730 15:36:44.668" endtime="20210730 15:36:44.668"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:44.672" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:44.672" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:44.669" endtime="20210730 15:36:44.672"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:44.673" endtime="20210730 15:36:44.673"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:44.673" endtime="20210730 15:36:44.673"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:44.669" endtime="20210730 15:36:44.673"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:44.668" endtime="20210730 15:36:44.673"/>
</for>
<status status="FAIL" starttime="20210730 15:36:44.667" endtime="20210730 15:36:44.673"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:44.667" endtime="20210730 15:36:44.673"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:44.648" endtime="20210730 15:36:44.673"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:44.680" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:44.691" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:44.691" level="INFO">${pids} = 7485
7492
7496</msg>
<status status="PASS" starttime="20210730 15:36:44.674" endtime="20210730 15:36:44.691"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:44.692" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:44.691" endtime="20210730 15:36:44.692"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:44.693" level="INFO">${pids} = ['7485', '7492', '7496']</msg>
<status status="PASS" starttime="20210730 15:36:44.692" endtime="20210730 15:36:44.693"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">7485</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:44.699" level="INFO">Running command 'kill 7485 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:44.693" endtime="20210730 15:36:44.700"/>
</kw>
<status status="PASS" starttime="20210730 15:36:44.693" endtime="20210730 15:36:44.700"/>
</iter>
<iter>
<var name="${pid}">7492</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:44.707" level="INFO">Running command 'kill 7492 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:44.700" endtime="20210730 15:36:44.707"/>
</kw>
<status status="PASS" starttime="20210730 15:36:44.700" endtime="20210730 15:36:44.707"/>
</iter>
<iter>
<var name="${pid}">7496</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:44.713" level="INFO">Running command 'kill 7496 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:44.708" endtime="20210730 15:36:44.714"/>
</kw>
<status status="PASS" starttime="20210730 15:36:44.707" endtime="20210730 15:36:44.714"/>
</iter>
<status status="PASS" starttime="20210730 15:36:44.693" endtime="20210730 15:36:44.714"/>
</for>
<status status="PASS" starttime="20210730 15:36:44.692" endtime="20210730 15:36:44.714"/>
</branch>
<status status="PASS" starttime="20210730 15:36:44.692" endtime="20210730 15:36:44.714"/>
</if>
<status status="PASS" starttime="20210730 15:36:44.673" endtime="20210730 15:36:44.714"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcdABC'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:36:43.073" endtime="20210730 15:36:44.714">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t58" name="With Each Valid Token, Updating Password Of Each System User With abcdABCD Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:44.720" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:44.730" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:44.730" level="INFO">${pids} = 7525</msg>
<status status="PASS" starttime="20210730 15:36:44.716" endtime="20210730 15:36:44.730"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:44.731" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:44.731" endtime="20210730 15:36:44.731"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:44.732" level="INFO">${pids} = ['7525']</msg>
<status status="PASS" starttime="20210730 15:36:44.731" endtime="20210730 15:36:44.732"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">7525</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:44.735" level="INFO">Running command 'kill 7525 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:44.732" endtime="20210730 15:36:44.736"/>
</kw>
<status status="PASS" starttime="20210730 15:36:44.732" endtime="20210730 15:36:44.736"/>
</iter>
<status status="PASS" starttime="20210730 15:36:44.732" endtime="20210730 15:36:44.736"/>
</for>
<status status="PASS" starttime="20210730 15:36:44.731" endtime="20210730 15:36:44.736"/>
</branch>
<status status="PASS" starttime="20210730 15:36:44.731" endtime="20210730 15:36:44.736"/>
</if>
<status status="PASS" starttime="20210730 15:36:44.716" endtime="20210730 15:36:44.736"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:44.737" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:44.737" endtime="20210730 15:36:44.737"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:44.738" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:44.738" endtime="20210730 15:36:44.738"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:44.738" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:44.738" endtime="20210730 15:36:44.738"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:44.739" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:44.738" endtime="20210730 15:36:44.739"/>
</kw>
<msg timestamp="20210730 15:36:44.739" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:44.737" endtime="20210730 15:36:44.739"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:44.742" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:44.739" endtime="20210730 15:36:44.744"/>
</kw>
<status status="PASS" starttime="20210730 15:36:44.737" endtime="20210730 15:36:44.745"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:36:44.747" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:36:44.746" endtime="20210730 15:36:44.764"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:36:46.267" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:36:44.765" endtime="20210730 15:36:46.268"/>
</kw>
<status status="PASS" starttime="20210730 15:36:44.745" endtime="20210730 15:36:46.268"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:46.269" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:46.269" endtime="20210730 15:36:46.269"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:46.269" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:46.269" endtime="20210730 15:36:46.269"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:46.270" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:46.270" endtime="20210730 15:36:46.270"/>
</kw>
<msg timestamp="20210730 15:36:46.270" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:46.268" endtime="20210730 15:36:46.270"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:36:46.271" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:36:46.270" endtime="20210730 15:36:46.271"/>
</kw>
<status status="PASS" starttime="20210730 15:36:46.268" endtime="20210730 15:36:46.271"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:36:46.271" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:36:46.272" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:36:46.271" endtime="20210730 15:36:46.272"/>
</kw>
<status status="PASS" starttime="20210730 15:36:46.271" endtime="20210730 15:36:46.272"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:36:46.272" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:36:46.272" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:36:46.272" endtime="20210730 15:36:46.272"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:36:46.273" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:36:46.273" endtime="20210730 15:36:46.273"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:46.274" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:46.273" endtime="20210730 15:36:46.274"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:46.274" endtime="20210730 15:36:46.275"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:46.275" endtime="20210730 15:36:46.275"/>
</kw>
<status status="PASS" starttime="20210730 15:36:46.273" endtime="20210730 15:36:46.275"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:46.276" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:46.276" endtime="20210730 15:36:46.276"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:46.277" endtime="20210730 15:36:46.278"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:46.279" endtime="20210730 15:36:46.279"/>
</kw>
<status status="PASS" starttime="20210730 15:36:46.275" endtime="20210730 15:36:46.279"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:46.279" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:46.279" endtime="20210730 15:36:46.279"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:46.280" endtime="20210730 15:36:46.280"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:46.281" endtime="20210730 15:36:46.281"/>
</kw>
<status status="PASS" starttime="20210730 15:36:46.279" endtime="20210730 15:36:46.281"/>
</iter>
<status status="PASS" starttime="20210730 15:36:46.273" endtime="20210730 15:36:46.281"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:36:46.282" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:36:46.281" endtime="20210730 15:36:46.282"/>
</kw>
<status status="PASS" starttime="20210730 15:36:46.272" endtime="20210730 15:36:46.282"/>
</kw>
<status status="PASS" starttime="20210730 15:36:44.716" endtime="20210730 15:36:46.282"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdABCD</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:46.283" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:36:46.283" endtime="20210730 15:36:46.283"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:46.284" level="INFO">${payload} = {'password': 'abcdABCD'}</msg>
<status status="PASS" starttime="20210730 15:36:46.284" endtime="20210730 15:36:46.284"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:46.293" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:46.294" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:46.284" endtime="20210730 15:36:46.294"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:46.294" endtime="20210730 15:36:46.294"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:46.294" endtime="20210730 15:36:46.294"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:46.284" endtime="20210730 15:36:46.294"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:46.284" endtime="20210730 15:36:46.294"/>
</for>
<status status="FAIL" starttime="20210730 15:36:46.282" endtime="20210730 15:36:46.295"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:46.282" endtime="20210730 15:36:46.295"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdABCD</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:46.296" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:36:46.295" endtime="20210730 15:36:46.296"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:46.296" level="INFO">${payload} = {'password': 'abcdABCD'}</msg>
<status status="PASS" starttime="20210730 15:36:46.296" endtime="20210730 15:36:46.296"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:46.301" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:46.301" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:46.296" endtime="20210730 15:36:46.301"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:46.301" endtime="20210730 15:36:46.301"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:46.301" endtime="20210730 15:36:46.301"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:46.296" endtime="20210730 15:36:46.301"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:46.296" endtime="20210730 15:36:46.302"/>
</for>
<status status="FAIL" starttime="20210730 15:36:46.295" endtime="20210730 15:36:46.302"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:46.295" endtime="20210730 15:36:46.302"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdABCD</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:46.303" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:36:46.302" endtime="20210730 15:36:46.303"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:46.303" level="INFO">${payload} = {'password': 'abcdABCD'}</msg>
<status status="PASS" starttime="20210730 15:36:46.303" endtime="20210730 15:36:46.303"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:46.308" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:46.308" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:46.304" endtime="20210730 15:36:46.308"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:46.309" endtime="20210730 15:36:46.309"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:46.309" endtime="20210730 15:36:46.309"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:46.304" endtime="20210730 15:36:46.309"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:46.303" endtime="20210730 15:36:46.309"/>
</for>
<status status="FAIL" starttime="20210730 15:36:46.302" endtime="20210730 15:36:46.309"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:46.302" endtime="20210730 15:36:46.309"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:46.282" endtime="20210730 15:36:46.310"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:46.316" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:46.326" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:46.326" level="INFO">${pids} = 7594
7614
7618</msg>
<status status="PASS" starttime="20210730 15:36:46.312" endtime="20210730 15:36:46.326"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:46.327" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:46.326" endtime="20210730 15:36:46.327"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:46.328" level="INFO">${pids} = ['7594', '7614', '7618']</msg>
<status status="PASS" starttime="20210730 15:36:46.327" endtime="20210730 15:36:46.328"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">7594</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:46.332" level="INFO">Running command 'kill 7594 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:46.328" endtime="20210730 15:36:46.333"/>
</kw>
<status status="PASS" starttime="20210730 15:36:46.328" endtime="20210730 15:36:46.333"/>
</iter>
<iter>
<var name="${pid}">7614</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:46.337" level="INFO">Running command 'kill 7614 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:46.333" endtime="20210730 15:36:46.337"/>
</kw>
<status status="PASS" starttime="20210730 15:36:46.333" endtime="20210730 15:36:46.337"/>
</iter>
<iter>
<var name="${pid}">7618</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:46.342" level="INFO">Running command 'kill 7618 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:46.338" endtime="20210730 15:36:46.343"/>
</kw>
<status status="PASS" starttime="20210730 15:36:46.338" endtime="20210730 15:36:46.343"/>
</iter>
<status status="PASS" starttime="20210730 15:36:46.328" endtime="20210730 15:36:46.343"/>
</for>
<status status="PASS" starttime="20210730 15:36:46.327" endtime="20210730 15:36:46.343"/>
</branch>
<status status="PASS" starttime="20210730 15:36:46.327" endtime="20210730 15:36:46.343"/>
</if>
<status status="PASS" starttime="20210730 15:36:46.310" endtime="20210730 15:36:46.343"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcdABCD'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:36:44.715" endtime="20210730 15:36:46.344">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t59" name="With Each Valid Token, Updating Password Of Each System User With abcdABCDefgjklmnprstoö Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:46.350" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:46.360" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:46.360" level="INFO">${pids} = 7652</msg>
<status status="PASS" starttime="20210730 15:36:46.347" endtime="20210730 15:36:46.360"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:46.361" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:46.361" endtime="20210730 15:36:46.362"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:46.362" level="INFO">${pids} = ['7652']</msg>
<status status="PASS" starttime="20210730 15:36:46.362" endtime="20210730 15:36:46.362"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">7652</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:46.367" level="INFO">Running command 'kill 7652 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:46.363" endtime="20210730 15:36:46.368"/>
</kw>
<status status="PASS" starttime="20210730 15:36:46.362" endtime="20210730 15:36:46.368"/>
</iter>
<status status="PASS" starttime="20210730 15:36:46.362" endtime="20210730 15:36:46.368"/>
</for>
<status status="PASS" starttime="20210730 15:36:46.362" endtime="20210730 15:36:46.368"/>
</branch>
<status status="PASS" starttime="20210730 15:36:46.362" endtime="20210730 15:36:46.368"/>
</if>
<status status="PASS" starttime="20210730 15:36:46.346" endtime="20210730 15:36:46.368"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:46.369" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:46.369" endtime="20210730 15:36:46.369"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:46.370" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:46.370" endtime="20210730 15:36:46.370"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:46.370" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:46.370" endtime="20210730 15:36:46.370"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:46.371" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:46.370" endtime="20210730 15:36:46.371"/>
</kw>
<msg timestamp="20210730 15:36:46.371" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:46.369" endtime="20210730 15:36:46.371"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:46.377" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:46.371" endtime="20210730 15:36:46.380"/>
</kw>
<status status="PASS" starttime="20210730 15:36:46.368" endtime="20210730 15:36:46.380"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:36:46.382" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:36:46.381" endtime="20210730 15:36:46.386"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:36:47.888" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:36:46.386" endtime="20210730 15:36:47.888"/>
</kw>
<status status="PASS" starttime="20210730 15:36:46.381" endtime="20210730 15:36:47.888"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:47.890" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:47.889" endtime="20210730 15:36:47.890"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:47.890" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:47.890" endtime="20210730 15:36:47.890"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:47.890" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:47.890" endtime="20210730 15:36:47.890"/>
</kw>
<msg timestamp="20210730 15:36:47.891" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:47.889" endtime="20210730 15:36:47.891"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:36:47.891" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:36:47.891" endtime="20210730 15:36:47.892"/>
</kw>
<status status="PASS" starttime="20210730 15:36:47.889" endtime="20210730 15:36:47.892"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:36:47.892" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:36:47.892" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:36:47.892" endtime="20210730 15:36:47.893"/>
</kw>
<status status="PASS" starttime="20210730 15:36:47.892" endtime="20210730 15:36:47.893"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:36:47.894" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:36:47.894" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:36:47.893" endtime="20210730 15:36:47.894"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:36:47.894" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:36:47.894" endtime="20210730 15:36:47.894"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:47.895" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:47.894" endtime="20210730 15:36:47.895"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:47.895" endtime="20210730 15:36:47.896"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:47.896" endtime="20210730 15:36:47.896"/>
</kw>
<status status="PASS" starttime="20210730 15:36:47.894" endtime="20210730 15:36:47.896"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:47.896" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:47.896" endtime="20210730 15:36:47.896"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:47.897" endtime="20210730 15:36:47.897"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:47.897" endtime="20210730 15:36:47.898"/>
</kw>
<status status="PASS" starttime="20210730 15:36:47.896" endtime="20210730 15:36:47.898"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:47.898" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:47.898" endtime="20210730 15:36:47.898"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:47.898" endtime="20210730 15:36:47.899"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:47.899" endtime="20210730 15:36:47.899"/>
</kw>
<status status="PASS" starttime="20210730 15:36:47.898" endtime="20210730 15:36:47.899"/>
</iter>
<status status="PASS" starttime="20210730 15:36:47.894" endtime="20210730 15:36:47.899"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:36:47.900" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:36:47.899" endtime="20210730 15:36:47.900"/>
</kw>
<status status="PASS" starttime="20210730 15:36:47.893" endtime="20210730 15:36:47.900"/>
</kw>
<status status="PASS" starttime="20210730 15:36:46.345" endtime="20210730 15:36:47.900"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdABCDefgjklmnprstoö</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:47.901" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:36:47.901" endtime="20210730 15:36:47.901"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:47.901" level="INFO">${payload} = {'password': 'abcdABCDefgjklmnprstoö'}</msg>
<status status="PASS" starttime="20210730 15:36:47.901" endtime="20210730 15:36:47.901"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:47.913" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:47.913" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:47.902" endtime="20210730 15:36:47.914"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:47.914" endtime="20210730 15:36:47.914"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:47.914" endtime="20210730 15:36:47.914"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:47.902" endtime="20210730 15:36:47.914"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:47.901" endtime="20210730 15:36:47.914"/>
</for>
<status status="FAIL" starttime="20210730 15:36:47.900" endtime="20210730 15:36:47.914"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:47.900" endtime="20210730 15:36:47.914"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdABCDefgjklmnprstoö</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:47.915" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:36:47.915" endtime="20210730 15:36:47.915"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:47.916" level="INFO">${payload} = {'password': 'abcdABCDefgjklmnprstoö'}</msg>
<status status="PASS" starttime="20210730 15:36:47.915" endtime="20210730 15:36:47.916"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:47.920" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:47.920" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:47.916" endtime="20210730 15:36:47.920"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:47.920" endtime="20210730 15:36:47.920"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:47.920" endtime="20210730 15:36:47.920"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:47.916" endtime="20210730 15:36:47.920"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:47.916" endtime="20210730 15:36:47.920"/>
</for>
<status status="FAIL" starttime="20210730 15:36:47.914" endtime="20210730 15:36:47.920"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:47.914" endtime="20210730 15:36:47.921"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdABCDefgjklmnprstoö</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:47.922" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:36:47.921" endtime="20210730 15:36:47.922"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:47.922" level="INFO">${payload} = {'password': 'abcdABCDefgjklmnprstoö'}</msg>
<status status="PASS" starttime="20210730 15:36:47.922" endtime="20210730 15:36:47.922"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:47.926" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:47.927" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:47.922" endtime="20210730 15:36:47.927"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:47.927" endtime="20210730 15:36:47.927"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:47.927" endtime="20210730 15:36:47.927"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:47.922" endtime="20210730 15:36:47.927"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:47.922" endtime="20210730 15:36:47.927"/>
</for>
<status status="FAIL" starttime="20210730 15:36:47.921" endtime="20210730 15:36:47.928"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:47.921" endtime="20210730 15:36:47.928"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:47.900" endtime="20210730 15:36:47.928"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:47.932" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:47.941" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:47.942" level="INFO">${pids} = 7695
7707
7712</msg>
<status status="PASS" starttime="20210730 15:36:47.929" endtime="20210730 15:36:47.942"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:47.943" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:47.942" endtime="20210730 15:36:47.943"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:47.944" level="INFO">${pids} = ['7695', '7707', '7712']</msg>
<status status="PASS" starttime="20210730 15:36:47.943" endtime="20210730 15:36:47.944"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">7695</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:47.948" level="INFO">Running command 'kill 7695 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:47.944" endtime="20210730 15:36:47.948"/>
</kw>
<status status="PASS" starttime="20210730 15:36:47.944" endtime="20210730 15:36:47.948"/>
</iter>
<iter>
<var name="${pid}">7707</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:47.951" level="INFO">Running command 'kill 7707 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:47.949" endtime="20210730 15:36:47.953"/>
</kw>
<status status="PASS" starttime="20210730 15:36:47.948" endtime="20210730 15:36:47.953"/>
</iter>
<iter>
<var name="${pid}">7712</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:47.958" level="INFO">Running command 'kill 7712 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:47.954" endtime="20210730 15:36:47.958"/>
</kw>
<status status="PASS" starttime="20210730 15:36:47.953" endtime="20210730 15:36:47.958"/>
</iter>
<status status="PASS" starttime="20210730 15:36:47.944" endtime="20210730 15:36:47.958"/>
</for>
<status status="PASS" starttime="20210730 15:36:47.943" endtime="20210730 15:36:47.958"/>
</branch>
<status status="PASS" starttime="20210730 15:36:47.943" endtime="20210730 15:36:47.958"/>
</if>
<status status="PASS" starttime="20210730 15:36:47.928" endtime="20210730 15:36:47.959"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcdABCDefgjklmnprstoö'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:36:46.344" endtime="20210730 15:36:47.959">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t60" name="With Each Valid Token, Updating Password Of Each System User With abcd012 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:47.967" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:47.976" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:47.977" level="INFO">${pids} = 7757</msg>
<status status="PASS" starttime="20210730 15:36:47.962" endtime="20210730 15:36:47.977"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:47.978" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:47.977" endtime="20210730 15:36:47.978"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:47.979" level="INFO">${pids} = ['7757']</msg>
<status status="PASS" starttime="20210730 15:36:47.979" endtime="20210730 15:36:47.979"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">7757</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:47.983" level="INFO">Running command 'kill 7757 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:47.980" endtime="20210730 15:36:47.983"/>
</kw>
<status status="PASS" starttime="20210730 15:36:47.979" endtime="20210730 15:36:47.983"/>
</iter>
<status status="PASS" starttime="20210730 15:36:47.979" endtime="20210730 15:36:47.983"/>
</for>
<status status="PASS" starttime="20210730 15:36:47.978" endtime="20210730 15:36:47.983"/>
</branch>
<status status="PASS" starttime="20210730 15:36:47.978" endtime="20210730 15:36:47.983"/>
</if>
<status status="PASS" starttime="20210730 15:36:47.961" endtime="20210730 15:36:47.984"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:47.985" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:47.984" endtime="20210730 15:36:47.985"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:47.985" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:47.985" endtime="20210730 15:36:47.985"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:47.986" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:47.986" endtime="20210730 15:36:47.986"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:47.986" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:47.986" endtime="20210730 15:36:47.986"/>
</kw>
<msg timestamp="20210730 15:36:47.986" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:47.985" endtime="20210730 15:36:47.986"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:47.990" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:47.987" endtime="20210730 15:36:47.992"/>
</kw>
<status status="PASS" starttime="20210730 15:36:47.984" endtime="20210730 15:36:47.992"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:36:47.994" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:36:47.993" endtime="20210730 15:36:47.999"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:36:49.524" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:36:47.999" endtime="20210730 15:36:49.525"/>
</kw>
<status status="PASS" starttime="20210730 15:36:47.993" endtime="20210730 15:36:49.525"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:49.527" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:49.526" endtime="20210730 15:36:49.527"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:49.527" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:49.527" endtime="20210730 15:36:49.527"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:49.527" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:49.527" endtime="20210730 15:36:49.528"/>
</kw>
<msg timestamp="20210730 15:36:49.528" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:49.526" endtime="20210730 15:36:49.528"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:36:49.528" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:36:49.528" endtime="20210730 15:36:49.529"/>
</kw>
<status status="PASS" starttime="20210730 15:36:49.525" endtime="20210730 15:36:49.529"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:36:49.529" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:36:49.529" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:36:49.529" endtime="20210730 15:36:49.529"/>
</kw>
<status status="PASS" starttime="20210730 15:36:49.529" endtime="20210730 15:36:49.530"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:36:49.530" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:36:49.530" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:36:49.530" endtime="20210730 15:36:49.530"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:36:49.530" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:36:49.530" endtime="20210730 15:36:49.530"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:49.531" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:49.531" endtime="20210730 15:36:49.531"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:49.531" endtime="20210730 15:36:49.532"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:49.532" endtime="20210730 15:36:49.532"/>
</kw>
<status status="PASS" starttime="20210730 15:36:49.531" endtime="20210730 15:36:49.532"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:49.532" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:49.532" endtime="20210730 15:36:49.532"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:49.533" endtime="20210730 15:36:49.533"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:49.533" endtime="20210730 15:36:49.534"/>
</kw>
<status status="PASS" starttime="20210730 15:36:49.532" endtime="20210730 15:36:49.534"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:49.534" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:49.534" endtime="20210730 15:36:49.534"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:49.534" endtime="20210730 15:36:49.535"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:49.535" endtime="20210730 15:36:49.535"/>
</kw>
<status status="PASS" starttime="20210730 15:36:49.534" endtime="20210730 15:36:49.535"/>
</iter>
<status status="PASS" starttime="20210730 15:36:49.531" endtime="20210730 15:36:49.535"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:36:49.536" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:36:49.535" endtime="20210730 15:36:49.536"/>
</kw>
<status status="PASS" starttime="20210730 15:36:49.530" endtime="20210730 15:36:49.536"/>
</kw>
<status status="PASS" starttime="20210730 15:36:47.961" endtime="20210730 15:36:49.536"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd012</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:49.537" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:36:49.537" endtime="20210730 15:36:49.537"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:49.538" level="INFO">${payload} = {'password': 'abcd012'}</msg>
<status status="PASS" starttime="20210730 15:36:49.538" endtime="20210730 15:36:49.538"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:49.548" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:49.549" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:49.538" endtime="20210730 15:36:49.549"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:49.549" endtime="20210730 15:36:49.549"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:49.549" endtime="20210730 15:36:49.549"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:49.538" endtime="20210730 15:36:49.549"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:49.538" endtime="20210730 15:36:49.549"/>
</for>
<status status="FAIL" starttime="20210730 15:36:49.536" endtime="20210730 15:36:49.549"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:49.536" endtime="20210730 15:36:49.549"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd012</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:49.550" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:36:49.550" endtime="20210730 15:36:49.550"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:49.551" level="INFO">${payload} = {'password': 'abcd012'}</msg>
<status status="PASS" starttime="20210730 15:36:49.551" endtime="20210730 15:36:49.551"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:49.555" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:49.555" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:49.551" endtime="20210730 15:36:49.555"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:49.555" endtime="20210730 15:36:49.555"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:49.555" endtime="20210730 15:36:49.555"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:49.551" endtime="20210730 15:36:49.555"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:49.551" endtime="20210730 15:36:49.556"/>
</for>
<status status="FAIL" starttime="20210730 15:36:49.550" endtime="20210730 15:36:49.556"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:49.549" endtime="20210730 15:36:49.556"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd012</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:49.557" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:36:49.556" endtime="20210730 15:36:49.557"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:49.557" level="INFO">${payload} = {'password': 'abcd012'}</msg>
<status status="PASS" starttime="20210730 15:36:49.557" endtime="20210730 15:36:49.557"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:49.562" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:49.562" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:49.558" endtime="20210730 15:36:49.562"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:49.562" endtime="20210730 15:36:49.562"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:49.562" endtime="20210730 15:36:49.562"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:49.558" endtime="20210730 15:36:49.563"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:49.557" endtime="20210730 15:36:49.563"/>
</for>
<status status="FAIL" starttime="20210730 15:36:49.556" endtime="20210730 15:36:49.563"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:49.556" endtime="20210730 15:36:49.563"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:49.536" endtime="20210730 15:36:49.563"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:49.567" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:49.577" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:49.577" level="INFO">${pids} = 7850
7865
7871</msg>
<status status="PASS" starttime="20210730 15:36:49.564" endtime="20210730 15:36:49.577"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:49.578" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:49.578" endtime="20210730 15:36:49.578"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:49.579" level="INFO">${pids} = ['7850', '7865', '7871']</msg>
<status status="PASS" starttime="20210730 15:36:49.579" endtime="20210730 15:36:49.579"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">7850</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:49.582" level="INFO">Running command 'kill 7850 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:49.579" endtime="20210730 15:36:49.583"/>
</kw>
<status status="PASS" starttime="20210730 15:36:49.579" endtime="20210730 15:36:49.583"/>
</iter>
<iter>
<var name="${pid}">7865</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:49.586" level="INFO">Running command 'kill 7865 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:49.583" endtime="20210730 15:36:49.586"/>
</kw>
<status status="PASS" starttime="20210730 15:36:49.583" endtime="20210730 15:36:49.587"/>
</iter>
<iter>
<var name="${pid}">7871</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:49.590" level="INFO">Running command 'kill 7871 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:49.587" endtime="20210730 15:36:49.590"/>
</kw>
<status status="PASS" starttime="20210730 15:36:49.587" endtime="20210730 15:36:49.590"/>
</iter>
<status status="PASS" starttime="20210730 15:36:49.579" endtime="20210730 15:36:49.590"/>
</for>
<status status="PASS" starttime="20210730 15:36:49.578" endtime="20210730 15:36:49.590"/>
</branch>
<status status="PASS" starttime="20210730 15:36:49.578" endtime="20210730 15:36:49.590"/>
</if>
<status status="PASS" starttime="20210730 15:36:49.563" endtime="20210730 15:36:49.591"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcd012'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:36:47.960" endtime="20210730 15:36:49.591">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t61" name="With Each Valid Token, Updating Password Of Each System User With abcd0123 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:49.597" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:49.607" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:49.607" level="INFO">${pids} = 7909</msg>
<status status="PASS" starttime="20210730 15:36:49.593" endtime="20210730 15:36:49.608"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:49.608" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:49.608" endtime="20210730 15:36:49.609"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:49.609" level="INFO">${pids} = ['7909']</msg>
<status status="PASS" starttime="20210730 15:36:49.609" endtime="20210730 15:36:49.609"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">7909</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:49.616" level="INFO">Running command 'kill 7909 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:49.610" endtime="20210730 15:36:49.617"/>
</kw>
<status status="PASS" starttime="20210730 15:36:49.610" endtime="20210730 15:36:49.617"/>
</iter>
<status status="PASS" starttime="20210730 15:36:49.609" endtime="20210730 15:36:49.617"/>
</for>
<status status="PASS" starttime="20210730 15:36:49.609" endtime="20210730 15:36:49.617"/>
</branch>
<status status="PASS" starttime="20210730 15:36:49.609" endtime="20210730 15:36:49.617"/>
</if>
<status status="PASS" starttime="20210730 15:36:49.592" endtime="20210730 15:36:49.617"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:49.619" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:49.618" endtime="20210730 15:36:49.619"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:49.619" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:49.619" endtime="20210730 15:36:49.619"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:49.620" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:49.620" endtime="20210730 15:36:49.620"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:49.621" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:49.620" endtime="20210730 15:36:49.621"/>
</kw>
<msg timestamp="20210730 15:36:49.621" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:49.619" endtime="20210730 15:36:49.621"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:49.630" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:49.621" endtime="20210730 15:36:49.631"/>
</kw>
<status status="PASS" starttime="20210730 15:36:49.618" endtime="20210730 15:36:49.631"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:36:49.633" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:36:49.632" endtime="20210730 15:36:49.637"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:36:51.140" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:36:49.637" endtime="20210730 15:36:51.141"/>
</kw>
<status status="PASS" starttime="20210730 15:36:49.632" endtime="20210730 15:36:51.143"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:51.148" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:51.147" endtime="20210730 15:36:51.148"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:51.149" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:51.148" endtime="20210730 15:36:51.149"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:51.150" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:51.149" endtime="20210730 15:36:51.150"/>
</kw>
<msg timestamp="20210730 15:36:51.151" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:51.145" endtime="20210730 15:36:51.151"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:36:51.152" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:36:51.151" endtime="20210730 15:36:51.152"/>
</kw>
<status status="PASS" starttime="20210730 15:36:51.144" endtime="20210730 15:36:51.153"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:36:51.154" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:36:51.154" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:36:51.153" endtime="20210730 15:36:51.154"/>
</kw>
<status status="PASS" starttime="20210730 15:36:51.153" endtime="20210730 15:36:51.154"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:36:51.156" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:36:51.156" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:36:51.155" endtime="20210730 15:36:51.156"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:36:51.156" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:36:51.156" endtime="20210730 15:36:51.156"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:51.158" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:51.157" endtime="20210730 15:36:51.158"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:51.158" endtime="20210730 15:36:51.159"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:51.159" endtime="20210730 15:36:51.160"/>
</kw>
<status status="PASS" starttime="20210730 15:36:51.157" endtime="20210730 15:36:51.160"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:51.161" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:51.160" endtime="20210730 15:36:51.161"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:51.161" endtime="20210730 15:36:51.162"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:51.162" endtime="20210730 15:36:51.162"/>
</kw>
<status status="PASS" starttime="20210730 15:36:51.160" endtime="20210730 15:36:51.162"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:51.163" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:51.163" endtime="20210730 15:36:51.163"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:51.163" endtime="20210730 15:36:51.164"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:51.164" endtime="20210730 15:36:51.164"/>
</kw>
<status status="PASS" starttime="20210730 15:36:51.163" endtime="20210730 15:36:51.164"/>
</iter>
<status status="PASS" starttime="20210730 15:36:51.156" endtime="20210730 15:36:51.165"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:36:51.165" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:36:51.165" endtime="20210730 15:36:51.165"/>
</kw>
<status status="PASS" starttime="20210730 15:36:51.155" endtime="20210730 15:36:51.165"/>
</kw>
<status status="PASS" starttime="20210730 15:36:49.592" endtime="20210730 15:36:51.165"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd0123</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:51.167" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:36:51.167" endtime="20210730 15:36:51.167"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:51.167" level="INFO">${payload} = {'password': 'abcd0123'}</msg>
<status status="PASS" starttime="20210730 15:36:51.167" endtime="20210730 15:36:51.167"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:51.180" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:51.180" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:51.168" endtime="20210730 15:36:51.181"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:51.181" endtime="20210730 15:36:51.181"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:51.181" endtime="20210730 15:36:51.181"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:51.168" endtime="20210730 15:36:51.181"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:51.167" endtime="20210730 15:36:51.181"/>
</for>
<status status="FAIL" starttime="20210730 15:36:51.166" endtime="20210730 15:36:51.181"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:51.166" endtime="20210730 15:36:51.181"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd0123</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:51.182" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:36:51.182" endtime="20210730 15:36:51.182"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:51.183" level="INFO">${payload} = {'password': 'abcd0123'}</msg>
<status status="PASS" starttime="20210730 15:36:51.182" endtime="20210730 15:36:51.183"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:51.190" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:51.190" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:51.183" endtime="20210730 15:36:51.190"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:51.191" endtime="20210730 15:36:51.191"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:51.191" endtime="20210730 15:36:51.191"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:51.183" endtime="20210730 15:36:51.191"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:51.183" endtime="20210730 15:36:51.191"/>
</for>
<status status="FAIL" starttime="20210730 15:36:51.181" endtime="20210730 15:36:51.191"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:51.181" endtime="20210730 15:36:51.191"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd0123</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:51.192" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:36:51.192" endtime="20210730 15:36:51.192"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:51.193" level="INFO">${payload} = {'password': 'abcd0123'}</msg>
<status status="PASS" starttime="20210730 15:36:51.192" endtime="20210730 15:36:51.193"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:51.198" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:51.198" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:51.193" endtime="20210730 15:36:51.198"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:51.198" endtime="20210730 15:36:51.198"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:51.198" endtime="20210730 15:36:51.199"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:51.193" endtime="20210730 15:36:51.199"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:51.193" endtime="20210730 15:36:51.199"/>
</for>
<status status="FAIL" starttime="20210730 15:36:51.191" endtime="20210730 15:36:51.199"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:51.191" endtime="20210730 15:36:51.199"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:51.166" endtime="20210730 15:36:51.199"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:51.203" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:51.214" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:51.214" level="INFO">${pids} = 7953
7968
7980</msg>
<status status="PASS" starttime="20210730 15:36:51.199" endtime="20210730 15:36:51.214"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:51.215" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:51.214" endtime="20210730 15:36:51.215"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:51.216" level="INFO">${pids} = ['7953', '7968', '7980']</msg>
<status status="PASS" starttime="20210730 15:36:51.215" endtime="20210730 15:36:51.216"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">7953</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:51.219" level="INFO">Running command 'kill 7953 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:51.216" endtime="20210730 15:36:51.219"/>
</kw>
<status status="PASS" starttime="20210730 15:36:51.216" endtime="20210730 15:36:51.219"/>
</iter>
<iter>
<var name="${pid}">7968</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:51.222" level="INFO">Running command 'kill 7968 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:51.220" endtime="20210730 15:36:51.223"/>
</kw>
<status status="PASS" starttime="20210730 15:36:51.220" endtime="20210730 15:36:51.223"/>
</iter>
<iter>
<var name="${pid}">7980</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:51.227" level="INFO">Running command 'kill 7980 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:51.223" endtime="20210730 15:36:51.228"/>
</kw>
<status status="PASS" starttime="20210730 15:36:51.223" endtime="20210730 15:36:51.228"/>
</iter>
<status status="PASS" starttime="20210730 15:36:51.216" endtime="20210730 15:36:51.228"/>
</for>
<status status="PASS" starttime="20210730 15:36:51.215" endtime="20210730 15:36:51.228"/>
</branch>
<status status="PASS" starttime="20210730 15:36:51.215" endtime="20210730 15:36:51.228"/>
</if>
<status status="PASS" starttime="20210730 15:36:51.199" endtime="20210730 15:36:51.228"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcd0123'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:36:49.591" endtime="20210730 15:36:51.229">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t62" name="With Each Valid Token, Updating Password Of Each System User With abcd0123456789defghjk4 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:51.234" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:51.244" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:51.244" level="INFO">${pids} = 8064</msg>
<status status="PASS" starttime="20210730 15:36:51.231" endtime="20210730 15:36:51.244"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:51.245" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:51.244" endtime="20210730 15:36:51.245"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:51.246" level="INFO">${pids} = ['8064']</msg>
<status status="PASS" starttime="20210730 15:36:51.245" endtime="20210730 15:36:51.246"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8064</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:51.249" level="INFO">Running command 'kill 8064 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:51.246" endtime="20210730 15:36:51.249"/>
</kw>
<status status="PASS" starttime="20210730 15:36:51.246" endtime="20210730 15:36:51.249"/>
</iter>
<status status="PASS" starttime="20210730 15:36:51.246" endtime="20210730 15:36:51.250"/>
</for>
<status status="PASS" starttime="20210730 15:36:51.245" endtime="20210730 15:36:51.250"/>
</branch>
<status status="PASS" starttime="20210730 15:36:51.245" endtime="20210730 15:36:51.250"/>
</if>
<status status="PASS" starttime="20210730 15:36:51.230" endtime="20210730 15:36:51.250"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:51.251" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:51.251" endtime="20210730 15:36:51.251"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:51.252" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:51.251" endtime="20210730 15:36:51.252"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:51.252" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:51.252" endtime="20210730 15:36:51.252"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:51.252" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:51.252" endtime="20210730 15:36:51.252"/>
</kw>
<msg timestamp="20210730 15:36:51.253" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:51.251" endtime="20210730 15:36:51.253"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:51.258" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:51.253" endtime="20210730 15:36:51.261"/>
</kw>
<status status="PASS" starttime="20210730 15:36:51.250" endtime="20210730 15:36:51.261"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:36:51.262" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:36:51.262" endtime="20210730 15:36:51.266"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:36:52.775" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:36:51.267" endtime="20210730 15:36:52.776"/>
</kw>
<status status="PASS" starttime="20210730 15:36:51.261" endtime="20210730 15:36:52.777"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:52.780" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:52.780" endtime="20210730 15:36:52.780"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:52.781" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:52.781" endtime="20210730 15:36:52.781"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:52.781" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:52.781" endtime="20210730 15:36:52.782"/>
</kw>
<msg timestamp="20210730 15:36:52.782" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:52.779" endtime="20210730 15:36:52.782"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:36:52.782" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:36:52.782" endtime="20210730 15:36:52.783"/>
</kw>
<status status="PASS" starttime="20210730 15:36:52.779" endtime="20210730 15:36:52.783"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:36:52.783" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:36:52.783" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:36:52.783" endtime="20210730 15:36:52.784"/>
</kw>
<status status="PASS" starttime="20210730 15:36:52.783" endtime="20210730 15:36:52.784"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:36:52.784" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:36:52.784" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:36:52.784" endtime="20210730 15:36:52.785"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:36:52.785" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:36:52.785" endtime="20210730 15:36:52.785"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:52.786" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:52.785" endtime="20210730 15:36:52.786"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:52.786" endtime="20210730 15:36:52.787"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:52.787" endtime="20210730 15:36:52.787"/>
</kw>
<status status="PASS" starttime="20210730 15:36:52.785" endtime="20210730 15:36:52.787"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:52.787" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:52.787" endtime="20210730 15:36:52.787"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:52.787" endtime="20210730 15:36:52.788"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:52.788" endtime="20210730 15:36:52.788"/>
</kw>
<status status="PASS" starttime="20210730 15:36:52.787" endtime="20210730 15:36:52.788"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:52.789" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:52.788" endtime="20210730 15:36:52.789"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:52.789" endtime="20210730 15:36:52.790"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:52.790" endtime="20210730 15:36:52.790"/>
</kw>
<status status="PASS" starttime="20210730 15:36:52.788" endtime="20210730 15:36:52.790"/>
</iter>
<status status="PASS" starttime="20210730 15:36:52.785" endtime="20210730 15:36:52.790"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:36:52.790" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:36:52.790" endtime="20210730 15:36:52.790"/>
</kw>
<status status="PASS" starttime="20210730 15:36:52.784" endtime="20210730 15:36:52.790"/>
</kw>
<status status="PASS" starttime="20210730 15:36:51.230" endtime="20210730 15:36:52.791"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd0123456789defghjk4</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:52.792" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:36:52.792" endtime="20210730 15:36:52.792"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:52.792" level="INFO">${payload} = {'password': 'abcd0123456789defghjk4'}</msg>
<status status="PASS" starttime="20210730 15:36:52.792" endtime="20210730 15:36:52.792"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:52.801" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:52.802" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:52.793" endtime="20210730 15:36:52.802"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:52.802" endtime="20210730 15:36:52.802"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:52.802" endtime="20210730 15:36:52.802"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:52.793" endtime="20210730 15:36:52.803"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:52.792" endtime="20210730 15:36:52.803"/>
</for>
<status status="FAIL" starttime="20210730 15:36:52.791" endtime="20210730 15:36:52.803"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:52.791" endtime="20210730 15:36:52.803"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd0123456789defghjk4</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:52.804" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:36:52.804" endtime="20210730 15:36:52.804"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:52.804" level="INFO">${payload} = {'password': 'abcd0123456789defghjk4'}</msg>
<status status="PASS" starttime="20210730 15:36:52.804" endtime="20210730 15:36:52.804"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:52.808" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:52.809" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:52.805" endtime="20210730 15:36:52.809"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:52.809" endtime="20210730 15:36:52.809"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:52.809" endtime="20210730 15:36:52.809"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:52.804" endtime="20210730 15:36:52.809"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:52.804" endtime="20210730 15:36:52.809"/>
</for>
<status status="FAIL" starttime="20210730 15:36:52.803" endtime="20210730 15:36:52.809"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:52.803" endtime="20210730 15:36:52.809"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd0123456789defghjk4</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:52.811" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:36:52.810" endtime="20210730 15:36:52.811"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:52.811" level="INFO">${payload} = {'password': 'abcd0123456789defghjk4'}</msg>
<status status="PASS" starttime="20210730 15:36:52.811" endtime="20210730 15:36:52.811"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:52.816" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:52.816" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:52.811" endtime="20210730 15:36:52.816"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:52.816" endtime="20210730 15:36:52.816"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:52.816" endtime="20210730 15:36:52.816"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:52.811" endtime="20210730 15:36:52.816"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:52.811" endtime="20210730 15:36:52.816"/>
</for>
<status status="FAIL" starttime="20210730 15:36:52.810" endtime="20210730 15:36:52.817"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:52.810" endtime="20210730 15:36:52.817"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:52.791" endtime="20210730 15:36:52.817"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:52.823" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:52.837" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:52.837" level="INFO">${pids} = 8088
8095
8100</msg>
<status status="PASS" starttime="20210730 15:36:52.819" endtime="20210730 15:36:52.837"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:52.838" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:52.837" endtime="20210730 15:36:52.838"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:52.839" level="INFO">${pids} = ['8088', '8095', '8100']</msg>
<status status="PASS" starttime="20210730 15:36:52.838" endtime="20210730 15:36:52.839"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8088</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:52.844" level="INFO">Running command 'kill 8088 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:52.839" endtime="20210730 15:36:52.845"/>
</kw>
<status status="PASS" starttime="20210730 15:36:52.839" endtime="20210730 15:36:52.845"/>
</iter>
<iter>
<var name="${pid}">8095</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:52.856" level="INFO">Running command 'kill 8095 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:52.846" endtime="20210730 15:36:52.857"/>
</kw>
<status status="PASS" starttime="20210730 15:36:52.845" endtime="20210730 15:36:52.857"/>
</iter>
<iter>
<var name="${pid}">8100</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:52.862" level="INFO">Running command 'kill 8100 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:52.858" endtime="20210730 15:36:52.862"/>
</kw>
<status status="PASS" starttime="20210730 15:36:52.857" endtime="20210730 15:36:52.862"/>
</iter>
<status status="PASS" starttime="20210730 15:36:52.839" endtime="20210730 15:36:52.862"/>
</for>
<status status="PASS" starttime="20210730 15:36:52.838" endtime="20210730 15:36:52.862"/>
</branch>
<status status="PASS" starttime="20210730 15:36:52.838" endtime="20210730 15:36:52.862"/>
</if>
<status status="PASS" starttime="20210730 15:36:52.817" endtime="20210730 15:36:52.863"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcd0123456789defghjk4'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:36:51.229" endtime="20210730 15:36:52.863">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t63" name="With Each Valid Token, Updating Password Of Each System User With abcd!?. Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:52.875" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:52.889" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:52.889" level="INFO">${pids} = 8129</msg>
<status status="PASS" starttime="20210730 15:36:52.866" endtime="20210730 15:36:52.889"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:52.890" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:52.890" endtime="20210730 15:36:52.890"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:52.891" level="INFO">${pids} = ['8129']</msg>
<status status="PASS" starttime="20210730 15:36:52.891" endtime="20210730 15:36:52.891"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8129</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:52.895" level="INFO">Running command 'kill 8129 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:52.891" endtime="20210730 15:36:52.895"/>
</kw>
<status status="PASS" starttime="20210730 15:36:52.891" endtime="20210730 15:36:52.895"/>
</iter>
<status status="PASS" starttime="20210730 15:36:52.891" endtime="20210730 15:36:52.895"/>
</for>
<status status="PASS" starttime="20210730 15:36:52.891" endtime="20210730 15:36:52.895"/>
</branch>
<status status="PASS" starttime="20210730 15:36:52.890" endtime="20210730 15:36:52.895"/>
</if>
<status status="PASS" starttime="20210730 15:36:52.865" endtime="20210730 15:36:52.896"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:52.907" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:52.907" endtime="20210730 15:36:52.907"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:52.908" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:52.908" endtime="20210730 15:36:52.908"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:52.909" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:52.908" endtime="20210730 15:36:52.909"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:52.911" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:52.909" endtime="20210730 15:36:52.911"/>
</kw>
<msg timestamp="20210730 15:36:52.911" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:52.907" endtime="20210730 15:36:52.912"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:52.916" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:52.912" endtime="20210730 15:36:52.917"/>
</kw>
<status status="PASS" starttime="20210730 15:36:52.897" endtime="20210730 15:36:52.917"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:36:52.919" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:36:52.918" endtime="20210730 15:36:52.923"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:36:54.424" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:36:52.923" endtime="20210730 15:36:54.424"/>
</kw>
<status status="PASS" starttime="20210730 15:36:52.918" endtime="20210730 15:36:54.424"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:54.426" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:54.426" endtime="20210730 15:36:54.426"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:54.427" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:54.427" endtime="20210730 15:36:54.427"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:54.427" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:54.427" endtime="20210730 15:36:54.427"/>
</kw>
<msg timestamp="20210730 15:36:54.427" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:54.425" endtime="20210730 15:36:54.427"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:36:54.428" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:36:54.427" endtime="20210730 15:36:54.428"/>
</kw>
<status status="PASS" starttime="20210730 15:36:54.425" endtime="20210730 15:36:54.428"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:36:54.429" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:36:54.429" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:36:54.429" endtime="20210730 15:36:54.429"/>
</kw>
<status status="PASS" starttime="20210730 15:36:54.428" endtime="20210730 15:36:54.429"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:36:54.430" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:36:54.430" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:36:54.429" endtime="20210730 15:36:54.430"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:36:54.430" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:36:54.430" endtime="20210730 15:36:54.430"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:54.431" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:54.431" endtime="20210730 15:36:54.431"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:54.431" endtime="20210730 15:36:54.432"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:54.432" endtime="20210730 15:36:54.432"/>
</kw>
<status status="PASS" starttime="20210730 15:36:54.430" endtime="20210730 15:36:54.432"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:54.432" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:54.432" endtime="20210730 15:36:54.432"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:54.432" endtime="20210730 15:36:54.433"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:54.433" endtime="20210730 15:36:54.434"/>
</kw>
<status status="PASS" starttime="20210730 15:36:54.432" endtime="20210730 15:36:54.434"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:54.434" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:54.434" endtime="20210730 15:36:54.434"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:54.434" endtime="20210730 15:36:54.435"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:54.435" endtime="20210730 15:36:54.435"/>
</kw>
<status status="PASS" starttime="20210730 15:36:54.434" endtime="20210730 15:36:54.435"/>
</iter>
<status status="PASS" starttime="20210730 15:36:54.430" endtime="20210730 15:36:54.435"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:36:54.436" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:36:54.435" endtime="20210730 15:36:54.436"/>
</kw>
<status status="PASS" starttime="20210730 15:36:54.429" endtime="20210730 15:36:54.436"/>
</kw>
<status status="PASS" starttime="20210730 15:36:52.864" endtime="20210730 15:36:54.436"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:54.437" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:36:54.437" endtime="20210730 15:36:54.437"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:54.438" level="INFO">${payload} = {'password': 'abcd!?.'}</msg>
<status status="PASS" starttime="20210730 15:36:54.437" endtime="20210730 15:36:54.438"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:54.449" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:54.449" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:54.438" endtime="20210730 15:36:54.449"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:54.449" endtime="20210730 15:36:54.449"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:54.450" endtime="20210730 15:36:54.450"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:54.438" endtime="20210730 15:36:54.450"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:54.438" endtime="20210730 15:36:54.450"/>
</for>
<status status="FAIL" starttime="20210730 15:36:54.436" endtime="20210730 15:36:54.450"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:54.436" endtime="20210730 15:36:54.450"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:54.451" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:36:54.451" endtime="20210730 15:36:54.451"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:54.451" level="INFO">${payload} = {'password': 'abcd!?.'}</msg>
<status status="PASS" starttime="20210730 15:36:54.451" endtime="20210730 15:36:54.451"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:54.456" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:54.457" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:54.452" endtime="20210730 15:36:54.457"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:54.457" endtime="20210730 15:36:54.457"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:54.457" endtime="20210730 15:36:54.457"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:54.452" endtime="20210730 15:36:54.457"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:54.452" endtime="20210730 15:36:54.457"/>
</for>
<status status="FAIL" starttime="20210730 15:36:54.450" endtime="20210730 15:36:54.457"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:54.450" endtime="20210730 15:36:54.457"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:54.458" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:36:54.458" endtime="20210730 15:36:54.458"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:54.459" level="INFO">${payload} = {'password': 'abcd!?.'}</msg>
<status status="PASS" starttime="20210730 15:36:54.459" endtime="20210730 15:36:54.459"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:54.464" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:54.464" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:54.459" endtime="20210730 15:36:54.464"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:54.464" endtime="20210730 15:36:54.464"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:54.464" endtime="20210730 15:36:54.464"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:54.459" endtime="20210730 15:36:54.465"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:54.459" endtime="20210730 15:36:54.466"/>
</for>
<status status="FAIL" starttime="20210730 15:36:54.458" endtime="20210730 15:36:54.467"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:54.457" endtime="20210730 15:36:54.467"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:54.436" endtime="20210730 15:36:54.467"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:54.478" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:54.489" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:54.489" level="INFO">${pids} = 8153
8162
8166</msg>
<status status="PASS" starttime="20210730 15:36:54.473" endtime="20210730 15:36:54.489"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:54.491" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:54.490" endtime="20210730 15:36:54.491"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:54.491" level="INFO">${pids} = ['8153', '8162', '8166']</msg>
<status status="PASS" starttime="20210730 15:36:54.491" endtime="20210730 15:36:54.491"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8153</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:54.498" level="INFO">Running command 'kill 8153 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:54.492" endtime="20210730 15:36:54.499"/>
</kw>
<status status="PASS" starttime="20210730 15:36:54.492" endtime="20210730 15:36:54.499"/>
</iter>
<iter>
<var name="${pid}">8162</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:54.507" level="INFO">Running command 'kill 8162 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:54.499" endtime="20210730 15:36:54.508"/>
</kw>
<status status="PASS" starttime="20210730 15:36:54.499" endtime="20210730 15:36:54.508"/>
</iter>
<iter>
<var name="${pid}">8166</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:54.513" level="INFO">Running command 'kill 8166 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:54.508" endtime="20210730 15:36:54.513"/>
</kw>
<status status="PASS" starttime="20210730 15:36:54.508" endtime="20210730 15:36:54.513"/>
</iter>
<status status="PASS" starttime="20210730 15:36:54.491" endtime="20210730 15:36:54.513"/>
</for>
<status status="PASS" starttime="20210730 15:36:54.491" endtime="20210730 15:36:54.514"/>
</branch>
<status status="PASS" starttime="20210730 15:36:54.491" endtime="20210730 15:36:54.514"/>
</if>
<status status="PASS" starttime="20210730 15:36:54.467" endtime="20210730 15:36:54.514"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcd!?.'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:36:52.863" endtime="20210730 15:36:54.514">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t64" name="With Each Valid Token, Updating Password Of Each System User With abcd!?.! Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:54.519" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:54.531" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:54.531" level="INFO">${pids} = 8197</msg>
<status status="PASS" starttime="20210730 15:36:54.516" endtime="20210730 15:36:54.531"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:54.532" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:54.532" endtime="20210730 15:36:54.532"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:54.533" level="INFO">${pids} = ['8197']</msg>
<status status="PASS" starttime="20210730 15:36:54.533" endtime="20210730 15:36:54.533"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8197</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:54.536" level="INFO">Running command 'kill 8197 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:54.533" endtime="20210730 15:36:54.537"/>
</kw>
<status status="PASS" starttime="20210730 15:36:54.533" endtime="20210730 15:36:54.537"/>
</iter>
<status status="PASS" starttime="20210730 15:36:54.533" endtime="20210730 15:36:54.537"/>
</for>
<status status="PASS" starttime="20210730 15:36:54.533" endtime="20210730 15:36:54.537"/>
</branch>
<status status="PASS" starttime="20210730 15:36:54.532" endtime="20210730 15:36:54.537"/>
</if>
<status status="PASS" starttime="20210730 15:36:54.516" endtime="20210730 15:36:54.537"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:54.538" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:54.538" endtime="20210730 15:36:54.538"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:54.539" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:54.539" endtime="20210730 15:36:54.539"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:54.539" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:54.539" endtime="20210730 15:36:54.539"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:54.540" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:54.539" endtime="20210730 15:36:54.540"/>
</kw>
<msg timestamp="20210730 15:36:54.540" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:54.538" endtime="20210730 15:36:54.540"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:54.544" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:54.540" endtime="20210730 15:36:54.547"/>
</kw>
<status status="PASS" starttime="20210730 15:36:54.537" endtime="20210730 15:36:54.547"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:36:54.548" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:36:54.548" endtime="20210730 15:36:54.562"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:36:56.073" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:36:54.562" endtime="20210730 15:36:56.073"/>
</kw>
<status status="PASS" starttime="20210730 15:36:54.547" endtime="20210730 15:36:56.074"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:56.075" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:56.075" endtime="20210730 15:36:56.075"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:56.075" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:56.075" endtime="20210730 15:36:56.075"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:56.076" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:56.076" endtime="20210730 15:36:56.076"/>
</kw>
<msg timestamp="20210730 15:36:56.077" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:56.074" endtime="20210730 15:36:56.077"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:36:56.078" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:36:56.077" endtime="20210730 15:36:56.078"/>
</kw>
<status status="PASS" starttime="20210730 15:36:56.074" endtime="20210730 15:36:56.079"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:36:56.079" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:36:56.079" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:36:56.079" endtime="20210730 15:36:56.079"/>
</kw>
<status status="PASS" starttime="20210730 15:36:56.079" endtime="20210730 15:36:56.080"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:36:56.080" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:36:56.080" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:36:56.080" endtime="20210730 15:36:56.080"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:36:56.081" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:36:56.081" endtime="20210730 15:36:56.081"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:56.081" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:56.081" endtime="20210730 15:36:56.081"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:56.081" endtime="20210730 15:36:56.082"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:56.082" endtime="20210730 15:36:56.082"/>
</kw>
<status status="PASS" starttime="20210730 15:36:56.081" endtime="20210730 15:36:56.082"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:56.083" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:56.083" endtime="20210730 15:36:56.083"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:56.083" endtime="20210730 15:36:56.084"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:56.084" endtime="20210730 15:36:56.084"/>
</kw>
<status status="PASS" starttime="20210730 15:36:56.083" endtime="20210730 15:36:56.084"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:56.084" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:56.084" endtime="20210730 15:36:56.084"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:56.085" endtime="20210730 15:36:56.085"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:56.085" endtime="20210730 15:36:56.086"/>
</kw>
<status status="PASS" starttime="20210730 15:36:56.084" endtime="20210730 15:36:56.086"/>
</iter>
<status status="PASS" starttime="20210730 15:36:56.081" endtime="20210730 15:36:56.086"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:36:56.086" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:36:56.086" endtime="20210730 15:36:56.086"/>
</kw>
<status status="PASS" starttime="20210730 15:36:56.080" endtime="20210730 15:36:56.086"/>
</kw>
<status status="PASS" starttime="20210730 15:36:54.515" endtime="20210730 15:36:56.086"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd!?.!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:56.088" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:36:56.087" endtime="20210730 15:36:56.088"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:56.088" level="INFO">${payload} = {'password': 'abcd!?.!'}</msg>
<status status="PASS" starttime="20210730 15:36:56.088" endtime="20210730 15:36:56.088"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:56.099" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:56.099" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:56.088" endtime="20210730 15:36:56.100"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:56.100" endtime="20210730 15:36:56.100"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:56.100" endtime="20210730 15:36:56.100"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:56.088" endtime="20210730 15:36:56.100"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:56.088" endtime="20210730 15:36:56.100"/>
</for>
<status status="FAIL" starttime="20210730 15:36:56.087" endtime="20210730 15:36:56.100"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:56.087" endtime="20210730 15:36:56.100"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd!?.!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:56.101" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:36:56.101" endtime="20210730 15:36:56.101"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:56.102" level="INFO">${payload} = {'password': 'abcd!?.!'}</msg>
<status status="PASS" starttime="20210730 15:36:56.101" endtime="20210730 15:36:56.102"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:56.106" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:56.106" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:56.102" endtime="20210730 15:36:56.106"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:56.106" endtime="20210730 15:36:56.106"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:56.106" endtime="20210730 15:36:56.106"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:56.102" endtime="20210730 15:36:56.106"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:56.102" endtime="20210730 15:36:56.106"/>
</for>
<status status="FAIL" starttime="20210730 15:36:56.100" endtime="20210730 15:36:56.107"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:56.100" endtime="20210730 15:36:56.107"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd!?.!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:56.108" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:36:56.107" endtime="20210730 15:36:56.108"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:56.108" level="INFO">${payload} = {'password': 'abcd!?.!'}</msg>
<status status="PASS" starttime="20210730 15:36:56.108" endtime="20210730 15:36:56.108"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:56.113" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:56.113" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:56.108" endtime="20210730 15:36:56.113"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:56.114" endtime="20210730 15:36:56.114"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:56.114" endtime="20210730 15:36:56.114"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:56.108" endtime="20210730 15:36:56.114"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:56.108" endtime="20210730 15:36:56.114"/>
</for>
<status status="FAIL" starttime="20210730 15:36:56.107" endtime="20210730 15:36:56.114"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:56.107" endtime="20210730 15:36:56.114"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:56.087" endtime="20210730 15:36:56.114"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:56.121" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:56.131" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:56.131" level="INFO">${pids} = 8227
8234
8238</msg>
<status status="PASS" starttime="20210730 15:36:56.115" endtime="20210730 15:36:56.131"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:56.132" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:56.132" endtime="20210730 15:36:56.132"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:56.133" level="INFO">${pids} = ['8227', '8234', '8238']</msg>
<status status="PASS" starttime="20210730 15:36:56.133" endtime="20210730 15:36:56.133"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8227</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:56.137" level="INFO">Running command 'kill 8227 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:56.133" endtime="20210730 15:36:56.137"/>
</kw>
<status status="PASS" starttime="20210730 15:36:56.133" endtime="20210730 15:36:56.138"/>
</iter>
<iter>
<var name="${pid}">8234</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:56.141" level="INFO">Running command 'kill 8234 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:56.138" endtime="20210730 15:36:56.141"/>
</kw>
<status status="PASS" starttime="20210730 15:36:56.138" endtime="20210730 15:36:56.141"/>
</iter>
<iter>
<var name="${pid}">8238</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:56.150" level="INFO">Running command 'kill 8238 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:56.141" endtime="20210730 15:36:56.150"/>
</kw>
<status status="PASS" starttime="20210730 15:36:56.141" endtime="20210730 15:36:56.153"/>
</iter>
<status status="PASS" starttime="20210730 15:36:56.133" endtime="20210730 15:36:56.153"/>
</for>
<status status="PASS" starttime="20210730 15:36:56.133" endtime="20210730 15:36:56.153"/>
</branch>
<status status="PASS" starttime="20210730 15:36:56.133" endtime="20210730 15:36:56.153"/>
</if>
<status status="PASS" starttime="20210730 15:36:56.114" endtime="20210730 15:36:56.154"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcd!?.!'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:36:54.515" endtime="20210730 15:36:56.154">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t65" name="With Each Valid Token, Updating Password Of Each System User With abcd!?.!abcd!?.!abcd?? Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:56.161" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:56.171" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:56.171" level="INFO">${pids} = 8269</msg>
<status status="PASS" starttime="20210730 15:36:56.158" endtime="20210730 15:36:56.171"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:56.172" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:56.171" endtime="20210730 15:36:56.172"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:56.172" level="INFO">${pids} = ['8269']</msg>
<status status="PASS" starttime="20210730 15:36:56.172" endtime="20210730 15:36:56.173"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8269</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:56.179" level="INFO">Running command 'kill 8269 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:56.173" endtime="20210730 15:36:56.180"/>
</kw>
<status status="PASS" starttime="20210730 15:36:56.173" endtime="20210730 15:36:56.180"/>
</iter>
<status status="PASS" starttime="20210730 15:36:56.173" endtime="20210730 15:36:56.180"/>
</for>
<status status="PASS" starttime="20210730 15:36:56.172" endtime="20210730 15:36:56.180"/>
</branch>
<status status="PASS" starttime="20210730 15:36:56.172" endtime="20210730 15:36:56.180"/>
</if>
<status status="PASS" starttime="20210730 15:36:56.157" endtime="20210730 15:36:56.181"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:56.182" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:56.181" endtime="20210730 15:36:56.182"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:56.182" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:56.182" endtime="20210730 15:36:56.182"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:56.183" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:56.183" endtime="20210730 15:36:56.183"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:56.183" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:56.183" endtime="20210730 15:36:56.183"/>
</kw>
<msg timestamp="20210730 15:36:56.184" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:56.182" endtime="20210730 15:36:56.184"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:56.188" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:56.184" endtime="20210730 15:36:56.189"/>
</kw>
<status status="PASS" starttime="20210730 15:36:56.181" endtime="20210730 15:36:56.189"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:36:56.191" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:36:56.190" endtime="20210730 15:36:56.195"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:36:57.697" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:36:56.196" endtime="20210730 15:36:57.697"/>
</kw>
<status status="PASS" starttime="20210730 15:36:56.190" endtime="20210730 15:36:57.697"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:57.699" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:57.699" endtime="20210730 15:36:57.699"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:57.699" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:57.699" endtime="20210730 15:36:57.700"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:57.700" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:57.700" endtime="20210730 15:36:57.700"/>
</kw>
<msg timestamp="20210730 15:36:57.700" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:57.698" endtime="20210730 15:36:57.701"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:36:57.701" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:36:57.701" endtime="20210730 15:36:57.702"/>
</kw>
<status status="PASS" starttime="20210730 15:36:57.698" endtime="20210730 15:36:57.702"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:36:57.703" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:36:57.703" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:36:57.703" endtime="20210730 15:36:57.703"/>
</kw>
<status status="PASS" starttime="20210730 15:36:57.702" endtime="20210730 15:36:57.703"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:36:57.704" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:36:57.705" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:36:57.704" endtime="20210730 15:36:57.705"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:36:57.705" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:36:57.705" endtime="20210730 15:36:57.705"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:57.706" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:57.706" endtime="20210730 15:36:57.706"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:57.707" endtime="20210730 15:36:57.708"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:57.708" endtime="20210730 15:36:57.708"/>
</kw>
<status status="PASS" starttime="20210730 15:36:57.706" endtime="20210730 15:36:57.708"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:57.709" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:57.709" endtime="20210730 15:36:57.709"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:57.709" endtime="20210730 15:36:57.711"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:57.711" endtime="20210730 15:36:57.712"/>
</kw>
<status status="PASS" starttime="20210730 15:36:57.709" endtime="20210730 15:36:57.712"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:57.713" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:57.712" endtime="20210730 15:36:57.713"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:57.713" endtime="20210730 15:36:57.714"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:57.714" endtime="20210730 15:36:57.715"/>
</kw>
<status status="PASS" starttime="20210730 15:36:57.712" endtime="20210730 15:36:57.715"/>
</iter>
<status status="PASS" starttime="20210730 15:36:57.705" endtime="20210730 15:36:57.715"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:36:57.716" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:36:57.715" endtime="20210730 15:36:57.716"/>
</kw>
<status status="PASS" starttime="20210730 15:36:57.703" endtime="20210730 15:36:57.716"/>
</kw>
<status status="PASS" starttime="20210730 15:36:56.156" endtime="20210730 15:36:57.716"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd!?.!abcd!?.!abcd??</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:57.717" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:36:57.717" endtime="20210730 15:36:57.717"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:57.719" level="INFO">${payload} = {'password': 'abcd!?.!abcd!?.!abcd??'}</msg>
<status status="PASS" starttime="20210730 15:36:57.719" endtime="20210730 15:36:57.719"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:57.732" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:57.732" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:57.720" endtime="20210730 15:36:57.732"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:57.732" endtime="20210730 15:36:57.732"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:57.732" endtime="20210730 15:36:57.732"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:57.719" endtime="20210730 15:36:57.732"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:57.719" endtime="20210730 15:36:57.732"/>
</for>
<status status="FAIL" starttime="20210730 15:36:57.716" endtime="20210730 15:36:57.733"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:57.716" endtime="20210730 15:36:57.733"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd!?.!abcd!?.!abcd??</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:57.734" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:36:57.733" endtime="20210730 15:36:57.734"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:57.734" level="INFO">${payload} = {'password': 'abcd!?.!abcd!?.!abcd??'}</msg>
<status status="PASS" starttime="20210730 15:36:57.734" endtime="20210730 15:36:57.734"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:57.738" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:57.738" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:57.734" endtime="20210730 15:36:57.738"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:57.739" endtime="20210730 15:36:57.739"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:57.739" endtime="20210730 15:36:57.739"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:57.734" endtime="20210730 15:36:57.739"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:57.734" endtime="20210730 15:36:57.739"/>
</for>
<status status="FAIL" starttime="20210730 15:36:57.733" endtime="20210730 15:36:57.739"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:57.733" endtime="20210730 15:36:57.739"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd!?.!abcd!?.!abcd??</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:57.740" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:36:57.740" endtime="20210730 15:36:57.740"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:57.740" level="INFO">${payload} = {'password': 'abcd!?.!abcd!?.!abcd??'}</msg>
<status status="PASS" starttime="20210730 15:36:57.740" endtime="20210730 15:36:57.740"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:57.754" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:57.755" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:57.741" endtime="20210730 15:36:57.755"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:57.755" endtime="20210730 15:36:57.755"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:57.755" endtime="20210730 15:36:57.755"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:57.740" endtime="20210730 15:36:57.755"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:57.740" endtime="20210730 15:36:57.755"/>
</for>
<status status="FAIL" starttime="20210730 15:36:57.739" endtime="20210730 15:36:57.755"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:57.739" endtime="20210730 15:36:57.755"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:57.716" endtime="20210730 15:36:57.755"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:57.760" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:57.770" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:57.770" level="INFO">${pids} = 8296
8304
8310</msg>
<status status="PASS" starttime="20210730 15:36:57.756" endtime="20210730 15:36:57.770"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:57.771" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:57.770" endtime="20210730 15:36:57.771"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:57.771" level="INFO">${pids} = ['8296', '8304', '8310']</msg>
<status status="PASS" starttime="20210730 15:36:57.771" endtime="20210730 15:36:57.772"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8296</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:57.776" level="INFO">Running command 'kill 8296 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:57.772" endtime="20210730 15:36:57.776"/>
</kw>
<status status="PASS" starttime="20210730 15:36:57.772" endtime="20210730 15:36:57.777"/>
</iter>
<iter>
<var name="${pid}">8304</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:57.786" level="INFO">Running command 'kill 8304 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:57.778" endtime="20210730 15:36:57.787"/>
</kw>
<status status="PASS" starttime="20210730 15:36:57.777" endtime="20210730 15:36:57.787"/>
</iter>
<iter>
<var name="${pid}">8310</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:57.792" level="INFO">Running command 'kill 8310 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:57.787" endtime="20210730 15:36:57.792"/>
</kw>
<status status="PASS" starttime="20210730 15:36:57.787" endtime="20210730 15:36:57.792"/>
</iter>
<status status="PASS" starttime="20210730 15:36:57.772" endtime="20210730 15:36:57.792"/>
</for>
<status status="PASS" starttime="20210730 15:36:57.771" endtime="20210730 15:36:57.792"/>
</branch>
<status status="PASS" starttime="20210730 15:36:57.771" endtime="20210730 15:36:57.792"/>
</if>
<status status="PASS" starttime="20210730 15:36:57.756" endtime="20210730 15:36:57.793"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcd!?.!abcd!?.!abcd??'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:36:56.155" endtime="20210730 15:36:57.793">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t66" name="With Each Valid Token, Updating Password Of Each System User With ABCD012 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:57.799" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:57.809" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:57.809" level="INFO">${pids} = 8339</msg>
<status status="PASS" starttime="20210730 15:36:57.796" endtime="20210730 15:36:57.809"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:57.811" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:57.809" endtime="20210730 15:36:57.811"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:57.813" level="INFO">${pids} = ['8339']</msg>
<status status="PASS" starttime="20210730 15:36:57.812" endtime="20210730 15:36:57.813"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8339</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:57.817" level="INFO">Running command 'kill 8339 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:57.814" endtime="20210730 15:36:57.817"/>
</kw>
<status status="PASS" starttime="20210730 15:36:57.813" endtime="20210730 15:36:57.818"/>
</iter>
<status status="PASS" starttime="20210730 15:36:57.813" endtime="20210730 15:36:57.818"/>
</for>
<status status="PASS" starttime="20210730 15:36:57.812" endtime="20210730 15:36:57.818"/>
</branch>
<status status="PASS" starttime="20210730 15:36:57.811" endtime="20210730 15:36:57.818"/>
</if>
<status status="PASS" starttime="20210730 15:36:57.795" endtime="20210730 15:36:57.818"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:57.819" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:57.819" endtime="20210730 15:36:57.819"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:57.820" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:57.819" endtime="20210730 15:36:57.820"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:57.820" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:57.820" endtime="20210730 15:36:57.820"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:57.821" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:57.820" endtime="20210730 15:36:57.821"/>
</kw>
<msg timestamp="20210730 15:36:57.821" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:57.819" endtime="20210730 15:36:57.821"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:57.835" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:57.821" endtime="20210730 15:36:57.837"/>
</kw>
<status status="PASS" starttime="20210730 15:36:57.818" endtime="20210730 15:36:57.838"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:36:57.839" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:36:57.839" endtime="20210730 15:36:57.845"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:36:59.346" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:36:57.845" endtime="20210730 15:36:59.347"/>
</kw>
<status status="PASS" starttime="20210730 15:36:57.838" endtime="20210730 15:36:59.347"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:59.348" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:59.348" endtime="20210730 15:36:59.348"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:59.349" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:59.348" endtime="20210730 15:36:59.349"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:59.349" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:59.349" endtime="20210730 15:36:59.349"/>
</kw>
<msg timestamp="20210730 15:36:59.349" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:59.348" endtime="20210730 15:36:59.349"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:36:59.350" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:36:59.349" endtime="20210730 15:36:59.350"/>
</kw>
<status status="PASS" starttime="20210730 15:36:59.347" endtime="20210730 15:36:59.350"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:36:59.351" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:36:59.351" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:36:59.351" endtime="20210730 15:36:59.351"/>
</kw>
<status status="PASS" starttime="20210730 15:36:59.350" endtime="20210730 15:36:59.351"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:36:59.352" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:36:59.352" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:36:59.351" endtime="20210730 15:36:59.352"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:36:59.352" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:36:59.352" endtime="20210730 15:36:59.352"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:59.353" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:59.353" endtime="20210730 15:36:59.353"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:59.353" endtime="20210730 15:36:59.354"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:59.354" endtime="20210730 15:36:59.354"/>
</kw>
<status status="PASS" starttime="20210730 15:36:59.353" endtime="20210730 15:36:59.354"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:59.354" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:59.354" endtime="20210730 15:36:59.354"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:59.355" endtime="20210730 15:36:59.355"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:59.355" endtime="20210730 15:36:59.356"/>
</kw>
<status status="PASS" starttime="20210730 15:36:59.354" endtime="20210730 15:36:59.356"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:59.356" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:36:59.356" endtime="20210730 15:36:59.356"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:36:59.356" endtime="20210730 15:36:59.357"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:36:59.357" endtime="20210730 15:36:59.357"/>
</kw>
<status status="PASS" starttime="20210730 15:36:59.356" endtime="20210730 15:36:59.357"/>
</iter>
<status status="PASS" starttime="20210730 15:36:59.352" endtime="20210730 15:36:59.357"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:36:59.358" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:36:59.357" endtime="20210730 15:36:59.358"/>
</kw>
<status status="PASS" starttime="20210730 15:36:59.351" endtime="20210730 15:36:59.358"/>
</kw>
<status status="PASS" starttime="20210730 15:36:57.795" endtime="20210730 15:36:59.358"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD012</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:59.359" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:36:59.359" endtime="20210730 15:36:59.359"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:59.360" level="INFO">${payload} = {'password': 'ABCD012'}</msg>
<status status="PASS" starttime="20210730 15:36:59.360" endtime="20210730 15:36:59.360"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:59.370" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:59.370" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:59.360" endtime="20210730 15:36:59.370"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:59.370" endtime="20210730 15:36:59.370"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:59.370" endtime="20210730 15:36:59.370"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:59.360" endtime="20210730 15:36:59.370"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:59.360" endtime="20210730 15:36:59.370"/>
</for>
<status status="FAIL" starttime="20210730 15:36:59.359" endtime="20210730 15:36:59.371"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:59.358" endtime="20210730 15:36:59.371"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD012</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:59.372" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:36:59.371" endtime="20210730 15:36:59.372"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:59.372" level="INFO">${payload} = {'password': 'ABCD012'}</msg>
<status status="PASS" starttime="20210730 15:36:59.372" endtime="20210730 15:36:59.372"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:59.377" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:59.377" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:59.372" endtime="20210730 15:36:59.377"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:59.377" endtime="20210730 15:36:59.378"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:59.378" endtime="20210730 15:36:59.378"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:59.372" endtime="20210730 15:36:59.378"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:59.372" endtime="20210730 15:36:59.378"/>
</for>
<status status="FAIL" starttime="20210730 15:36:59.371" endtime="20210730 15:36:59.378"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:59.371" endtime="20210730 15:36:59.378"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD012</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:59.379" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:36:59.379" endtime="20210730 15:36:59.379"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:36:59.380" level="INFO">${payload} = {'password': 'ABCD012'}</msg>
<status status="PASS" starttime="20210730 15:36:59.379" endtime="20210730 15:36:59.380"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:36:59.384" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:36:59.385" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:36:59.380" endtime="20210730 15:36:59.385"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:36:59.385" endtime="20210730 15:36:59.385"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:36:59.385" endtime="20210730 15:36:59.385"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:59.380" endtime="20210730 15:36:59.385"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:59.380" endtime="20210730 15:36:59.385"/>
</for>
<status status="FAIL" starttime="20210730 15:36:59.378" endtime="20210730 15:36:59.385"/>
</kw>
<status status="FAIL" starttime="20210730 15:36:59.378" endtime="20210730 15:36:59.386"/>
</iter>
<status status="FAIL" starttime="20210730 15:36:59.358" endtime="20210730 15:36:59.386"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:59.398" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:59.409" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:59.410" level="INFO">${pids} = 8362
8369
8373</msg>
<status status="PASS" starttime="20210730 15:36:59.388" endtime="20210730 15:36:59.410"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:59.411" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:59.410" endtime="20210730 15:36:59.411"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:59.412" level="INFO">${pids} = ['8362', '8369', '8373']</msg>
<status status="PASS" starttime="20210730 15:36:59.412" endtime="20210730 15:36:59.412"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8362</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:59.417" level="INFO">Running command 'kill 8362 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:59.413" endtime="20210730 15:36:59.418"/>
</kw>
<status status="PASS" starttime="20210730 15:36:59.413" endtime="20210730 15:36:59.418"/>
</iter>
<iter>
<var name="${pid}">8369</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:59.427" level="INFO">Running command 'kill 8369 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:59.419" endtime="20210730 15:36:59.428"/>
</kw>
<status status="PASS" starttime="20210730 15:36:59.418" endtime="20210730 15:36:59.428"/>
</iter>
<iter>
<var name="${pid}">8373</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:59.437" level="INFO">Running command 'kill 8373 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:59.429" endtime="20210730 15:36:59.438"/>
</kw>
<status status="PASS" starttime="20210730 15:36:59.428" endtime="20210730 15:36:59.438"/>
</iter>
<status status="PASS" starttime="20210730 15:36:59.412" endtime="20210730 15:36:59.438"/>
</for>
<status status="PASS" starttime="20210730 15:36:59.412" endtime="20210730 15:36:59.438"/>
</branch>
<status status="PASS" starttime="20210730 15:36:59.411" endtime="20210730 15:36:59.438"/>
</if>
<status status="PASS" starttime="20210730 15:36:59.386" endtime="20210730 15:36:59.439"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABCD012'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:36:57.794" endtime="20210730 15:36:59.439">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t67" name="With Each Valid Token, Updating Password Of Each System User With ABCD0123 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:36:59.445" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:36:59.458" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:36:59.458" level="INFO">${pids} = 8402</msg>
<status status="PASS" starttime="20210730 15:36:59.441" endtime="20210730 15:36:59.458"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:59.459" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:36:59.459" endtime="20210730 15:36:59.459"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:36:59.461" level="INFO">${pids} = ['8402']</msg>
<status status="PASS" starttime="20210730 15:36:59.460" endtime="20210730 15:36:59.461"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8402</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:59.465" level="INFO">Running command 'kill 8402 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:59.461" endtime="20210730 15:36:59.465"/>
</kw>
<status status="PASS" starttime="20210730 15:36:59.461" endtime="20210730 15:36:59.465"/>
</iter>
<status status="PASS" starttime="20210730 15:36:59.461" endtime="20210730 15:36:59.465"/>
</for>
<status status="PASS" starttime="20210730 15:36:59.460" endtime="20210730 15:36:59.466"/>
</branch>
<status status="PASS" starttime="20210730 15:36:59.460" endtime="20210730 15:36:59.466"/>
</if>
<status status="PASS" starttime="20210730 15:36:59.441" endtime="20210730 15:36:59.466"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:59.469" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:59.468" endtime="20210730 15:36:59.469"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:59.470" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:36:59.469" endtime="20210730 15:36:59.470"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:36:59.478" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:36:59.470" endtime="20210730 15:36:59.478"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:36:59.479" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:59.478" endtime="20210730 15:36:59.479"/>
</kw>
<msg timestamp="20210730 15:36:59.479" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:36:59.469" endtime="20210730 15:36:59.479"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:36:59.485" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:36:59.479" endtime="20210730 15:36:59.487"/>
</kw>
<status status="PASS" starttime="20210730 15:36:59.466" endtime="20210730 15:36:59.488"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:36:59.489" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:36:59.489" endtime="20210730 15:36:59.494"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:37:00.997" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:36:59.494" endtime="20210730 15:37:00.997"/>
</kw>
<status status="PASS" starttime="20210730 15:36:59.488" endtime="20210730 15:37:00.998"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:00.999" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:00.999" endtime="20210730 15:37:00.999"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:00.999" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:00.999" endtime="20210730 15:37:00.999"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:01.000" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:00.999" endtime="20210730 15:37:01.000"/>
</kw>
<msg timestamp="20210730 15:37:01.000" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:00.998" endtime="20210730 15:37:01.000"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:37:01.000" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:37:01.000" endtime="20210730 15:37:01.001"/>
</kw>
<status status="PASS" starttime="20210730 15:37:00.998" endtime="20210730 15:37:01.001"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:37:01.001" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:37:01.001" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:37:01.001" endtime="20210730 15:37:01.002"/>
</kw>
<status status="PASS" starttime="20210730 15:37:01.001" endtime="20210730 15:37:01.002"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:37:01.003" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:37:01.003" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:37:01.002" endtime="20210730 15:37:01.003"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:37:01.003" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:37:01.003" endtime="20210730 15:37:01.003"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:01.004" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:01.003" endtime="20210730 15:37:01.004"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:01.004" endtime="20210730 15:37:01.004"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:01.005" endtime="20210730 15:37:01.005"/>
</kw>
<status status="PASS" starttime="20210730 15:37:01.003" endtime="20210730 15:37:01.005"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:01.005" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:01.005" endtime="20210730 15:37:01.005"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:01.005" endtime="20210730 15:37:01.006"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:01.006" endtime="20210730 15:37:01.006"/>
</kw>
<status status="PASS" starttime="20210730 15:37:01.005" endtime="20210730 15:37:01.006"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:01.007" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:01.007" endtime="20210730 15:37:01.007"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:01.007" endtime="20210730 15:37:01.008"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:01.008" endtime="20210730 15:37:01.008"/>
</kw>
<status status="PASS" starttime="20210730 15:37:01.007" endtime="20210730 15:37:01.008"/>
</iter>
<status status="PASS" starttime="20210730 15:37:01.003" endtime="20210730 15:37:01.008"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:37:01.008" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:37:01.008" endtime="20210730 15:37:01.009"/>
</kw>
<status status="PASS" starttime="20210730 15:37:01.002" endtime="20210730 15:37:01.009"/>
</kw>
<status status="PASS" starttime="20210730 15:36:59.440" endtime="20210730 15:37:01.009"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD0123</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:01.011" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:37:01.010" endtime="20210730 15:37:01.011"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:01.011" level="INFO">${payload} = {'password': 'ABCD0123'}</msg>
<status status="PASS" starttime="20210730 15:37:01.011" endtime="20210730 15:37:01.011"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:01.021" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:01.022" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:01.012" endtime="20210730 15:37:01.022"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:01.022" endtime="20210730 15:37:01.022"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:01.022" endtime="20210730 15:37:01.022"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:01.012" endtime="20210730 15:37:01.022"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:01.012" endtime="20210730 15:37:01.022"/>
</for>
<status status="FAIL" starttime="20210730 15:37:01.009" endtime="20210730 15:37:01.022"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:01.009" endtime="20210730 15:37:01.023"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD0123</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:01.024" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:37:01.023" endtime="20210730 15:37:01.024"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:01.024" level="INFO">${payload} = {'password': 'ABCD0123'}</msg>
<status status="PASS" starttime="20210730 15:37:01.024" endtime="20210730 15:37:01.024"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:01.028" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:01.028" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:01.024" endtime="20210730 15:37:01.029"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:01.029" endtime="20210730 15:37:01.029"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:01.029" endtime="20210730 15:37:01.029"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:01.024" endtime="20210730 15:37:01.029"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:01.024" endtime="20210730 15:37:01.029"/>
</for>
<status status="FAIL" starttime="20210730 15:37:01.023" endtime="20210730 15:37:01.029"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:01.023" endtime="20210730 15:37:01.029"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD0123</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:01.030" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:37:01.030" endtime="20210730 15:37:01.030"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:01.031" level="INFO">${payload} = {'password': 'ABCD0123'}</msg>
<status status="PASS" starttime="20210730 15:37:01.030" endtime="20210730 15:37:01.031"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:01.034" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:01.035" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:01.031" endtime="20210730 15:37:01.035"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:01.035" endtime="20210730 15:37:01.035"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:01.035" endtime="20210730 15:37:01.035"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:01.031" endtime="20210730 15:37:01.035"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:01.031" endtime="20210730 15:37:01.035"/>
</for>
<status status="FAIL" starttime="20210730 15:37:01.029" endtime="20210730 15:37:01.035"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:01.029" endtime="20210730 15:37:01.035"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:01.009" endtime="20210730 15:37:01.035"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:01.048" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:01.059" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:01.059" level="INFO">${pids} = 8425
8432
8436</msg>
<status status="PASS" starttime="20210730 15:37:01.036" endtime="20210730 15:37:01.059"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:01.060" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:01.059" endtime="20210730 15:37:01.060"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:01.061" level="INFO">${pids} = ['8425', '8432', '8436']</msg>
<status status="PASS" starttime="20210730 15:37:01.060" endtime="20210730 15:37:01.061"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8425</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:01.064" level="INFO">Running command 'kill 8425 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:01.061" endtime="20210730 15:37:01.065"/>
</kw>
<status status="PASS" starttime="20210730 15:37:01.061" endtime="20210730 15:37:01.065"/>
</iter>
<iter>
<var name="${pid}">8432</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:01.071" level="INFO">Running command 'kill 8432 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:01.067" endtime="20210730 15:37:01.071"/>
</kw>
<status status="PASS" starttime="20210730 15:37:01.065" endtime="20210730 15:37:01.071"/>
</iter>
<iter>
<var name="${pid}">8436</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:01.075" level="INFO">Running command 'kill 8436 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:01.072" endtime="20210730 15:37:01.075"/>
</kw>
<status status="PASS" starttime="20210730 15:37:01.071" endtime="20210730 15:37:01.075"/>
</iter>
<status status="PASS" starttime="20210730 15:37:01.061" endtime="20210730 15:37:01.076"/>
</for>
<status status="PASS" starttime="20210730 15:37:01.060" endtime="20210730 15:37:01.076"/>
</branch>
<status status="PASS" starttime="20210730 15:37:01.060" endtime="20210730 15:37:01.076"/>
</if>
<status status="PASS" starttime="20210730 15:37:01.036" endtime="20210730 15:37:01.076"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABCD0123'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:36:59.439" endtime="20210730 15:37:01.077">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t68" name="With Each Valid Token, Updating Password Of Each System User With ABCD0123ABCD0123ABCD01 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:01.082" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:01.098" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:01.098" level="INFO">${pids} = 8465</msg>
<status status="PASS" starttime="20210730 15:37:01.079" endtime="20210730 15:37:01.098"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:01.099" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:01.098" endtime="20210730 15:37:01.099"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:01.100" level="INFO">${pids} = ['8465']</msg>
<status status="PASS" starttime="20210730 15:37:01.099" endtime="20210730 15:37:01.100"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8465</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:01.104" level="INFO">Running command 'kill 8465 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:01.100" endtime="20210730 15:37:01.105"/>
</kw>
<status status="PASS" starttime="20210730 15:37:01.100" endtime="20210730 15:37:01.105"/>
</iter>
<status status="PASS" starttime="20210730 15:37:01.100" endtime="20210730 15:37:01.105"/>
</for>
<status status="PASS" starttime="20210730 15:37:01.099" endtime="20210730 15:37:01.105"/>
</branch>
<status status="PASS" starttime="20210730 15:37:01.099" endtime="20210730 15:37:01.105"/>
</if>
<status status="PASS" starttime="20210730 15:37:01.079" endtime="20210730 15:37:01.105"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:01.106" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:01.106" endtime="20210730 15:37:01.106"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:01.107" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:01.107" endtime="20210730 15:37:01.107"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:01.107" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:01.107" endtime="20210730 15:37:01.107"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:01.108" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:01.107" endtime="20210730 15:37:01.108"/>
</kw>
<msg timestamp="20210730 15:37:01.108" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:01.106" endtime="20210730 15:37:01.108"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:01.112" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:01.108" endtime="20210730 15:37:01.114"/>
</kw>
<status status="PASS" starttime="20210730 15:37:01.105" endtime="20210730 15:37:01.114"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:37:01.115" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:37:01.115" endtime="20210730 15:37:01.129"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:37:02.631" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:37:01.129" endtime="20210730 15:37:02.632"/>
</kw>
<status status="PASS" starttime="20210730 15:37:01.114" endtime="20210730 15:37:02.632"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:02.634" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:02.633" endtime="20210730 15:37:02.634"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:02.634" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:02.634" endtime="20210730 15:37:02.634"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:02.634" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:02.634" endtime="20210730 15:37:02.635"/>
</kw>
<msg timestamp="20210730 15:37:02.635" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:02.633" endtime="20210730 15:37:02.635"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:37:02.635" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:37:02.635" endtime="20210730 15:37:02.636"/>
</kw>
<status status="PASS" starttime="20210730 15:37:02.632" endtime="20210730 15:37:02.636"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:37:02.636" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:37:02.636" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:37:02.636" endtime="20210730 15:37:02.637"/>
</kw>
<status status="PASS" starttime="20210730 15:37:02.636" endtime="20210730 15:37:02.637"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:37:02.637" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:37:02.638" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:37:02.637" endtime="20210730 15:37:02.638"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:37:02.638" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:37:02.638" endtime="20210730 15:37:02.638"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:02.638" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:02.638" endtime="20210730 15:37:02.638"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:02.639" endtime="20210730 15:37:02.639"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:02.639" endtime="20210730 15:37:02.640"/>
</kw>
<status status="PASS" starttime="20210730 15:37:02.638" endtime="20210730 15:37:02.640"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:02.640" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:02.640" endtime="20210730 15:37:02.640"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:02.640" endtime="20210730 15:37:02.641"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:02.641" endtime="20210730 15:37:02.641"/>
</kw>
<status status="PASS" starttime="20210730 15:37:02.640" endtime="20210730 15:37:02.641"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:02.641" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:02.641" endtime="20210730 15:37:02.641"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:02.641" endtime="20210730 15:37:02.643"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:02.643" endtime="20210730 15:37:02.643"/>
</kw>
<status status="PASS" starttime="20210730 15:37:02.641" endtime="20210730 15:37:02.644"/>
</iter>
<status status="PASS" starttime="20210730 15:37:02.638" endtime="20210730 15:37:02.644"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:37:02.645" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:37:02.644" endtime="20210730 15:37:02.645"/>
</kw>
<status status="PASS" starttime="20210730 15:37:02.637" endtime="20210730 15:37:02.646"/>
</kw>
<status status="PASS" starttime="20210730 15:37:01.078" endtime="20210730 15:37:02.646"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD0123ABCD0123ABCD01</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:02.647" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:37:02.647" endtime="20210730 15:37:02.647"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:02.648" level="INFO">${payload} = {'password': 'ABCD0123ABCD0123ABCD01'}</msg>
<status status="PASS" starttime="20210730 15:37:02.647" endtime="20210730 15:37:02.648"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:02.657" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:02.658" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:02.648" endtime="20210730 15:37:02.658"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:02.658" endtime="20210730 15:37:02.658"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:02.658" endtime="20210730 15:37:02.658"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:02.648" endtime="20210730 15:37:02.658"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:02.648" endtime="20210730 15:37:02.658"/>
</for>
<status status="FAIL" starttime="20210730 15:37:02.646" endtime="20210730 15:37:02.658"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:02.646" endtime="20210730 15:37:02.658"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD0123ABCD0123ABCD01</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:02.659" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:37:02.659" endtime="20210730 15:37:02.660"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:02.660" level="INFO">${payload} = {'password': 'ABCD0123ABCD0123ABCD01'}</msg>
<status status="PASS" starttime="20210730 15:37:02.660" endtime="20210730 15:37:02.660"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:02.664" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:02.664" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:02.660" endtime="20210730 15:37:02.664"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:02.664" endtime="20210730 15:37:02.664"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:02.665" endtime="20210730 15:37:02.665"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:02.660" endtime="20210730 15:37:02.665"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:02.660" endtime="20210730 15:37:02.665"/>
</for>
<status status="FAIL" starttime="20210730 15:37:02.658" endtime="20210730 15:37:02.665"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:02.658" endtime="20210730 15:37:02.665"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD0123ABCD0123ABCD01</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:02.666" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:37:02.666" endtime="20210730 15:37:02.666"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:02.667" level="INFO">${payload} = {'password': 'ABCD0123ABCD0123ABCD01'}</msg>
<status status="PASS" starttime="20210730 15:37:02.666" endtime="20210730 15:37:02.667"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:02.671" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:02.671" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:02.667" endtime="20210730 15:37:02.671"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:02.671" endtime="20210730 15:37:02.671"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:02.671" endtime="20210730 15:37:02.671"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:02.667" endtime="20210730 15:37:02.671"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:02.667" endtime="20210730 15:37:02.671"/>
</for>
<status status="FAIL" starttime="20210730 15:37:02.665" endtime="20210730 15:37:02.671"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:02.665" endtime="20210730 15:37:02.671"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:02.646" endtime="20210730 15:37:02.671"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:02.680" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:02.694" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:02.694" level="INFO">${pids} = 8488
8495
8500</msg>
<status status="PASS" starttime="20210730 15:37:02.673" endtime="20210730 15:37:02.694"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:02.695" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:02.694" endtime="20210730 15:37:02.695"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:02.696" level="INFO">${pids} = ['8488', '8495', '8500']</msg>
<status status="PASS" starttime="20210730 15:37:02.695" endtime="20210730 15:37:02.696"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8488</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:02.699" level="INFO">Running command 'kill 8488 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:02.696" endtime="20210730 15:37:02.700"/>
</kw>
<status status="PASS" starttime="20210730 15:37:02.696" endtime="20210730 15:37:02.700"/>
</iter>
<iter>
<var name="${pid}">8495</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:02.704" level="INFO">Running command 'kill 8495 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:02.700" endtime="20210730 15:37:02.704"/>
</kw>
<status status="PASS" starttime="20210730 15:37:02.700" endtime="20210730 15:37:02.704"/>
</iter>
<iter>
<var name="${pid}">8500</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:02.714" level="INFO">Running command 'kill 8500 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:02.705" endtime="20210730 15:37:02.714"/>
</kw>
<status status="PASS" starttime="20210730 15:37:02.705" endtime="20210730 15:37:02.715"/>
</iter>
<status status="PASS" starttime="20210730 15:37:02.696" endtime="20210730 15:37:02.715"/>
</for>
<status status="PASS" starttime="20210730 15:37:02.695" endtime="20210730 15:37:02.715"/>
</branch>
<status status="PASS" starttime="20210730 15:37:02.695" endtime="20210730 15:37:02.715"/>
</if>
<status status="PASS" starttime="20210730 15:37:02.672" endtime="20210730 15:37:02.715"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABCD0123ABCD0123ABCD01'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:37:01.077" endtime="20210730 15:37:02.715">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t69" name="With Each Valid Token, Updating Password Of Each System User With ABCD!?. Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:02.723" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:02.737" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:02.737" level="INFO">${pids} = 8529</msg>
<status status="PASS" starttime="20210730 15:37:02.719" endtime="20210730 15:37:02.737"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:02.738" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:02.737" endtime="20210730 15:37:02.738"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:02.739" level="INFO">${pids} = ['8529']</msg>
<status status="PASS" starttime="20210730 15:37:02.738" endtime="20210730 15:37:02.739"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8529</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:02.745" level="INFO">Running command 'kill 8529 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:02.739" endtime="20210730 15:37:02.746"/>
</kw>
<status status="PASS" starttime="20210730 15:37:02.739" endtime="20210730 15:37:02.746"/>
</iter>
<status status="PASS" starttime="20210730 15:37:02.739" endtime="20210730 15:37:02.746"/>
</for>
<status status="PASS" starttime="20210730 15:37:02.738" endtime="20210730 15:37:02.746"/>
</branch>
<status status="PASS" starttime="20210730 15:37:02.738" endtime="20210730 15:37:02.746"/>
</if>
<status status="PASS" starttime="20210730 15:37:02.718" endtime="20210730 15:37:02.747"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:02.748" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:02.747" endtime="20210730 15:37:02.748"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:02.748" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:02.748" endtime="20210730 15:37:02.748"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:02.749" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:02.749" endtime="20210730 15:37:02.749"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:02.749" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:02.749" endtime="20210730 15:37:02.749"/>
</kw>
<msg timestamp="20210730 15:37:02.750" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:02.748" endtime="20210730 15:37:02.750"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:02.755" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:02.750" endtime="20210730 15:37:02.766"/>
</kw>
<status status="PASS" starttime="20210730 15:37:02.747" endtime="20210730 15:37:02.766"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:37:02.768" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:37:02.767" endtime="20210730 15:37:02.773"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:37:04.275" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:37:02.773" endtime="20210730 15:37:04.276"/>
</kw>
<status status="PASS" starttime="20210730 15:37:02.767" endtime="20210730 15:37:04.278"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:04.280" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:04.280" endtime="20210730 15:37:04.280"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:04.281" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:04.280" endtime="20210730 15:37:04.281"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:04.281" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:04.281" endtime="20210730 15:37:04.281"/>
</kw>
<msg timestamp="20210730 15:37:04.281" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:04.280" endtime="20210730 15:37:04.281"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:37:04.282" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:37:04.281" endtime="20210730 15:37:04.282"/>
</kw>
<status status="PASS" starttime="20210730 15:37:04.279" endtime="20210730 15:37:04.282"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:37:04.283" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:37:04.283" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:37:04.283" endtime="20210730 15:37:04.283"/>
</kw>
<status status="PASS" starttime="20210730 15:37:04.282" endtime="20210730 15:37:04.283"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:37:04.284" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:37:04.284" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:37:04.283" endtime="20210730 15:37:04.284"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:37:04.284" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:37:04.284" endtime="20210730 15:37:04.284"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:04.285" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:04.285" endtime="20210730 15:37:04.285"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:04.285" endtime="20210730 15:37:04.286"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:04.286" endtime="20210730 15:37:04.286"/>
</kw>
<status status="PASS" starttime="20210730 15:37:04.285" endtime="20210730 15:37:04.286"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:04.287" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:04.287" endtime="20210730 15:37:04.287"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:04.287" endtime="20210730 15:37:04.288"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:04.288" endtime="20210730 15:37:04.288"/>
</kw>
<status status="PASS" starttime="20210730 15:37:04.286" endtime="20210730 15:37:04.288"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:04.288" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:04.288" endtime="20210730 15:37:04.288"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:04.288" endtime="20210730 15:37:04.289"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:04.289" endtime="20210730 15:37:04.289"/>
</kw>
<status status="PASS" starttime="20210730 15:37:04.288" endtime="20210730 15:37:04.289"/>
</iter>
<status status="PASS" starttime="20210730 15:37:04.284" endtime="20210730 15:37:04.289"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:37:04.290" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:37:04.290" endtime="20210730 15:37:04.290"/>
</kw>
<status status="PASS" starttime="20210730 15:37:04.283" endtime="20210730 15:37:04.290"/>
</kw>
<status status="PASS" starttime="20210730 15:37:02.718" endtime="20210730 15:37:04.290"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:04.291" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:37:04.291" endtime="20210730 15:37:04.291"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:04.292" level="INFO">${payload} = {'password': 'ABCD!?.'}</msg>
<status status="PASS" starttime="20210730 15:37:04.291" endtime="20210730 15:37:04.292"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:04.302" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:04.302" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:04.292" endtime="20210730 15:37:04.302"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:04.303" endtime="20210730 15:37:04.303"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:04.303" endtime="20210730 15:37:04.303"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:04.292" endtime="20210730 15:37:04.303"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:04.292" endtime="20210730 15:37:04.303"/>
</for>
<status status="FAIL" starttime="20210730 15:37:04.291" endtime="20210730 15:37:04.303"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:04.290" endtime="20210730 15:37:04.303"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:04.304" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:37:04.304" endtime="20210730 15:37:04.304"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:04.305" level="INFO">${payload} = {'password': 'ABCD!?.'}</msg>
<status status="PASS" starttime="20210730 15:37:04.304" endtime="20210730 15:37:04.305"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:04.309" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:04.310" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:04.305" endtime="20210730 15:37:04.310"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:04.310" endtime="20210730 15:37:04.310"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:04.310" endtime="20210730 15:37:04.310"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:04.305" endtime="20210730 15:37:04.310"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:04.305" endtime="20210730 15:37:04.311"/>
</for>
<status status="FAIL" starttime="20210730 15:37:04.303" endtime="20210730 15:37:04.311"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:04.303" endtime="20210730 15:37:04.311"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:04.312" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:37:04.312" endtime="20210730 15:37:04.312"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:04.313" level="INFO">${payload} = {'password': 'ABCD!?.'}</msg>
<status status="PASS" starttime="20210730 15:37:04.312" endtime="20210730 15:37:04.313"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:04.318" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:04.318" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:04.313" endtime="20210730 15:37:04.318"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:04.319" endtime="20210730 15:37:04.319"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:04.319" endtime="20210730 15:37:04.319"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:04.313" endtime="20210730 15:37:04.319"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:04.313" endtime="20210730 15:37:04.319"/>
</for>
<status status="FAIL" starttime="20210730 15:37:04.311" endtime="20210730 15:37:04.319"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:04.311" endtime="20210730 15:37:04.319"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:04.290" endtime="20210730 15:37:04.319"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:04.336" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:04.343" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:04.344" level="INFO">${pids} = 8554
8561
8573</msg>
<status status="PASS" starttime="20210730 15:37:04.320" endtime="20210730 15:37:04.344"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:04.345" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:04.344" endtime="20210730 15:37:04.345"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:04.346" level="INFO">${pids} = ['8554', '8561', '8573']</msg>
<status status="PASS" starttime="20210730 15:37:04.345" endtime="20210730 15:37:04.346"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8554</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:04.352" level="INFO">Running command 'kill 8554 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:04.346" endtime="20210730 15:37:04.353"/>
</kw>
<status status="PASS" starttime="20210730 15:37:04.346" endtime="20210730 15:37:04.353"/>
</iter>
<iter>
<var name="${pid}">8561</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:04.358" level="INFO">Running command 'kill 8561 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:04.354" endtime="20210730 15:37:04.359"/>
</kw>
<status status="PASS" starttime="20210730 15:37:04.353" endtime="20210730 15:37:04.359"/>
</iter>
<iter>
<var name="${pid}">8573</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:04.369" level="INFO">Running command 'kill 8573 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:04.360" endtime="20210730 15:37:04.370"/>
</kw>
<status status="PASS" starttime="20210730 15:37:04.359" endtime="20210730 15:37:04.370"/>
</iter>
<status status="PASS" starttime="20210730 15:37:04.346" endtime="20210730 15:37:04.370"/>
</for>
<status status="PASS" starttime="20210730 15:37:04.345" endtime="20210730 15:37:04.370"/>
</branch>
<status status="PASS" starttime="20210730 15:37:04.345" endtime="20210730 15:37:04.370"/>
</if>
<status status="PASS" starttime="20210730 15:37:04.320" endtime="20210730 15:37:04.370"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABCD!?.'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:37:02.716" endtime="20210730 15:37:04.371">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t70" name="With Each Valid Token, Updating Password Of Each System User With ABCD!?.. Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:04.376" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:04.388" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:04.388" level="INFO">${pids} = 8602</msg>
<status status="PASS" starttime="20210730 15:37:04.373" endtime="20210730 15:37:04.388"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:04.389" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:04.388" endtime="20210730 15:37:04.389"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:04.389" level="INFO">${pids} = ['8602']</msg>
<status status="PASS" starttime="20210730 15:37:04.389" endtime="20210730 15:37:04.390"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8602</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:04.394" level="INFO">Running command 'kill 8602 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:04.390" endtime="20210730 15:37:04.394"/>
</kw>
<status status="PASS" starttime="20210730 15:37:04.390" endtime="20210730 15:37:04.394"/>
</iter>
<status status="PASS" starttime="20210730 15:37:04.390" endtime="20210730 15:37:04.394"/>
</for>
<status status="PASS" starttime="20210730 15:37:04.389" endtime="20210730 15:37:04.394"/>
</branch>
<status status="PASS" starttime="20210730 15:37:04.389" endtime="20210730 15:37:04.394"/>
</if>
<status status="PASS" starttime="20210730 15:37:04.372" endtime="20210730 15:37:04.395"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:04.396" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:04.395" endtime="20210730 15:37:04.396"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:04.399" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:04.398" endtime="20210730 15:37:04.399"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:04.401" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:04.399" endtime="20210730 15:37:04.401"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:04.401" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:04.401" endtime="20210730 15:37:04.401"/>
</kw>
<msg timestamp="20210730 15:37:04.401" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:04.396" endtime="20210730 15:37:04.401"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:04.415" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:04.401" endtime="20210730 15:37:04.417"/>
</kw>
<status status="PASS" starttime="20210730 15:37:04.395" endtime="20210730 15:37:04.417"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:37:04.419" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:37:04.418" endtime="20210730 15:37:04.423"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:37:05.927" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:37:04.423" endtime="20210730 15:37:05.927"/>
</kw>
<status status="PASS" starttime="20210730 15:37:04.418" endtime="20210730 15:37:05.928"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:05.929" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:05.929" endtime="20210730 15:37:05.929"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:05.929" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:05.929" endtime="20210730 15:37:05.929"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:05.930" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:05.929" endtime="20210730 15:37:05.930"/>
</kw>
<msg timestamp="20210730 15:37:05.930" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:05.928" endtime="20210730 15:37:05.930"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:37:05.931" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:37:05.930" endtime="20210730 15:37:05.931"/>
</kw>
<status status="PASS" starttime="20210730 15:37:05.928" endtime="20210730 15:37:05.931"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:37:05.932" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:37:05.932" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:37:05.932" endtime="20210730 15:37:05.932"/>
</kw>
<status status="PASS" starttime="20210730 15:37:05.931" endtime="20210730 15:37:05.932"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:37:05.933" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:37:05.933" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:37:05.933" endtime="20210730 15:37:05.933"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:37:05.933" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:37:05.933" endtime="20210730 15:37:05.933"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:05.934" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:05.934" endtime="20210730 15:37:05.934"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:05.934" endtime="20210730 15:37:05.935"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:05.935" endtime="20210730 15:37:05.935"/>
</kw>
<status status="PASS" starttime="20210730 15:37:05.934" endtime="20210730 15:37:05.935"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:05.936" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:05.935" endtime="20210730 15:37:05.936"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:05.936" endtime="20210730 15:37:05.936"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:05.937" endtime="20210730 15:37:05.937"/>
</kw>
<status status="PASS" starttime="20210730 15:37:05.935" endtime="20210730 15:37:05.937"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:05.937" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:05.937" endtime="20210730 15:37:05.937"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:05.937" endtime="20210730 15:37:05.938"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:05.938" endtime="20210730 15:37:05.938"/>
</kw>
<status status="PASS" starttime="20210730 15:37:05.937" endtime="20210730 15:37:05.938"/>
</iter>
<status status="PASS" starttime="20210730 15:37:05.934" endtime="20210730 15:37:05.938"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:37:05.939" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:37:05.938" endtime="20210730 15:37:05.939"/>
</kw>
<status status="PASS" starttime="20210730 15:37:05.932" endtime="20210730 15:37:05.939"/>
</kw>
<status status="PASS" starttime="20210730 15:37:04.372" endtime="20210730 15:37:05.939"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD!?..</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:05.940" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:37:05.940" endtime="20210730 15:37:05.940"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:05.941" level="INFO">${payload} = {'password': 'ABCD!?..'}</msg>
<status status="PASS" starttime="20210730 15:37:05.940" endtime="20210730 15:37:05.941"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:05.951" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:05.952" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:05.941" endtime="20210730 15:37:05.952"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:05.952" endtime="20210730 15:37:05.952"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:05.952" endtime="20210730 15:37:05.952"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:05.941" endtime="20210730 15:37:05.952"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:05.941" endtime="20210730 15:37:05.952"/>
</for>
<status status="FAIL" starttime="20210730 15:37:05.940" endtime="20210730 15:37:05.953"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:05.939" endtime="20210730 15:37:05.953"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD!?..</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:05.954" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:37:05.953" endtime="20210730 15:37:05.954"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:05.954" level="INFO">${payload} = {'password': 'ABCD!?..'}</msg>
<status status="PASS" starttime="20210730 15:37:05.954" endtime="20210730 15:37:05.954"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:05.958" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:05.958" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:05.954" endtime="20210730 15:37:05.958"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:05.958" endtime="20210730 15:37:05.959"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:05.959" endtime="20210730 15:37:05.959"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:05.954" endtime="20210730 15:37:05.959"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:05.954" endtime="20210730 15:37:05.959"/>
</for>
<status status="FAIL" starttime="20210730 15:37:05.953" endtime="20210730 15:37:05.959"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:05.953" endtime="20210730 15:37:05.959"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD!?..</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:05.960" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:37:05.960" endtime="20210730 15:37:05.960"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:05.961" level="INFO">${payload} = {'password': 'ABCD!?..'}</msg>
<status status="PASS" starttime="20210730 15:37:05.960" endtime="20210730 15:37:05.961"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:05.965" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:05.965" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:05.961" endtime="20210730 15:37:05.965"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:05.965" endtime="20210730 15:37:05.965"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:05.965" endtime="20210730 15:37:05.965"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:05.961" endtime="20210730 15:37:05.965"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:05.961" endtime="20210730 15:37:05.965"/>
</for>
<status status="FAIL" starttime="20210730 15:37:05.959" endtime="20210730 15:37:05.966"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:05.959" endtime="20210730 15:37:05.966"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:05.939" endtime="20210730 15:37:05.966"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:05.982" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:05.993" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:05.993" level="INFO">${pids} = 8639
8646
8650</msg>
<status status="PASS" starttime="20210730 15:37:05.967" endtime="20210730 15:37:05.993"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:05.994" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:05.993" endtime="20210730 15:37:05.994"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:05.995" level="INFO">${pids} = ['8639', '8646', '8650']</msg>
<status status="PASS" starttime="20210730 15:37:05.995" endtime="20210730 15:37:05.995"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8639</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:06.000" level="INFO">Running command 'kill 8639 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:05.995" endtime="20210730 15:37:06.006"/>
</kw>
<status status="PASS" starttime="20210730 15:37:05.995" endtime="20210730 15:37:06.006"/>
</iter>
<iter>
<var name="${pid}">8646</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:06.014" level="INFO">Running command 'kill 8646 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:06.007" endtime="20210730 15:37:06.015"/>
</kw>
<status status="PASS" starttime="20210730 15:37:06.006" endtime="20210730 15:37:06.015"/>
</iter>
<iter>
<var name="${pid}">8650</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:06.019" level="INFO">Running command 'kill 8650 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:06.015" endtime="20210730 15:37:06.019"/>
</kw>
<status status="PASS" starttime="20210730 15:37:06.015" endtime="20210730 15:37:06.019"/>
</iter>
<status status="PASS" starttime="20210730 15:37:05.995" endtime="20210730 15:37:06.019"/>
</for>
<status status="PASS" starttime="20210730 15:37:05.994" endtime="20210730 15:37:06.019"/>
</branch>
<status status="PASS" starttime="20210730 15:37:05.994" endtime="20210730 15:37:06.019"/>
</if>
<status status="PASS" starttime="20210730 15:37:05.966" endtime="20210730 15:37:06.020"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABCD!?..'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:37:04.371" endtime="20210730 15:37:06.020">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t71" name="With Each Valid Token, Updating Password Of Each System User With ABCD!?..ABCD!?..ABCD!? Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:06.025" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:06.048" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:06.048" level="INFO">${pids} = 8679</msg>
<status status="PASS" starttime="20210730 15:37:06.022" endtime="20210730 15:37:06.048"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:06.049" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:06.048" endtime="20210730 15:37:06.049"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:06.050" level="INFO">${pids} = ['8679']</msg>
<status status="PASS" starttime="20210730 15:37:06.049" endtime="20210730 15:37:06.050"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8679</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:06.055" level="INFO">Running command 'kill 8679 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:06.050" endtime="20210730 15:37:06.056"/>
</kw>
<status status="PASS" starttime="20210730 15:37:06.050" endtime="20210730 15:37:06.056"/>
</iter>
<status status="PASS" starttime="20210730 15:37:06.050" endtime="20210730 15:37:06.056"/>
</for>
<status status="PASS" starttime="20210730 15:37:06.049" endtime="20210730 15:37:06.056"/>
</branch>
<status status="PASS" starttime="20210730 15:37:06.049" endtime="20210730 15:37:06.057"/>
</if>
<status status="PASS" starttime="20210730 15:37:06.022" endtime="20210730 15:37:06.057"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:06.058" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:06.058" endtime="20210730 15:37:06.058"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:06.059" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:06.059" endtime="20210730 15:37:06.059"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:06.060" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:06.060" endtime="20210730 15:37:06.060"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:06.061" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:06.060" endtime="20210730 15:37:06.061"/>
</kw>
<msg timestamp="20210730 15:37:06.061" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:06.059" endtime="20210730 15:37:06.061"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:06.065" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:06.062" endtime="20210730 15:37:06.067"/>
</kw>
<status status="PASS" starttime="20210730 15:37:06.057" endtime="20210730 15:37:06.067"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:37:06.068" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:37:06.068" endtime="20210730 15:37:06.073"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:37:07.574" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:37:06.073" endtime="20210730 15:37:07.575"/>
</kw>
<status status="PASS" starttime="20210730 15:37:06.067" endtime="20210730 15:37:07.576"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:07.580" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:07.580" endtime="20210730 15:37:07.580"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:07.581" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:07.580" endtime="20210730 15:37:07.581"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:07.581" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:07.581" endtime="20210730 15:37:07.581"/>
</kw>
<msg timestamp="20210730 15:37:07.581" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:07.579" endtime="20210730 15:37:07.581"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:37:07.582" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:37:07.582" endtime="20210730 15:37:07.582"/>
</kw>
<status status="PASS" starttime="20210730 15:37:07.578" endtime="20210730 15:37:07.582"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:37:07.583" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:37:07.583" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:37:07.583" endtime="20210730 15:37:07.583"/>
</kw>
<status status="PASS" starttime="20210730 15:37:07.583" endtime="20210730 15:37:07.583"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:37:07.584" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:37:07.584" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:37:07.584" endtime="20210730 15:37:07.584"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:37:07.584" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:37:07.584" endtime="20210730 15:37:07.584"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:07.585" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:07.585" endtime="20210730 15:37:07.585"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:07.585" endtime="20210730 15:37:07.586"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:07.586" endtime="20210730 15:37:07.586"/>
</kw>
<status status="PASS" starttime="20210730 15:37:07.585" endtime="20210730 15:37:07.586"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:07.587" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:07.587" endtime="20210730 15:37:07.587"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:07.587" endtime="20210730 15:37:07.588"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:07.588" endtime="20210730 15:37:07.588"/>
</kw>
<status status="PASS" starttime="20210730 15:37:07.586" endtime="20210730 15:37:07.588"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:07.589" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:07.588" endtime="20210730 15:37:07.589"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:07.589" endtime="20210730 15:37:07.589"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:07.590" endtime="20210730 15:37:07.590"/>
</kw>
<status status="PASS" starttime="20210730 15:37:07.588" endtime="20210730 15:37:07.590"/>
</iter>
<status status="PASS" starttime="20210730 15:37:07.585" endtime="20210730 15:37:07.590"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:37:07.590" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:37:07.590" endtime="20210730 15:37:07.590"/>
</kw>
<status status="PASS" starttime="20210730 15:37:07.583" endtime="20210730 15:37:07.590"/>
</kw>
<status status="PASS" starttime="20210730 15:37:06.021" endtime="20210730 15:37:07.590"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD!?..ABCD!?..ABCD!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:07.591" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:37:07.591" endtime="20210730 15:37:07.592"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:07.592" level="INFO">${payload} = {'password': 'ABCD!?..ABCD!?..ABCD!?'}</msg>
<status status="PASS" starttime="20210730 15:37:07.592" endtime="20210730 15:37:07.592"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:07.601" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:07.601" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:07.592" endtime="20210730 15:37:07.601"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:07.602" endtime="20210730 15:37:07.602"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:07.602" endtime="20210730 15:37:07.602"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:07.592" endtime="20210730 15:37:07.602"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:07.592" endtime="20210730 15:37:07.602"/>
</for>
<status status="FAIL" starttime="20210730 15:37:07.591" endtime="20210730 15:37:07.602"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:07.591" endtime="20210730 15:37:07.602"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD!?..ABCD!?..ABCD!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:07.603" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:37:07.603" endtime="20210730 15:37:07.603"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:07.603" level="INFO">${payload} = {'password': 'ABCD!?..ABCD!?..ABCD!?'}</msg>
<status status="PASS" starttime="20210730 15:37:07.603" endtime="20210730 15:37:07.604"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:07.609" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:07.610" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:07.604" endtime="20210730 15:37:07.610"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:07.610" endtime="20210730 15:37:07.610"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:07.610" endtime="20210730 15:37:07.611"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:07.604" endtime="20210730 15:37:07.611"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:07.604" endtime="20210730 15:37:07.611"/>
</for>
<status status="FAIL" starttime="20210730 15:37:07.602" endtime="20210730 15:37:07.611"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:07.602" endtime="20210730 15:37:07.611"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD!?..ABCD!?..ABCD!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:07.612" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:37:07.612" endtime="20210730 15:37:07.612"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:07.613" level="INFO">${payload} = {'password': 'ABCD!?..ABCD!?..ABCD!?'}</msg>
<status status="PASS" starttime="20210730 15:37:07.612" endtime="20210730 15:37:07.613"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:07.617" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:07.618" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:07.613" endtime="20210730 15:37:07.618"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:07.618" endtime="20210730 15:37:07.618"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:07.618" endtime="20210730 15:37:07.618"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:07.613" endtime="20210730 15:37:07.618"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:07.613" endtime="20210730 15:37:07.618"/>
</for>
<status status="FAIL" starttime="20210730 15:37:07.611" endtime="20210730 15:37:07.618"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:07.611" endtime="20210730 15:37:07.618"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:07.591" endtime="20210730 15:37:07.618"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:07.623" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:07.641" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:07.642" level="INFO">${pids} = 8702
8709
8714</msg>
<status status="PASS" starttime="20210730 15:37:07.619" endtime="20210730 15:37:07.642"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:07.643" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:07.642" endtime="20210730 15:37:07.643"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:07.644" level="INFO">${pids} = ['8702', '8709', '8714']</msg>
<status status="PASS" starttime="20210730 15:37:07.644" endtime="20210730 15:37:07.644"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8702</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:07.648" level="INFO">Running command 'kill 8702 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:07.645" endtime="20210730 15:37:07.649"/>
</kw>
<status status="PASS" starttime="20210730 15:37:07.644" endtime="20210730 15:37:07.649"/>
</iter>
<iter>
<var name="${pid}">8709</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:07.653" level="INFO">Running command 'kill 8709 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:07.649" endtime="20210730 15:37:07.654"/>
</kw>
<status status="PASS" starttime="20210730 15:37:07.649" endtime="20210730 15:37:07.654"/>
</iter>
<iter>
<var name="${pid}">8714</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:07.658" level="INFO">Running command 'kill 8714 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:07.654" endtime="20210730 15:37:07.658"/>
</kw>
<status status="PASS" starttime="20210730 15:37:07.654" endtime="20210730 15:37:07.658"/>
</iter>
<status status="PASS" starttime="20210730 15:37:07.644" endtime="20210730 15:37:07.658"/>
</for>
<status status="PASS" starttime="20210730 15:37:07.643" endtime="20210730 15:37:07.658"/>
</branch>
<status status="PASS" starttime="20210730 15:37:07.643" endtime="20210730 15:37:07.658"/>
</if>
<status status="PASS" starttime="20210730 15:37:07.619" endtime="20210730 15:37:07.658"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABCD!?..ABCD!?..ABCD!?'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:37:06.020" endtime="20210730 15:37:07.659">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t72" name="With Each Valid Token, Updating Password Of Each System User With 0123!?. Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:07.668" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:07.684" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:07.684" level="INFO">${pids} = 8743</msg>
<status status="PASS" starttime="20210730 15:37:07.662" endtime="20210730 15:37:07.684"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:07.686" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:07.685" endtime="20210730 15:37:07.686"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:07.687" level="INFO">${pids} = ['8743']</msg>
<status status="PASS" starttime="20210730 15:37:07.686" endtime="20210730 15:37:07.687"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8743</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:07.690" level="INFO">Running command 'kill 8743 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:07.687" endtime="20210730 15:37:07.691"/>
</kw>
<status status="PASS" starttime="20210730 15:37:07.687" endtime="20210730 15:37:07.691"/>
</iter>
<status status="PASS" starttime="20210730 15:37:07.687" endtime="20210730 15:37:07.691"/>
</for>
<status status="PASS" starttime="20210730 15:37:07.686" endtime="20210730 15:37:07.691"/>
</branch>
<status status="PASS" starttime="20210730 15:37:07.686" endtime="20210730 15:37:07.691"/>
</if>
<status status="PASS" starttime="20210730 15:37:07.661" endtime="20210730 15:37:07.691"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:07.692" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:07.692" endtime="20210730 15:37:07.692"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:07.693" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:07.693" endtime="20210730 15:37:07.693"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:07.694" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:07.693" endtime="20210730 15:37:07.694"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:07.694" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:07.694" endtime="20210730 15:37:07.694"/>
</kw>
<msg timestamp="20210730 15:37:07.695" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:07.692" endtime="20210730 15:37:07.695"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:07.698" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:07.695" endtime="20210730 15:37:07.700"/>
</kw>
<status status="PASS" starttime="20210730 15:37:07.691" endtime="20210730 15:37:07.700"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:37:07.702" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:37:07.701" endtime="20210730 15:37:07.720"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:37:09.221" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:37:07.720" endtime="20210730 15:37:09.222"/>
</kw>
<status status="PASS" starttime="20210730 15:37:07.700" endtime="20210730 15:37:09.222"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:09.223" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:09.223" endtime="20210730 15:37:09.223"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:09.223" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:09.223" endtime="20210730 15:37:09.223"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:09.224" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:09.223" endtime="20210730 15:37:09.224"/>
</kw>
<msg timestamp="20210730 15:37:09.224" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:09.222" endtime="20210730 15:37:09.224"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:37:09.224" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:37:09.224" endtime="20210730 15:37:09.225"/>
</kw>
<status status="PASS" starttime="20210730 15:37:09.222" endtime="20210730 15:37:09.225"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:37:09.225" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:37:09.225" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:37:09.225" endtime="20210730 15:37:09.226"/>
</kw>
<status status="PASS" starttime="20210730 15:37:09.225" endtime="20210730 15:37:09.226"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:37:09.227" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:37:09.227" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:37:09.226" endtime="20210730 15:37:09.227"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:37:09.227" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:37:09.227" endtime="20210730 15:37:09.227"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:09.228" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:09.227" endtime="20210730 15:37:09.228"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:09.228" endtime="20210730 15:37:09.228"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:09.229" endtime="20210730 15:37:09.229"/>
</kw>
<status status="PASS" starttime="20210730 15:37:09.227" endtime="20210730 15:37:09.229"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:09.229" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:09.229" endtime="20210730 15:37:09.229"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:09.229" endtime="20210730 15:37:09.230"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:09.230" endtime="20210730 15:37:09.230"/>
</kw>
<status status="PASS" starttime="20210730 15:37:09.229" endtime="20210730 15:37:09.230"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:09.231" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:09.231" endtime="20210730 15:37:09.231"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:09.231" endtime="20210730 15:37:09.232"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:09.232" endtime="20210730 15:37:09.232"/>
</kw>
<status status="PASS" starttime="20210730 15:37:09.231" endtime="20210730 15:37:09.232"/>
</iter>
<status status="PASS" starttime="20210730 15:37:09.227" endtime="20210730 15:37:09.232"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:37:09.232" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:37:09.232" endtime="20210730 15:37:09.232"/>
</kw>
<status status="PASS" starttime="20210730 15:37:09.226" endtime="20210730 15:37:09.233"/>
</kw>
<status status="PASS" starttime="20210730 15:37:07.661" endtime="20210730 15:37:09.233"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=0123!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:09.234" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:37:09.234" endtime="20210730 15:37:09.234"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:09.234" level="INFO">${payload} = {'password': '0123!?.'}</msg>
<status status="PASS" starttime="20210730 15:37:09.234" endtime="20210730 15:37:09.234"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:09.243" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:09.243" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:09.235" endtime="20210730 15:37:09.243"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:09.244" endtime="20210730 15:37:09.244"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:09.244" endtime="20210730 15:37:09.244"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:09.234" endtime="20210730 15:37:09.244"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:09.234" endtime="20210730 15:37:09.244"/>
</for>
<status status="FAIL" starttime="20210730 15:37:09.233" endtime="20210730 15:37:09.244"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:09.233" endtime="20210730 15:37:09.244"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=0123!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:09.246" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:37:09.245" endtime="20210730 15:37:09.246"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:09.247" level="INFO">${payload} = {'password': '0123!?.'}</msg>
<status status="PASS" starttime="20210730 15:37:09.246" endtime="20210730 15:37:09.247"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:09.251" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:09.251" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:09.247" endtime="20210730 15:37:09.251"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:09.251" endtime="20210730 15:37:09.251"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:09.251" endtime="20210730 15:37:09.251"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:09.247" endtime="20210730 15:37:09.251"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:09.247" endtime="20210730 15:37:09.251"/>
</for>
<status status="FAIL" starttime="20210730 15:37:09.244" endtime="20210730 15:37:09.251"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:09.244" endtime="20210730 15:37:09.251"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=0123!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:09.252" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:37:09.252" endtime="20210730 15:37:09.252"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:09.253" level="INFO">${payload} = {'password': '0123!?.'}</msg>
<status status="PASS" starttime="20210730 15:37:09.252" endtime="20210730 15:37:09.253"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:09.256" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:09.257" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:09.253" endtime="20210730 15:37:09.257"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:09.257" endtime="20210730 15:37:09.257"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:09.257" endtime="20210730 15:37:09.257"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:09.253" endtime="20210730 15:37:09.257"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:09.253" endtime="20210730 15:37:09.257"/>
</for>
<status status="FAIL" starttime="20210730 15:37:09.252" endtime="20210730 15:37:09.257"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:09.252" endtime="20210730 15:37:09.257"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:09.233" endtime="20210730 15:37:09.257"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:09.262" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:09.279" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:09.280" level="INFO">${pids} = 8766
8773
8779</msg>
<status status="PASS" starttime="20210730 15:37:09.258" endtime="20210730 15:37:09.280"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:09.280" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:09.280" endtime="20210730 15:37:09.280"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:09.281" level="INFO">${pids} = ['8766', '8773', '8779']</msg>
<status status="PASS" starttime="20210730 15:37:09.281" endtime="20210730 15:37:09.281"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8766</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:09.285" level="INFO">Running command 'kill 8766 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:09.281" endtime="20210730 15:37:09.285"/>
</kw>
<status status="PASS" starttime="20210730 15:37:09.281" endtime="20210730 15:37:09.285"/>
</iter>
<iter>
<var name="${pid}">8773</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:09.288" level="INFO">Running command 'kill 8773 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:09.285" endtime="20210730 15:37:09.290"/>
</kw>
<status status="PASS" starttime="20210730 15:37:09.285" endtime="20210730 15:37:09.290"/>
</iter>
<iter>
<var name="${pid}">8779</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:09.294" level="INFO">Running command 'kill 8779 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:09.291" endtime="20210730 15:37:09.295"/>
</kw>
<status status="PASS" starttime="20210730 15:37:09.290" endtime="20210730 15:37:09.295"/>
</iter>
<status status="PASS" starttime="20210730 15:37:09.281" endtime="20210730 15:37:09.295"/>
</for>
<status status="PASS" starttime="20210730 15:37:09.281" endtime="20210730 15:37:09.295"/>
</branch>
<status status="PASS" starttime="20210730 15:37:09.281" endtime="20210730 15:37:09.295"/>
</if>
<status status="PASS" starttime="20210730 15:37:09.258" endtime="20210730 15:37:09.296"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": '0123!?.'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:37:07.660" endtime="20210730 15:37:09.296">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t73" name="With Each Valid Token, Updating Password Of Each System User With 0123!?.0 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:09.301" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:09.313" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:09.313" level="INFO">${pids} = 8808</msg>
<status status="PASS" starttime="20210730 15:37:09.298" endtime="20210730 15:37:09.313"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:09.314" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:09.314" endtime="20210730 15:37:09.314"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:09.315" level="INFO">${pids} = ['8808']</msg>
<status status="PASS" starttime="20210730 15:37:09.315" endtime="20210730 15:37:09.315"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8808</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:09.319" level="INFO">Running command 'kill 8808 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:09.315" endtime="20210730 15:37:09.319"/>
</kw>
<status status="PASS" starttime="20210730 15:37:09.315" endtime="20210730 15:37:09.319"/>
</iter>
<status status="PASS" starttime="20210730 15:37:09.315" endtime="20210730 15:37:09.319"/>
</for>
<status status="PASS" starttime="20210730 15:37:09.315" endtime="20210730 15:37:09.319"/>
</branch>
<status status="PASS" starttime="20210730 15:37:09.314" endtime="20210730 15:37:09.319"/>
</if>
<status status="PASS" starttime="20210730 15:37:09.298" endtime="20210730 15:37:09.320"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:09.321" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:09.320" endtime="20210730 15:37:09.321"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:09.321" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:09.321" endtime="20210730 15:37:09.321"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:09.322" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:09.321" endtime="20210730 15:37:09.322"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:09.322" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:09.322" endtime="20210730 15:37:09.322"/>
</kw>
<msg timestamp="20210730 15:37:09.322" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:09.321" endtime="20210730 15:37:09.322"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:09.325" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:09.322" endtime="20210730 15:37:09.327"/>
</kw>
<status status="PASS" starttime="20210730 15:37:09.320" endtime="20210730 15:37:09.327"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:37:09.330" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:37:09.328" endtime="20210730 15:37:09.344"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:37:10.847" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:37:09.345" endtime="20210730 15:37:10.847"/>
</kw>
<status status="PASS" starttime="20210730 15:37:09.328" endtime="20210730 15:37:10.848"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:10.849" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:10.849" endtime="20210730 15:37:10.849"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:10.849" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:10.849" endtime="20210730 15:37:10.849"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:10.850" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:10.849" endtime="20210730 15:37:10.850"/>
</kw>
<msg timestamp="20210730 15:37:10.850" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:10.848" endtime="20210730 15:37:10.850"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:37:10.850" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:37:10.850" endtime="20210730 15:37:10.851"/>
</kw>
<status status="PASS" starttime="20210730 15:37:10.848" endtime="20210730 15:37:10.851"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:37:10.852" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:37:10.852" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:37:10.851" endtime="20210730 15:37:10.852"/>
</kw>
<status status="PASS" starttime="20210730 15:37:10.851" endtime="20210730 15:37:10.852"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:37:10.853" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:37:10.853" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:37:10.852" endtime="20210730 15:37:10.853"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:37:10.853" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:37:10.853" endtime="20210730 15:37:10.853"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:10.854" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:10.853" endtime="20210730 15:37:10.854"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:10.854" endtime="20210730 15:37:10.854"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:10.855" endtime="20210730 15:37:10.855"/>
</kw>
<status status="PASS" starttime="20210730 15:37:10.853" endtime="20210730 15:37:10.855"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:10.855" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:10.855" endtime="20210730 15:37:10.855"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:10.855" endtime="20210730 15:37:10.856"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:10.856" endtime="20210730 15:37:10.856"/>
</kw>
<status status="PASS" starttime="20210730 15:37:10.855" endtime="20210730 15:37:10.856"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:10.857" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:10.857" endtime="20210730 15:37:10.857"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:10.857" endtime="20210730 15:37:10.858"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:10.858" endtime="20210730 15:37:10.858"/>
</kw>
<status status="PASS" starttime="20210730 15:37:10.856" endtime="20210730 15:37:10.858"/>
</iter>
<status status="PASS" starttime="20210730 15:37:10.853" endtime="20210730 15:37:10.858"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:37:10.859" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:37:10.858" endtime="20210730 15:37:10.859"/>
</kw>
<status status="PASS" starttime="20210730 15:37:10.852" endtime="20210730 15:37:10.859"/>
</kw>
<status status="PASS" starttime="20210730 15:37:09.297" endtime="20210730 15:37:10.859"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=0123!?.0</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:10.860" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:37:10.860" endtime="20210730 15:37:10.860"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:10.860" level="INFO">${payload} = {'password': '0123!?.0'}</msg>
<status status="PASS" starttime="20210730 15:37:10.860" endtime="20210730 15:37:10.861"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:10.870" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:10.871" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:10.861" endtime="20210730 15:37:10.871"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:10.871" endtime="20210730 15:37:10.871"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:10.871" endtime="20210730 15:37:10.871"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:10.861" endtime="20210730 15:37:10.871"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:10.861" endtime="20210730 15:37:10.871"/>
</for>
<status status="FAIL" starttime="20210730 15:37:10.859" endtime="20210730 15:37:10.872"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:10.859" endtime="20210730 15:37:10.872"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=0123!?.0</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:10.873" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:37:10.873" endtime="20210730 15:37:10.873"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:10.874" level="INFO">${payload} = {'password': '0123!?.0'}</msg>
<status status="PASS" starttime="20210730 15:37:10.873" endtime="20210730 15:37:10.874"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:10.879" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:10.879" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:10.874" endtime="20210730 15:37:10.880"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:10.880" endtime="20210730 15:37:10.880"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:10.880" endtime="20210730 15:37:10.880"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:10.874" endtime="20210730 15:37:10.880"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:10.874" endtime="20210730 15:37:10.880"/>
</for>
<status status="FAIL" starttime="20210730 15:37:10.872" endtime="20210730 15:37:10.880"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:10.872" endtime="20210730 15:37:10.880"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=0123!?.0</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:10.881" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:37:10.881" endtime="20210730 15:37:10.881"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:10.882" level="INFO">${payload} = {'password': '0123!?.0'}</msg>
<status status="PASS" starttime="20210730 15:37:10.882" endtime="20210730 15:37:10.882"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:10.887" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:10.887" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:10.882" endtime="20210730 15:37:10.887"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:10.888" endtime="20210730 15:37:10.888"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:10.895" endtime="20210730 15:37:10.895"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:10.882" endtime="20210730 15:37:10.895"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:10.882" endtime="20210730 15:37:10.895"/>
</for>
<status status="FAIL" starttime="20210730 15:37:10.880" endtime="20210730 15:37:10.895"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:10.880" endtime="20210730 15:37:10.895"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:10.859" endtime="20210730 15:37:10.895"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:10.901" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:10.912" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:10.912" level="INFO">${pids} = 8831
8838
8842</msg>
<status status="PASS" starttime="20210730 15:37:10.897" endtime="20210730 15:37:10.912"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:10.913" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:10.912" endtime="20210730 15:37:10.913"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:10.914" level="INFO">${pids} = ['8831', '8838', '8842']</msg>
<status status="PASS" starttime="20210730 15:37:10.913" endtime="20210730 15:37:10.914"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8831</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:10.917" level="INFO">Running command 'kill 8831 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:10.914" endtime="20210730 15:37:10.918"/>
</kw>
<status status="PASS" starttime="20210730 15:37:10.914" endtime="20210730 15:37:10.918"/>
</iter>
<iter>
<var name="${pid}">8838</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:10.928" level="INFO">Running command 'kill 8838 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:10.919" endtime="20210730 15:37:10.928"/>
</kw>
<status status="PASS" starttime="20210730 15:37:10.918" endtime="20210730 15:37:10.928"/>
</iter>
<iter>
<var name="${pid}">8842</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:10.933" level="INFO">Running command 'kill 8842 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:10.929" endtime="20210730 15:37:10.934"/>
</kw>
<status status="PASS" starttime="20210730 15:37:10.929" endtime="20210730 15:37:10.934"/>
</iter>
<status status="PASS" starttime="20210730 15:37:10.914" endtime="20210730 15:37:10.934"/>
</for>
<status status="PASS" starttime="20210730 15:37:10.913" endtime="20210730 15:37:10.934"/>
</branch>
<status status="PASS" starttime="20210730 15:37:10.913" endtime="20210730 15:37:10.934"/>
</if>
<status status="PASS" starttime="20210730 15:37:10.896" endtime="20210730 15:37:10.934"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": '0123!?.0'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:37:09.296" endtime="20210730 15:37:10.935">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t74" name="With Each Valid Token, Updating Password Of Each System User With 0123!?.00123!?.00123!? Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:10.940" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:10.953" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:10.953" level="INFO">${pids} = 8871</msg>
<status status="PASS" starttime="20210730 15:37:10.937" endtime="20210730 15:37:10.953"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:10.954" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:10.954" endtime="20210730 15:37:10.954"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:10.955" level="INFO">${pids} = ['8871']</msg>
<status status="PASS" starttime="20210730 15:37:10.955" endtime="20210730 15:37:10.955"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8871</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:10.958" level="INFO">Running command 'kill 8871 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:10.955" endtime="20210730 15:37:10.959"/>
</kw>
<status status="PASS" starttime="20210730 15:37:10.955" endtime="20210730 15:37:10.959"/>
</iter>
<status status="PASS" starttime="20210730 15:37:10.955" endtime="20210730 15:37:10.959"/>
</for>
<status status="PASS" starttime="20210730 15:37:10.954" endtime="20210730 15:37:10.959"/>
</branch>
<status status="PASS" starttime="20210730 15:37:10.954" endtime="20210730 15:37:10.959"/>
</if>
<status status="PASS" starttime="20210730 15:37:10.936" endtime="20210730 15:37:10.959"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:10.961" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:10.960" endtime="20210730 15:37:10.961"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:10.962" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:10.961" endtime="20210730 15:37:10.962"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:10.962" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:10.962" endtime="20210730 15:37:10.962"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:10.962" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:10.962" endtime="20210730 15:37:10.962"/>
</kw>
<msg timestamp="20210730 15:37:10.962" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:10.961" endtime="20210730 15:37:10.963"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:10.966" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:10.963" endtime="20210730 15:37:10.980"/>
</kw>
<status status="PASS" starttime="20210730 15:37:10.960" endtime="20210730 15:37:10.981"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:37:10.983" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:37:10.982" endtime="20210730 15:37:10.987"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:37:12.489" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:37:10.987" endtime="20210730 15:37:12.489"/>
</kw>
<status status="PASS" starttime="20210730 15:37:10.981" endtime="20210730 15:37:12.490"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:12.491" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:12.491" endtime="20210730 15:37:12.491"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:12.491" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:12.491" endtime="20210730 15:37:12.491"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:12.492" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:12.491" endtime="20210730 15:37:12.492"/>
</kw>
<msg timestamp="20210730 15:37:12.492" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:12.490" endtime="20210730 15:37:12.492"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:37:12.493" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:37:12.492" endtime="20210730 15:37:12.493"/>
</kw>
<status status="PASS" starttime="20210730 15:37:12.490" endtime="20210730 15:37:12.493"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:37:12.494" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:37:12.494" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:37:12.493" endtime="20210730 15:37:12.494"/>
</kw>
<status status="PASS" starttime="20210730 15:37:12.493" endtime="20210730 15:37:12.494"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:37:12.495" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:37:12.495" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:37:12.494" endtime="20210730 15:37:12.495"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:37:12.495" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:37:12.495" endtime="20210730 15:37:12.495"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:12.496" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:12.496" endtime="20210730 15:37:12.497"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:12.497" endtime="20210730 15:37:12.498"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:12.498" endtime="20210730 15:37:12.498"/>
</kw>
<status status="PASS" starttime="20210730 15:37:12.496" endtime="20210730 15:37:12.498"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:12.498" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:12.498" endtime="20210730 15:37:12.498"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:12.498" endtime="20210730 15:37:12.499"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:12.499" endtime="20210730 15:37:12.500"/>
</kw>
<status status="PASS" starttime="20210730 15:37:12.498" endtime="20210730 15:37:12.500"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:12.500" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:12.500" endtime="20210730 15:37:12.500"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:12.500" endtime="20210730 15:37:12.501"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:12.501" endtime="20210730 15:37:12.501"/>
</kw>
<status status="PASS" starttime="20210730 15:37:12.500" endtime="20210730 15:37:12.501"/>
</iter>
<status status="PASS" starttime="20210730 15:37:12.495" endtime="20210730 15:37:12.501"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:37:12.502" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:37:12.501" endtime="20210730 15:37:12.502"/>
</kw>
<status status="PASS" starttime="20210730 15:37:12.494" endtime="20210730 15:37:12.502"/>
</kw>
<status status="PASS" starttime="20210730 15:37:10.936" endtime="20210730 15:37:12.502"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=0123!?.00123!?.00123!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:12.503" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:37:12.503" endtime="20210730 15:37:12.503"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:12.504" level="INFO">${payload} = {'password': '0123!?.00123!?.00123!?'}</msg>
<status status="PASS" starttime="20210730 15:37:12.504" endtime="20210730 15:37:12.504"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:12.515" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:12.515" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:12.504" endtime="20210730 15:37:12.515"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:12.516" endtime="20210730 15:37:12.516"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:12.516" endtime="20210730 15:37:12.516"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:12.504" endtime="20210730 15:37:12.516"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:12.504" endtime="20210730 15:37:12.516"/>
</for>
<status status="FAIL" starttime="20210730 15:37:12.503" endtime="20210730 15:37:12.516"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:12.502" endtime="20210730 15:37:12.516"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=0123!?.00123!?.00123!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:12.517" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:37:12.517" endtime="20210730 15:37:12.517"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:12.518" level="INFO">${payload} = {'password': '0123!?.00123!?.00123!?'}</msg>
<status status="PASS" starttime="20210730 15:37:12.517" endtime="20210730 15:37:12.518"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:12.522" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:12.522" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:12.518" endtime="20210730 15:37:12.522"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:12.522" endtime="20210730 15:37:12.522"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:12.522" endtime="20210730 15:37:12.523"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:12.518" endtime="20210730 15:37:12.523"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:12.518" endtime="20210730 15:37:12.523"/>
</for>
<status status="FAIL" starttime="20210730 15:37:12.516" endtime="20210730 15:37:12.523"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:12.516" endtime="20210730 15:37:12.523"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=0123!?.00123!?.00123!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:12.524" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:37:12.524" endtime="20210730 15:37:12.524"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:12.524" level="INFO">${payload} = {'password': '0123!?.00123!?.00123!?'}</msg>
<status status="PASS" starttime="20210730 15:37:12.524" endtime="20210730 15:37:12.525"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:12.530" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:12.530" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:12.525" endtime="20210730 15:37:12.530"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:12.530" endtime="20210730 15:37:12.530"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:12.530" endtime="20210730 15:37:12.530"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:12.525" endtime="20210730 15:37:12.530"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:12.525" endtime="20210730 15:37:12.530"/>
</for>
<status status="FAIL" starttime="20210730 15:37:12.523" endtime="20210730 15:37:12.531"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:12.523" endtime="20210730 15:37:12.531"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:12.502" endtime="20210730 15:37:12.531"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:12.542" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:12.554" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:12.554" level="INFO">${pids} = 8894
8901
8906</msg>
<status status="PASS" starttime="20210730 15:37:12.532" endtime="20210730 15:37:12.554"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:12.555" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:12.554" endtime="20210730 15:37:12.555"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:12.556" level="INFO">${pids} = ['8894', '8901', '8906']</msg>
<status status="PASS" starttime="20210730 15:37:12.555" endtime="20210730 15:37:12.556"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8894</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:12.559" level="INFO">Running command 'kill 8894 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:12.556" endtime="20210730 15:37:12.560"/>
</kw>
<status status="PASS" starttime="20210730 15:37:12.556" endtime="20210730 15:37:12.560"/>
</iter>
<iter>
<var name="${pid}">8901</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:12.567" level="INFO">Running command 'kill 8901 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:12.561" endtime="20210730 15:37:12.572"/>
</kw>
<status status="PASS" starttime="20210730 15:37:12.560" endtime="20210730 15:37:12.572"/>
</iter>
<iter>
<var name="${pid}">8906</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:12.579" level="INFO">Running command 'kill 8906 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:12.573" endtime="20210730 15:37:12.579"/>
</kw>
<status status="PASS" starttime="20210730 15:37:12.572" endtime="20210730 15:37:12.579"/>
</iter>
<status status="PASS" starttime="20210730 15:37:12.556" endtime="20210730 15:37:12.579"/>
</for>
<status status="PASS" starttime="20210730 15:37:12.555" endtime="20210730 15:37:12.579"/>
</branch>
<status status="PASS" starttime="20210730 15:37:12.555" endtime="20210730 15:37:12.579"/>
</if>
<status status="PASS" starttime="20210730 15:37:12.531" endtime="20210730 15:37:12.580"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": '0123!?.00123!?.00123!?'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:37:10.935" endtime="20210730 15:37:12.580">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t75" name="With Each Valid Token, Updating Password Of Each System User With abcdAB9 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:12.586" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:12.600" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:12.600" level="INFO">${pids} = 8936</msg>
<status status="PASS" starttime="20210730 15:37:12.582" endtime="20210730 15:37:12.600"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:12.601" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:12.600" endtime="20210730 15:37:12.601"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:12.602" level="INFO">${pids} = ['8936']</msg>
<status status="PASS" starttime="20210730 15:37:12.601" endtime="20210730 15:37:12.602"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8936</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:12.605" level="INFO">Running command 'kill 8936 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:12.602" endtime="20210730 15:37:12.606"/>
</kw>
<status status="PASS" starttime="20210730 15:37:12.602" endtime="20210730 15:37:12.606"/>
</iter>
<status status="PASS" starttime="20210730 15:37:12.602" endtime="20210730 15:37:12.606"/>
</for>
<status status="PASS" starttime="20210730 15:37:12.601" endtime="20210730 15:37:12.606"/>
</branch>
<status status="PASS" starttime="20210730 15:37:12.601" endtime="20210730 15:37:12.606"/>
</if>
<status status="PASS" starttime="20210730 15:37:12.582" endtime="20210730 15:37:12.607"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:12.608" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:12.607" endtime="20210730 15:37:12.608"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:12.608" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:12.608" endtime="20210730 15:37:12.609"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:12.613" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:12.612" endtime="20210730 15:37:12.613"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:12.621" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:12.613" endtime="20210730 15:37:12.621"/>
</kw>
<msg timestamp="20210730 15:37:12.623" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:12.608" endtime="20210730 15:37:12.623"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:12.628" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:12.623" endtime="20210730 15:37:12.629"/>
</kw>
<status status="PASS" starttime="20210730 15:37:12.607" endtime="20210730 15:37:12.629"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:37:12.631" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:37:12.630" endtime="20210730 15:37:12.635"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:37:14.137" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:37:12.635" endtime="20210730 15:37:14.137"/>
</kw>
<status status="PASS" starttime="20210730 15:37:12.630" endtime="20210730 15:37:14.137"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:14.138" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:14.138" endtime="20210730 15:37:14.138"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:14.139" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:14.138" endtime="20210730 15:37:14.139"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:14.139" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:14.139" endtime="20210730 15:37:14.139"/>
</kw>
<msg timestamp="20210730 15:37:14.139" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:14.138" endtime="20210730 15:37:14.139"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:37:14.140" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:37:14.139" endtime="20210730 15:37:14.140"/>
</kw>
<status status="PASS" starttime="20210730 15:37:14.137" endtime="20210730 15:37:14.140"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:37:14.141" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:37:14.141" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:37:14.140" endtime="20210730 15:37:14.141"/>
</kw>
<status status="PASS" starttime="20210730 15:37:14.140" endtime="20210730 15:37:14.141"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:37:14.142" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:37:14.142" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:37:14.141" endtime="20210730 15:37:14.142"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:37:14.142" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:37:14.142" endtime="20210730 15:37:14.142"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:14.144" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:14.143" endtime="20210730 15:37:14.144"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:14.144" endtime="20210730 15:37:14.145"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:14.146" endtime="20210730 15:37:14.146"/>
</kw>
<status status="PASS" starttime="20210730 15:37:14.143" endtime="20210730 15:37:14.146"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:14.147" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:14.146" endtime="20210730 15:37:14.147"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:14.147" endtime="20210730 15:37:14.148"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:14.148" endtime="20210730 15:37:14.148"/>
</kw>
<status status="PASS" starttime="20210730 15:37:14.146" endtime="20210730 15:37:14.148"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:14.149" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:14.148" endtime="20210730 15:37:14.149"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:14.149" endtime="20210730 15:37:14.149"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:14.149" endtime="20210730 15:37:14.150"/>
</kw>
<status status="PASS" starttime="20210730 15:37:14.148" endtime="20210730 15:37:14.150"/>
</iter>
<status status="PASS" starttime="20210730 15:37:14.142" endtime="20210730 15:37:14.150"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:37:14.150" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:37:14.150" endtime="20210730 15:37:14.150"/>
</kw>
<status status="PASS" starttime="20210730 15:37:14.141" endtime="20210730 15:37:14.150"/>
</kw>
<status status="PASS" starttime="20210730 15:37:12.581" endtime="20210730 15:37:14.150"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdAB9</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:14.152" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:37:14.151" endtime="20210730 15:37:14.152"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:14.152" level="INFO">${payload} = {'password': 'abcdAB9'}</msg>
<status status="PASS" starttime="20210730 15:37:14.152" endtime="20210730 15:37:14.152"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:14.161" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:14.162" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:14.152" endtime="20210730 15:37:14.162"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:14.162" endtime="20210730 15:37:14.162"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:14.162" endtime="20210730 15:37:14.162"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:14.152" endtime="20210730 15:37:14.162"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:14.152" endtime="20210730 15:37:14.162"/>
</for>
<status status="FAIL" starttime="20210730 15:37:14.151" endtime="20210730 15:37:14.162"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:14.151" endtime="20210730 15:37:14.163"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdAB9</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:14.164" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:37:14.163" endtime="20210730 15:37:14.164"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:14.164" level="INFO">${payload} = {'password': 'abcdAB9'}</msg>
<status status="PASS" starttime="20210730 15:37:14.164" endtime="20210730 15:37:14.164"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:14.168" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:14.169" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:14.164" endtime="20210730 15:37:14.169"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:14.169" endtime="20210730 15:37:14.169"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:14.169" endtime="20210730 15:37:14.169"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:14.164" endtime="20210730 15:37:14.169"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:14.164" endtime="20210730 15:37:14.169"/>
</for>
<status status="FAIL" starttime="20210730 15:37:14.163" endtime="20210730 15:37:14.169"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:14.163" endtime="20210730 15:37:14.169"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdAB9</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:14.170" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:37:14.170" endtime="20210730 15:37:14.170"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:14.171" level="INFO">${payload} = {'password': 'abcdAB9'}</msg>
<status status="PASS" starttime="20210730 15:37:14.170" endtime="20210730 15:37:14.171"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:14.175" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:14.175" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:14.171" endtime="20210730 15:37:14.175"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:14.175" endtime="20210730 15:37:14.175"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:14.175" endtime="20210730 15:37:14.175"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:14.171" endtime="20210730 15:37:14.175"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:14.171" endtime="20210730 15:37:14.175"/>
</for>
<status status="FAIL" starttime="20210730 15:37:14.169" endtime="20210730 15:37:14.175"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:14.169" endtime="20210730 15:37:14.175"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:14.151" endtime="20210730 15:37:14.175"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:14.183" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:14.195" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:14.196" level="INFO">${pids} = 8959
8966
8970</msg>
<status status="PASS" starttime="20210730 15:37:14.177" endtime="20210730 15:37:14.196"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:14.197" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:14.196" endtime="20210730 15:37:14.197"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:14.197" level="INFO">${pids} = ['8959', '8966', '8970']</msg>
<status status="PASS" starttime="20210730 15:37:14.197" endtime="20210730 15:37:14.197"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8959</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:14.201" level="INFO">Running command 'kill 8959 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:14.198" endtime="20210730 15:37:14.201"/>
</kw>
<status status="PASS" starttime="20210730 15:37:14.198" endtime="20210730 15:37:14.201"/>
</iter>
<iter>
<var name="${pid}">8966</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:14.204" level="INFO">Running command 'kill 8966 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:14.202" endtime="20210730 15:37:14.206"/>
</kw>
<status status="PASS" starttime="20210730 15:37:14.202" endtime="20210730 15:37:14.206"/>
</iter>
<iter>
<var name="${pid}">8970</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:14.211" level="INFO">Running command 'kill 8970 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:14.207" endtime="20210730 15:37:14.212"/>
</kw>
<status status="PASS" starttime="20210730 15:37:14.207" endtime="20210730 15:37:14.212"/>
</iter>
<status status="PASS" starttime="20210730 15:37:14.198" endtime="20210730 15:37:14.212"/>
</for>
<status status="PASS" starttime="20210730 15:37:14.197" endtime="20210730 15:37:14.212"/>
</branch>
<status status="PASS" starttime="20210730 15:37:14.197" endtime="20210730 15:37:14.212"/>
</if>
<status status="PASS" starttime="20210730 15:37:14.176" endtime="20210730 15:37:14.212"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcdAB9'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:37:12.581" endtime="20210730 15:37:14.213">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t76" name="With Each Valid Token, Updating Password Of Each System User With abcdAB90 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:14.219" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:14.231" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:14.231" level="INFO">${pids} = 8999</msg>
<status status="PASS" starttime="20210730 15:37:14.215" endtime="20210730 15:37:14.231"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:14.232" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:14.231" endtime="20210730 15:37:14.232"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:14.233" level="INFO">${pids} = ['8999']</msg>
<status status="PASS" starttime="20210730 15:37:14.232" endtime="20210730 15:37:14.233"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8999</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:14.236" level="INFO">Running command 'kill 8999 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:14.233" endtime="20210730 15:37:14.237"/>
</kw>
<status status="PASS" starttime="20210730 15:37:14.233" endtime="20210730 15:37:14.237"/>
</iter>
<status status="PASS" starttime="20210730 15:37:14.233" endtime="20210730 15:37:14.237"/>
</for>
<status status="PASS" starttime="20210730 15:37:14.232" endtime="20210730 15:37:14.237"/>
</branch>
<status status="PASS" starttime="20210730 15:37:14.232" endtime="20210730 15:37:14.237"/>
</if>
<status status="PASS" starttime="20210730 15:37:14.214" endtime="20210730 15:37:14.237"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:14.238" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:14.238" endtime="20210730 15:37:14.238"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:14.239" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:14.239" endtime="20210730 15:37:14.239"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:14.239" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:14.239" endtime="20210730 15:37:14.239"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:14.240" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:14.239" endtime="20210730 15:37:14.240"/>
</kw>
<msg timestamp="20210730 15:37:14.240" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:14.238" endtime="20210730 15:37:14.240"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:14.263" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:14.240" endtime="20210730 15:37:14.266"/>
</kw>
<status status="PASS" starttime="20210730 15:37:14.237" endtime="20210730 15:37:14.266"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:37:14.268" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:37:14.268" endtime="20210730 15:37:14.284"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:37:15.786" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:37:14.284" endtime="20210730 15:37:15.786"/>
</kw>
<status status="PASS" starttime="20210730 15:37:14.267" endtime="20210730 15:37:15.786"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:15.787" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:15.787" endtime="20210730 15:37:15.787"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:15.788" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:15.787" endtime="20210730 15:37:15.788"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:15.788" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:15.788" endtime="20210730 15:37:15.788"/>
</kw>
<msg timestamp="20210730 15:37:15.788" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:15.787" endtime="20210730 15:37:15.788"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:37:15.789" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:37:15.788" endtime="20210730 15:37:15.789"/>
</kw>
<status status="PASS" starttime="20210730 15:37:15.786" endtime="20210730 15:37:15.789"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:37:15.790" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:37:15.790" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:37:15.789" endtime="20210730 15:37:15.790"/>
</kw>
<status status="PASS" starttime="20210730 15:37:15.789" endtime="20210730 15:37:15.790"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:37:15.791" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:37:15.791" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:37:15.790" endtime="20210730 15:37:15.791"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:37:15.791" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:37:15.791" endtime="20210730 15:37:15.791"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:15.792" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:15.791" endtime="20210730 15:37:15.792"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:15.792" endtime="20210730 15:37:15.792"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:15.793" endtime="20210730 15:37:15.793"/>
</kw>
<status status="PASS" starttime="20210730 15:37:15.791" endtime="20210730 15:37:15.793"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:15.793" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:15.793" endtime="20210730 15:37:15.793"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:15.793" endtime="20210730 15:37:15.794"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:15.794" endtime="20210730 15:37:15.794"/>
</kw>
<status status="PASS" starttime="20210730 15:37:15.793" endtime="20210730 15:37:15.794"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:15.795" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:15.795" endtime="20210730 15:37:15.795"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:15.795" endtime="20210730 15:37:15.796"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:15.796" endtime="20210730 15:37:15.796"/>
</kw>
<status status="PASS" starttime="20210730 15:37:15.794" endtime="20210730 15:37:15.796"/>
</iter>
<status status="PASS" starttime="20210730 15:37:15.791" endtime="20210730 15:37:15.796"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:37:15.797" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:37:15.796" endtime="20210730 15:37:15.797"/>
</kw>
<status status="PASS" starttime="20210730 15:37:15.790" endtime="20210730 15:37:15.797"/>
</kw>
<status status="PASS" starttime="20210730 15:37:14.214" endtime="20210730 15:37:15.797"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdAB90</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:15.798" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:37:15.798" endtime="20210730 15:37:15.798"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:15.798" level="INFO">${payload} = {'password': 'abcdAB90'}</msg>
<status status="PASS" starttime="20210730 15:37:15.798" endtime="20210730 15:37:15.798"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:15.807" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:15.808" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:15.799" endtime="20210730 15:37:15.808"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:15.808" endtime="20210730 15:37:15.808"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:15.808" endtime="20210730 15:37:15.808"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:15.799" endtime="20210730 15:37:15.808"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:15.799" endtime="20210730 15:37:15.808"/>
</for>
<status status="FAIL" starttime="20210730 15:37:15.797" endtime="20210730 15:37:15.808"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:15.797" endtime="20210730 15:37:15.808"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdAB90</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:15.811" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:37:15.810" endtime="20210730 15:37:15.811"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:15.812" level="INFO">${payload} = {'password': 'abcdAB90'}</msg>
<status status="PASS" starttime="20210730 15:37:15.811" endtime="20210730 15:37:15.812"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:15.817" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:15.817" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:15.813" endtime="20210730 15:37:15.817"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:15.817" endtime="20210730 15:37:15.817"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:15.818" endtime="20210730 15:37:15.818"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:15.813" endtime="20210730 15:37:15.818"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:15.813" endtime="20210730 15:37:15.818"/>
</for>
<status status="FAIL" starttime="20210730 15:37:15.809" endtime="20210730 15:37:15.818"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:15.808" endtime="20210730 15:37:15.818"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdAB90</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:15.819" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:37:15.819" endtime="20210730 15:37:15.819"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:15.820" level="INFO">${payload} = {'password': 'abcdAB90'}</msg>
<status status="PASS" starttime="20210730 15:37:15.819" endtime="20210730 15:37:15.820"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:15.824" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:15.824" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:15.820" endtime="20210730 15:37:15.824"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:15.824" endtime="20210730 15:37:15.824"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:15.824" endtime="20210730 15:37:15.824"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:15.820" endtime="20210730 15:37:15.824"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:15.820" endtime="20210730 15:37:15.824"/>
</for>
<status status="FAIL" starttime="20210730 15:37:15.818" endtime="20210730 15:37:15.824"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:15.818" endtime="20210730 15:37:15.825"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:15.797" endtime="20210730 15:37:15.825"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:15.830" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:15.842" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:15.842" level="INFO">${pids} = 9022
9029
9033</msg>
<status status="PASS" starttime="20210730 15:37:15.826" endtime="20210730 15:37:15.842"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:15.843" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:15.842" endtime="20210730 15:37:15.843"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:15.844" level="INFO">${pids} = ['9022', '9029', '9033']</msg>
<status status="PASS" starttime="20210730 15:37:15.844" endtime="20210730 15:37:15.844"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9022</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:15.848" level="INFO">Running command 'kill 9022 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:15.845" endtime="20210730 15:37:15.849"/>
</kw>
<status status="PASS" starttime="20210730 15:37:15.845" endtime="20210730 15:37:15.849"/>
</iter>
<iter>
<var name="${pid}">9029</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:15.852" level="INFO">Running command 'kill 9029 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:15.849" endtime="20210730 15:37:15.853"/>
</kw>
<status status="PASS" starttime="20210730 15:37:15.849" endtime="20210730 15:37:15.853"/>
</iter>
<iter>
<var name="${pid}">9033</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:15.858" level="INFO">Running command 'kill 9033 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:15.854" endtime="20210730 15:37:15.859"/>
</kw>
<status status="PASS" starttime="20210730 15:37:15.853" endtime="20210730 15:37:15.859"/>
</iter>
<status status="PASS" starttime="20210730 15:37:15.845" endtime="20210730 15:37:15.859"/>
</for>
<status status="PASS" starttime="20210730 15:37:15.844" endtime="20210730 15:37:15.859"/>
</branch>
<status status="PASS" starttime="20210730 15:37:15.843" endtime="20210730 15:37:15.859"/>
</if>
<status status="PASS" starttime="20210730 15:37:15.825" endtime="20210730 15:37:15.860"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcdAB90'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:37:14.213" endtime="20210730 15:37:15.860">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t77" name="With Each Valid Token, Updating Password Of Each System User With abcdAB90abcdAB90abcdAB Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:15.866" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:15.882" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:15.882" level="INFO">${pids} = 9062</msg>
<status status="PASS" starttime="20210730 15:37:15.862" endtime="20210730 15:37:15.882"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:15.883" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:15.882" endtime="20210730 15:37:15.883"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:15.883" level="INFO">${pids} = ['9062']</msg>
<status status="PASS" starttime="20210730 15:37:15.883" endtime="20210730 15:37:15.884"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9062</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:15.888" level="INFO">Running command 'kill 9062 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:15.884" endtime="20210730 15:37:15.889"/>
</kw>
<status status="PASS" starttime="20210730 15:37:15.884" endtime="20210730 15:37:15.889"/>
</iter>
<status status="PASS" starttime="20210730 15:37:15.884" endtime="20210730 15:37:15.889"/>
</for>
<status status="PASS" starttime="20210730 15:37:15.883" endtime="20210730 15:37:15.889"/>
</branch>
<status status="PASS" starttime="20210730 15:37:15.883" endtime="20210730 15:37:15.889"/>
</if>
<status status="PASS" starttime="20210730 15:37:15.862" endtime="20210730 15:37:15.889"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:15.890" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:15.890" endtime="20210730 15:37:15.890"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:15.891" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:15.891" endtime="20210730 15:37:15.891"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:15.892" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:15.891" endtime="20210730 15:37:15.892"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:15.892" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:15.892" endtime="20210730 15:37:15.892"/>
</kw>
<msg timestamp="20210730 15:37:15.892" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:15.891" endtime="20210730 15:37:15.892"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:15.896" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:15.892" endtime="20210730 15:37:15.898"/>
</kw>
<status status="PASS" starttime="20210730 15:37:15.890" endtime="20210730 15:37:15.898"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:37:15.899" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:37:15.899" endtime="20210730 15:37:15.903"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:37:17.405" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:37:15.904" endtime="20210730 15:37:17.405"/>
</kw>
<status status="PASS" starttime="20210730 15:37:15.898" endtime="20210730 15:37:17.405"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:17.407" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:17.406" endtime="20210730 15:37:17.407"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:17.407" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:17.407" endtime="20210730 15:37:17.407"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:17.407" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:17.407" endtime="20210730 15:37:17.408"/>
</kw>
<msg timestamp="20210730 15:37:17.408" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:17.406" endtime="20210730 15:37:17.408"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:37:17.408" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:37:17.408" endtime="20210730 15:37:17.409"/>
</kw>
<status status="PASS" starttime="20210730 15:37:17.405" endtime="20210730 15:37:17.409"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:37:17.410" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:37:17.410" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:37:17.409" endtime="20210730 15:37:17.410"/>
</kw>
<status status="PASS" starttime="20210730 15:37:17.409" endtime="20210730 15:37:17.410"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:37:17.411" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:37:17.411" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:37:17.411" endtime="20210730 15:37:17.411"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:37:17.412" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:37:17.411" endtime="20210730 15:37:17.412"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:17.412" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:17.412" endtime="20210730 15:37:17.412"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:17.412" endtime="20210730 15:37:17.413"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:17.414" endtime="20210730 15:37:17.414"/>
</kw>
<status status="PASS" starttime="20210730 15:37:17.412" endtime="20210730 15:37:17.414"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:17.414" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:17.414" endtime="20210730 15:37:17.414"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:17.414" endtime="20210730 15:37:17.415"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:17.415" endtime="20210730 15:37:17.415"/>
</kw>
<status status="PASS" starttime="20210730 15:37:17.414" endtime="20210730 15:37:17.415"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:17.416" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:17.416" endtime="20210730 15:37:17.416"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:17.416" endtime="20210730 15:37:17.417"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:17.417" endtime="20210730 15:37:17.417"/>
</kw>
<status status="PASS" starttime="20210730 15:37:17.415" endtime="20210730 15:37:17.417"/>
</iter>
<status status="PASS" starttime="20210730 15:37:17.412" endtime="20210730 15:37:17.417"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:37:17.417" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:37:17.417" endtime="20210730 15:37:17.417"/>
</kw>
<status status="PASS" starttime="20210730 15:37:17.410" endtime="20210730 15:37:17.418"/>
</kw>
<status status="PASS" starttime="20210730 15:37:15.862" endtime="20210730 15:37:17.418"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdAB90abcdAB90abcdAB</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:17.419" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:37:17.418" endtime="20210730 15:37:17.419"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:17.419" level="INFO">${payload} = {'password': 'abcdAB90abcdAB90abcdAB'}</msg>
<status status="PASS" starttime="20210730 15:37:17.419" endtime="20210730 15:37:17.419"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:17.429" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:17.429" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:17.419" endtime="20210730 15:37:17.429"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:17.429" endtime="20210730 15:37:17.430"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:17.430" endtime="20210730 15:37:17.430"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:17.419" endtime="20210730 15:37:17.430"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:17.419" endtime="20210730 15:37:17.430"/>
</for>
<status status="FAIL" starttime="20210730 15:37:17.418" endtime="20210730 15:37:17.430"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:17.418" endtime="20210730 15:37:17.430"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdAB90abcdAB90abcdAB</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:17.431" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:37:17.431" endtime="20210730 15:37:17.431"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:17.432" level="INFO">${payload} = {'password': 'abcdAB90abcdAB90abcdAB'}</msg>
<status status="PASS" starttime="20210730 15:37:17.431" endtime="20210730 15:37:17.432"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:17.436" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:17.436" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:17.432" endtime="20210730 15:37:17.436"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:17.437" endtime="20210730 15:37:17.437"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:17.437" endtime="20210730 15:37:17.437"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:17.432" endtime="20210730 15:37:17.437"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:17.432" endtime="20210730 15:37:17.437"/>
</for>
<status status="FAIL" starttime="20210730 15:37:17.430" endtime="20210730 15:37:17.437"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:17.430" endtime="20210730 15:37:17.437"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdAB90abcdAB90abcdAB</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:17.438" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:37:17.438" endtime="20210730 15:37:17.438"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:17.439" level="INFO">${payload} = {'password': 'abcdAB90abcdAB90abcdAB'}</msg>
<status status="PASS" starttime="20210730 15:37:17.438" endtime="20210730 15:37:17.439"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:17.443" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:17.444" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:17.439" endtime="20210730 15:37:17.444"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:17.444" endtime="20210730 15:37:17.444"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:17.444" endtime="20210730 15:37:17.444"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:17.439" endtime="20210730 15:37:17.444"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:17.439" endtime="20210730 15:37:17.444"/>
</for>
<status status="FAIL" starttime="20210730 15:37:17.437" endtime="20210730 15:37:17.444"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:17.437" endtime="20210730 15:37:17.444"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:17.418" endtime="20210730 15:37:17.444"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:17.453" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:17.464" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:17.464" level="INFO">${pids} = 9085
9092
9097</msg>
<status status="PASS" starttime="20210730 15:37:17.446" endtime="20210730 15:37:17.465"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:17.466" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:17.465" endtime="20210730 15:37:17.466"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:17.466" level="INFO">${pids} = ['9085', '9092', '9097']</msg>
<status status="PASS" starttime="20210730 15:37:17.466" endtime="20210730 15:37:17.466"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9085</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:17.470" level="INFO">Running command 'kill 9085 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:17.467" endtime="20210730 15:37:17.470"/>
</kw>
<status status="PASS" starttime="20210730 15:37:17.467" endtime="20210730 15:37:17.470"/>
</iter>
<iter>
<var name="${pid}">9092</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:17.474" level="INFO">Running command 'kill 9092 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:17.471" endtime="20210730 15:37:17.474"/>
</kw>
<status status="PASS" starttime="20210730 15:37:17.470" endtime="20210730 15:37:17.474"/>
</iter>
<iter>
<var name="${pid}">9097</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:17.482" level="INFO">Running command 'kill 9097 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:17.475" endtime="20210730 15:37:17.482"/>
</kw>
<status status="PASS" starttime="20210730 15:37:17.475" endtime="20210730 15:37:17.483"/>
</iter>
<status status="PASS" starttime="20210730 15:37:17.466" endtime="20210730 15:37:17.483"/>
</for>
<status status="PASS" starttime="20210730 15:37:17.466" endtime="20210730 15:37:17.483"/>
</branch>
<status status="PASS" starttime="20210730 15:37:17.466" endtime="20210730 15:37:17.483"/>
</if>
<status status="PASS" starttime="20210730 15:37:17.445" endtime="20210730 15:37:17.483"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcdAB90abcdAB90abcdAB'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:37:15.861" endtime="20210730 15:37:17.483">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t78" name="With Each Valid Token, Updating Password Of Each System User With ABCabc! Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:17.489" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:17.503" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:17.503" level="INFO">${pids} = 9126</msg>
<status status="PASS" starttime="20210730 15:37:17.485" endtime="20210730 15:37:17.503"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:17.504" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:17.503" endtime="20210730 15:37:17.504"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:17.505" level="INFO">${pids} = ['9126']</msg>
<status status="PASS" starttime="20210730 15:37:17.504" endtime="20210730 15:37:17.505"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9126</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:17.511" level="INFO">Running command 'kill 9126 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:17.505" endtime="20210730 15:37:17.512"/>
</kw>
<status status="PASS" starttime="20210730 15:37:17.505" endtime="20210730 15:37:17.513"/>
</iter>
<status status="PASS" starttime="20210730 15:37:17.505" endtime="20210730 15:37:17.513"/>
</for>
<status status="PASS" starttime="20210730 15:37:17.504" endtime="20210730 15:37:17.513"/>
</branch>
<status status="PASS" starttime="20210730 15:37:17.504" endtime="20210730 15:37:17.513"/>
</if>
<status status="PASS" starttime="20210730 15:37:17.485" endtime="20210730 15:37:17.513"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:17.514" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:17.514" endtime="20210730 15:37:17.514"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:17.515" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:17.515" endtime="20210730 15:37:17.515"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:17.516" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:17.515" endtime="20210730 15:37:17.516"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:17.516" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:17.516" endtime="20210730 15:37:17.516"/>
</kw>
<msg timestamp="20210730 15:37:17.516" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:17.515" endtime="20210730 15:37:17.516"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:17.520" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:17.516" endtime="20210730 15:37:17.522"/>
</kw>
<status status="PASS" starttime="20210730 15:37:17.513" endtime="20210730 15:37:17.522"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:37:17.523" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:37:17.523" endtime="20210730 15:37:17.528"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:37:19.030" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:37:17.528" endtime="20210730 15:37:19.030"/>
</kw>
<status status="PASS" starttime="20210730 15:37:17.522" endtime="20210730 15:37:19.030"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:19.032" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:19.031" endtime="20210730 15:37:19.032"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:19.032" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:19.032" endtime="20210730 15:37:19.032"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:19.032" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:19.032" endtime="20210730 15:37:19.033"/>
</kw>
<msg timestamp="20210730 15:37:19.033" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:19.031" endtime="20210730 15:37:19.033"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:37:19.033" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:37:19.033" endtime="20210730 15:37:19.034"/>
</kw>
<status status="PASS" starttime="20210730 15:37:19.031" endtime="20210730 15:37:19.034"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:37:19.034" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:37:19.034" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:37:19.034" endtime="20210730 15:37:19.034"/>
</kw>
<status status="PASS" starttime="20210730 15:37:19.034" endtime="20210730 15:37:19.034"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:37:19.035" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:37:19.036" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:37:19.035" endtime="20210730 15:37:19.036"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:37:19.036" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:37:19.036" endtime="20210730 15:37:19.036"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:19.037" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:19.037" endtime="20210730 15:37:19.037"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:19.037" endtime="20210730 15:37:19.038"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:19.038" endtime="20210730 15:37:19.038"/>
</kw>
<status status="PASS" starttime="20210730 15:37:19.037" endtime="20210730 15:37:19.038"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:19.039" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:19.039" endtime="20210730 15:37:19.039"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:19.039" endtime="20210730 15:37:19.040"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:19.040" endtime="20210730 15:37:19.040"/>
</kw>
<status status="PASS" starttime="20210730 15:37:19.038" endtime="20210730 15:37:19.040"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:19.040" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:19.040" endtime="20210730 15:37:19.040"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:19.041" endtime="20210730 15:37:19.041"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:19.041" endtime="20210730 15:37:19.042"/>
</kw>
<status status="PASS" starttime="20210730 15:37:19.040" endtime="20210730 15:37:19.042"/>
</iter>
<status status="PASS" starttime="20210730 15:37:19.036" endtime="20210730 15:37:19.042"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:37:19.042" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:37:19.042" endtime="20210730 15:37:19.042"/>
</kw>
<status status="PASS" starttime="20210730 15:37:19.035" endtime="20210730 15:37:19.042"/>
</kw>
<status status="PASS" starttime="20210730 15:37:17.485" endtime="20210730 15:37:19.043"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCabc!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:19.045" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:37:19.044" endtime="20210730 15:37:19.045"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:19.046" level="INFO">${payload} = {'password': 'ABCabc!'}</msg>
<status status="PASS" starttime="20210730 15:37:19.045" endtime="20210730 15:37:19.046"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:19.055" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:19.056" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:19.046" endtime="20210730 15:37:19.056"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:19.056" endtime="20210730 15:37:19.056"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:19.056" endtime="20210730 15:37:19.056"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:19.046" endtime="20210730 15:37:19.056"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:19.046" endtime="20210730 15:37:19.056"/>
</for>
<status status="FAIL" starttime="20210730 15:37:19.043" endtime="20210730 15:37:19.056"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:19.043" endtime="20210730 15:37:19.056"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCabc!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:19.058" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:37:19.057" endtime="20210730 15:37:19.058"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:19.058" level="INFO">${payload} = {'password': 'ABCabc!'}</msg>
<status status="PASS" starttime="20210730 15:37:19.058" endtime="20210730 15:37:19.058"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:19.063" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:19.063" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:19.058" endtime="20210730 15:37:19.063"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:19.063" endtime="20210730 15:37:19.063"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:19.063" endtime="20210730 15:37:19.063"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:19.058" endtime="20210730 15:37:19.063"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:19.058" endtime="20210730 15:37:19.063"/>
</for>
<status status="FAIL" starttime="20210730 15:37:19.057" endtime="20210730 15:37:19.063"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:19.057" endtime="20210730 15:37:19.063"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCabc!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:19.065" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:37:19.064" endtime="20210730 15:37:19.065"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:19.065" level="INFO">${payload} = {'password': 'ABCabc!'}</msg>
<status status="PASS" starttime="20210730 15:37:19.065" endtime="20210730 15:37:19.065"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:19.076" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:19.077" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:19.065" endtime="20210730 15:37:19.077"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:19.077" endtime="20210730 15:37:19.077"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:19.077" endtime="20210730 15:37:19.077"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:19.065" endtime="20210730 15:37:19.078"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:19.065" endtime="20210730 15:37:19.078"/>
</for>
<status status="FAIL" starttime="20210730 15:37:19.064" endtime="20210730 15:37:19.078"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:19.064" endtime="20210730 15:37:19.078"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:19.043" endtime="20210730 15:37:19.078"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:19.085" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:19.095" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:19.095" level="INFO">${pids} = 9149
9156
9160</msg>
<status status="PASS" starttime="20210730 15:37:19.079" endtime="20210730 15:37:19.095"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:19.096" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:19.096" endtime="20210730 15:37:19.096"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:19.097" level="INFO">${pids} = ['9149', '9156', '9160']</msg>
<status status="PASS" starttime="20210730 15:37:19.097" endtime="20210730 15:37:19.097"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9149</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:19.101" level="INFO">Running command 'kill 9149 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:19.097" endtime="20210730 15:37:19.101"/>
</kw>
<status status="PASS" starttime="20210730 15:37:19.097" endtime="20210730 15:37:19.101"/>
</iter>
<iter>
<var name="${pid}">9156</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:19.106" level="INFO">Running command 'kill 9156 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:19.102" endtime="20210730 15:37:19.107"/>
</kw>
<status status="PASS" starttime="20210730 15:37:19.101" endtime="20210730 15:37:19.107"/>
</iter>
<iter>
<var name="${pid}">9160</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:19.111" level="INFO">Running command 'kill 9160 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:19.107" endtime="20210730 15:37:19.112"/>
</kw>
<status status="PASS" starttime="20210730 15:37:19.107" endtime="20210730 15:37:19.112"/>
</iter>
<status status="PASS" starttime="20210730 15:37:19.097" endtime="20210730 15:37:19.112"/>
</for>
<status status="PASS" starttime="20210730 15:37:19.097" endtime="20210730 15:37:19.112"/>
</branch>
<status status="PASS" starttime="20210730 15:37:19.096" endtime="20210730 15:37:19.112"/>
</if>
<status status="PASS" starttime="20210730 15:37:19.079" endtime="20210730 15:37:19.112"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABCabc!'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:37:17.484" endtime="20210730 15:37:19.113">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t79" name="With Each Valid Token, Updating Password Of Each System User With ABCabc!? Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:19.118" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:19.130" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:19.130" level="INFO">${pids} = 9189</msg>
<status status="PASS" starttime="20210730 15:37:19.115" endtime="20210730 15:37:19.130"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:19.131" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:19.131" endtime="20210730 15:37:19.131"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:19.132" level="INFO">${pids} = ['9189']</msg>
<status status="PASS" starttime="20210730 15:37:19.132" endtime="20210730 15:37:19.132"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9189</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:19.138" level="INFO">Running command 'kill 9189 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:19.132" endtime="20210730 15:37:19.139"/>
</kw>
<status status="PASS" starttime="20210730 15:37:19.132" endtime="20210730 15:37:19.139"/>
</iter>
<status status="PASS" starttime="20210730 15:37:19.132" endtime="20210730 15:37:19.139"/>
</for>
<status status="PASS" starttime="20210730 15:37:19.131" endtime="20210730 15:37:19.139"/>
</branch>
<status status="PASS" starttime="20210730 15:37:19.131" endtime="20210730 15:37:19.140"/>
</if>
<status status="PASS" starttime="20210730 15:37:19.114" endtime="20210730 15:37:19.140"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:19.141" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:19.141" endtime="20210730 15:37:19.141"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:19.142" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:19.142" endtime="20210730 15:37:19.142"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:19.143" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:19.143" endtime="20210730 15:37:19.143"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:19.144" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:19.144" endtime="20210730 15:37:19.144"/>
</kw>
<msg timestamp="20210730 15:37:19.144" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:19.141" endtime="20210730 15:37:19.144"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:19.148" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:19.145" endtime="20210730 15:37:19.150"/>
</kw>
<status status="PASS" starttime="20210730 15:37:19.140" endtime="20210730 15:37:19.151"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:37:19.152" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:37:19.152" endtime="20210730 15:37:19.158"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:37:20.659" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:37:19.158" endtime="20210730 15:37:20.660"/>
</kw>
<status status="PASS" starttime="20210730 15:37:19.151" endtime="20210730 15:37:20.660"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:20.661" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:20.661" endtime="20210730 15:37:20.661"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:20.662" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:20.661" endtime="20210730 15:37:20.662"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:20.662" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:20.662" endtime="20210730 15:37:20.662"/>
</kw>
<msg timestamp="20210730 15:37:20.662" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:20.661" endtime="20210730 15:37:20.662"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:37:20.663" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:37:20.663" endtime="20210730 15:37:20.663"/>
</kw>
<status status="PASS" starttime="20210730 15:37:20.660" endtime="20210730 15:37:20.663"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:37:20.664" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:37:20.664" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:37:20.664" endtime="20210730 15:37:20.664"/>
</kw>
<status status="PASS" starttime="20210730 15:37:20.663" endtime="20210730 15:37:20.664"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:37:20.665" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:37:20.665" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:37:20.665" endtime="20210730 15:37:20.665"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:37:20.666" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:37:20.665" endtime="20210730 15:37:20.666"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:20.667" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:20.666" endtime="20210730 15:37:20.667"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:20.667" endtime="20210730 15:37:20.667"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:20.667" endtime="20210730 15:37:20.668"/>
</kw>
<status status="PASS" starttime="20210730 15:37:20.666" endtime="20210730 15:37:20.668"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:20.668" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:20.668" endtime="20210730 15:37:20.668"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:20.668" endtime="20210730 15:37:20.669"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:20.669" endtime="20210730 15:37:20.669"/>
</kw>
<status status="PASS" starttime="20210730 15:37:20.668" endtime="20210730 15:37:20.669"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:20.669" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:20.669" endtime="20210730 15:37:20.670"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:20.670" endtime="20210730 15:37:20.670"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:20.670" endtime="20210730 15:37:20.671"/>
</kw>
<status status="PASS" starttime="20210730 15:37:20.669" endtime="20210730 15:37:20.671"/>
</iter>
<status status="PASS" starttime="20210730 15:37:20.666" endtime="20210730 15:37:20.671"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:37:20.671" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:37:20.671" endtime="20210730 15:37:20.671"/>
</kw>
<status status="PASS" starttime="20210730 15:37:20.664" endtime="20210730 15:37:20.671"/>
</kw>
<status status="PASS" starttime="20210730 15:37:19.114" endtime="20210730 15:37:20.671"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCabc!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:20.672" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:37:20.672" endtime="20210730 15:37:20.672"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:20.673" level="INFO">${payload} = {'password': 'ABCabc!?'}</msg>
<status status="PASS" starttime="20210730 15:37:20.673" endtime="20210730 15:37:20.673"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:20.683" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:20.683" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:20.673" endtime="20210730 15:37:20.683"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:20.683" endtime="20210730 15:37:20.684"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:20.684" endtime="20210730 15:37:20.684"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:20.673" endtime="20210730 15:37:20.684"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:20.673" endtime="20210730 15:37:20.684"/>
</for>
<status status="FAIL" starttime="20210730 15:37:20.672" endtime="20210730 15:37:20.684"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:20.672" endtime="20210730 15:37:20.684"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCabc!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:20.685" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:37:20.685" endtime="20210730 15:37:20.685"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:20.686" level="INFO">${payload} = {'password': 'ABCabc!?'}</msg>
<status status="PASS" starttime="20210730 15:37:20.685" endtime="20210730 15:37:20.686"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:20.690" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:20.690" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:20.686" endtime="20210730 15:37:20.690"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:20.690" endtime="20210730 15:37:20.690"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:20.690" endtime="20210730 15:37:20.690"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:20.686" endtime="20210730 15:37:20.690"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:20.686" endtime="20210730 15:37:20.691"/>
</for>
<status status="FAIL" starttime="20210730 15:37:20.684" endtime="20210730 15:37:20.691"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:20.684" endtime="20210730 15:37:20.691"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCabc!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:20.692" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:37:20.691" endtime="20210730 15:37:20.692"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:20.692" level="INFO">${payload} = {'password': 'ABCabc!?'}</msg>
<status status="PASS" starttime="20210730 15:37:20.692" endtime="20210730 15:37:20.692"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:20.696" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:20.697" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:20.692" endtime="20210730 15:37:20.697"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:20.697" endtime="20210730 15:37:20.697"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:20.697" endtime="20210730 15:37:20.697"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:20.692" endtime="20210730 15:37:20.697"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:20.692" endtime="20210730 15:37:20.697"/>
</for>
<status status="FAIL" starttime="20210730 15:37:20.691" endtime="20210730 15:37:20.697"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:20.691" endtime="20210730 15:37:20.697"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:20.671" endtime="20210730 15:37:20.697"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:20.703" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:20.719" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:20.719" level="INFO">${pids} = 9212
9219
9223</msg>
<status status="PASS" starttime="20210730 15:37:20.699" endtime="20210730 15:37:20.719"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:20.720" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:20.720" endtime="20210730 15:37:20.720"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:20.721" level="INFO">${pids} = ['9212', '9219', '9223']</msg>
<status status="PASS" starttime="20210730 15:37:20.721" endtime="20210730 15:37:20.721"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9212</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:20.724" level="INFO">Running command 'kill 9212 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:20.721" endtime="20210730 15:37:20.725"/>
</kw>
<status status="PASS" starttime="20210730 15:37:20.721" endtime="20210730 15:37:20.725"/>
</iter>
<iter>
<var name="${pid}">9219</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:20.729" level="INFO">Running command 'kill 9219 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:20.725" endtime="20210730 15:37:20.730"/>
</kw>
<status status="PASS" starttime="20210730 15:37:20.725" endtime="20210730 15:37:20.730"/>
</iter>
<iter>
<var name="${pid}">9223</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:20.734" level="INFO">Running command 'kill 9223 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:20.730" endtime="20210730 15:37:20.735"/>
</kw>
<status status="PASS" starttime="20210730 15:37:20.730" endtime="20210730 15:37:20.735"/>
</iter>
<status status="PASS" starttime="20210730 15:37:20.721" endtime="20210730 15:37:20.735"/>
</for>
<status status="PASS" starttime="20210730 15:37:20.720" endtime="20210730 15:37:20.735"/>
</branch>
<status status="PASS" starttime="20210730 15:37:20.720" endtime="20210730 15:37:20.735"/>
</if>
<status status="PASS" starttime="20210730 15:37:20.698" endtime="20210730 15:37:20.735"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABCabc!?'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:37:19.113" endtime="20210730 15:37:20.735">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t80" name="With Each Valid Token, Updating Password Of Each System User With ABCabc!?ABCabc!?ABCab. Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:20.742" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:20.754" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:20.754" level="INFO">${pids} = 9252</msg>
<status status="PASS" starttime="20210730 15:37:20.738" endtime="20210730 15:37:20.754"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:20.755" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:20.755" endtime="20210730 15:37:20.755"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:20.756" level="INFO">${pids} = ['9252']</msg>
<status status="PASS" starttime="20210730 15:37:20.756" endtime="20210730 15:37:20.756"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9252</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:20.768" level="INFO">Running command 'kill 9252 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:20.757" endtime="20210730 15:37:20.769"/>
</kw>
<status status="PASS" starttime="20210730 15:37:20.756" endtime="20210730 15:37:20.769"/>
</iter>
<status status="PASS" starttime="20210730 15:37:20.756" endtime="20210730 15:37:20.769"/>
</for>
<status status="PASS" starttime="20210730 15:37:20.756" endtime="20210730 15:37:20.769"/>
</branch>
<status status="PASS" starttime="20210730 15:37:20.756" endtime="20210730 15:37:20.769"/>
</if>
<status status="PASS" starttime="20210730 15:37:20.738" endtime="20210730 15:37:20.769"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:20.771" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:20.770" endtime="20210730 15:37:20.771"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:20.772" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:20.771" endtime="20210730 15:37:20.772"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:20.772" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:20.772" endtime="20210730 15:37:20.772"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:20.775" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:20.772" endtime="20210730 15:37:20.775"/>
</kw>
<msg timestamp="20210730 15:37:20.775" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:20.771" endtime="20210730 15:37:20.775"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:20.780" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:20.775" endtime="20210730 15:37:20.782"/>
</kw>
<status status="PASS" starttime="20210730 15:37:20.770" endtime="20210730 15:37:20.782"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:37:20.792" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:37:20.792" endtime="20210730 15:37:20.799"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:37:22.301" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:37:20.799" endtime="20210730 15:37:22.302"/>
</kw>
<status status="PASS" starttime="20210730 15:37:20.782" endtime="20210730 15:37:22.303"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:22.306" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:22.306" endtime="20210730 15:37:22.306"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:22.307" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:22.306" endtime="20210730 15:37:22.307"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:22.307" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:22.307" endtime="20210730 15:37:22.307"/>
</kw>
<msg timestamp="20210730 15:37:22.307" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:22.305" endtime="20210730 15:37:22.307"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:37:22.308" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:37:22.307" endtime="20210730 15:37:22.308"/>
</kw>
<status status="PASS" starttime="20210730 15:37:22.303" endtime="20210730 15:37:22.308"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:37:22.309" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:37:22.309" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:37:22.308" endtime="20210730 15:37:22.309"/>
</kw>
<status status="PASS" starttime="20210730 15:37:22.308" endtime="20210730 15:37:22.309"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:37:22.311" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:37:22.312" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:37:22.310" endtime="20210730 15:37:22.312"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:37:22.312" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:37:22.312" endtime="20210730 15:37:22.312"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:22.313" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:22.313" endtime="20210730 15:37:22.313"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:22.313" endtime="20210730 15:37:22.314"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:22.314" endtime="20210730 15:37:22.314"/>
</kw>
<status status="PASS" starttime="20210730 15:37:22.313" endtime="20210730 15:37:22.314"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:22.315" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:22.314" endtime="20210730 15:37:22.315"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:22.315" endtime="20210730 15:37:22.316"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:22.316" endtime="20210730 15:37:22.316"/>
</kw>
<status status="PASS" starttime="20210730 15:37:22.314" endtime="20210730 15:37:22.316"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:22.316" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:22.316" endtime="20210730 15:37:22.316"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:22.316" endtime="20210730 15:37:22.317"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:22.317" endtime="20210730 15:37:22.317"/>
</kw>
<status status="PASS" starttime="20210730 15:37:22.316" endtime="20210730 15:37:22.317"/>
</iter>
<status status="PASS" starttime="20210730 15:37:22.312" endtime="20210730 15:37:22.317"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:37:22.318" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:37:22.318" endtime="20210730 15:37:22.318"/>
</kw>
<status status="PASS" starttime="20210730 15:37:22.309" endtime="20210730 15:37:22.318"/>
</kw>
<status status="PASS" starttime="20210730 15:37:20.737" endtime="20210730 15:37:22.318"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCabc!?ABCabc!?ABCab.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:22.319" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:37:22.319" endtime="20210730 15:37:22.319"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:22.320" level="INFO">${payload} = {'password': 'ABCabc!?ABCabc!?ABCab.'}</msg>
<status status="PASS" starttime="20210730 15:37:22.319" endtime="20210730 15:37:22.320"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:22.329" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:22.330" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:22.320" endtime="20210730 15:37:22.330"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:22.330" endtime="20210730 15:37:22.330"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:22.330" endtime="20210730 15:37:22.330"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:22.320" endtime="20210730 15:37:22.330"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:22.320" endtime="20210730 15:37:22.330"/>
</for>
<status status="FAIL" starttime="20210730 15:37:22.319" endtime="20210730 15:37:22.331"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:22.318" endtime="20210730 15:37:22.331"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCabc!?ABCabc!?ABCab.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:22.332" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:37:22.332" endtime="20210730 15:37:22.332"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:22.332" level="INFO">${payload} = {'password': 'ABCabc!?ABCabc!?ABCab.'}</msg>
<status status="PASS" starttime="20210730 15:37:22.332" endtime="20210730 15:37:22.332"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:22.336" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:22.337" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:22.333" endtime="20210730 15:37:22.337"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:22.337" endtime="20210730 15:37:22.337"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:22.337" endtime="20210730 15:37:22.337"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:22.332" endtime="20210730 15:37:22.337"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:22.332" endtime="20210730 15:37:22.337"/>
</for>
<status status="FAIL" starttime="20210730 15:37:22.331" endtime="20210730 15:37:22.337"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:22.331" endtime="20210730 15:37:22.337"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCabc!?ABCabc!?ABCab.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:22.338" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:37:22.338" endtime="20210730 15:37:22.338"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:22.339" level="INFO">${payload} = {'password': 'ABCabc!?ABCabc!?ABCab.'}</msg>
<status status="PASS" starttime="20210730 15:37:22.338" endtime="20210730 15:37:22.339"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:22.343" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:22.343" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:22.339" endtime="20210730 15:37:22.343"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:22.343" endtime="20210730 15:37:22.343"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:22.343" endtime="20210730 15:37:22.344"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:22.339" endtime="20210730 15:37:22.344"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:22.339" endtime="20210730 15:37:22.344"/>
</for>
<status status="FAIL" starttime="20210730 15:37:22.337" endtime="20210730 15:37:22.344"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:22.337" endtime="20210730 15:37:22.344"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:22.318" endtime="20210730 15:37:22.344"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:22.351" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:22.362" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:22.363" level="INFO">${pids} = 9275
9282
9287</msg>
<status status="PASS" starttime="20210730 15:37:22.346" endtime="20210730 15:37:22.363"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:22.363" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:22.363" endtime="20210730 15:37:22.364"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:22.364" level="INFO">${pids} = ['9275', '9282', '9287']</msg>
<status status="PASS" starttime="20210730 15:37:22.364" endtime="20210730 15:37:22.364"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9275</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:22.368" level="INFO">Running command 'kill 9275 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:22.364" endtime="20210730 15:37:22.368"/>
</kw>
<status status="PASS" starttime="20210730 15:37:22.364" endtime="20210730 15:37:22.368"/>
</iter>
<iter>
<var name="${pid}">9282</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:22.371" level="INFO">Running command 'kill 9282 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:22.369" endtime="20210730 15:37:22.372"/>
</kw>
<status status="PASS" starttime="20210730 15:37:22.368" endtime="20210730 15:37:22.372"/>
</iter>
<iter>
<var name="${pid}">9287</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:22.380" level="INFO">Running command 'kill 9287 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:22.372" endtime="20210730 15:37:22.381"/>
</kw>
<status status="PASS" starttime="20210730 15:37:22.372" endtime="20210730 15:37:22.382"/>
</iter>
<status status="PASS" starttime="20210730 15:37:22.364" endtime="20210730 15:37:22.382"/>
</for>
<status status="PASS" starttime="20210730 15:37:22.364" endtime="20210730 15:37:22.382"/>
</branch>
<status status="PASS" starttime="20210730 15:37:22.364" endtime="20210730 15:37:22.382"/>
</if>
<status status="PASS" starttime="20210730 15:37:22.344" endtime="20210730 15:37:22.382"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABCabc!?ABCabc!?ABCab.'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:37:20.736" endtime="20210730 15:37:22.382">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t81" name="With Each Valid Token, Updating Password Of Each System User With abc012. Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:22.392" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:22.402" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:22.402" level="INFO">${pids} = 9316</msg>
<status status="PASS" starttime="20210730 15:37:22.389" endtime="20210730 15:37:22.402"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:22.403" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:22.403" endtime="20210730 15:37:22.403"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:22.404" level="INFO">${pids} = ['9316']</msg>
<status status="PASS" starttime="20210730 15:37:22.404" endtime="20210730 15:37:22.404"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9316</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:22.409" level="INFO">Running command 'kill 9316 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:22.404" endtime="20210730 15:37:22.410"/>
</kw>
<status status="PASS" starttime="20210730 15:37:22.404" endtime="20210730 15:37:22.411"/>
</iter>
<status status="PASS" starttime="20210730 15:37:22.404" endtime="20210730 15:37:22.411"/>
</for>
<status status="PASS" starttime="20210730 15:37:22.403" endtime="20210730 15:37:22.411"/>
</branch>
<status status="PASS" starttime="20210730 15:37:22.403" endtime="20210730 15:37:22.411"/>
</if>
<status status="PASS" starttime="20210730 15:37:22.389" endtime="20210730 15:37:22.412"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:22.413" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:22.412" endtime="20210730 15:37:22.413"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:22.414" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:22.413" endtime="20210730 15:37:22.414"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:22.415" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:22.414" endtime="20210730 15:37:22.415"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:22.415" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:22.415" endtime="20210730 15:37:22.415"/>
</kw>
<msg timestamp="20210730 15:37:22.416" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:22.413" endtime="20210730 15:37:22.416"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:22.419" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:22.416" endtime="20210730 15:37:22.420"/>
</kw>
<status status="PASS" starttime="20210730 15:37:22.412" endtime="20210730 15:37:22.421"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:37:22.422" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:37:22.421" endtime="20210730 15:37:22.450"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:37:23.956" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:37:22.451" endtime="20210730 15:37:23.956"/>
</kw>
<status status="PASS" starttime="20210730 15:37:22.421" endtime="20210730 15:37:23.956"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:23.957" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:23.957" endtime="20210730 15:37:23.957"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:23.958" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:23.958" endtime="20210730 15:37:23.958"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:23.958" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:23.958" endtime="20210730 15:37:23.958"/>
</kw>
<msg timestamp="20210730 15:37:23.958" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:23.957" endtime="20210730 15:37:23.958"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:37:23.959" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:37:23.958" endtime="20210730 15:37:23.959"/>
</kw>
<status status="PASS" starttime="20210730 15:37:23.956" endtime="20210730 15:37:23.959"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:37:23.960" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:37:23.960" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:37:23.960" endtime="20210730 15:37:23.960"/>
</kw>
<status status="PASS" starttime="20210730 15:37:23.959" endtime="20210730 15:37:23.960"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:37:23.961" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:37:23.961" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:37:23.960" endtime="20210730 15:37:23.961"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:37:23.961" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:37:23.961" endtime="20210730 15:37:23.961"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:23.962" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:23.962" endtime="20210730 15:37:23.962"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:23.962" endtime="20210730 15:37:23.963"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:23.963" endtime="20210730 15:37:23.963"/>
</kw>
<status status="PASS" starttime="20210730 15:37:23.962" endtime="20210730 15:37:23.963"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:23.964" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:23.963" endtime="20210730 15:37:23.964"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:23.964" endtime="20210730 15:37:23.964"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:23.965" endtime="20210730 15:37:23.965"/>
</kw>
<status status="PASS" starttime="20210730 15:37:23.963" endtime="20210730 15:37:23.965"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:23.965" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:23.965" endtime="20210730 15:37:23.965"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:23.965" endtime="20210730 15:37:23.966"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:23.966" endtime="20210730 15:37:23.967"/>
</kw>
<status status="PASS" starttime="20210730 15:37:23.965" endtime="20210730 15:37:23.967"/>
</iter>
<status status="PASS" starttime="20210730 15:37:23.961" endtime="20210730 15:37:23.967"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:37:23.967" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:37:23.967" endtime="20210730 15:37:23.967"/>
</kw>
<status status="PASS" starttime="20210730 15:37:23.960" endtime="20210730 15:37:23.967"/>
</kw>
<status status="PASS" starttime="20210730 15:37:22.388" endtime="20210730 15:37:23.967"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc012.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:23.969" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:37:23.968" endtime="20210730 15:37:23.969"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:23.969" level="INFO">${payload} = {'password': 'abc012.'}</msg>
<status status="PASS" starttime="20210730 15:37:23.969" endtime="20210730 15:37:23.969"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:23.979" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:23.980" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:23.969" endtime="20210730 15:37:23.980"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:23.980" endtime="20210730 15:37:23.980"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:23.980" endtime="20210730 15:37:23.980"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:23.969" endtime="20210730 15:37:23.980"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:23.969" endtime="20210730 15:37:23.980"/>
</for>
<status status="FAIL" starttime="20210730 15:37:23.968" endtime="20210730 15:37:23.981"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:23.968" endtime="20210730 15:37:23.981"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc012.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:23.982" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:37:23.982" endtime="20210730 15:37:23.982"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:23.983" level="INFO">${payload} = {'password': 'abc012.'}</msg>
<status status="PASS" starttime="20210730 15:37:23.982" endtime="20210730 15:37:23.983"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:23.987" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:23.987" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:23.983" endtime="20210730 15:37:23.987"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:23.987" endtime="20210730 15:37:23.987"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:23.988" endtime="20210730 15:37:23.988"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:23.983" endtime="20210730 15:37:23.988"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:23.983" endtime="20210730 15:37:23.988"/>
</for>
<status status="FAIL" starttime="20210730 15:37:23.981" endtime="20210730 15:37:23.988"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:23.981" endtime="20210730 15:37:23.988"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc012.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:23.989" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:37:23.989" endtime="20210730 15:37:23.989"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:23.989" level="INFO">${payload} = {'password': 'abc012.'}</msg>
<status status="PASS" starttime="20210730 15:37:23.989" endtime="20210730 15:37:23.989"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:23.993" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:23.994" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:23.990" endtime="20210730 15:37:23.994"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:23.994" endtime="20210730 15:37:23.994"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:23.994" endtime="20210730 15:37:23.994"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:23.990" endtime="20210730 15:37:23.994"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:23.989" endtime="20210730 15:37:23.994"/>
</for>
<status status="FAIL" starttime="20210730 15:37:23.988" endtime="20210730 15:37:23.995"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:23.988" endtime="20210730 15:37:23.995"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:23.968" endtime="20210730 15:37:23.995"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:24.005" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:24.016" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:24.017" level="INFO">${pids} = 9339
9346
9353</msg>
<status status="PASS" starttime="20210730 15:37:23.996" endtime="20210730 15:37:24.017"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:24.018" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:24.017" endtime="20210730 15:37:24.018"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:24.018" level="INFO">${pids} = ['9339', '9346', '9353']</msg>
<status status="PASS" starttime="20210730 15:37:24.018" endtime="20210730 15:37:24.018"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9339</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:24.022" level="INFO">Running command 'kill 9339 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:24.019" endtime="20210730 15:37:24.022"/>
</kw>
<status status="PASS" starttime="20210730 15:37:24.019" endtime="20210730 15:37:24.023"/>
</iter>
<iter>
<var name="${pid}">9346</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:24.028" level="INFO">Running command 'kill 9346 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:24.023" endtime="20210730 15:37:24.028"/>
</kw>
<status status="PASS" starttime="20210730 15:37:24.023" endtime="20210730 15:37:24.028"/>
</iter>
<iter>
<var name="${pid}">9353</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:24.038" level="INFO">Running command 'kill 9353 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:24.029" endtime="20210730 15:37:24.039"/>
</kw>
<status status="PASS" starttime="20210730 15:37:24.029" endtime="20210730 15:37:24.039"/>
</iter>
<status status="PASS" starttime="20210730 15:37:24.019" endtime="20210730 15:37:24.039"/>
</for>
<status status="PASS" starttime="20210730 15:37:24.018" endtime="20210730 15:37:24.039"/>
</branch>
<status status="PASS" starttime="20210730 15:37:24.018" endtime="20210730 15:37:24.039"/>
</if>
<status status="PASS" starttime="20210730 15:37:23.995" endtime="20210730 15:37:24.040"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abc012.'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:37:22.387" endtime="20210730 15:37:24.040">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t82" name="With Each Valid Token, Updating Password Of Each System User With abc012!? Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:24.046" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:24.057" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:24.057" level="INFO">${pids} = 9382</msg>
<status status="PASS" starttime="20210730 15:37:24.042" endtime="20210730 15:37:24.057"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:24.058" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:24.058" endtime="20210730 15:37:24.058"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:24.059" level="INFO">${pids} = ['9382']</msg>
<status status="PASS" starttime="20210730 15:37:24.059" endtime="20210730 15:37:24.059"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9382</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:24.064" level="INFO">Running command 'kill 9382 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:24.060" endtime="20210730 15:37:24.065"/>
</kw>
<status status="PASS" starttime="20210730 15:37:24.060" endtime="20210730 15:37:24.065"/>
</iter>
<status status="PASS" starttime="20210730 15:37:24.059" endtime="20210730 15:37:24.065"/>
</for>
<status status="PASS" starttime="20210730 15:37:24.059" endtime="20210730 15:37:24.065"/>
</branch>
<status status="PASS" starttime="20210730 15:37:24.058" endtime="20210730 15:37:24.065"/>
</if>
<status status="PASS" starttime="20210730 15:37:24.041" endtime="20210730 15:37:24.065"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:24.066" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:24.066" endtime="20210730 15:37:24.066"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:24.067" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:24.067" endtime="20210730 15:37:24.067"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:24.067" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:24.067" endtime="20210730 15:37:24.067"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:24.068" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:24.068" endtime="20210730 15:37:24.068"/>
</kw>
<msg timestamp="20210730 15:37:24.068" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:24.067" endtime="20210730 15:37:24.068"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:24.072" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:24.068" endtime="20210730 15:37:24.073"/>
</kw>
<status status="PASS" starttime="20210730 15:37:24.066" endtime="20210730 15:37:24.074"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:37:24.075" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:37:24.074" endtime="20210730 15:37:24.093"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:37:25.598" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:37:24.094" endtime="20210730 15:37:25.598"/>
</kw>
<status status="PASS" starttime="20210730 15:37:24.074" endtime="20210730 15:37:25.599"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:25.605" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:25.604" endtime="20210730 15:37:25.605"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:25.606" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:25.605" endtime="20210730 15:37:25.606"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:25.607" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:25.607" endtime="20210730 15:37:25.608"/>
</kw>
<msg timestamp="20210730 15:37:25.608" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:25.602" endtime="20210730 15:37:25.608"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:37:25.610" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:37:25.609" endtime="20210730 15:37:25.611"/>
</kw>
<status status="PASS" starttime="20210730 15:37:25.600" endtime="20210730 15:37:25.611"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:37:25.612" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:37:25.612" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:37:25.612" endtime="20210730 15:37:25.613"/>
</kw>
<status status="PASS" starttime="20210730 15:37:25.611" endtime="20210730 15:37:25.613"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:37:25.615" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:37:25.615" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:37:25.614" endtime="20210730 15:37:25.616"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:37:25.616" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:37:25.616" endtime="20210730 15:37:25.616"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:25.617" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:25.617" endtime="20210730 15:37:25.617"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:25.617" endtime="20210730 15:37:25.618"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:25.619" endtime="20210730 15:37:25.619"/>
</kw>
<status status="PASS" starttime="20210730 15:37:25.616" endtime="20210730 15:37:25.619"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:25.620" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:25.619" endtime="20210730 15:37:25.620"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:25.620" endtime="20210730 15:37:25.621"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:25.621" endtime="20210730 15:37:25.621"/>
</kw>
<status status="PASS" starttime="20210730 15:37:25.619" endtime="20210730 15:37:25.621"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:25.622" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:25.621" endtime="20210730 15:37:25.622"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:25.622" endtime="20210730 15:37:25.623"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:25.623" endtime="20210730 15:37:25.623"/>
</kw>
<status status="PASS" starttime="20210730 15:37:25.621" endtime="20210730 15:37:25.623"/>
</iter>
<status status="PASS" starttime="20210730 15:37:25.616" endtime="20210730 15:37:25.623"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:37:25.624" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:37:25.623" endtime="20210730 15:37:25.624"/>
</kw>
<status status="PASS" starttime="20210730 15:37:25.613" endtime="20210730 15:37:25.624"/>
</kw>
<status status="PASS" starttime="20210730 15:37:24.041" endtime="20210730 15:37:25.624"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc012!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:25.626" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:37:25.625" endtime="20210730 15:37:25.626"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:25.626" level="INFO">${payload} = {'password': 'abc012!?'}</msg>
<status status="PASS" starttime="20210730 15:37:25.626" endtime="20210730 15:37:25.626"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:25.635" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:25.636" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:25.627" endtime="20210730 15:37:25.636"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:25.636" endtime="20210730 15:37:25.636"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:25.637" endtime="20210730 15:37:25.637"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:25.627" endtime="20210730 15:37:25.637"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:25.626" endtime="20210730 15:37:25.637"/>
</for>
<status status="FAIL" starttime="20210730 15:37:25.625" endtime="20210730 15:37:25.637"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:25.625" endtime="20210730 15:37:25.637"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc012!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:25.638" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:37:25.638" endtime="20210730 15:37:25.638"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:25.639" level="INFO">${payload} = {'password': 'abc012!?'}</msg>
<status status="PASS" starttime="20210730 15:37:25.638" endtime="20210730 15:37:25.639"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:25.644" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:25.644" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:25.639" endtime="20210730 15:37:25.644"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:25.644" endtime="20210730 15:37:25.644"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:25.644" endtime="20210730 15:37:25.644"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:25.639" endtime="20210730 15:37:25.644"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:25.639" endtime="20210730 15:37:25.645"/>
</for>
<status status="FAIL" starttime="20210730 15:37:25.637" endtime="20210730 15:37:25.645"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:25.637" endtime="20210730 15:37:25.645"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc012!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:25.646" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:37:25.646" endtime="20210730 15:37:25.646"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:25.646" level="INFO">${payload} = {'password': 'abc012!?'}</msg>
<status status="PASS" starttime="20210730 15:37:25.646" endtime="20210730 15:37:25.647"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:25.651" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:25.652" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:25.647" endtime="20210730 15:37:25.652"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:25.652" endtime="20210730 15:37:25.652"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:25.652" endtime="20210730 15:37:25.652"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:25.647" endtime="20210730 15:37:25.652"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:25.647" endtime="20210730 15:37:25.652"/>
</for>
<status status="FAIL" starttime="20210730 15:37:25.645" endtime="20210730 15:37:25.652"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:25.645" endtime="20210730 15:37:25.652"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:25.624" endtime="20210730 15:37:25.652"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:25.663" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:25.673" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:25.673" level="INFO">${pids} = 9405
9412
9416</msg>
<status status="PASS" starttime="20210730 15:37:25.655" endtime="20210730 15:37:25.673"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:25.674" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:25.673" endtime="20210730 15:37:25.674"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:25.674" level="INFO">${pids} = ['9405', '9412', '9416']</msg>
<status status="PASS" starttime="20210730 15:37:25.674" endtime="20210730 15:37:25.674"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9405</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:25.681" level="INFO">Running command 'kill 9405 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:25.675" endtime="20210730 15:37:25.682"/>
</kw>
<status status="PASS" starttime="20210730 15:37:25.675" endtime="20210730 15:37:25.682"/>
</iter>
<iter>
<var name="${pid}">9412</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:25.690" level="INFO">Running command 'kill 9412 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:25.682" endtime="20210730 15:37:25.690"/>
</kw>
<status status="PASS" starttime="20210730 15:37:25.682" endtime="20210730 15:37:25.691"/>
</iter>
<iter>
<var name="${pid}">9416</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:25.696" level="INFO">Running command 'kill 9416 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:25.691" endtime="20210730 15:37:25.696"/>
</kw>
<status status="PASS" starttime="20210730 15:37:25.691" endtime="20210730 15:37:25.696"/>
</iter>
<status status="PASS" starttime="20210730 15:37:25.675" endtime="20210730 15:37:25.697"/>
</for>
<status status="PASS" starttime="20210730 15:37:25.674" endtime="20210730 15:37:25.697"/>
</branch>
<status status="PASS" starttime="20210730 15:37:25.674" endtime="20210730 15:37:25.697"/>
</if>
<status status="PASS" starttime="20210730 15:37:25.653" endtime="20210730 15:37:25.697"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abc012!?'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:37:24.040" endtime="20210730 15:37:25.697">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t83" name="With Each Valid Token, Updating Password Of Each System User With abc012!?abc012!?abc012 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:25.702" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:25.712" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:25.712" level="INFO">${pids} = 9445</msg>
<status status="PASS" starttime="20210730 15:37:25.699" endtime="20210730 15:37:25.712"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:25.713" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:25.713" endtime="20210730 15:37:25.713"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:25.714" level="INFO">${pids} = ['9445']</msg>
<status status="PASS" starttime="20210730 15:37:25.714" endtime="20210730 15:37:25.714"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9445</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:25.721" level="INFO">Running command 'kill 9445 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:25.718" endtime="20210730 15:37:25.722"/>
</kw>
<status status="PASS" starttime="20210730 15:37:25.717" endtime="20210730 15:37:25.722"/>
</iter>
<status status="PASS" starttime="20210730 15:37:25.715" endtime="20210730 15:37:25.722"/>
</for>
<status status="PASS" starttime="20210730 15:37:25.714" endtime="20210730 15:37:25.722"/>
</branch>
<status status="PASS" starttime="20210730 15:37:25.713" endtime="20210730 15:37:25.722"/>
</if>
<status status="PASS" starttime="20210730 15:37:25.699" endtime="20210730 15:37:25.722"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:25.723" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:25.723" endtime="20210730 15:37:25.723"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:25.724" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:25.724" endtime="20210730 15:37:25.724"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:25.724" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:25.724" endtime="20210730 15:37:25.724"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:25.725" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:25.724" endtime="20210730 15:37:25.725"/>
</kw>
<msg timestamp="20210730 15:37:25.725" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:25.723" endtime="20210730 15:37:25.725"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:25.729" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:25.725" endtime="20210730 15:37:25.730"/>
</kw>
<status status="PASS" starttime="20210730 15:37:25.722" endtime="20210730 15:37:25.731"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:37:25.732" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:37:25.731" endtime="20210730 15:37:25.748"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:37:27.249" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:37:25.748" endtime="20210730 15:37:27.249"/>
</kw>
<status status="PASS" starttime="20210730 15:37:25.731" endtime="20210730 15:37:27.250"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:27.251" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:27.251" endtime="20210730 15:37:27.251"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:27.252" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:27.251" endtime="20210730 15:37:27.252"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:27.252" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:27.252" endtime="20210730 15:37:27.252"/>
</kw>
<msg timestamp="20210730 15:37:27.252" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:27.251" endtime="20210730 15:37:27.252"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:37:27.253" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:37:27.252" endtime="20210730 15:37:27.253"/>
</kw>
<status status="PASS" starttime="20210730 15:37:27.250" endtime="20210730 15:37:27.253"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:37:27.254" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:37:27.254" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:37:27.253" endtime="20210730 15:37:27.254"/>
</kw>
<status status="PASS" starttime="20210730 15:37:27.253" endtime="20210730 15:37:27.254"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:37:27.255" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:37:27.255" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:37:27.254" endtime="20210730 15:37:27.255"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:37:27.255" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:37:27.255" endtime="20210730 15:37:27.255"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:27.256" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:27.256" endtime="20210730 15:37:27.256"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:27.256" endtime="20210730 15:37:27.257"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:27.257" endtime="20210730 15:37:27.257"/>
</kw>
<status status="PASS" starttime="20210730 15:37:27.255" endtime="20210730 15:37:27.257"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:27.257" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:27.257" endtime="20210730 15:37:27.257"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:27.258" endtime="20210730 15:37:27.258"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:27.258" endtime="20210730 15:37:27.259"/>
</kw>
<status status="PASS" starttime="20210730 15:37:27.257" endtime="20210730 15:37:27.259"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:27.259" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:27.259" endtime="20210730 15:37:27.259"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:27.259" endtime="20210730 15:37:27.260"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:27.260" endtime="20210730 15:37:27.260"/>
</kw>
<status status="PASS" starttime="20210730 15:37:27.259" endtime="20210730 15:37:27.260"/>
</iter>
<status status="PASS" starttime="20210730 15:37:27.255" endtime="20210730 15:37:27.260"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:37:27.261" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:37:27.260" endtime="20210730 15:37:27.261"/>
</kw>
<status status="PASS" starttime="20210730 15:37:27.254" endtime="20210730 15:37:27.261"/>
</kw>
<status status="PASS" starttime="20210730 15:37:25.698" endtime="20210730 15:37:27.261"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc012!?abc012!?abc012</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:27.262" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:37:27.262" endtime="20210730 15:37:27.262"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:27.263" level="INFO">${payload} = {'password': 'abc012!?abc012!?abc012'}</msg>
<status status="PASS" starttime="20210730 15:37:27.262" endtime="20210730 15:37:27.263"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:27.272" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:27.273" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:27.263" endtime="20210730 15:37:27.273"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:27.273" endtime="20210730 15:37:27.273"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:27.273" endtime="20210730 15:37:27.273"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:27.263" endtime="20210730 15:37:27.273"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:27.263" endtime="20210730 15:37:27.273"/>
</for>
<status status="FAIL" starttime="20210730 15:37:27.261" endtime="20210730 15:37:27.273"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:27.261" endtime="20210730 15:37:27.273"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc012!?abc012!?abc012</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:27.275" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:37:27.274" endtime="20210730 15:37:27.275"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:27.275" level="INFO">${payload} = {'password': 'abc012!?abc012!?abc012'}</msg>
<status status="PASS" starttime="20210730 15:37:27.275" endtime="20210730 15:37:27.275"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:27.280" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:27.281" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:27.275" endtime="20210730 15:37:27.281"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:27.281" endtime="20210730 15:37:27.281"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:27.281" endtime="20210730 15:37:27.281"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:27.275" endtime="20210730 15:37:27.281"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:27.275" endtime="20210730 15:37:27.281"/>
</for>
<status status="FAIL" starttime="20210730 15:37:27.274" endtime="20210730 15:37:27.281"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:27.273" endtime="20210730 15:37:27.281"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc012!?abc012!?abc012</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:27.282" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:37:27.282" endtime="20210730 15:37:27.282"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:27.283" level="INFO">${payload} = {'password': 'abc012!?abc012!?abc012'}</msg>
<status status="PASS" starttime="20210730 15:37:27.282" endtime="20210730 15:37:27.283"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:27.287" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:27.288" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:27.283" endtime="20210730 15:37:27.288"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:27.288" endtime="20210730 15:37:27.288"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:27.288" endtime="20210730 15:37:27.288"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:27.283" endtime="20210730 15:37:27.288"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:27.283" endtime="20210730 15:37:27.288"/>
</for>
<status status="FAIL" starttime="20210730 15:37:27.281" endtime="20210730 15:37:27.288"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:27.281" endtime="20210730 15:37:27.288"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:27.261" endtime="20210730 15:37:27.288"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:27.295" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:27.308" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:27.308" level="INFO">${pids} = 9468
9475
9480</msg>
<status status="PASS" starttime="20210730 15:37:27.289" endtime="20210730 15:37:27.308"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:27.309" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:27.309" endtime="20210730 15:37:27.309"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:27.322" level="INFO">${pids} = ['9468', '9475', '9480']</msg>
<status status="PASS" starttime="20210730 15:37:27.310" endtime="20210730 15:37:27.322"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9468</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:27.332" level="INFO">Running command 'kill 9468 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:27.323" endtime="20210730 15:37:27.332"/>
</kw>
<status status="PASS" starttime="20210730 15:37:27.323" endtime="20210730 15:37:27.332"/>
</iter>
<iter>
<var name="${pid}">9475</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:27.337" level="INFO">Running command 'kill 9475 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:27.333" endtime="20210730 15:37:27.339"/>
</kw>
<status status="PASS" starttime="20210730 15:37:27.333" endtime="20210730 15:37:27.339"/>
</iter>
<iter>
<var name="${pid}">9480</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:27.342" level="INFO">Running command 'kill 9480 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:27.339" endtime="20210730 15:37:27.343"/>
</kw>
<status status="PASS" starttime="20210730 15:37:27.339" endtime="20210730 15:37:27.343"/>
</iter>
<status status="PASS" starttime="20210730 15:37:27.322" endtime="20210730 15:37:27.343"/>
</for>
<status status="PASS" starttime="20210730 15:37:27.310" endtime="20210730 15:37:27.343"/>
</branch>
<status status="PASS" starttime="20210730 15:37:27.310" endtime="20210730 15:37:27.343"/>
</if>
<status status="PASS" starttime="20210730 15:37:27.289" endtime="20210730 15:37:27.344"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abc012!?abc012!?abc012'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:37:25.698" endtime="20210730 15:37:27.344">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t84" name="With Each Valid Token, Updating Password Of Each System User With abc!?.Z Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:27.350" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:27.361" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:27.361" level="INFO">${pids} = 9509</msg>
<status status="PASS" starttime="20210730 15:37:27.346" endtime="20210730 15:37:27.361"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:27.362" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:27.361" endtime="20210730 15:37:27.362"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:27.363" level="INFO">${pids} = ['9509']</msg>
<status status="PASS" starttime="20210730 15:37:27.362" endtime="20210730 15:37:27.363"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9509</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:27.367" level="INFO">Running command 'kill 9509 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:27.363" endtime="20210730 15:37:27.367"/>
</kw>
<status status="PASS" starttime="20210730 15:37:27.363" endtime="20210730 15:37:27.367"/>
</iter>
<status status="PASS" starttime="20210730 15:37:27.363" endtime="20210730 15:37:27.367"/>
</for>
<status status="PASS" starttime="20210730 15:37:27.362" endtime="20210730 15:37:27.367"/>
</branch>
<status status="PASS" starttime="20210730 15:37:27.362" endtime="20210730 15:37:27.367"/>
</if>
<status status="PASS" starttime="20210730 15:37:27.346" endtime="20210730 15:37:27.368"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:27.369" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:27.368" endtime="20210730 15:37:27.369"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:27.370" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:27.369" endtime="20210730 15:37:27.370"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:27.370" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:27.370" endtime="20210730 15:37:27.370"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:27.371" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:27.370" endtime="20210730 15:37:27.371"/>
</kw>
<msg timestamp="20210730 15:37:27.372" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:27.369" endtime="20210730 15:37:27.372"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:27.388" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:27.372" endtime="20210730 15:37:27.390"/>
</kw>
<status status="PASS" starttime="20210730 15:37:27.368" endtime="20210730 15:37:27.390"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:37:27.392" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:37:27.391" endtime="20210730 15:37:27.400"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:37:28.901" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:37:27.400" endtime="20210730 15:37:28.902"/>
</kw>
<status status="PASS" starttime="20210730 15:37:27.391" endtime="20210730 15:37:28.902"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:28.903" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:28.903" endtime="20210730 15:37:28.903"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:28.904" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:28.903" endtime="20210730 15:37:28.904"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:28.904" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:28.904" endtime="20210730 15:37:28.904"/>
</kw>
<msg timestamp="20210730 15:37:28.904" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:28.903" endtime="20210730 15:37:28.904"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:37:28.905" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:37:28.904" endtime="20210730 15:37:28.905"/>
</kw>
<status status="PASS" starttime="20210730 15:37:28.902" endtime="20210730 15:37:28.905"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:37:28.906" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:37:28.906" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:37:28.906" endtime="20210730 15:37:28.906"/>
</kw>
<status status="PASS" starttime="20210730 15:37:28.905" endtime="20210730 15:37:28.906"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:37:28.907" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:37:28.907" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:37:28.907" endtime="20210730 15:37:28.907"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:37:28.908" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:37:28.907" endtime="20210730 15:37:28.908"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:28.908" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:28.908" endtime="20210730 15:37:28.908"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:28.908" endtime="20210730 15:37:28.909"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:28.909" endtime="20210730 15:37:28.910"/>
</kw>
<status status="PASS" starttime="20210730 15:37:28.908" endtime="20210730 15:37:28.910"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:28.910" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:28.910" endtime="20210730 15:37:28.911"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:28.911" endtime="20210730 15:37:28.911"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:28.912" endtime="20210730 15:37:28.912"/>
</kw>
<status status="PASS" starttime="20210730 15:37:28.910" endtime="20210730 15:37:28.912"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:28.912" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:28.912" endtime="20210730 15:37:28.912"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:28.913" endtime="20210730 15:37:28.913"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:28.914" endtime="20210730 15:37:28.914"/>
</kw>
<status status="PASS" starttime="20210730 15:37:28.912" endtime="20210730 15:37:28.914"/>
</iter>
<status status="PASS" starttime="20210730 15:37:28.908" endtime="20210730 15:37:28.914"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:37:28.914" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:37:28.914" endtime="20210730 15:37:28.914"/>
</kw>
<status status="PASS" starttime="20210730 15:37:28.906" endtime="20210730 15:37:28.915"/>
</kw>
<status status="PASS" starttime="20210730 15:37:27.346" endtime="20210730 15:37:28.915"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.Z</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:28.916" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:37:28.916" endtime="20210730 15:37:28.916"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:28.916" level="INFO">${payload} = {'password': 'abc!?.Z'}</msg>
<status status="PASS" starttime="20210730 15:37:28.916" endtime="20210730 15:37:28.916"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:28.925" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:28.925" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:28.917" endtime="20210730 15:37:28.925"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:28.926" endtime="20210730 15:37:28.926"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:28.926" endtime="20210730 15:37:28.926"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:28.917" endtime="20210730 15:37:28.926"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:28.916" endtime="20210730 15:37:28.926"/>
</for>
<status status="FAIL" starttime="20210730 15:37:28.915" endtime="20210730 15:37:28.926"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:28.915" endtime="20210730 15:37:28.926"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.Z</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:28.927" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:37:28.927" endtime="20210730 15:37:28.927"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:28.928" level="INFO">${payload} = {'password': 'abc!?.Z'}</msg>
<status status="PASS" starttime="20210730 15:37:28.928" endtime="20210730 15:37:28.928"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:28.932" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:28.932" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:28.928" endtime="20210730 15:37:28.932"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:28.932" endtime="20210730 15:37:28.932"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:28.932" endtime="20210730 15:37:28.932"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:28.928" endtime="20210730 15:37:28.933"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:28.928" endtime="20210730 15:37:28.933"/>
</for>
<status status="FAIL" starttime="20210730 15:37:28.927" endtime="20210730 15:37:28.933"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:28.926" endtime="20210730 15:37:28.933"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.Z</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:28.934" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:37:28.933" endtime="20210730 15:37:28.934"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:28.934" level="INFO">${payload} = {'password': 'abc!?.Z'}</msg>
<status status="PASS" starttime="20210730 15:37:28.934" endtime="20210730 15:37:28.934"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:28.939" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:28.939" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:28.935" endtime="20210730 15:37:28.939"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:28.939" endtime="20210730 15:37:28.939"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:28.939" endtime="20210730 15:37:28.939"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:28.935" endtime="20210730 15:37:28.939"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:28.934" endtime="20210730 15:37:28.939"/>
</for>
<status status="FAIL" starttime="20210730 15:37:28.933" endtime="20210730 15:37:28.939"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:28.933" endtime="20210730 15:37:28.940"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:28.915" endtime="20210730 15:37:28.940"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:28.945" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:28.960" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:28.960" level="INFO">${pids} = 9532
9539
9543</msg>
<status status="PASS" starttime="20210730 15:37:28.941" endtime="20210730 15:37:28.960"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:28.961" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:28.961" endtime="20210730 15:37:28.961"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:28.962" level="INFO">${pids} = ['9532', '9539', '9543']</msg>
<status status="PASS" starttime="20210730 15:37:28.962" endtime="20210730 15:37:28.962"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9532</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:28.965" level="INFO">Running command 'kill 9532 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:28.962" endtime="20210730 15:37:28.966"/>
</kw>
<status status="PASS" starttime="20210730 15:37:28.962" endtime="20210730 15:37:28.966"/>
</iter>
<iter>
<var name="${pid}">9539</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:28.969" level="INFO">Running command 'kill 9539 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:28.966" endtime="20210730 15:37:28.970"/>
</kw>
<status status="PASS" starttime="20210730 15:37:28.966" endtime="20210730 15:37:28.970"/>
</iter>
<iter>
<var name="${pid}">9543</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:28.974" level="INFO">Running command 'kill 9543 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:28.970" endtime="20210730 15:37:28.974"/>
</kw>
<status status="PASS" starttime="20210730 15:37:28.970" endtime="20210730 15:37:28.974"/>
</iter>
<status status="PASS" starttime="20210730 15:37:28.962" endtime="20210730 15:37:28.974"/>
</for>
<status status="PASS" starttime="20210730 15:37:28.961" endtime="20210730 15:37:28.974"/>
</branch>
<status status="PASS" starttime="20210730 15:37:28.961" endtime="20210730 15:37:28.974"/>
</if>
<status status="PASS" starttime="20210730 15:37:28.940" endtime="20210730 15:37:28.975"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abc!?.Z'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:37:27.345" endtime="20210730 15:37:28.975">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t85" name="With Each Valid Token, Updating Password Of Each System User With abc!?.ZA Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:28.982" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:28.993" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:28.993" level="INFO">${pids} = 9572</msg>
<status status="PASS" starttime="20210730 15:37:28.979" endtime="20210730 15:37:28.993"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:28.994" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:28.993" endtime="20210730 15:37:28.994"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:28.995" level="INFO">${pids} = ['9572']</msg>
<status status="PASS" starttime="20210730 15:37:28.994" endtime="20210730 15:37:28.995"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9572</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:28.998" level="INFO">Running command 'kill 9572 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:28.995" endtime="20210730 15:37:28.999"/>
</kw>
<status status="PASS" starttime="20210730 15:37:28.995" endtime="20210730 15:37:28.999"/>
</iter>
<status status="PASS" starttime="20210730 15:37:28.995" endtime="20210730 15:37:28.999"/>
</for>
<status status="PASS" starttime="20210730 15:37:28.994" endtime="20210730 15:37:28.999"/>
</branch>
<status status="PASS" starttime="20210730 15:37:28.994" endtime="20210730 15:37:28.999"/>
</if>
<status status="PASS" starttime="20210730 15:37:28.978" endtime="20210730 15:37:28.999"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:29.000" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:29.000" endtime="20210730 15:37:29.000"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:29.001" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:29.001" endtime="20210730 15:37:29.001"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:29.002" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:29.001" endtime="20210730 15:37:29.002"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:29.002" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:29.002" endtime="20210730 15:37:29.002"/>
</kw>
<msg timestamp="20210730 15:37:29.002" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:29.001" endtime="20210730 15:37:29.002"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:29.020" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:29.002" endtime="20210730 15:37:29.022"/>
</kw>
<status status="PASS" starttime="20210730 15:37:29.000" endtime="20210730 15:37:29.022"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:37:29.024" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:37:29.023" endtime="20210730 15:37:29.040"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:37:30.541" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:37:29.040" endtime="20210730 15:37:30.541"/>
</kw>
<status status="PASS" starttime="20210730 15:37:29.023" endtime="20210730 15:37:30.541"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:30.543" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:30.542" endtime="20210730 15:37:30.543"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:30.543" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:30.543" endtime="20210730 15:37:30.543"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:30.544" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:30.544" endtime="20210730 15:37:30.544"/>
</kw>
<msg timestamp="20210730 15:37:30.544" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:30.542" endtime="20210730 15:37:30.544"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:37:30.545" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:37:30.544" endtime="20210730 15:37:30.545"/>
</kw>
<status status="PASS" starttime="20210730 15:37:30.541" endtime="20210730 15:37:30.546"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:37:30.546" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:37:30.546" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:37:30.546" endtime="20210730 15:37:30.547"/>
</kw>
<status status="PASS" starttime="20210730 15:37:30.546" endtime="20210730 15:37:30.547"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:37:30.548" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:37:30.548" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:37:30.547" endtime="20210730 15:37:30.548"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:37:30.548" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:37:30.548" endtime="20210730 15:37:30.548"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:30.549" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:30.548" endtime="20210730 15:37:30.549"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:30.549" endtime="20210730 15:37:30.550"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:30.550" endtime="20210730 15:37:30.550"/>
</kw>
<status status="PASS" starttime="20210730 15:37:30.548" endtime="20210730 15:37:30.550"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:30.550" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:30.550" endtime="20210730 15:37:30.550"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:30.550" endtime="20210730 15:37:30.551"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:30.551" endtime="20210730 15:37:30.551"/>
</kw>
<status status="PASS" starttime="20210730 15:37:30.550" endtime="20210730 15:37:30.551"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:30.552" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:30.552" endtime="20210730 15:37:30.552"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:30.552" endtime="20210730 15:37:30.553"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:30.553" endtime="20210730 15:37:30.553"/>
</kw>
<status status="PASS" starttime="20210730 15:37:30.552" endtime="20210730 15:37:30.553"/>
</iter>
<status status="PASS" starttime="20210730 15:37:30.548" endtime="20210730 15:37:30.553"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:37:30.554" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:37:30.553" endtime="20210730 15:37:30.554"/>
</kw>
<status status="PASS" starttime="20210730 15:37:30.547" endtime="20210730 15:37:30.554"/>
</kw>
<status status="PASS" starttime="20210730 15:37:28.977" endtime="20210730 15:37:30.554"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.ZA</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:30.555" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:37:30.555" endtime="20210730 15:37:30.555"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:30.555" level="INFO">${payload} = {'password': 'abc!?.ZA'}</msg>
<status status="PASS" starttime="20210730 15:37:30.555" endtime="20210730 15:37:30.556"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:30.565" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:30.566" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:30.556" endtime="20210730 15:37:30.566"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:30.566" endtime="20210730 15:37:30.566"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:30.566" endtime="20210730 15:37:30.566"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:30.556" endtime="20210730 15:37:30.566"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:30.556" endtime="20210730 15:37:30.566"/>
</for>
<status status="FAIL" starttime="20210730 15:37:30.554" endtime="20210730 15:37:30.566"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:30.554" endtime="20210730 15:37:30.567"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.ZA</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:30.568" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:37:30.567" endtime="20210730 15:37:30.568"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:30.569" level="INFO">${payload} = {'password': 'abc!?.ZA'}</msg>
<status status="PASS" starttime="20210730 15:37:30.568" endtime="20210730 15:37:30.569"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:30.573" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:30.573" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:30.569" endtime="20210730 15:37:30.573"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:30.573" endtime="20210730 15:37:30.573"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:30.573" endtime="20210730 15:37:30.573"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:30.569" endtime="20210730 15:37:30.573"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:30.569" endtime="20210730 15:37:30.573"/>
</for>
<status status="FAIL" starttime="20210730 15:37:30.567" endtime="20210730 15:37:30.574"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:30.567" endtime="20210730 15:37:30.574"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.ZA</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:30.575" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:37:30.574" endtime="20210730 15:37:30.575"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:30.575" level="INFO">${payload} = {'password': 'abc!?.ZA'}</msg>
<status status="PASS" starttime="20210730 15:37:30.575" endtime="20210730 15:37:30.575"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:30.580" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:30.580" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:30.575" endtime="20210730 15:37:30.580"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:30.580" endtime="20210730 15:37:30.580"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:30.580" endtime="20210730 15:37:30.580"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:30.575" endtime="20210730 15:37:30.580"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:30.575" endtime="20210730 15:37:30.580"/>
</for>
<status status="FAIL" starttime="20210730 15:37:30.574" endtime="20210730 15:37:30.581"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:30.574" endtime="20210730 15:37:30.581"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:30.554" endtime="20210730 15:37:30.581"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:30.590" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:30.601" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:30.601" level="INFO">${pids} = 9595
9602
9606</msg>
<status status="PASS" starttime="20210730 15:37:30.582" endtime="20210730 15:37:30.601"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:30.602" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:30.601" endtime="20210730 15:37:30.602"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:30.602" level="INFO">${pids} = ['9595', '9602', '9606']</msg>
<status status="PASS" starttime="20210730 15:37:30.602" endtime="20210730 15:37:30.602"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9595</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:30.606" level="INFO">Running command 'kill 9595 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:30.603" endtime="20210730 15:37:30.607"/>
</kw>
<status status="PASS" starttime="20210730 15:37:30.603" endtime="20210730 15:37:30.607"/>
</iter>
<iter>
<var name="${pid}">9602</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:30.614" level="INFO">Running command 'kill 9602 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:30.607" endtime="20210730 15:37:30.615"/>
</kw>
<status status="PASS" starttime="20210730 15:37:30.607" endtime="20210730 15:37:30.615"/>
</iter>
<iter>
<var name="${pid}">9606</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:30.620" level="INFO">Running command 'kill 9606 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:30.616" endtime="20210730 15:37:30.620"/>
</kw>
<status status="PASS" starttime="20210730 15:37:30.616" endtime="20210730 15:37:30.620"/>
</iter>
<status status="PASS" starttime="20210730 15:37:30.602" endtime="20210730 15:37:30.621"/>
</for>
<status status="PASS" starttime="20210730 15:37:30.602" endtime="20210730 15:37:30.621"/>
</branch>
<status status="PASS" starttime="20210730 15:37:30.602" endtime="20210730 15:37:30.621"/>
</if>
<status status="PASS" starttime="20210730 15:37:30.581" endtime="20210730 15:37:30.621"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abc!?.ZA'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:37:28.976" endtime="20210730 15:37:30.621">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t86" name="With Each Valid Token, Updating Password Of Each System User With abc!?.ZAabc!?.ZAabc!?. Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:30.626" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:30.640" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:30.640" level="INFO">${pids} = 9635</msg>
<status status="PASS" starttime="20210730 15:37:30.623" endtime="20210730 15:37:30.640"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:30.641" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:30.641" endtime="20210730 15:37:30.641"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:30.642" level="INFO">${pids} = ['9635']</msg>
<status status="PASS" starttime="20210730 15:37:30.642" endtime="20210730 15:37:30.642"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9635</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:30.651" level="INFO">Running command 'kill 9635 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:30.643" endtime="20210730 15:37:30.652"/>
</kw>
<status status="PASS" starttime="20210730 15:37:30.642" endtime="20210730 15:37:30.652"/>
</iter>
<status status="PASS" starttime="20210730 15:37:30.642" endtime="20210730 15:37:30.652"/>
</for>
<status status="PASS" starttime="20210730 15:37:30.642" endtime="20210730 15:37:30.652"/>
</branch>
<status status="PASS" starttime="20210730 15:37:30.641" endtime="20210730 15:37:30.653"/>
</if>
<status status="PASS" starttime="20210730 15:37:30.623" endtime="20210730 15:37:30.653"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:30.654" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:30.654" endtime="20210730 15:37:30.654"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:30.655" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:30.654" endtime="20210730 15:37:30.655"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:30.655" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:30.655" endtime="20210730 15:37:30.655"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:30.655" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:30.655" endtime="20210730 15:37:30.655"/>
</kw>
<msg timestamp="20210730 15:37:30.656" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:30.654" endtime="20210730 15:37:30.656"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:30.659" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:30.656" endtime="20210730 15:37:30.661"/>
</kw>
<status status="PASS" starttime="20210730 15:37:30.653" endtime="20210730 15:37:30.661"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:37:30.662" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:37:30.662" endtime="20210730 15:37:30.678"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:37:32.180" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:37:30.679" endtime="20210730 15:37:32.180"/>
</kw>
<status status="PASS" starttime="20210730 15:37:30.661" endtime="20210730 15:37:32.181"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:32.182" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:32.182" endtime="20210730 15:37:32.182"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:32.182" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:32.182" endtime="20210730 15:37:32.182"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:32.183" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:32.183" endtime="20210730 15:37:32.183"/>
</kw>
<msg timestamp="20210730 15:37:32.184" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:32.181" endtime="20210730 15:37:32.184"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:37:32.184" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:37:32.184" endtime="20210730 15:37:32.185"/>
</kw>
<status status="PASS" starttime="20210730 15:37:32.181" endtime="20210730 15:37:32.185"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:37:32.186" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:37:32.186" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:37:32.186" endtime="20210730 15:37:32.186"/>
</kw>
<status status="PASS" starttime="20210730 15:37:32.186" endtime="20210730 15:37:32.187"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:37:32.188" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:37:32.188" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:37:32.188" endtime="20210730 15:37:32.188"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:37:32.189" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:37:32.188" endtime="20210730 15:37:32.189"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:32.189" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:32.189" endtime="20210730 15:37:32.189"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:32.189" endtime="20210730 15:37:32.190"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:32.190" endtime="20210730 15:37:32.190"/>
</kw>
<status status="PASS" starttime="20210730 15:37:32.189" endtime="20210730 15:37:32.190"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:32.191" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:32.191" endtime="20210730 15:37:32.191"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:32.191" endtime="20210730 15:37:32.192"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:32.192" endtime="20210730 15:37:32.192"/>
</kw>
<status status="PASS" starttime="20210730 15:37:32.191" endtime="20210730 15:37:32.192"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:32.192" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:32.192" endtime="20210730 15:37:32.192"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:32.193" endtime="20210730 15:37:32.193"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:32.193" endtime="20210730 15:37:32.194"/>
</kw>
<status status="PASS" starttime="20210730 15:37:32.192" endtime="20210730 15:37:32.194"/>
</iter>
<status status="PASS" starttime="20210730 15:37:32.189" endtime="20210730 15:37:32.194"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:37:32.195" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:37:32.194" endtime="20210730 15:37:32.195"/>
</kw>
<status status="PASS" starttime="20210730 15:37:32.187" endtime="20210730 15:37:32.195"/>
</kw>
<status status="PASS" starttime="20210730 15:37:30.622" endtime="20210730 15:37:32.195"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.ZAabc!?.ZAabc!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:32.196" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:37:32.196" endtime="20210730 15:37:32.197"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:32.197" level="INFO">${payload} = {'password': 'abc!?.ZAabc!?.ZAabc!?.'}</msg>
<status status="PASS" starttime="20210730 15:37:32.197" endtime="20210730 15:37:32.197"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:32.206" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:32.207" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:32.197" endtime="20210730 15:37:32.207"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:32.207" endtime="20210730 15:37:32.207"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:32.207" endtime="20210730 15:37:32.207"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:32.197" endtime="20210730 15:37:32.207"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:32.197" endtime="20210730 15:37:32.207"/>
</for>
<status status="FAIL" starttime="20210730 15:37:32.196" endtime="20210730 15:37:32.207"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:32.195" endtime="20210730 15:37:32.207"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.ZAabc!?.ZAabc!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:32.209" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:37:32.208" endtime="20210730 15:37:32.209"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:32.209" level="INFO">${payload} = {'password': 'abc!?.ZAabc!?.ZAabc!?.'}</msg>
<status status="PASS" starttime="20210730 15:37:32.209" endtime="20210730 15:37:32.209"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:32.215" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:32.215" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:32.210" endtime="20210730 15:37:32.216"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:32.216" endtime="20210730 15:37:32.216"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:32.216" endtime="20210730 15:37:32.216"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:32.210" endtime="20210730 15:37:32.216"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:32.209" endtime="20210730 15:37:32.216"/>
</for>
<status status="FAIL" starttime="20210730 15:37:32.208" endtime="20210730 15:37:32.216"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:32.208" endtime="20210730 15:37:32.216"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.ZAabc!?.ZAabc!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:32.218" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:37:32.217" endtime="20210730 15:37:32.218"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:32.218" level="INFO">${payload} = {'password': 'abc!?.ZAabc!?.ZAabc!?.'}</msg>
<status status="PASS" starttime="20210730 15:37:32.218" endtime="20210730 15:37:32.218"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:32.225" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:32.225" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:32.218" endtime="20210730 15:37:32.226"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:32.226" endtime="20210730 15:37:32.226"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:32.226" endtime="20210730 15:37:32.226"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:32.218" endtime="20210730 15:37:32.226"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:32.218" endtime="20210730 15:37:32.226"/>
</for>
<status status="FAIL" starttime="20210730 15:37:32.216" endtime="20210730 15:37:32.227"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:32.216" endtime="20210730 15:37:32.227"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:32.195" endtime="20210730 15:37:32.227"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:32.232" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:32.242" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:32.242" level="INFO">${pids} = 9658
9665
9671</msg>
<status status="PASS" starttime="20210730 15:37:32.229" endtime="20210730 15:37:32.242"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:32.244" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:32.243" endtime="20210730 15:37:32.244"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:32.246" level="INFO">${pids} = ['9658', '9665', '9671']</msg>
<status status="PASS" starttime="20210730 15:37:32.244" endtime="20210730 15:37:32.246"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9658</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:32.251" level="INFO">Running command 'kill 9658 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:32.246" endtime="20210730 15:37:32.252"/>
</kw>
<status status="PASS" starttime="20210730 15:37:32.246" endtime="20210730 15:37:32.252"/>
</iter>
<iter>
<var name="${pid}">9665</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:32.256" level="INFO">Running command 'kill 9665 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:32.253" endtime="20210730 15:37:32.258"/>
</kw>
<status status="PASS" starttime="20210730 15:37:32.252" endtime="20210730 15:37:32.258"/>
</iter>
<iter>
<var name="${pid}">9671</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:32.262" level="INFO">Running command 'kill 9671 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:32.258" endtime="20210730 15:37:32.262"/>
</kw>
<status status="PASS" starttime="20210730 15:37:32.258" endtime="20210730 15:37:32.263"/>
</iter>
<status status="PASS" starttime="20210730 15:37:32.246" endtime="20210730 15:37:32.263"/>
</for>
<status status="PASS" starttime="20210730 15:37:32.244" endtime="20210730 15:37:32.263"/>
</branch>
<status status="PASS" starttime="20210730 15:37:32.244" endtime="20210730 15:37:32.263"/>
</if>
<status status="PASS" starttime="20210730 15:37:32.227" endtime="20210730 15:37:32.263"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abc!?.ZAabc!?.ZAabc!?.'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:37:30.622" endtime="20210730 15:37:32.263">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t87" name="With Each Valid Token, Updating Password Of Each System User With abc!?.6 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:32.272" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:32.286" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:32.286" level="INFO">${pids} = 9700</msg>
<status status="PASS" starttime="20210730 15:37:32.266" endtime="20210730 15:37:32.286"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:32.287" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:32.286" endtime="20210730 15:37:32.287"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:32.287" level="INFO">${pids} = ['9700']</msg>
<status status="PASS" starttime="20210730 15:37:32.287" endtime="20210730 15:37:32.287"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9700</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:32.291" level="INFO">Running command 'kill 9700 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:32.288" endtime="20210730 15:37:32.292"/>
</kw>
<status status="PASS" starttime="20210730 15:37:32.288" endtime="20210730 15:37:32.292"/>
</iter>
<status status="PASS" starttime="20210730 15:37:32.287" endtime="20210730 15:37:32.292"/>
</for>
<status status="PASS" starttime="20210730 15:37:32.287" endtime="20210730 15:37:32.292"/>
</branch>
<status status="PASS" starttime="20210730 15:37:32.287" endtime="20210730 15:37:32.292"/>
</if>
<status status="PASS" starttime="20210730 15:37:32.266" endtime="20210730 15:37:32.292"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:32.294" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:32.293" endtime="20210730 15:37:32.294"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:32.295" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:32.294" endtime="20210730 15:37:32.295"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:32.295" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:32.295" endtime="20210730 15:37:32.295"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:32.295" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:32.295" endtime="20210730 15:37:32.295"/>
</kw>
<msg timestamp="20210730 15:37:32.296" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:32.294" endtime="20210730 15:37:32.296"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:32.309" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:32.296" endtime="20210730 15:37:32.312"/>
</kw>
<status status="PASS" starttime="20210730 15:37:32.293" endtime="20210730 15:37:32.313"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:37:32.315" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:37:32.314" endtime="20210730 15:37:32.319"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:37:33.821" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:37:32.320" endtime="20210730 15:37:33.822"/>
</kw>
<status status="PASS" starttime="20210730 15:37:32.313" endtime="20210730 15:37:33.822"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:33.823" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:33.823" endtime="20210730 15:37:33.823"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:33.823" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:33.823" endtime="20210730 15:37:33.823"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:33.824" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:33.823" endtime="20210730 15:37:33.824"/>
</kw>
<msg timestamp="20210730 15:37:33.824" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:33.822" endtime="20210730 15:37:33.824"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:37:33.824" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:37:33.824" endtime="20210730 15:37:33.825"/>
</kw>
<status status="PASS" starttime="20210730 15:37:33.822" endtime="20210730 15:37:33.825"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:37:33.825" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:37:33.825" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:37:33.825" endtime="20210730 15:37:33.825"/>
</kw>
<status status="PASS" starttime="20210730 15:37:33.825" endtime="20210730 15:37:33.826"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:37:33.827" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:37:33.827" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:37:33.826" endtime="20210730 15:37:33.827"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:37:33.827" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:37:33.827" endtime="20210730 15:37:33.827"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:33.828" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:33.827" endtime="20210730 15:37:33.828"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:33.828" endtime="20210730 15:37:33.828"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:33.829" endtime="20210730 15:37:33.829"/>
</kw>
<status status="PASS" starttime="20210730 15:37:33.827" endtime="20210730 15:37:33.829"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:33.829" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:33.829" endtime="20210730 15:37:33.829"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:33.829" endtime="20210730 15:37:33.830"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:33.830" endtime="20210730 15:37:33.831"/>
</kw>
<status status="PASS" starttime="20210730 15:37:33.829" endtime="20210730 15:37:33.831"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:33.831" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:33.831" endtime="20210730 15:37:33.831"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:33.831" endtime="20210730 15:37:33.832"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:33.832" endtime="20210730 15:37:33.832"/>
</kw>
<status status="PASS" starttime="20210730 15:37:33.831" endtime="20210730 15:37:33.832"/>
</iter>
<status status="PASS" starttime="20210730 15:37:33.827" endtime="20210730 15:37:33.832"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:37:33.833" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:37:33.833" endtime="20210730 15:37:33.833"/>
</kw>
<status status="PASS" starttime="20210730 15:37:33.826" endtime="20210730 15:37:33.833"/>
</kw>
<status status="PASS" starttime="20210730 15:37:32.265" endtime="20210730 15:37:33.833"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.6</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:33.834" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:37:33.834" endtime="20210730 15:37:33.834"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:33.835" level="INFO">${payload} = {'password': 'abc!?.6'}</msg>
<status status="PASS" starttime="20210730 15:37:33.834" endtime="20210730 15:37:33.835"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:33.847" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:33.848" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:33.835" endtime="20210730 15:37:33.848"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:33.848" endtime="20210730 15:37:33.848"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:33.848" endtime="20210730 15:37:33.848"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:33.835" endtime="20210730 15:37:33.848"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:33.835" endtime="20210730 15:37:33.848"/>
</for>
<status status="FAIL" starttime="20210730 15:37:33.834" endtime="20210730 15:37:33.848"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:33.833" endtime="20210730 15:37:33.848"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.6</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:33.849" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:37:33.849" endtime="20210730 15:37:33.849"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:33.850" level="INFO">${payload} = {'password': 'abc!?.6'}</msg>
<status status="PASS" starttime="20210730 15:37:33.850" endtime="20210730 15:37:33.850"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:33.854" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:33.855" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:33.850" endtime="20210730 15:37:33.855"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:33.855" endtime="20210730 15:37:33.855"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:33.855" endtime="20210730 15:37:33.855"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:33.850" endtime="20210730 15:37:33.855"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:33.850" endtime="20210730 15:37:33.855"/>
</for>
<status status="FAIL" starttime="20210730 15:37:33.848" endtime="20210730 15:37:33.855"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:33.848" endtime="20210730 15:37:33.855"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.6</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:33.856" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:37:33.856" endtime="20210730 15:37:33.857"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:33.857" level="INFO">${payload} = {'password': 'abc!?.6'}</msg>
<status status="PASS" starttime="20210730 15:37:33.857" endtime="20210730 15:37:33.857"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:33.862" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:33.862" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:33.857" endtime="20210730 15:37:33.862"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:33.862" endtime="20210730 15:37:33.862"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:33.862" endtime="20210730 15:37:33.862"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:33.857" endtime="20210730 15:37:33.863"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:33.857" endtime="20210730 15:37:33.863"/>
</for>
<status status="FAIL" starttime="20210730 15:37:33.856" endtime="20210730 15:37:33.863"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:33.856" endtime="20210730 15:37:33.863"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:33.833" endtime="20210730 15:37:33.863"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:33.868" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:33.880" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:33.880" level="INFO">${pids} = 9723
9730
9734</msg>
<status status="PASS" starttime="20210730 15:37:33.864" endtime="20210730 15:37:33.880"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:33.882" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:33.881" endtime="20210730 15:37:33.882"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:33.882" level="INFO">${pids} = ['9723', '9730', '9734']</msg>
<status status="PASS" starttime="20210730 15:37:33.882" endtime="20210730 15:37:33.882"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9723</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:33.886" level="INFO">Running command 'kill 9723 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:33.883" endtime="20210730 15:37:33.886"/>
</kw>
<status status="PASS" starttime="20210730 15:37:33.883" endtime="20210730 15:37:33.887"/>
</iter>
<iter>
<var name="${pid}">9730</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:33.890" level="INFO">Running command 'kill 9730 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:33.887" endtime="20210730 15:37:33.890"/>
</kw>
<status status="PASS" starttime="20210730 15:37:33.887" endtime="20210730 15:37:33.890"/>
</iter>
<iter>
<var name="${pid}">9734</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:33.895" level="INFO">Running command 'kill 9734 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:33.891" endtime="20210730 15:37:33.896"/>
</kw>
<status status="PASS" starttime="20210730 15:37:33.891" endtime="20210730 15:37:33.896"/>
</iter>
<status status="PASS" starttime="20210730 15:37:33.882" endtime="20210730 15:37:33.896"/>
</for>
<status status="PASS" starttime="20210730 15:37:33.882" endtime="20210730 15:37:33.896"/>
</branch>
<status status="PASS" starttime="20210730 15:37:33.882" endtime="20210730 15:37:33.896"/>
</if>
<status status="PASS" starttime="20210730 15:37:33.863" endtime="20210730 15:37:33.896"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abc!?.6'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:37:32.264" endtime="20210730 15:37:33.897">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t88" name="With Each Valid Token, Updating Password Of Each System User With abc!?.67 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:33.902" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:33.918" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:33.918" level="INFO">${pids} = 9763</msg>
<status status="PASS" starttime="20210730 15:37:33.899" endtime="20210730 15:37:33.918"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:33.919" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:33.919" endtime="20210730 15:37:33.919"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:33.920" level="INFO">${pids} = ['9763']</msg>
<status status="PASS" starttime="20210730 15:37:33.920" endtime="20210730 15:37:33.920"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9763</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:33.924" level="INFO">Running command 'kill 9763 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:33.920" endtime="20210730 15:37:33.925"/>
</kw>
<status status="PASS" starttime="20210730 15:37:33.920" endtime="20210730 15:37:33.925"/>
</iter>
<status status="PASS" starttime="20210730 15:37:33.920" endtime="20210730 15:37:33.925"/>
</for>
<status status="PASS" starttime="20210730 15:37:33.920" endtime="20210730 15:37:33.925"/>
</branch>
<status status="PASS" starttime="20210730 15:37:33.919" endtime="20210730 15:37:33.925"/>
</if>
<status status="PASS" starttime="20210730 15:37:33.899" endtime="20210730 15:37:33.926"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:33.928" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:33.927" endtime="20210730 15:37:33.928"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:33.929" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:33.928" endtime="20210730 15:37:33.929"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:33.929" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:33.929" endtime="20210730 15:37:33.929"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:33.929" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:33.929" endtime="20210730 15:37:33.929"/>
</kw>
<msg timestamp="20210730 15:37:33.930" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:33.928" endtime="20210730 15:37:33.930"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:33.933" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:33.930" endtime="20210730 15:37:33.935"/>
</kw>
<status status="PASS" starttime="20210730 15:37:33.926" endtime="20210730 15:37:33.935"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:37:33.936" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:37:33.936" endtime="20210730 15:37:33.940"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:37:35.442" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:37:33.941" endtime="20210730 15:37:35.442"/>
</kw>
<status status="PASS" starttime="20210730 15:37:33.935" endtime="20210730 15:37:35.442"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:35.445" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:35.444" endtime="20210730 15:37:35.445"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:35.446" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:35.445" endtime="20210730 15:37:35.446"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:35.446" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:35.446" endtime="20210730 15:37:35.446"/>
</kw>
<msg timestamp="20210730 15:37:35.447" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:35.444" endtime="20210730 15:37:35.447"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:37:35.447" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:37:35.447" endtime="20210730 15:37:35.447"/>
</kw>
<status status="PASS" starttime="20210730 15:37:35.443" endtime="20210730 15:37:35.448"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:37:35.448" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:37:35.448" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:37:35.448" endtime="20210730 15:37:35.448"/>
</kw>
<status status="PASS" starttime="20210730 15:37:35.448" endtime="20210730 15:37:35.448"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:37:35.449" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:37:35.449" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:37:35.449" endtime="20210730 15:37:35.449"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:37:35.450" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:37:35.449" endtime="20210730 15:37:35.450"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:35.450" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:35.450" endtime="20210730 15:37:35.450"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:35.450" endtime="20210730 15:37:35.451"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:35.451" endtime="20210730 15:37:35.452"/>
</kw>
<status status="PASS" starttime="20210730 15:37:35.450" endtime="20210730 15:37:35.452"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:35.452" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:35.452" endtime="20210730 15:37:35.452"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:35.452" endtime="20210730 15:37:35.453"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:35.453" endtime="20210730 15:37:35.453"/>
</kw>
<status status="PASS" starttime="20210730 15:37:35.452" endtime="20210730 15:37:35.454"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:35.454" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:35.454" endtime="20210730 15:37:35.454"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:35.454" endtime="20210730 15:37:35.455"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:35.455" endtime="20210730 15:37:35.455"/>
</kw>
<status status="PASS" starttime="20210730 15:37:35.454" endtime="20210730 15:37:35.455"/>
</iter>
<status status="PASS" starttime="20210730 15:37:35.450" endtime="20210730 15:37:35.455"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:37:35.456" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:37:35.455" endtime="20210730 15:37:35.456"/>
</kw>
<status status="PASS" starttime="20210730 15:37:35.449" endtime="20210730 15:37:35.456"/>
</kw>
<status status="PASS" starttime="20210730 15:37:33.898" endtime="20210730 15:37:35.456"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.67</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:35.457" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:37:35.457" endtime="20210730 15:37:35.457"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:35.458" level="INFO">${payload} = {'password': 'abc!?.67'}</msg>
<status status="PASS" starttime="20210730 15:37:35.457" endtime="20210730 15:37:35.458"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:35.467" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:35.468" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:35.458" endtime="20210730 15:37:35.468"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:35.468" endtime="20210730 15:37:35.468"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:35.468" endtime="20210730 15:37:35.468"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:35.458" endtime="20210730 15:37:35.468"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:35.458" endtime="20210730 15:37:35.468"/>
</for>
<status status="FAIL" starttime="20210730 15:37:35.457" endtime="20210730 15:37:35.469"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:35.456" endtime="20210730 15:37:35.469"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.67</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:35.470" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:37:35.470" endtime="20210730 15:37:35.470"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:35.471" level="INFO">${payload} = {'password': 'abc!?.67'}</msg>
<status status="PASS" starttime="20210730 15:37:35.470" endtime="20210730 15:37:35.471"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:35.475" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:35.475" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:35.471" endtime="20210730 15:37:35.476"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:35.476" endtime="20210730 15:37:35.476"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:35.476" endtime="20210730 15:37:35.476"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:35.471" endtime="20210730 15:37:35.476"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:35.471" endtime="20210730 15:37:35.476"/>
</for>
<status status="FAIL" starttime="20210730 15:37:35.469" endtime="20210730 15:37:35.476"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:35.469" endtime="20210730 15:37:35.476"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.67</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:35.478" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:37:35.478" endtime="20210730 15:37:35.478"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:35.479" level="INFO">${payload} = {'password': 'abc!?.67'}</msg>
<status status="PASS" starttime="20210730 15:37:35.478" endtime="20210730 15:37:35.479"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:35.483" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:35.483" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:35.479" endtime="20210730 15:37:35.483"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:35.483" endtime="20210730 15:37:35.483"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:35.484" endtime="20210730 15:37:35.484"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:35.479" endtime="20210730 15:37:35.484"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:35.479" endtime="20210730 15:37:35.484"/>
</for>
<status status="FAIL" starttime="20210730 15:37:35.477" endtime="20210730 15:37:35.484"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:35.477" endtime="20210730 15:37:35.484"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:35.456" endtime="20210730 15:37:35.484"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:35.490" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:35.502" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:35.502" level="INFO">${pids} = 9786
9793
9797</msg>
<status status="PASS" starttime="20210730 15:37:35.486" endtime="20210730 15:37:35.502"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:35.503" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:35.502" endtime="20210730 15:37:35.503"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:35.503" level="INFO">${pids} = ['9786', '9793', '9797']</msg>
<status status="PASS" starttime="20210730 15:37:35.503" endtime="20210730 15:37:35.504"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9786</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:35.514" level="INFO">Running command 'kill 9786 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:35.504" endtime="20210730 15:37:35.514"/>
</kw>
<status status="PASS" starttime="20210730 15:37:35.504" endtime="20210730 15:37:35.514"/>
</iter>
<iter>
<var name="${pid}">9793</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:35.519" level="INFO">Running command 'kill 9793 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:35.515" endtime="20210730 15:37:35.520"/>
</kw>
<status status="PASS" starttime="20210730 15:37:35.515" endtime="20210730 15:37:35.520"/>
</iter>
<iter>
<var name="${pid}">9797</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:35.523" level="INFO">Running command 'kill 9797 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:35.520" endtime="20210730 15:37:35.524"/>
</kw>
<status status="PASS" starttime="20210730 15:37:35.520" endtime="20210730 15:37:35.524"/>
</iter>
<status status="PASS" starttime="20210730 15:37:35.504" endtime="20210730 15:37:35.524"/>
</for>
<status status="PASS" starttime="20210730 15:37:35.503" endtime="20210730 15:37:35.524"/>
</branch>
<status status="PASS" starttime="20210730 15:37:35.503" endtime="20210730 15:37:35.524"/>
</if>
<status status="PASS" starttime="20210730 15:37:35.485" endtime="20210730 15:37:35.524"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abc!?.67'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:37:33.898" endtime="20210730 15:37:35.525">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t89" name="With Each Valid Token, Updating Password Of Each System User With abc!?.67abc!?.67abc!?. Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:35.531" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:35.545" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:35.545" level="INFO">${pids} = 9826</msg>
<status status="PASS" starttime="20210730 15:37:35.528" endtime="20210730 15:37:35.545"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:35.546" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:35.545" endtime="20210730 15:37:35.546"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:35.547" level="INFO">${pids} = ['9826']</msg>
<status status="PASS" starttime="20210730 15:37:35.547" endtime="20210730 15:37:35.547"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9826</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:35.553" level="INFO">Running command 'kill 9826 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:35.548" endtime="20210730 15:37:35.554"/>
</kw>
<status status="PASS" starttime="20210730 15:37:35.548" endtime="20210730 15:37:35.554"/>
</iter>
<status status="PASS" starttime="20210730 15:37:35.548" endtime="20210730 15:37:35.554"/>
</for>
<status status="PASS" starttime="20210730 15:37:35.546" endtime="20210730 15:37:35.554"/>
</branch>
<status status="PASS" starttime="20210730 15:37:35.546" endtime="20210730 15:37:35.554"/>
</if>
<status status="PASS" starttime="20210730 15:37:35.527" endtime="20210730 15:37:35.554"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:35.556" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:35.555" endtime="20210730 15:37:35.556"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:35.556" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:35.556" endtime="20210730 15:37:35.556"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:35.557" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:35.557" endtime="20210730 15:37:35.557"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:35.558" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:35.557" endtime="20210730 15:37:35.558"/>
</kw>
<msg timestamp="20210730 15:37:35.558" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:35.556" endtime="20210730 15:37:35.558"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:35.562" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:35.558" endtime="20210730 15:37:35.564"/>
</kw>
<status status="PASS" starttime="20210730 15:37:35.555" endtime="20210730 15:37:35.564"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:37:35.566" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:37:35.565" endtime="20210730 15:37:35.582"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:37:37.087" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:37:35.582" endtime="20210730 15:37:37.087"/>
</kw>
<status status="PASS" starttime="20210730 15:37:35.564" endtime="20210730 15:37:37.087"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:37.088" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:37.088" endtime="20210730 15:37:37.088"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:37.089" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:37.089" endtime="20210730 15:37:37.089"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:37.089" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:37.089" endtime="20210730 15:37:37.089"/>
</kw>
<msg timestamp="20210730 15:37:37.090" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:37.088" endtime="20210730 15:37:37.090"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:37:37.091" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:37:37.090" endtime="20210730 15:37:37.091"/>
</kw>
<status status="PASS" starttime="20210730 15:37:37.087" endtime="20210730 15:37:37.091"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:37:37.092" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:37:37.092" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:37:37.092" endtime="20210730 15:37:37.092"/>
</kw>
<status status="PASS" starttime="20210730 15:37:37.091" endtime="20210730 15:37:37.092"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:37:37.093" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:37:37.093" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:37:37.092" endtime="20210730 15:37:37.094"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:37:37.094" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:37:37.094" endtime="20210730 15:37:37.094"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:37.095" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:37.095" endtime="20210730 15:37:37.095"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:37.095" endtime="20210730 15:37:37.096"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:37.097" endtime="20210730 15:37:37.097"/>
</kw>
<status status="PASS" starttime="20210730 15:37:37.095" endtime="20210730 15:37:37.097"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:37.098" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:37.097" endtime="20210730 15:37:37.098"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:37.098" endtime="20210730 15:37:37.099"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:37.099" endtime="20210730 15:37:37.099"/>
</kw>
<status status="PASS" starttime="20210730 15:37:37.097" endtime="20210730 15:37:37.099"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:37.099" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:37.099" endtime="20210730 15:37:37.099"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:37.099" endtime="20210730 15:37:37.100"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:37.101" endtime="20210730 15:37:37.101"/>
</kw>
<status status="PASS" starttime="20210730 15:37:37.099" endtime="20210730 15:37:37.101"/>
</iter>
<status status="PASS" starttime="20210730 15:37:37.094" endtime="20210730 15:37:37.101"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:37:37.102" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:37:37.101" endtime="20210730 15:37:37.102"/>
</kw>
<status status="PASS" starttime="20210730 15:37:37.092" endtime="20210730 15:37:37.102"/>
</kw>
<status status="PASS" starttime="20210730 15:37:35.527" endtime="20210730 15:37:37.102"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.67abc!?.67abc!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:37.103" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:37:37.103" endtime="20210730 15:37:37.103"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:37.104" level="INFO">${payload} = {'password': 'abc!?.67abc!?.67abc!?.'}</msg>
<status status="PASS" starttime="20210730 15:37:37.103" endtime="20210730 15:37:37.104"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:37.115" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:37.116" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:37.104" endtime="20210730 15:37:37.116"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:37.116" endtime="20210730 15:37:37.116"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:37.116" endtime="20210730 15:37:37.116"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:37.104" endtime="20210730 15:37:37.116"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:37.104" endtime="20210730 15:37:37.116"/>
</for>
<status status="FAIL" starttime="20210730 15:37:37.102" endtime="20210730 15:37:37.116"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:37.102" endtime="20210730 15:37:37.116"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.67abc!?.67abc!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:37.117" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:37:37.117" endtime="20210730 15:37:37.118"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:37.118" level="INFO">${payload} = {'password': 'abc!?.67abc!?.67abc!?.'}</msg>
<status status="PASS" starttime="20210730 15:37:37.118" endtime="20210730 15:37:37.118"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:37.123" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:37.123" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:37.118" endtime="20210730 15:37:37.123"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:37.123" endtime="20210730 15:37:37.123"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:37.123" endtime="20210730 15:37:37.123"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:37.118" endtime="20210730 15:37:37.123"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:37.118" endtime="20210730 15:37:37.123"/>
</for>
<status status="FAIL" starttime="20210730 15:37:37.116" endtime="20210730 15:37:37.124"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:37.116" endtime="20210730 15:37:37.124"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.67abc!?.67abc!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:37.125" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:37:37.124" endtime="20210730 15:37:37.125"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:37.125" level="INFO">${payload} = {'password': 'abc!?.67abc!?.67abc!?.'}</msg>
<status status="PASS" starttime="20210730 15:37:37.125" endtime="20210730 15:37:37.125"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:37.131" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:37.132" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:37.126" endtime="20210730 15:37:37.132"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:37.132" endtime="20210730 15:37:37.132"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:37.132" endtime="20210730 15:37:37.132"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:37.126" endtime="20210730 15:37:37.132"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:37.125" endtime="20210730 15:37:37.132"/>
</for>
<status status="FAIL" starttime="20210730 15:37:37.124" endtime="20210730 15:37:37.133"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:37.124" endtime="20210730 15:37:37.133"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:37.102" endtime="20210730 15:37:37.133"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:37.144" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:37.157" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:37.157" level="INFO">${pids} = 9849
9856
9863</msg>
<status status="PASS" starttime="20210730 15:37:37.139" endtime="20210730 15:37:37.157"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:37.158" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:37.157" endtime="20210730 15:37:37.158"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:37.159" level="INFO">${pids} = ['9849', '9856', '9863']</msg>
<status status="PASS" starttime="20210730 15:37:37.159" endtime="20210730 15:37:37.159"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9849</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:37.164" level="INFO">Running command 'kill 9849 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:37.159" endtime="20210730 15:37:37.166"/>
</kw>
<status status="PASS" starttime="20210730 15:37:37.159" endtime="20210730 15:37:37.166"/>
</iter>
<iter>
<var name="${pid}">9856</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:37.178" level="INFO">Running command 'kill 9856 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:37.167" endtime="20210730 15:37:37.179"/>
</kw>
<status status="PASS" starttime="20210730 15:37:37.166" endtime="20210730 15:37:37.179"/>
</iter>
<iter>
<var name="${pid}">9863</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:37.186" level="INFO">Running command 'kill 9863 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:37.180" endtime="20210730 15:37:37.186"/>
</kw>
<status status="PASS" starttime="20210730 15:37:37.180" endtime="20210730 15:37:37.186"/>
</iter>
<status status="PASS" starttime="20210730 15:37:37.159" endtime="20210730 15:37:37.186"/>
</for>
<status status="PASS" starttime="20210730 15:37:37.158" endtime="20210730 15:37:37.186"/>
</branch>
<status status="PASS" starttime="20210730 15:37:37.158" endtime="20210730 15:37:37.186"/>
</if>
<status status="PASS" starttime="20210730 15:37:37.133" endtime="20210730 15:37:37.187"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abc!?.67abc!?.67abc!?.'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:37:35.525" endtime="20210730 15:37:37.187">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t90" name="With Each Valid Token, Updating Password Of Each System User With ABC456. Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:37.195" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:37.207" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:37.207" level="INFO">${pids} = 9893</msg>
<status status="PASS" starttime="20210730 15:37:37.190" endtime="20210730 15:37:37.207"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:37.208" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:37.207" endtime="20210730 15:37:37.208"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:37.209" level="INFO">${pids} = ['9893']</msg>
<status status="PASS" starttime="20210730 15:37:37.208" endtime="20210730 15:37:37.209"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9893</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:37.214" level="INFO">Running command 'kill 9893 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:37.209" endtime="20210730 15:37:37.214"/>
</kw>
<status status="PASS" starttime="20210730 15:37:37.209" endtime="20210730 15:37:37.224"/>
</iter>
<status status="PASS" starttime="20210730 15:37:37.209" endtime="20210730 15:37:37.224"/>
</for>
<status status="PASS" starttime="20210730 15:37:37.208" endtime="20210730 15:37:37.224"/>
</branch>
<status status="PASS" starttime="20210730 15:37:37.208" endtime="20210730 15:37:37.224"/>
</if>
<status status="PASS" starttime="20210730 15:37:37.190" endtime="20210730 15:37:37.225"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:37.227" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:37.226" endtime="20210730 15:37:37.227"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:37.228" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:37.228" endtime="20210730 15:37:37.229"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:37.230" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:37.229" endtime="20210730 15:37:37.230"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:37.231" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:37.230" endtime="20210730 15:37:37.231"/>
</kw>
<msg timestamp="20210730 15:37:37.231" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:37.227" endtime="20210730 15:37:37.231"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:37.236" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:37.231" endtime="20210730 15:37:37.238"/>
</kw>
<status status="PASS" starttime="20210730 15:37:37.225" endtime="20210730 15:37:37.238"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:37:37.240" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:37:37.239" endtime="20210730 15:37:37.245"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:37:38.746" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:37:37.245" endtime="20210730 15:37:38.746"/>
</kw>
<status status="PASS" starttime="20210730 15:37:37.238" endtime="20210730 15:37:38.747"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:38.748" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:38.747" endtime="20210730 15:37:38.748"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:38.748" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:38.748" endtime="20210730 15:37:38.748"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:38.748" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:38.748" endtime="20210730 15:37:38.749"/>
</kw>
<msg timestamp="20210730 15:37:38.749" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:38.747" endtime="20210730 15:37:38.749"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:37:38.749" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:37:38.749" endtime="20210730 15:37:38.750"/>
</kw>
<status status="PASS" starttime="20210730 15:37:38.747" endtime="20210730 15:37:38.750"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:37:38.750" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:37:38.750" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:37:38.750" endtime="20210730 15:37:38.750"/>
</kw>
<status status="PASS" starttime="20210730 15:37:38.750" endtime="20210730 15:37:38.750"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:37:38.751" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:37:38.751" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:37:38.751" endtime="20210730 15:37:38.751"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:37:38.752" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:37:38.751" endtime="20210730 15:37:38.752"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:38.752" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:38.752" endtime="20210730 15:37:38.752"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:38.752" endtime="20210730 15:37:38.753"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:38.753" endtime="20210730 15:37:38.753"/>
</kw>
<status status="PASS" starttime="20210730 15:37:38.752" endtime="20210730 15:37:38.753"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:38.754" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:38.753" endtime="20210730 15:37:38.754"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:38.754" endtime="20210730 15:37:38.754"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:38.755" endtime="20210730 15:37:38.755"/>
</kw>
<status status="PASS" starttime="20210730 15:37:38.753" endtime="20210730 15:37:38.755"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:38.755" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:38.755" endtime="20210730 15:37:38.755"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:38.755" endtime="20210730 15:37:38.756"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:38.756" endtime="20210730 15:37:38.756"/>
</kw>
<status status="PASS" starttime="20210730 15:37:38.755" endtime="20210730 15:37:38.756"/>
</iter>
<status status="PASS" starttime="20210730 15:37:38.752" endtime="20210730 15:37:38.756"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:37:38.757" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:37:38.756" endtime="20210730 15:37:38.757"/>
</kw>
<status status="PASS" starttime="20210730 15:37:38.751" endtime="20210730 15:37:38.757"/>
</kw>
<status status="PASS" starttime="20210730 15:37:37.189" endtime="20210730 15:37:38.757"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC456.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:38.758" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:37:38.758" endtime="20210730 15:37:38.758"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:38.759" level="INFO">${payload} = {'password': 'ABC456.'}</msg>
<status status="PASS" starttime="20210730 15:37:38.759" endtime="20210730 15:37:38.759"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:38.769" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:38.769" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:38.759" endtime="20210730 15:37:38.769"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:38.770" endtime="20210730 15:37:38.770"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:38.770" endtime="20210730 15:37:38.770"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:38.759" endtime="20210730 15:37:38.770"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:38.759" endtime="20210730 15:37:38.770"/>
</for>
<status status="FAIL" starttime="20210730 15:37:38.758" endtime="20210730 15:37:38.770"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:38.757" endtime="20210730 15:37:38.770"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC456.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:38.771" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:37:38.771" endtime="20210730 15:37:38.771"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:38.772" level="INFO">${payload} = {'password': 'ABC456.'}</msg>
<status status="PASS" starttime="20210730 15:37:38.771" endtime="20210730 15:37:38.772"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:38.776" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:38.776" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:38.772" endtime="20210730 15:37:38.776"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:38.777" endtime="20210730 15:37:38.777"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:38.777" endtime="20210730 15:37:38.777"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:38.772" endtime="20210730 15:37:38.777"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:38.772" endtime="20210730 15:37:38.777"/>
</for>
<status status="FAIL" starttime="20210730 15:37:38.770" endtime="20210730 15:37:38.778"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:38.770" endtime="20210730 15:37:38.778"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC456.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:38.779" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:37:38.779" endtime="20210730 15:37:38.779"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:38.780" level="INFO">${payload} = {'password': 'ABC456.'}</msg>
<status status="PASS" starttime="20210730 15:37:38.779" endtime="20210730 15:37:38.780"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:38.784" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:38.784" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:38.780" endtime="20210730 15:37:38.784"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:38.784" endtime="20210730 15:37:38.785"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:38.785" endtime="20210730 15:37:38.785"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:38.780" endtime="20210730 15:37:38.785"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:38.780" endtime="20210730 15:37:38.785"/>
</for>
<status status="FAIL" starttime="20210730 15:37:38.778" endtime="20210730 15:37:38.785"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:38.778" endtime="20210730 15:37:38.785"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:38.757" endtime="20210730 15:37:38.785"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:38.799" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:38.814" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:38.814" level="INFO">${pids} = 9916
9923
9927</msg>
<status status="PASS" starttime="20210730 15:37:38.788" endtime="20210730 15:37:38.814"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:38.815" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:38.815" endtime="20210730 15:37:38.815"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:38.816" level="INFO">${pids} = ['9916', '9923', '9927']</msg>
<status status="PASS" starttime="20210730 15:37:38.816" endtime="20210730 15:37:38.816"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9916</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:38.827" level="INFO">Running command 'kill 9916 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:38.816" endtime="20210730 15:37:38.828"/>
</kw>
<status status="PASS" starttime="20210730 15:37:38.816" endtime="20210730 15:37:38.828"/>
</iter>
<iter>
<var name="${pid}">9923</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:38.833" level="INFO">Running command 'kill 9923 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:38.829" endtime="20210730 15:37:38.834"/>
</kw>
<status status="PASS" starttime="20210730 15:37:38.828" endtime="20210730 15:37:38.834"/>
</iter>
<iter>
<var name="${pid}">9927</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:38.838" level="INFO">Running command 'kill 9927 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:38.835" endtime="20210730 15:37:38.839"/>
</kw>
<status status="PASS" starttime="20210730 15:37:38.834" endtime="20210730 15:37:38.839"/>
</iter>
<status status="PASS" starttime="20210730 15:37:38.816" endtime="20210730 15:37:38.839"/>
</for>
<status status="PASS" starttime="20210730 15:37:38.816" endtime="20210730 15:37:38.839"/>
</branch>
<status status="PASS" starttime="20210730 15:37:38.815" endtime="20210730 15:37:38.839"/>
</if>
<status status="PASS" starttime="20210730 15:37:38.786" endtime="20210730 15:37:38.840"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABC456.'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:37:37.188" endtime="20210730 15:37:38.840">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t91" name="With Each Valid Token, Updating Password Of Each System User With ABC456.? Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:38.847" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:38.862" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:38.862" level="INFO">${pids} = 9956</msg>
<status status="PASS" starttime="20210730 15:37:38.843" endtime="20210730 15:37:38.862"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:38.864" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:38.863" endtime="20210730 15:37:38.864"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:38.864" level="INFO">${pids} = ['9956']</msg>
<status status="PASS" starttime="20210730 15:37:38.864" endtime="20210730 15:37:38.864"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9956</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:38.879" level="INFO">Running command 'kill 9956 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:38.865" endtime="20210730 15:37:38.880"/>
</kw>
<status status="PASS" starttime="20210730 15:37:38.865" endtime="20210730 15:37:38.880"/>
</iter>
<status status="PASS" starttime="20210730 15:37:38.864" endtime="20210730 15:37:38.880"/>
</for>
<status status="PASS" starttime="20210730 15:37:38.864" endtime="20210730 15:37:38.880"/>
</branch>
<status status="PASS" starttime="20210730 15:37:38.864" endtime="20210730 15:37:38.880"/>
</if>
<status status="PASS" starttime="20210730 15:37:38.842" endtime="20210730 15:37:38.880"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:38.882" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:38.881" endtime="20210730 15:37:38.882"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:38.883" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:38.882" endtime="20210730 15:37:38.883"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:38.883" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:38.883" endtime="20210730 15:37:38.883"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:38.884" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:38.883" endtime="20210730 15:37:38.884"/>
</kw>
<msg timestamp="20210730 15:37:38.884" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:38.882" endtime="20210730 15:37:38.884"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:38.888" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:38.884" endtime="20210730 15:37:38.890"/>
</kw>
<status status="PASS" starttime="20210730 15:37:38.881" endtime="20210730 15:37:38.890"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:37:38.891" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:37:38.891" endtime="20210730 15:37:38.897"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:37:40.398" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:37:38.897" endtime="20210730 15:37:40.398"/>
</kw>
<status status="PASS" starttime="20210730 15:37:38.890" endtime="20210730 15:37:40.399"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:40.400" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:40.400" endtime="20210730 15:37:40.400"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:40.400" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:40.400" endtime="20210730 15:37:40.400"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:40.401" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:40.401" endtime="20210730 15:37:40.401"/>
</kw>
<msg timestamp="20210730 15:37:40.401" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:40.399" endtime="20210730 15:37:40.401"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:37:40.402" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:37:40.401" endtime="20210730 15:37:40.402"/>
</kw>
<status status="PASS" starttime="20210730 15:37:40.399" endtime="20210730 15:37:40.402"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:37:40.403" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:37:40.403" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:37:40.403" endtime="20210730 15:37:40.403"/>
</kw>
<status status="PASS" starttime="20210730 15:37:40.402" endtime="20210730 15:37:40.403"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:37:40.404" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:37:40.404" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:37:40.403" endtime="20210730 15:37:40.404"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:37:40.404" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:37:40.404" endtime="20210730 15:37:40.404"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:40.405" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:40.405" endtime="20210730 15:37:40.405"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:40.405" endtime="20210730 15:37:40.406"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:40.406" endtime="20210730 15:37:40.406"/>
</kw>
<status status="PASS" starttime="20210730 15:37:40.405" endtime="20210730 15:37:40.407"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:40.407" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:40.407" endtime="20210730 15:37:40.407"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:40.407" endtime="20210730 15:37:40.408"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:40.408" endtime="20210730 15:37:40.408"/>
</kw>
<status status="PASS" starttime="20210730 15:37:40.407" endtime="20210730 15:37:40.408"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:40.408" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:40.408" endtime="20210730 15:37:40.409"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:40.409" endtime="20210730 15:37:40.410"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:40.410" endtime="20210730 15:37:40.410"/>
</kw>
<status status="PASS" starttime="20210730 15:37:40.408" endtime="20210730 15:37:40.410"/>
</iter>
<status status="PASS" starttime="20210730 15:37:40.404" endtime="20210730 15:37:40.410"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:37:40.411" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:37:40.411" endtime="20210730 15:37:40.411"/>
</kw>
<status status="PASS" starttime="20210730 15:37:40.403" endtime="20210730 15:37:40.411"/>
</kw>
<status status="PASS" starttime="20210730 15:37:38.841" endtime="20210730 15:37:40.411"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC456.?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:40.413" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:37:40.412" endtime="20210730 15:37:40.413"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:40.413" level="INFO">${payload} = {'password': 'ABC456.?'}</msg>
<status status="PASS" starttime="20210730 15:37:40.413" endtime="20210730 15:37:40.413"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:40.421" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:40.422" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:40.413" endtime="20210730 15:37:40.422"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:40.422" endtime="20210730 15:37:40.422"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:40.422" endtime="20210730 15:37:40.422"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:40.413" endtime="20210730 15:37:40.422"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:40.413" endtime="20210730 15:37:40.422"/>
</for>
<status status="FAIL" starttime="20210730 15:37:40.412" endtime="20210730 15:37:40.423"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:40.412" endtime="20210730 15:37:40.423"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC456.?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:40.424" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:37:40.424" endtime="20210730 15:37:40.424"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:40.425" level="INFO">${payload} = {'password': 'ABC456.?'}</msg>
<status status="PASS" starttime="20210730 15:37:40.424" endtime="20210730 15:37:40.425"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:40.430" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:40.430" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:40.425" endtime="20210730 15:37:40.430"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:40.430" endtime="20210730 15:37:40.430"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:40.430" endtime="20210730 15:37:40.430"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:40.425" endtime="20210730 15:37:40.430"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:40.425" endtime="20210730 15:37:40.430"/>
</for>
<status status="FAIL" starttime="20210730 15:37:40.423" endtime="20210730 15:37:40.430"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:40.423" endtime="20210730 15:37:40.430"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC456.?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:40.431" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:37:40.431" endtime="20210730 15:37:40.431"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:40.432" level="INFO">${payload} = {'password': 'ABC456.?'}</msg>
<status status="PASS" starttime="20210730 15:37:40.432" endtime="20210730 15:37:40.432"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:40.436" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:40.436" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:40.432" endtime="20210730 15:37:40.436"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:40.436" endtime="20210730 15:37:40.436"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:40.436" endtime="20210730 15:37:40.436"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:40.432" endtime="20210730 15:37:40.436"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:40.432" endtime="20210730 15:37:40.436"/>
</for>
<status status="FAIL" starttime="20210730 15:37:40.431" endtime="20210730 15:37:40.436"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:40.431" endtime="20210730 15:37:40.436"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:40.411" endtime="20210730 15:37:40.436"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:40.441" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:40.454" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:40.454" level="INFO">${pids} = 9979
9986
9990</msg>
<status status="PASS" starttime="20210730 15:37:40.437" endtime="20210730 15:37:40.454"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:40.455" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:40.454" endtime="20210730 15:37:40.455"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:40.455" level="INFO">${pids} = ['9979', '9986', '9990']</msg>
<status status="PASS" starttime="20210730 15:37:40.455" endtime="20210730 15:37:40.455"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9979</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:40.459" level="INFO">Running command 'kill 9979 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:40.456" endtime="20210730 15:37:40.459"/>
</kw>
<status status="PASS" starttime="20210730 15:37:40.456" endtime="20210730 15:37:40.459"/>
</iter>
<iter>
<var name="${pid}">9986</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:40.464" level="INFO">Running command 'kill 9986 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:40.460" endtime="20210730 15:37:40.465"/>
</kw>
<status status="PASS" starttime="20210730 15:37:40.460" endtime="20210730 15:37:40.465"/>
</iter>
<iter>
<var name="${pid}">9990</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:40.469" level="INFO">Running command 'kill 9990 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:40.465" endtime="20210730 15:37:40.469"/>
</kw>
<status status="PASS" starttime="20210730 15:37:40.465" endtime="20210730 15:37:40.469"/>
</iter>
<status status="PASS" starttime="20210730 15:37:40.456" endtime="20210730 15:37:40.469"/>
</for>
<status status="PASS" starttime="20210730 15:37:40.455" endtime="20210730 15:37:40.470"/>
</branch>
<status status="PASS" starttime="20210730 15:37:40.455" endtime="20210730 15:37:40.470"/>
</if>
<status status="PASS" starttime="20210730 15:37:40.437" endtime="20210730 15:37:40.470"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABC456.?'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:37:38.840" endtime="20210730 15:37:40.470">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t92" name="With Each Valid Token, Updating Password Of Each System User With ABC456.?ABC456.?ABC456 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:40.475" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:40.489" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:40.489" level="INFO">${pids} = 10019</msg>
<status status="PASS" starttime="20210730 15:37:40.472" endtime="20210730 15:37:40.489"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:40.490" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:40.490" endtime="20210730 15:37:40.490"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:40.491" level="INFO">${pids} = ['10019']</msg>
<status status="PASS" starttime="20210730 15:37:40.491" endtime="20210730 15:37:40.491"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10019</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:40.495" level="INFO">Running command 'kill 10019 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:40.491" endtime="20210730 15:37:40.496"/>
</kw>
<status status="PASS" starttime="20210730 15:37:40.491" endtime="20210730 15:37:40.496"/>
</iter>
<status status="PASS" starttime="20210730 15:37:40.491" endtime="20210730 15:37:40.496"/>
</for>
<status status="PASS" starttime="20210730 15:37:40.491" endtime="20210730 15:37:40.496"/>
</branch>
<status status="PASS" starttime="20210730 15:37:40.490" endtime="20210730 15:37:40.496"/>
</if>
<status status="PASS" starttime="20210730 15:37:40.472" endtime="20210730 15:37:40.496"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:40.498" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:40.497" endtime="20210730 15:37:40.498"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:40.498" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:40.498" endtime="20210730 15:37:40.498"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:40.499" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:40.498" endtime="20210730 15:37:40.499"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:40.499" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:40.499" endtime="20210730 15:37:40.499"/>
</kw>
<msg timestamp="20210730 15:37:40.499" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:40.498" endtime="20210730 15:37:40.499"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:40.515" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:40.499" endtime="20210730 15:37:40.517"/>
</kw>
<status status="PASS" starttime="20210730 15:37:40.497" endtime="20210730 15:37:40.517"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:37:40.519" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:37:40.518" endtime="20210730 15:37:40.535"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:37:42.041" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:37:40.535" endtime="20210730 15:37:42.041"/>
</kw>
<status status="PASS" starttime="20210730 15:37:40.518" endtime="20210730 15:37:42.043"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:42.046" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:42.046" endtime="20210730 15:37:42.046"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:42.047" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:42.046" endtime="20210730 15:37:42.047"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:42.047" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:42.047" endtime="20210730 15:37:42.047"/>
</kw>
<msg timestamp="20210730 15:37:42.047" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:42.045" endtime="20210730 15:37:42.047"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:37:42.048" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:37:42.047" endtime="20210730 15:37:42.048"/>
</kw>
<status status="PASS" starttime="20210730 15:37:42.044" endtime="20210730 15:37:42.048"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:37:42.049" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:37:42.049" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:37:42.049" endtime="20210730 15:37:42.049"/>
</kw>
<status status="PASS" starttime="20210730 15:37:42.048" endtime="20210730 15:37:42.049"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:37:42.050" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:37:42.050" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:37:42.050" endtime="20210730 15:37:42.050"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:37:42.050" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:37:42.050" endtime="20210730 15:37:42.050"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:42.051" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:42.051" endtime="20210730 15:37:42.051"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:42.051" endtime="20210730 15:37:42.052"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:42.052" endtime="20210730 15:37:42.052"/>
</kw>
<status status="PASS" starttime="20210730 15:37:42.051" endtime="20210730 15:37:42.052"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:42.053" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:42.052" endtime="20210730 15:37:42.053"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:42.053" endtime="20210730 15:37:42.053"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:42.054" endtime="20210730 15:37:42.054"/>
</kw>
<status status="PASS" starttime="20210730 15:37:42.052" endtime="20210730 15:37:42.054"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:42.054" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:42.054" endtime="20210730 15:37:42.054"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:42.054" endtime="20210730 15:37:42.055"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:42.055" endtime="20210730 15:37:42.055"/>
</kw>
<status status="PASS" starttime="20210730 15:37:42.054" endtime="20210730 15:37:42.055"/>
</iter>
<status status="PASS" starttime="20210730 15:37:42.051" endtime="20210730 15:37:42.055"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:37:42.056" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:37:42.056" endtime="20210730 15:37:42.056"/>
</kw>
<status status="PASS" starttime="20210730 15:37:42.049" endtime="20210730 15:37:42.056"/>
</kw>
<status status="PASS" starttime="20210730 15:37:40.471" endtime="20210730 15:37:42.056"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC456.?ABC456.?ABC456</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:42.058" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:37:42.057" endtime="20210730 15:37:42.058"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:42.058" level="INFO">${payload} = {'password': 'ABC456.?ABC456.?ABC456'}</msg>
<status status="PASS" starttime="20210730 15:37:42.058" endtime="20210730 15:37:42.058"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:42.067" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:42.067" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:42.058" endtime="20210730 15:37:42.067"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:42.067" endtime="20210730 15:37:42.067"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:42.068" endtime="20210730 15:37:42.068"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:42.058" endtime="20210730 15:37:42.068"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:42.058" endtime="20210730 15:37:42.068"/>
</for>
<status status="FAIL" starttime="20210730 15:37:42.057" endtime="20210730 15:37:42.068"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:42.057" endtime="20210730 15:37:42.068"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC456.?ABC456.?ABC456</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:42.069" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:37:42.069" endtime="20210730 15:37:42.069"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:42.069" level="INFO">${payload} = {'password': 'ABC456.?ABC456.?ABC456'}</msg>
<status status="PASS" starttime="20210730 15:37:42.069" endtime="20210730 15:37:42.069"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:42.074" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:42.074" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:42.070" endtime="20210730 15:37:42.074"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:42.074" endtime="20210730 15:37:42.074"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:42.074" endtime="20210730 15:37:42.074"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:42.070" endtime="20210730 15:37:42.074"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:42.069" endtime="20210730 15:37:42.074"/>
</for>
<status status="FAIL" starttime="20210730 15:37:42.068" endtime="20210730 15:37:42.074"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:42.068" endtime="20210730 15:37:42.075"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC456.?ABC456.?ABC456</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:42.076" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:37:42.075" endtime="20210730 15:37:42.076"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:42.077" level="INFO">${payload} = {'password': 'ABC456.?ABC456.?ABC456'}</msg>
<status status="PASS" starttime="20210730 15:37:42.076" endtime="20210730 15:37:42.077"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:42.081" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:42.082" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:42.077" endtime="20210730 15:37:42.082"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:42.082" endtime="20210730 15:37:42.082"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:42.082" endtime="20210730 15:37:42.082"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:42.077" endtime="20210730 15:37:42.082"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:42.077" endtime="20210730 15:37:42.082"/>
</for>
<status status="FAIL" starttime="20210730 15:37:42.075" endtime="20210730 15:37:42.082"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:42.075" endtime="20210730 15:37:42.082"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:42.056" endtime="20210730 15:37:42.083"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:42.094" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:42.105" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:42.105" level="INFO">${pids} = 10042
10049
10053</msg>
<status status="PASS" starttime="20210730 15:37:42.084" endtime="20210730 15:37:42.106"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:42.106" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:42.106" endtime="20210730 15:37:42.106"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:42.107" level="INFO">${pids} = ['10042', '10049', '10053']</msg>
<status status="PASS" starttime="20210730 15:37:42.107" endtime="20210730 15:37:42.107"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10042</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:42.112" level="INFO">Running command 'kill 10042 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:42.108" endtime="20210730 15:37:42.112"/>
</kw>
<status status="PASS" starttime="20210730 15:37:42.107" endtime="20210730 15:37:42.112"/>
</iter>
<iter>
<var name="${pid}">10049</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:42.118" level="INFO">Running command 'kill 10049 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:42.113" endtime="20210730 15:37:42.118"/>
</kw>
<status status="PASS" starttime="20210730 15:37:42.113" endtime="20210730 15:37:42.118"/>
</iter>
<iter>
<var name="${pid}">10053</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:42.128" level="INFO">Running command 'kill 10053 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:42.119" endtime="20210730 15:37:42.128"/>
</kw>
<status status="PASS" starttime="20210730 15:37:42.119" endtime="20210730 15:37:42.128"/>
</iter>
<status status="PASS" starttime="20210730 15:37:42.107" endtime="20210730 15:37:42.129"/>
</for>
<status status="PASS" starttime="20210730 15:37:42.107" endtime="20210730 15:37:42.129"/>
</branch>
<status status="PASS" starttime="20210730 15:37:42.107" endtime="20210730 15:37:42.129"/>
</if>
<status status="PASS" starttime="20210730 15:37:42.083" endtime="20210730 15:37:42.129"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABC456.?ABC456.?ABC456'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:37:40.471" endtime="20210730 15:37:42.129">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t93" name="With Each Valid Token, Updating Password Of Each System User With ABC!?.0 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:42.135" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:42.148" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:42.148" level="INFO">${pids} = 10082</msg>
<status status="PASS" starttime="20210730 15:37:42.131" endtime="20210730 15:37:42.149"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:42.150" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:42.149" endtime="20210730 15:37:42.150"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:42.150" level="INFO">${pids} = ['10082']</msg>
<status status="PASS" starttime="20210730 15:37:42.150" endtime="20210730 15:37:42.150"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10082</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:42.155" level="INFO">Running command 'kill 10082 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:42.151" endtime="20210730 15:37:42.155"/>
</kw>
<status status="PASS" starttime="20210730 15:37:42.151" endtime="20210730 15:37:42.155"/>
</iter>
<status status="PASS" starttime="20210730 15:37:42.151" endtime="20210730 15:37:42.155"/>
</for>
<status status="PASS" starttime="20210730 15:37:42.150" endtime="20210730 15:37:42.155"/>
</branch>
<status status="PASS" starttime="20210730 15:37:42.150" endtime="20210730 15:37:42.155"/>
</if>
<status status="PASS" starttime="20210730 15:37:42.131" endtime="20210730 15:37:42.156"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:42.157" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:42.156" endtime="20210730 15:37:42.157"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:42.157" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:42.157" endtime="20210730 15:37:42.157"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:42.158" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:42.158" endtime="20210730 15:37:42.158"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:42.158" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:42.158" endtime="20210730 15:37:42.158"/>
</kw>
<msg timestamp="20210730 15:37:42.159" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:42.157" endtime="20210730 15:37:42.159"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:42.163" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:42.159" endtime="20210730 15:37:42.164"/>
</kw>
<status status="PASS" starttime="20210730 15:37:42.156" endtime="20210730 15:37:42.164"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:37:42.166" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:37:42.165" endtime="20210730 15:37:42.180"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:37:43.692" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:37:42.180" endtime="20210730 15:37:43.692"/>
</kw>
<status status="PASS" starttime="20210730 15:37:42.165" endtime="20210730 15:37:43.692"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:43.694" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:43.693" endtime="20210730 15:37:43.694"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:43.694" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:43.694" endtime="20210730 15:37:43.694"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:43.694" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:43.694" endtime="20210730 15:37:43.695"/>
</kw>
<msg timestamp="20210730 15:37:43.695" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:43.693" endtime="20210730 15:37:43.695"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:37:43.695" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:37:43.695" endtime="20210730 15:37:43.696"/>
</kw>
<status status="PASS" starttime="20210730 15:37:43.692" endtime="20210730 15:37:43.696"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:37:43.696" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:37:43.696" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:37:43.696" endtime="20210730 15:37:43.696"/>
</kw>
<status status="PASS" starttime="20210730 15:37:43.696" endtime="20210730 15:37:43.697"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:37:43.697" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:37:43.698" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:37:43.697" endtime="20210730 15:37:43.698"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:37:43.698" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:37:43.698" endtime="20210730 15:37:43.698"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:43.698" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:43.698" endtime="20210730 15:37:43.698"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:43.699" endtime="20210730 15:37:43.699"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:43.699" endtime="20210730 15:37:43.700"/>
</kw>
<status status="PASS" starttime="20210730 15:37:43.698" endtime="20210730 15:37:43.700"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:43.700" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:43.700" endtime="20210730 15:37:43.700"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:43.700" endtime="20210730 15:37:43.701"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:43.701" endtime="20210730 15:37:43.701"/>
</kw>
<status status="PASS" starttime="20210730 15:37:43.700" endtime="20210730 15:37:43.701"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:43.702" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:43.701" endtime="20210730 15:37:43.702"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:43.702" endtime="20210730 15:37:43.702"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:43.702" endtime="20210730 15:37:43.703"/>
</kw>
<status status="PASS" starttime="20210730 15:37:43.701" endtime="20210730 15:37:43.703"/>
</iter>
<status status="PASS" starttime="20210730 15:37:43.698" endtime="20210730 15:37:43.703"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:37:43.703" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:37:43.703" endtime="20210730 15:37:43.703"/>
</kw>
<status status="PASS" starttime="20210730 15:37:43.697" endtime="20210730 15:37:43.703"/>
</kw>
<status status="PASS" starttime="20210730 15:37:42.130" endtime="20210730 15:37:43.703"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC!?.0</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:43.705" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:37:43.704" endtime="20210730 15:37:43.705"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:43.705" level="INFO">${payload} = {'password': 'ABC!?.0'}</msg>
<status status="PASS" starttime="20210730 15:37:43.705" endtime="20210730 15:37:43.705"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:43.716" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:43.716" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:43.705" endtime="20210730 15:37:43.716"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:43.716" endtime="20210730 15:37:43.716"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:43.716" endtime="20210730 15:37:43.716"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:43.705" endtime="20210730 15:37:43.716"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:43.705" endtime="20210730 15:37:43.716"/>
</for>
<status status="FAIL" starttime="20210730 15:37:43.704" endtime="20210730 15:37:43.717"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:43.704" endtime="20210730 15:37:43.717"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC!?.0</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:43.718" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:37:43.717" endtime="20210730 15:37:43.718"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:43.718" level="INFO">${payload} = {'password': 'ABC!?.0'}</msg>
<status status="PASS" starttime="20210730 15:37:43.718" endtime="20210730 15:37:43.718"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:43.723" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:43.723" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:43.719" endtime="20210730 15:37:43.723"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:43.723" endtime="20210730 15:37:43.723"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:43.723" endtime="20210730 15:37:43.723"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:43.718" endtime="20210730 15:37:43.723"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:43.718" endtime="20210730 15:37:43.723"/>
</for>
<status status="FAIL" starttime="20210730 15:37:43.717" endtime="20210730 15:37:43.723"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:43.717" endtime="20210730 15:37:43.724"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC!?.0</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:43.725" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:37:43.724" endtime="20210730 15:37:43.725"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:43.725" level="INFO">${payload} = {'password': 'ABC!?.0'}</msg>
<status status="PASS" starttime="20210730 15:37:43.725" endtime="20210730 15:37:43.725"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:43.730" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:43.730" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:43.726" endtime="20210730 15:37:43.730"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:43.730" endtime="20210730 15:37:43.730"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:43.730" endtime="20210730 15:37:43.730"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:43.725" endtime="20210730 15:37:43.731"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:43.725" endtime="20210730 15:37:43.731"/>
</for>
<status status="FAIL" starttime="20210730 15:37:43.724" endtime="20210730 15:37:43.731"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:43.724" endtime="20210730 15:37:43.731"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:43.704" endtime="20210730 15:37:43.731"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:43.741" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:43.753" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:43.753" level="INFO">${pids} = 10107
10114
10121</msg>
<status status="PASS" starttime="20210730 15:37:43.733" endtime="20210730 15:37:43.753"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:43.754" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:43.754" endtime="20210730 15:37:43.754"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:43.755" level="INFO">${pids} = ['10107', '10114', '10121']</msg>
<status status="PASS" starttime="20210730 15:37:43.755" endtime="20210730 15:37:43.755"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10107</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:43.759" level="INFO">Running command 'kill 10107 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:43.756" endtime="20210730 15:37:43.760"/>
</kw>
<status status="PASS" starttime="20210730 15:37:43.755" endtime="20210730 15:37:43.760"/>
</iter>
<iter>
<var name="${pid}">10114</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:43.771" level="INFO">Running command 'kill 10114 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:43.761" endtime="20210730 15:37:43.772"/>
</kw>
<status status="PASS" starttime="20210730 15:37:43.761" endtime="20210730 15:37:43.772"/>
</iter>
<iter>
<var name="${pid}">10121</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:43.777" level="INFO">Running command 'kill 10121 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:43.772" endtime="20210730 15:37:43.777"/>
</kw>
<status status="PASS" starttime="20210730 15:37:43.772" endtime="20210730 15:37:43.778"/>
</iter>
<status status="PASS" starttime="20210730 15:37:43.755" endtime="20210730 15:37:43.778"/>
</for>
<status status="PASS" starttime="20210730 15:37:43.755" endtime="20210730 15:37:43.778"/>
</branch>
<status status="PASS" starttime="20210730 15:37:43.754" endtime="20210730 15:37:43.778"/>
</if>
<status status="PASS" starttime="20210730 15:37:43.731" endtime="20210730 15:37:43.778"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABC!?.0'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:37:42.130" endtime="20210730 15:37:43.778">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t94" name="With Each Valid Token, Updating Password Of Each System User With ABC!?.01 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:43.784" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:43.799" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:43.799" level="INFO">${pids} = 10150</msg>
<status status="PASS" starttime="20210730 15:37:43.781" endtime="20210730 15:37:43.799"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:43.800" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:43.800" endtime="20210730 15:37:43.800"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:43.801" level="INFO">${pids} = ['10150']</msg>
<status status="PASS" starttime="20210730 15:37:43.801" endtime="20210730 15:37:43.801"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10150</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:43.805" level="INFO">Running command 'kill 10150 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:43.802" endtime="20210730 15:37:43.806"/>
</kw>
<status status="PASS" starttime="20210730 15:37:43.801" endtime="20210730 15:37:43.806"/>
</iter>
<status status="PASS" starttime="20210730 15:37:43.801" endtime="20210730 15:37:43.806"/>
</for>
<status status="PASS" starttime="20210730 15:37:43.801" endtime="20210730 15:37:43.806"/>
</branch>
<status status="PASS" starttime="20210730 15:37:43.800" endtime="20210730 15:37:43.806"/>
</if>
<status status="PASS" starttime="20210730 15:37:43.780" endtime="20210730 15:37:43.807"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:43.808" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:43.807" endtime="20210730 15:37:43.808"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:43.808" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:43.808" endtime="20210730 15:37:43.808"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:43.809" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:43.809" endtime="20210730 15:37:43.809"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:43.809" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:43.809" endtime="20210730 15:37:43.809"/>
</kw>
<msg timestamp="20210730 15:37:43.810" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:43.808" endtime="20210730 15:37:43.810"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:43.815" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:43.810" endtime="20210730 15:37:43.824"/>
</kw>
<status status="PASS" starttime="20210730 15:37:43.807" endtime="20210730 15:37:43.825"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:37:43.828" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:37:43.827" endtime="20210730 15:37:43.833"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:37:45.347" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:37:43.833" endtime="20210730 15:37:45.347"/>
</kw>
<status status="PASS" starttime="20210730 15:37:43.825" endtime="20210730 15:37:45.347"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:45.349" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:45.348" endtime="20210730 15:37:45.349"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:45.349" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:45.349" endtime="20210730 15:37:45.349"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:45.349" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:45.349" endtime="20210730 15:37:45.349"/>
</kw>
<msg timestamp="20210730 15:37:45.350" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:45.348" endtime="20210730 15:37:45.350"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:37:45.350" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:37:45.350" endtime="20210730 15:37:45.350"/>
</kw>
<status status="PASS" starttime="20210730 15:37:45.348" endtime="20210730 15:37:45.351"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:37:45.351" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:37:45.351" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:37:45.351" endtime="20210730 15:37:45.351"/>
</kw>
<status status="PASS" starttime="20210730 15:37:45.351" endtime="20210730 15:37:45.351"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:37:45.352" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:37:45.352" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:37:45.352" endtime="20210730 15:37:45.352"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:37:45.352" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:37:45.352" endtime="20210730 15:37:45.352"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:45.353" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:45.353" endtime="20210730 15:37:45.353"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:45.353" endtime="20210730 15:37:45.354"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:45.354" endtime="20210730 15:37:45.354"/>
</kw>
<status status="PASS" starttime="20210730 15:37:45.353" endtime="20210730 15:37:45.354"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:45.355" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:45.354" endtime="20210730 15:37:45.355"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:45.355" endtime="20210730 15:37:45.355"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:45.356" endtime="20210730 15:37:45.356"/>
</kw>
<status status="PASS" starttime="20210730 15:37:45.354" endtime="20210730 15:37:45.356"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:45.356" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:45.356" endtime="20210730 15:37:45.356"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:45.356" endtime="20210730 15:37:45.357"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:45.357" endtime="20210730 15:37:45.358"/>
</kw>
<status status="PASS" starttime="20210730 15:37:45.356" endtime="20210730 15:37:45.358"/>
</iter>
<status status="PASS" starttime="20210730 15:37:45.353" endtime="20210730 15:37:45.358"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:37:45.358" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:37:45.358" endtime="20210730 15:37:45.358"/>
</kw>
<status status="PASS" starttime="20210730 15:37:45.351" endtime="20210730 15:37:45.358"/>
</kw>
<status status="PASS" starttime="20210730 15:37:43.780" endtime="20210730 15:37:45.358"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC!?.01</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:45.360" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:37:45.359" endtime="20210730 15:37:45.360"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:45.360" level="INFO">${payload} = {'password': 'ABC!?.01'}</msg>
<status status="PASS" starttime="20210730 15:37:45.360" endtime="20210730 15:37:45.360"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:45.370" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:45.370" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:45.360" endtime="20210730 15:37:45.370"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:45.370" endtime="20210730 15:37:45.370"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:45.371" endtime="20210730 15:37:45.371"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:45.360" endtime="20210730 15:37:45.371"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:45.360" endtime="20210730 15:37:45.371"/>
</for>
<status status="FAIL" starttime="20210730 15:37:45.359" endtime="20210730 15:37:45.371"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:45.359" endtime="20210730 15:37:45.371"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC!?.01</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:45.372" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:37:45.372" endtime="20210730 15:37:45.372"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:45.372" level="INFO">${payload} = {'password': 'ABC!?.01'}</msg>
<status status="PASS" starttime="20210730 15:37:45.372" endtime="20210730 15:37:45.372"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:45.377" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:45.377" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:45.373" endtime="20210730 15:37:45.377"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:45.377" endtime="20210730 15:37:45.377"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:45.377" endtime="20210730 15:37:45.377"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:45.372" endtime="20210730 15:37:45.377"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:45.372" endtime="20210730 15:37:45.377"/>
</for>
<status status="FAIL" starttime="20210730 15:37:45.371" endtime="20210730 15:37:45.378"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:45.371" endtime="20210730 15:37:45.378"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC!?.01</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:45.379" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:37:45.378" endtime="20210730 15:37:45.379"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:45.379" level="INFO">${payload} = {'password': 'ABC!?.01'}</msg>
<status status="PASS" starttime="20210730 15:37:45.379" endtime="20210730 15:37:45.379"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:45.384" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:45.384" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:45.380" endtime="20210730 15:37:45.384"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:45.384" endtime="20210730 15:37:45.384"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:45.385" endtime="20210730 15:37:45.385"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:45.379" endtime="20210730 15:37:45.385"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:45.379" endtime="20210730 15:37:45.385"/>
</for>
<status status="FAIL" starttime="20210730 15:37:45.378" endtime="20210730 15:37:45.385"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:45.378" endtime="20210730 15:37:45.385"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:45.359" endtime="20210730 15:37:45.385"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:45.395" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:45.406" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:45.406" level="INFO">${pids} = 10173
10180
10184</msg>
<status status="PASS" starttime="20210730 15:37:45.387" endtime="20210730 15:37:45.406"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:45.407" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:45.406" endtime="20210730 15:37:45.407"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:45.408" level="INFO">${pids} = ['10173', '10180', '10184']</msg>
<status status="PASS" starttime="20210730 15:37:45.408" endtime="20210730 15:37:45.408"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10173</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:45.414" level="INFO">Running command 'kill 10173 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:45.408" endtime="20210730 15:37:45.415"/>
</kw>
<status status="PASS" starttime="20210730 15:37:45.408" endtime="20210730 15:37:45.415"/>
</iter>
<iter>
<var name="${pid}">10180</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:45.420" level="INFO">Running command 'kill 10180 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:45.416" endtime="20210730 15:37:45.421"/>
</kw>
<status status="PASS" starttime="20210730 15:37:45.415" endtime="20210730 15:37:45.421"/>
</iter>
<iter>
<var name="${pid}">10184</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:45.424" level="INFO">Running command 'kill 10184 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:45.421" endtime="20210730 15:37:45.425"/>
</kw>
<status status="PASS" starttime="20210730 15:37:45.421" endtime="20210730 15:37:45.425"/>
</iter>
<status status="PASS" starttime="20210730 15:37:45.408" endtime="20210730 15:37:45.425"/>
</for>
<status status="PASS" starttime="20210730 15:37:45.407" endtime="20210730 15:37:45.425"/>
</branch>
<status status="PASS" starttime="20210730 15:37:45.407" endtime="20210730 15:37:45.425"/>
</if>
<status status="PASS" starttime="20210730 15:37:45.386" endtime="20210730 15:37:45.425"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABC!?.01'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:37:43.779" endtime="20210730 15:37:45.426">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t95" name="With Each Valid Token, Updating Password Of Each System User With ABC!?.01ABC!?.01ABC!?. Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:45.431" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:45.442" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:45.442" level="INFO">${pids} = 10213</msg>
<status status="PASS" starttime="20210730 15:37:45.428" endtime="20210730 15:37:45.442"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:45.444" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:45.443" endtime="20210730 15:37:45.444"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:45.445" level="INFO">${pids} = ['10213']</msg>
<status status="PASS" starttime="20210730 15:37:45.444" endtime="20210730 15:37:45.445"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10213</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:45.452" level="INFO">Running command 'kill 10213 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:45.445" endtime="20210730 15:37:45.453"/>
</kw>
<status status="PASS" starttime="20210730 15:37:45.445" endtime="20210730 15:37:45.453"/>
</iter>
<status status="PASS" starttime="20210730 15:37:45.445" endtime="20210730 15:37:45.453"/>
</for>
<status status="PASS" starttime="20210730 15:37:45.444" endtime="20210730 15:37:45.453"/>
</branch>
<status status="PASS" starttime="20210730 15:37:45.444" endtime="20210730 15:37:45.453"/>
</if>
<status status="PASS" starttime="20210730 15:37:45.428" endtime="20210730 15:37:45.453"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:45.455" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:45.454" endtime="20210730 15:37:45.455"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:45.455" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:45.455" endtime="20210730 15:37:45.455"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:45.456" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:45.455" endtime="20210730 15:37:45.456"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:45.456" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:45.456" endtime="20210730 15:37:45.456"/>
</kw>
<msg timestamp="20210730 15:37:45.456" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:45.455" endtime="20210730 15:37:45.456"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:45.460" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:45.456" endtime="20210730 15:37:45.462"/>
</kw>
<status status="PASS" starttime="20210730 15:37:45.454" endtime="20210730 15:37:45.462"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:37:45.464" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:37:45.463" endtime="20210730 15:37:45.480"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:37:46.983" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:37:45.481" endtime="20210730 15:37:46.983"/>
</kw>
<status status="PASS" starttime="20210730 15:37:45.463" endtime="20210730 15:37:46.983"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:46.984" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:46.984" endtime="20210730 15:37:46.984"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:46.985" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:46.984" endtime="20210730 15:37:46.985"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:46.985" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:46.985" endtime="20210730 15:37:46.985"/>
</kw>
<msg timestamp="20210730 15:37:46.985" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:46.984" endtime="20210730 15:37:46.985"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:37:46.986" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:37:46.985" endtime="20210730 15:37:46.986"/>
</kw>
<status status="PASS" starttime="20210730 15:37:46.983" endtime="20210730 15:37:46.986"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:37:46.987" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:37:46.987" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:37:46.987" endtime="20210730 15:37:46.987"/>
</kw>
<status status="PASS" starttime="20210730 15:37:46.986" endtime="20210730 15:37:46.987"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:37:46.988" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:37:46.988" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:37:46.987" endtime="20210730 15:37:46.988"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:37:46.988" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:37:46.988" endtime="20210730 15:37:46.988"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:46.989" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:46.989" endtime="20210730 15:37:46.989"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:46.989" endtime="20210730 15:37:46.990"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:46.990" endtime="20210730 15:37:46.990"/>
</kw>
<status status="PASS" starttime="20210730 15:37:46.988" endtime="20210730 15:37:46.990"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:46.990" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:46.990" endtime="20210730 15:37:46.990"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:46.991" endtime="20210730 15:37:46.991"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:46.991" endtime="20210730 15:37:46.991"/>
</kw>
<status status="PASS" starttime="20210730 15:37:46.990" endtime="20210730 15:37:46.992"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:46.992" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:46.992" endtime="20210730 15:37:46.992"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:46.992" endtime="20210730 15:37:46.993"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:46.993" endtime="20210730 15:37:46.993"/>
</kw>
<status status="PASS" starttime="20210730 15:37:46.992" endtime="20210730 15:37:46.993"/>
</iter>
<status status="PASS" starttime="20210730 15:37:46.988" endtime="20210730 15:37:46.993"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:37:46.994" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:37:46.993" endtime="20210730 15:37:46.994"/>
</kw>
<status status="PASS" starttime="20210730 15:37:46.987" endtime="20210730 15:37:46.994"/>
</kw>
<status status="PASS" starttime="20210730 15:37:45.427" endtime="20210730 15:37:46.994"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC!?.01ABC!?.01ABC!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:46.995" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:37:46.995" endtime="20210730 15:37:46.995"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:46.996" level="INFO">${payload} = {'password': 'ABC!?.01ABC!?.01ABC!?.'}</msg>
<status status="PASS" starttime="20210730 15:37:46.995" endtime="20210730 15:37:46.996"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:47.005" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:47.005" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:46.996" endtime="20210730 15:37:47.005"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:47.005" endtime="20210730 15:37:47.005"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:47.005" endtime="20210730 15:37:47.005"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:46.996" endtime="20210730 15:37:47.005"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:46.996" endtime="20210730 15:37:47.006"/>
</for>
<status status="FAIL" starttime="20210730 15:37:46.994" endtime="20210730 15:37:47.006"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:46.994" endtime="20210730 15:37:47.006"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC!?.01ABC!?.01ABC!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:47.007" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:37:47.006" endtime="20210730 15:37:47.007"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:47.007" level="INFO">${payload} = {'password': 'ABC!?.01ABC!?.01ABC!?.'}</msg>
<status status="PASS" starttime="20210730 15:37:47.007" endtime="20210730 15:37:47.007"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:47.012" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:47.013" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:47.008" endtime="20210730 15:37:47.013"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:47.013" endtime="20210730 15:37:47.013"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:47.013" endtime="20210730 15:37:47.013"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:47.007" endtime="20210730 15:37:47.013"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:47.007" endtime="20210730 15:37:47.013"/>
</for>
<status status="FAIL" starttime="20210730 15:37:47.006" endtime="20210730 15:37:47.013"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:47.006" endtime="20210730 15:37:47.013"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC!?.01ABC!?.01ABC!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:47.014" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:37:47.014" endtime="20210730 15:37:47.014"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:47.015" level="INFO">${payload} = {'password': 'ABC!?.01ABC!?.01ABC!?.'}</msg>
<status status="PASS" starttime="20210730 15:37:47.015" endtime="20210730 15:37:47.015"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:47.019" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:47.019" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:47.015" endtime="20210730 15:37:47.019"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:47.019" endtime="20210730 15:37:47.019"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:47.020" endtime="20210730 15:37:47.020"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:47.015" endtime="20210730 15:37:47.020"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:47.015" endtime="20210730 15:37:47.020"/>
</for>
<status status="FAIL" starttime="20210730 15:37:47.014" endtime="20210730 15:37:47.020"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:47.013" endtime="20210730 15:37:47.020"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:46.994" endtime="20210730 15:37:47.020"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:47.030" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:47.041" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:47.041" level="INFO">${pids} = 10236
10243
10247</msg>
<status status="PASS" starttime="20210730 15:37:47.021" endtime="20210730 15:37:47.041"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:47.043" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:47.042" endtime="20210730 15:37:47.043"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:47.044" level="INFO">${pids} = ['10236', '10243', '10247']</msg>
<status status="PASS" starttime="20210730 15:37:47.044" endtime="20210730 15:37:47.044"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10236</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:47.048" level="INFO">Running command 'kill 10236 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:47.045" endtime="20210730 15:37:47.049"/>
</kw>
<status status="PASS" starttime="20210730 15:37:47.045" endtime="20210730 15:37:47.049"/>
</iter>
<iter>
<var name="${pid}">10243</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:47.053" level="INFO">Running command 'kill 10243 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:47.049" endtime="20210730 15:37:47.054"/>
</kw>
<status status="PASS" starttime="20210730 15:37:47.049" endtime="20210730 15:37:47.054"/>
</iter>
<iter>
<var name="${pid}">10247</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:47.062" level="INFO">Running command 'kill 10247 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:47.054" endtime="20210730 15:37:47.063"/>
</kw>
<status status="PASS" starttime="20210730 15:37:47.054" endtime="20210730 15:37:47.063"/>
</iter>
<status status="PASS" starttime="20210730 15:37:47.045" endtime="20210730 15:37:47.063"/>
</for>
<status status="PASS" starttime="20210730 15:37:47.044" endtime="20210730 15:37:47.063"/>
</branch>
<status status="PASS" starttime="20210730 15:37:47.043" endtime="20210730 15:37:47.063"/>
</if>
<status status="PASS" starttime="20210730 15:37:47.020" endtime="20210730 15:37:47.063"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABC!?.01ABC!?.01ABC!?.'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:37:45.426" endtime="20210730 15:37:47.064">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t96" name="With Each Valid Token, Updating Password Of Each System User With 012!.Aa Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:47.069" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:47.080" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:47.080" level="INFO">${pids} = 10276</msg>
<status status="PASS" starttime="20210730 15:37:47.066" endtime="20210730 15:37:47.080"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:47.081" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:47.080" endtime="20210730 15:37:47.081"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:47.081" level="INFO">${pids} = ['10276']</msg>
<status status="PASS" starttime="20210730 15:37:47.081" endtime="20210730 15:37:47.081"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10276</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:47.088" level="INFO">Running command 'kill 10276 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:47.082" endtime="20210730 15:37:47.088"/>
</kw>
<status status="PASS" starttime="20210730 15:37:47.082" endtime="20210730 15:37:47.089"/>
</iter>
<status status="PASS" starttime="20210730 15:37:47.082" endtime="20210730 15:37:47.089"/>
</for>
<status status="PASS" starttime="20210730 15:37:47.081" endtime="20210730 15:37:47.089"/>
</branch>
<status status="PASS" starttime="20210730 15:37:47.081" endtime="20210730 15:37:47.089"/>
</if>
<status status="PASS" starttime="20210730 15:37:47.065" endtime="20210730 15:37:47.089"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:47.091" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:47.090" endtime="20210730 15:37:47.091"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:47.091" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:47.091" endtime="20210730 15:37:47.091"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:47.092" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:47.091" endtime="20210730 15:37:47.092"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:47.092" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:47.092" endtime="20210730 15:37:47.092"/>
</kw>
<msg timestamp="20210730 15:37:47.092" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:47.091" endtime="20210730 15:37:47.092"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:47.096" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:47.092" endtime="20210730 15:37:47.098"/>
</kw>
<status status="PASS" starttime="20210730 15:37:47.089" endtime="20210730 15:37:47.098"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:37:47.099" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:37:47.099" endtime="20210730 15:37:47.113"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:37:48.618" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:37:47.114" endtime="20210730 15:37:48.618"/>
</kw>
<status status="PASS" starttime="20210730 15:37:47.098" endtime="20210730 15:37:48.618"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:48.619" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:48.619" endtime="20210730 15:37:48.619"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:48.620" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:48.619" endtime="20210730 15:37:48.620"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:48.620" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:48.620" endtime="20210730 15:37:48.620"/>
</kw>
<msg timestamp="20210730 15:37:48.621" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:48.619" endtime="20210730 15:37:48.621"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:37:48.621" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:37:48.621" endtime="20210730 15:37:48.621"/>
</kw>
<status status="PASS" starttime="20210730 15:37:48.618" endtime="20210730 15:37:48.621"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:37:48.622" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:37:48.622" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:37:48.622" endtime="20210730 15:37:48.622"/>
</kw>
<status status="PASS" starttime="20210730 15:37:48.622" endtime="20210730 15:37:48.622"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:37:48.623" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:37:48.623" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:37:48.623" endtime="20210730 15:37:48.623"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:37:48.623" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:37:48.623" endtime="20210730 15:37:48.623"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:48.624" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:48.624" endtime="20210730 15:37:48.624"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:48.624" endtime="20210730 15:37:48.625"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:48.625" endtime="20210730 15:37:48.625"/>
</kw>
<status status="PASS" starttime="20210730 15:37:48.624" endtime="20210730 15:37:48.625"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:48.626" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:48.625" endtime="20210730 15:37:48.626"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:48.626" endtime="20210730 15:37:48.627"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:48.627" endtime="20210730 15:37:48.627"/>
</kw>
<status status="PASS" starttime="20210730 15:37:48.625" endtime="20210730 15:37:48.627"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:48.627" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:48.627" endtime="20210730 15:37:48.628"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:48.628" endtime="20210730 15:37:48.628"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:48.628" endtime="20210730 15:37:48.629"/>
</kw>
<status status="PASS" starttime="20210730 15:37:48.627" endtime="20210730 15:37:48.629"/>
</iter>
<status status="PASS" starttime="20210730 15:37:48.624" endtime="20210730 15:37:48.629"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:37:48.629" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:37:48.629" endtime="20210730 15:37:48.629"/>
</kw>
<status status="PASS" starttime="20210730 15:37:48.622" endtime="20210730 15:37:48.629"/>
</kw>
<status status="PASS" starttime="20210730 15:37:47.065" endtime="20210730 15:37:48.629"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=012!.Aa</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:48.631" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:37:48.630" endtime="20210730 15:37:48.631"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:48.631" level="INFO">${payload} = {'password': '012!.Aa'}</msg>
<status status="PASS" starttime="20210730 15:37:48.631" endtime="20210730 15:37:48.631"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:48.640" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:48.640" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:48.632" endtime="20210730 15:37:48.641"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:48.641" endtime="20210730 15:37:48.641"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:48.641" endtime="20210730 15:37:48.641"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:48.631" endtime="20210730 15:37:48.641"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:48.631" endtime="20210730 15:37:48.641"/>
</for>
<status status="FAIL" starttime="20210730 15:37:48.630" endtime="20210730 15:37:48.641"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:48.630" endtime="20210730 15:37:48.641"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=012!.Aa</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:48.642" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:37:48.642" endtime="20210730 15:37:48.642"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:48.643" level="INFO">${payload} = {'password': '012!.Aa'}</msg>
<status status="PASS" starttime="20210730 15:37:48.642" endtime="20210730 15:37:48.643"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:48.648" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:48.648" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:48.643" endtime="20210730 15:37:48.648"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:48.648" endtime="20210730 15:37:48.648"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:48.648" endtime="20210730 15:37:48.648"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:48.643" endtime="20210730 15:37:48.648"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:48.643" endtime="20210730 15:37:48.648"/>
</for>
<status status="FAIL" starttime="20210730 15:37:48.641" endtime="20210730 15:37:48.649"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:48.641" endtime="20210730 15:37:48.649"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=012!.Aa</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:48.650" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:37:48.650" endtime="20210730 15:37:48.650"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:48.650" level="INFO">${payload} = {'password': '012!.Aa'}</msg>
<status status="PASS" starttime="20210730 15:37:48.650" endtime="20210730 15:37:48.650"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:48.655" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:48.655" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:48.651" endtime="20210730 15:37:48.655"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:48.656" endtime="20210730 15:37:48.656"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:48.656" endtime="20210730 15:37:48.656"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:48.651" endtime="20210730 15:37:48.656"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:48.650" endtime="20210730 15:37:48.656"/>
</for>
<status status="FAIL" starttime="20210730 15:37:48.649" endtime="20210730 15:37:48.656"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:48.649" endtime="20210730 15:37:48.657"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:48.630" endtime="20210730 15:37:48.657"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:48.670" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:48.682" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:48.682" level="INFO">${pids} = 10299
10306
10311</msg>
<status status="PASS" starttime="20210730 15:37:48.658" endtime="20210730 15:37:48.682"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:48.683" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:48.682" endtime="20210730 15:37:48.683"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:48.684" level="INFO">${pids} = ['10299', '10306', '10311']</msg>
<status status="PASS" starttime="20210730 15:37:48.683" endtime="20210730 15:37:48.684"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10299</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:48.690" level="INFO">Running command 'kill 10299 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:48.684" endtime="20210730 15:37:48.691"/>
</kw>
<status status="PASS" starttime="20210730 15:37:48.684" endtime="20210730 15:37:48.691"/>
</iter>
<iter>
<var name="${pid}">10306</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:48.695" level="INFO">Running command 'kill 10306 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:48.691" endtime="20210730 15:37:48.698"/>
</kw>
<status status="PASS" starttime="20210730 15:37:48.691" endtime="20210730 15:37:48.698"/>
</iter>
<iter>
<var name="${pid}">10311</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:48.701" level="INFO">Running command 'kill 10311 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:48.698" endtime="20210730 15:37:48.702"/>
</kw>
<status status="PASS" starttime="20210730 15:37:48.698" endtime="20210730 15:37:48.702"/>
</iter>
<status status="PASS" starttime="20210730 15:37:48.684" endtime="20210730 15:37:48.702"/>
</for>
<status status="PASS" starttime="20210730 15:37:48.683" endtime="20210730 15:37:48.702"/>
</branch>
<status status="PASS" starttime="20210730 15:37:48.683" endtime="20210730 15:37:48.702"/>
</if>
<status status="PASS" starttime="20210730 15:37:48.657" endtime="20210730 15:37:48.702"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": '012!.Aa'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:37:47.064" endtime="20210730 15:37:48.703">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t97" name="With Each Valid Token, Updating Password Of Each System User With 012!.Aab Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:48.717" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:48.729" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:48.729" level="INFO">${pids} = 10340</msg>
<status status="PASS" starttime="20210730 15:37:48.704" endtime="20210730 15:37:48.729"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:48.730" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:48.730" endtime="20210730 15:37:48.730"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:48.731" level="INFO">${pids} = ['10340']</msg>
<status status="PASS" starttime="20210730 15:37:48.731" endtime="20210730 15:37:48.731"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10340</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:48.735" level="INFO">Running command 'kill 10340 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:48.731" endtime="20210730 15:37:48.735"/>
</kw>
<status status="PASS" starttime="20210730 15:37:48.731" endtime="20210730 15:37:48.735"/>
</iter>
<status status="PASS" starttime="20210730 15:37:48.731" endtime="20210730 15:37:48.735"/>
</for>
<status status="PASS" starttime="20210730 15:37:48.731" endtime="20210730 15:37:48.735"/>
</branch>
<status status="PASS" starttime="20210730 15:37:48.730" endtime="20210730 15:37:48.735"/>
</if>
<status status="PASS" starttime="20210730 15:37:48.704" endtime="20210730 15:37:48.735"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:48.737" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:48.736" endtime="20210730 15:37:48.737"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:48.737" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:48.737" endtime="20210730 15:37:48.737"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:48.738" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:48.738" endtime="20210730 15:37:48.738"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:48.738" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:48.738" endtime="20210730 15:37:48.738"/>
</kw>
<msg timestamp="20210730 15:37:48.739" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:48.737" endtime="20210730 15:37:48.739"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:48.756" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:48.739" endtime="20210730 15:37:48.758"/>
</kw>
<status status="PASS" starttime="20210730 15:37:48.736" endtime="20210730 15:37:48.759"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:37:48.761" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:37:48.760" endtime="20210730 15:37:48.765"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:37:50.266" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:37:48.766" endtime="20210730 15:37:50.267"/>
</kw>
<status status="PASS" starttime="20210730 15:37:48.759" endtime="20210730 15:37:50.267"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:50.268" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:50.268" endtime="20210730 15:37:50.268"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:50.269" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:50.268" endtime="20210730 15:37:50.269"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:50.269" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:50.269" endtime="20210730 15:37:50.269"/>
</kw>
<msg timestamp="20210730 15:37:50.269" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:50.268" endtime="20210730 15:37:50.269"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:37:50.270" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:37:50.269" endtime="20210730 15:37:50.270"/>
</kw>
<status status="PASS" starttime="20210730 15:37:50.267" endtime="20210730 15:37:50.270"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:37:50.271" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:37:50.271" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:37:50.271" endtime="20210730 15:37:50.271"/>
</kw>
<status status="PASS" starttime="20210730 15:37:50.270" endtime="20210730 15:37:50.271"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:37:50.272" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:37:50.272" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:37:50.271" endtime="20210730 15:37:50.272"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:37:50.272" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:37:50.272" endtime="20210730 15:37:50.272"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:50.273" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:50.272" endtime="20210730 15:37:50.273"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:50.273" endtime="20210730 15:37:50.274"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:50.274" endtime="20210730 15:37:50.274"/>
</kw>
<status status="PASS" starttime="20210730 15:37:50.272" endtime="20210730 15:37:50.274"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:50.275" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:50.275" endtime="20210730 15:37:50.275"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:50.275" endtime="20210730 15:37:50.276"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:50.276" endtime="20210730 15:37:50.277"/>
</kw>
<status status="PASS" starttime="20210730 15:37:50.274" endtime="20210730 15:37:50.277"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:50.278" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:50.277" endtime="20210730 15:37:50.278"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:50.278" endtime="20210730 15:37:50.279"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:50.279" endtime="20210730 15:37:50.279"/>
</kw>
<status status="PASS" starttime="20210730 15:37:50.277" endtime="20210730 15:37:50.279"/>
</iter>
<status status="PASS" starttime="20210730 15:37:50.272" endtime="20210730 15:37:50.279"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:37:50.280" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:37:50.279" endtime="20210730 15:37:50.280"/>
</kw>
<status status="PASS" starttime="20210730 15:37:50.271" endtime="20210730 15:37:50.280"/>
</kw>
<status status="PASS" starttime="20210730 15:37:48.704" endtime="20210730 15:37:50.280"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=012!.Aab</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:50.281" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:37:50.281" endtime="20210730 15:37:50.281"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:50.282" level="INFO">${payload} = {'password': '012!.Aab'}</msg>
<status status="PASS" starttime="20210730 15:37:50.281" endtime="20210730 15:37:50.282"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:50.290" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:50.291" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:50.282" endtime="20210730 15:37:50.291"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:50.291" endtime="20210730 15:37:50.291"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:50.291" endtime="20210730 15:37:50.291"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:50.282" endtime="20210730 15:37:50.291"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:50.282" endtime="20210730 15:37:50.291"/>
</for>
<status status="FAIL" starttime="20210730 15:37:50.280" endtime="20210730 15:37:50.291"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:50.280" endtime="20210730 15:37:50.291"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=012!.Aab</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:50.292" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:37:50.292" endtime="20210730 15:37:50.292"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:50.293" level="INFO">${payload} = {'password': '012!.Aab'}</msg>
<status status="PASS" starttime="20210730 15:37:50.292" endtime="20210730 15:37:50.293"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:50.297" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:50.298" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:50.293" endtime="20210730 15:37:50.298"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:50.298" endtime="20210730 15:37:50.298"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:50.298" endtime="20210730 15:37:50.298"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:50.293" endtime="20210730 15:37:50.298"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:50.293" endtime="20210730 15:37:50.298"/>
</for>
<status status="FAIL" starttime="20210730 15:37:50.291" endtime="20210730 15:37:50.298"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:50.291" endtime="20210730 15:37:50.298"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=012!.Aab</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:50.299" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:37:50.299" endtime="20210730 15:37:50.299"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:50.300" level="INFO">${payload} = {'password': '012!.Aab'}</msg>
<status status="PASS" starttime="20210730 15:37:50.300" endtime="20210730 15:37:50.300"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:50.304" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:50.304" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:50.300" endtime="20210730 15:37:50.304"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:50.304" endtime="20210730 15:37:50.304"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:50.304" endtime="20210730 15:37:50.304"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:50.300" endtime="20210730 15:37:50.304"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:50.300" endtime="20210730 15:37:50.304"/>
</for>
<status status="FAIL" starttime="20210730 15:37:50.298" endtime="20210730 15:37:50.305"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:50.298" endtime="20210730 15:37:50.305"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:50.280" endtime="20210730 15:37:50.305"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:50.314" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:50.327" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:50.327" level="INFO">${pids} = 10363
10370
10374</msg>
<status status="PASS" starttime="20210730 15:37:50.306" endtime="20210730 15:37:50.327"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:50.328" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:50.328" endtime="20210730 15:37:50.328"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:50.329" level="INFO">${pids} = ['10363', '10370', '10374']</msg>
<status status="PASS" starttime="20210730 15:37:50.329" endtime="20210730 15:37:50.329"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10363</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:50.333" level="INFO">Running command 'kill 10363 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:50.329" endtime="20210730 15:37:50.333"/>
</kw>
<status status="PASS" starttime="20210730 15:37:50.329" endtime="20210730 15:37:50.333"/>
</iter>
<iter>
<var name="${pid}">10370</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:50.337" level="INFO">Running command 'kill 10370 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:50.334" endtime="20210730 15:37:50.337"/>
</kw>
<status status="PASS" starttime="20210730 15:37:50.333" endtime="20210730 15:37:50.337"/>
</iter>
<iter>
<var name="${pid}">10374</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:50.341" level="INFO">Running command 'kill 10374 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:50.338" endtime="20210730 15:37:50.341"/>
</kw>
<status status="PASS" starttime="20210730 15:37:50.337" endtime="20210730 15:37:50.341"/>
</iter>
<status status="PASS" starttime="20210730 15:37:50.329" endtime="20210730 15:37:50.341"/>
</for>
<status status="PASS" starttime="20210730 15:37:50.328" endtime="20210730 15:37:50.342"/>
</branch>
<status status="PASS" starttime="20210730 15:37:50.328" endtime="20210730 15:37:50.342"/>
</if>
<status status="PASS" starttime="20210730 15:37:50.305" endtime="20210730 15:37:50.342"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": '012!.Aab'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:37:48.703" endtime="20210730 15:37:50.342">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t98" name="With Each Valid Token, Updating Password Of Each System User With 012!.Aab012!.Aab012!.A Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:50.349" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:50.361" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:50.361" level="INFO">${pids} = 10403</msg>
<status status="PASS" starttime="20210730 15:37:50.346" endtime="20210730 15:37:50.361"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:50.362" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:50.362" endtime="20210730 15:37:50.362"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:50.363" level="INFO">${pids} = ['10403']</msg>
<status status="PASS" starttime="20210730 15:37:50.362" endtime="20210730 15:37:50.363"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10403</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:50.367" level="INFO">Running command 'kill 10403 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:50.363" endtime="20210730 15:37:50.367"/>
</kw>
<status status="PASS" starttime="20210730 15:37:50.363" endtime="20210730 15:37:50.367"/>
</iter>
<status status="PASS" starttime="20210730 15:37:50.363" endtime="20210730 15:37:50.367"/>
</for>
<status status="PASS" starttime="20210730 15:37:50.362" endtime="20210730 15:37:50.367"/>
</branch>
<status status="PASS" starttime="20210730 15:37:50.362" endtime="20210730 15:37:50.367"/>
</if>
<status status="PASS" starttime="20210730 15:37:50.345" endtime="20210730 15:37:50.368"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:50.369" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:50.368" endtime="20210730 15:37:50.369"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:50.369" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:50.369" endtime="20210730 15:37:50.369"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:50.370" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:50.369" endtime="20210730 15:37:50.370"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:50.370" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:50.370" endtime="20210730 15:37:50.370"/>
</kw>
<msg timestamp="20210730 15:37:50.370" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:50.369" endtime="20210730 15:37:50.370"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:50.376" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:50.370" endtime="20210730 15:37:50.378"/>
</kw>
<status status="PASS" starttime="20210730 15:37:50.368" endtime="20210730 15:37:50.378"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:37:50.380" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:37:50.379" endtime="20210730 15:37:50.384"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:37:51.893" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:37:50.389" endtime="20210730 15:37:51.893"/>
</kw>
<status status="PASS" starttime="20210730 15:37:50.379" endtime="20210730 15:37:51.894"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:51.895" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:51.895" endtime="20210730 15:37:51.895"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:51.896" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:51.895" endtime="20210730 15:37:51.896"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:51.896" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:51.896" endtime="20210730 15:37:51.896"/>
</kw>
<msg timestamp="20210730 15:37:51.897" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:51.894" endtime="20210730 15:37:51.897"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:37:51.897" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:37:51.897" endtime="20210730 15:37:51.898"/>
</kw>
<status status="PASS" starttime="20210730 15:37:51.894" endtime="20210730 15:37:51.898"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:37:51.898" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:37:51.898" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:37:51.898" endtime="20210730 15:37:51.898"/>
</kw>
<status status="PASS" starttime="20210730 15:37:51.898" endtime="20210730 15:37:51.899"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:37:51.899" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:37:51.900" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:37:51.899" endtime="20210730 15:37:51.900"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:37:51.900" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:37:51.900" endtime="20210730 15:37:51.900"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:51.900" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:51.900" endtime="20210730 15:37:51.900"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:51.901" endtime="20210730 15:37:51.901"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:51.901" endtime="20210730 15:37:51.901"/>
</kw>
<status status="PASS" starttime="20210730 15:37:51.900" endtime="20210730 15:37:51.902"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:51.902" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:51.902" endtime="20210730 15:37:51.902"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:51.902" endtime="20210730 15:37:51.903"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:51.903" endtime="20210730 15:37:51.903"/>
</kw>
<status status="PASS" starttime="20210730 15:37:51.902" endtime="20210730 15:37:51.903"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:51.903" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:51.903" endtime="20210730 15:37:51.903"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:51.904" endtime="20210730 15:37:51.904"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:51.904" endtime="20210730 15:37:51.905"/>
</kw>
<status status="PASS" starttime="20210730 15:37:51.903" endtime="20210730 15:37:51.905"/>
</iter>
<status status="PASS" starttime="20210730 15:37:51.900" endtime="20210730 15:37:51.905"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:37:51.905" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:37:51.905" endtime="20210730 15:37:51.905"/>
</kw>
<status status="PASS" starttime="20210730 15:37:51.899" endtime="20210730 15:37:51.905"/>
</kw>
<status status="PASS" starttime="20210730 15:37:50.344" endtime="20210730 15:37:51.905"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=012!.Aab012!.Aab012!.A</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:51.907" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:37:51.906" endtime="20210730 15:37:51.907"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:51.907" level="INFO">${payload} = {'password': '012!.Aab012!.Aab012!.A'}</msg>
<status status="PASS" starttime="20210730 15:37:51.907" endtime="20210730 15:37:51.907"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:51.918" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:51.918" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:51.908" endtime="20210730 15:37:51.918"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:51.918" endtime="20210730 15:37:51.918"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:51.918" endtime="20210730 15:37:51.918"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:51.907" endtime="20210730 15:37:51.919"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:51.907" endtime="20210730 15:37:51.919"/>
</for>
<status status="FAIL" starttime="20210730 15:37:51.906" endtime="20210730 15:37:51.919"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:51.906" endtime="20210730 15:37:51.919"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=012!.Aab012!.Aab012!.A</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:51.920" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 15:37:51.919" endtime="20210730 15:37:51.920"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:51.920" level="INFO">${payload} = {'password': '012!.Aab012!.Aab012!.A'}</msg>
<status status="PASS" starttime="20210730 15:37:51.920" endtime="20210730 15:37:51.920"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:51.925" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:51.925" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:51.921" endtime="20210730 15:37:51.925"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:51.925" endtime="20210730 15:37:51.925"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:51.925" endtime="20210730 15:37:51.925"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:51.921" endtime="20210730 15:37:51.925"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:51.920" endtime="20210730 15:37:51.925"/>
</for>
<status status="FAIL" starttime="20210730 15:37:51.919" endtime="20210730 15:37:51.925"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:51.919" endtime="20210730 15:37:51.925"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=012!.Aab012!.Aab012!.A</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:51.927" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 15:37:51.926" endtime="20210730 15:37:51.927"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:51.927" level="INFO">${payload} = {'password': '012!.Aab012!.Aab012!.A'}</msg>
<status status="PASS" starttime="20210730 15:37:51.927" endtime="20210730 15:37:51.927"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:51.931" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:51.932" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:51.927" endtime="20210730 15:37:51.932"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 15:37:51.932" endtime="20210730 15:37:51.932"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 15:37:51.932" endtime="20210730 15:37:51.932"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:51.927" endtime="20210730 15:37:51.932"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:51.927" endtime="20210730 15:37:51.932"/>
</for>
<status status="FAIL" starttime="20210730 15:37:51.926" endtime="20210730 15:37:51.932"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:51.926" endtime="20210730 15:37:51.932"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:51.906" endtime="20210730 15:37:51.932"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:51.945" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:51.956" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:51.956" level="INFO">${pids} = 10426
10433
10437</msg>
<status status="PASS" starttime="20210730 15:37:51.934" endtime="20210730 15:37:51.956"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:51.958" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:51.957" endtime="20210730 15:37:51.958"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:51.959" level="INFO">${pids} = ['10426', '10433', '10437']</msg>
<status status="PASS" starttime="20210730 15:37:51.958" endtime="20210730 15:37:51.959"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10426</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:51.967" level="INFO">Running command 'kill 10426 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:51.960" endtime="20210730 15:37:51.967"/>
</kw>
<status status="PASS" starttime="20210730 15:37:51.959" endtime="20210730 15:37:51.968"/>
</iter>
<iter>
<var name="${pid}">10433</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:51.971" level="INFO">Running command 'kill 10433 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:51.968" endtime="20210730 15:37:51.971"/>
</kw>
<status status="PASS" starttime="20210730 15:37:51.968" endtime="20210730 15:37:51.972"/>
</iter>
<iter>
<var name="${pid}">10437</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:51.975" level="INFO">Running command 'kill 10437 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:51.972" endtime="20210730 15:37:51.975"/>
</kw>
<status status="PASS" starttime="20210730 15:37:51.972" endtime="20210730 15:37:51.975"/>
</iter>
<status status="PASS" starttime="20210730 15:37:51.959" endtime="20210730 15:37:51.975"/>
</for>
<status status="PASS" starttime="20210730 15:37:51.958" endtime="20210730 15:37:51.976"/>
</branch>
<status status="PASS" starttime="20210730 15:37:51.958" endtime="20210730 15:37:51.976"/>
</if>
<status status="PASS" starttime="20210730 15:37:51.933" endtime="20210730 15:37:51.976"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": '012!.Aab012!.Aab012!.A'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:37:50.343" endtime="20210730 15:37:51.976">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t99" name="With Each Valid Token, Updating First Name Of Each System User With '' Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:51.983" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:51.996" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:51.996" level="INFO">${pids} = 10466</msg>
<status status="PASS" starttime="20210730 15:37:51.979" endtime="20210730 15:37:51.996"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:51.997" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:51.996" endtime="20210730 15:37:51.997"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:51.998" level="INFO">${pids} = ['10466']</msg>
<status status="PASS" starttime="20210730 15:37:51.998" endtime="20210730 15:37:51.998"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10466</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:52.004" level="INFO">Running command 'kill 10466 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:51.999" endtime="20210730 15:37:52.004"/>
</kw>
<status status="PASS" starttime="20210730 15:37:51.998" endtime="20210730 15:37:52.004"/>
</iter>
<status status="PASS" starttime="20210730 15:37:51.998" endtime="20210730 15:37:52.004"/>
</for>
<status status="PASS" starttime="20210730 15:37:51.998" endtime="20210730 15:37:52.004"/>
</branch>
<status status="PASS" starttime="20210730 15:37:51.997" endtime="20210730 15:37:52.004"/>
</if>
<status status="PASS" starttime="20210730 15:37:51.979" endtime="20210730 15:37:52.005"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:52.006" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:52.005" endtime="20210730 15:37:52.006"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:52.007" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:52.006" endtime="20210730 15:37:52.007"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:52.007" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:52.007" endtime="20210730 15:37:52.007"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:52.007" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:52.007" endtime="20210730 15:37:52.007"/>
</kw>
<msg timestamp="20210730 15:37:52.008" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:52.006" endtime="20210730 15:37:52.008"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:52.012" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:52.008" endtime="20210730 15:37:52.014"/>
</kw>
<status status="PASS" starttime="20210730 15:37:52.005" endtime="20210730 15:37:52.014"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:37:52.015" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:37:52.015" endtime="20210730 15:37:52.031"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:37:53.549" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:37:52.031" endtime="20210730 15:37:53.549"/>
</kw>
<status status="PASS" starttime="20210730 15:37:52.014" endtime="20210730 15:37:53.550"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:53.551" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:53.551" endtime="20210730 15:37:53.551"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:53.551" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:53.551" endtime="20210730 15:37:53.551"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:53.552" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:53.551" endtime="20210730 15:37:53.552"/>
</kw>
<msg timestamp="20210730 15:37:53.552" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:53.550" endtime="20210730 15:37:53.552"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:37:53.552" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:37:53.552" endtime="20210730 15:37:53.553"/>
</kw>
<status status="PASS" starttime="20210730 15:37:53.550" endtime="20210730 15:37:53.553"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:37:53.553" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:37:53.553" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:37:53.553" endtime="20210730 15:37:53.554"/>
</kw>
<status status="PASS" starttime="20210730 15:37:53.553" endtime="20210730 15:37:53.554"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:37:53.554" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:37:53.555" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:37:53.554" endtime="20210730 15:37:53.555"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:37:53.555" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:37:53.555" endtime="20210730 15:37:53.555"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:53.556" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:53.555" endtime="20210730 15:37:53.556"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:53.556" endtime="20210730 15:37:53.556"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:53.557" endtime="20210730 15:37:53.557"/>
</kw>
<status status="PASS" starttime="20210730 15:37:53.555" endtime="20210730 15:37:53.557"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:53.557" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:53.557" endtime="20210730 15:37:53.557"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:53.557" endtime="20210730 15:37:53.558"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:53.558" endtime="20210730 15:37:53.558"/>
</kw>
<status status="PASS" starttime="20210730 15:37:53.557" endtime="20210730 15:37:53.558"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:53.559" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:53.558" endtime="20210730 15:37:53.559"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:53.559" endtime="20210730 15:37:53.560"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:53.560" endtime="20210730 15:37:53.560"/>
</kw>
<status status="PASS" starttime="20210730 15:37:53.558" endtime="20210730 15:37:53.560"/>
</iter>
<status status="PASS" starttime="20210730 15:37:53.555" endtime="20210730 15:37:53.560"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:37:53.560" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:37:53.560" endtime="20210730 15:37:53.560"/>
</kw>
<status status="PASS" starttime="20210730 15:37:53.554" endtime="20210730 15:37:53.561"/>
</kw>
<status status="PASS" starttime="20210730 15:37:51.978" endtime="20210730 15:37:53.561"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 15:37:53.564" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:37:53.561" endtime="20210730 15:37:53.564"/>
</kw>
<msg timestamp="20210730 15:37:53.564" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:37:53.561" endtime="20210730 15:37:53.564"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>first_name</arg>
<arg>An empty first name</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 15:37:53.565" endtime="20210730 15:37:53.565"/>
</kw>
<status status="PASS" starttime="20210730 15:37:53.564" endtime="20210730 15:37:53.565"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=firstname</arg>
<arg>field_data=${user_data}[first_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:53.567" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:37:53.566" endtime="20210730 15:37:53.567"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:53.567" level="INFO">${payload} = {'firstname': ''}</msg>
<status status="PASS" starttime="20210730 15:37:53.567" endtime="20210730 15:37:53.567"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:53.578" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:53.578" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:53.568" endtime="20210730 15:37:53.579"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 15:37:53.579" endtime="20210730 15:37:53.579"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${field_data}</arg>
<arg>${system_user}</arg>
<status status="NOT RUN" starttime="20210730 15:37:53.579" endtime="20210730 15:37:53.579"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:53.567" endtime="20210730 15:37:53.579"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:53.567" endtime="20210730 15:37:53.579"/>
</for>
<status status="FAIL" starttime="20210730 15:37:53.566" endtime="20210730 15:37:53.579"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:53.566" endtime="20210730 15:37:53.579"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:53.565" endtime="20210730 15:37:53.579"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:53.583" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:53.594" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:53.594" level="INFO">${pids} = 10489
10496
10499</msg>
<status status="PASS" starttime="20210730 15:37:53.580" endtime="20210730 15:37:53.594"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:53.595" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:53.594" endtime="20210730 15:37:53.595"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:53.596" level="INFO">${pids} = ['10489', '10496', '10499']</msg>
<status status="PASS" starttime="20210730 15:37:53.595" endtime="20210730 15:37:53.596"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10489</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:53.601" level="INFO">Running command 'kill 10489 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:53.596" endtime="20210730 15:37:53.602"/>
</kw>
<status status="PASS" starttime="20210730 15:37:53.596" endtime="20210730 15:37:53.602"/>
</iter>
<iter>
<var name="${pid}">10496</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:53.606" level="INFO">Running command 'kill 10496 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:53.603" endtime="20210730 15:37:53.607"/>
</kw>
<status status="PASS" starttime="20210730 15:37:53.603" endtime="20210730 15:37:53.607"/>
</iter>
<iter>
<var name="${pid}">10499</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:53.611" level="INFO">Running command 'kill 10499 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:53.607" endtime="20210730 15:37:53.612"/>
</kw>
<status status="PASS" starttime="20210730 15:37:53.607" endtime="20210730 15:37:53.612"/>
</iter>
<status status="PASS" starttime="20210730 15:37:53.596" endtime="20210730 15:37:53.612"/>
</for>
<status status="PASS" starttime="20210730 15:37:53.595" endtime="20210730 15:37:53.612"/>
</branch>
<status status="PASS" starttime="20210730 15:37:53.595" endtime="20210730 15:37:53.612"/>
</if>
<status status="PASS" starttime="20210730 15:37:53.580" endtime="20210730 15:37:53.612"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
firstname as such:
{
"firstname": ''
}
Then, each request should fail with the following response body:
{
"message": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:37:51.977" endtime="20210730 15:37:53.613">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t100" name="With Each Valid Token, Updating First Name Of Each System User With Hakan Results In Success">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:53.618" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:53.629" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:53.630" level="INFO">${pids} = 10528</msg>
<status status="PASS" starttime="20210730 15:37:53.615" endtime="20210730 15:37:53.630"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:53.631" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:53.630" endtime="20210730 15:37:53.631"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:53.631" level="INFO">${pids} = ['10528']</msg>
<status status="PASS" starttime="20210730 15:37:53.631" endtime="20210730 15:37:53.631"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10528</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:53.636" level="INFO">Running command 'kill 10528 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:53.632" endtime="20210730 15:37:53.636"/>
</kw>
<status status="PASS" starttime="20210730 15:37:53.632" endtime="20210730 15:37:53.636"/>
</iter>
<status status="PASS" starttime="20210730 15:37:53.631" endtime="20210730 15:37:53.636"/>
</for>
<status status="PASS" starttime="20210730 15:37:53.631" endtime="20210730 15:37:53.636"/>
</branch>
<status status="PASS" starttime="20210730 15:37:53.631" endtime="20210730 15:37:53.636"/>
</if>
<status status="PASS" starttime="20210730 15:37:53.614" endtime="20210730 15:37:53.637"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:53.638" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:53.637" endtime="20210730 15:37:53.638"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:53.638" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:53.638" endtime="20210730 15:37:53.638"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:53.639" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:53.638" endtime="20210730 15:37:53.639"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:53.639" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:53.639" endtime="20210730 15:37:53.639"/>
</kw>
<msg timestamp="20210730 15:37:53.639" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:53.638" endtime="20210730 15:37:53.639"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:53.654" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:53.639" endtime="20210730 15:37:53.656"/>
</kw>
<status status="PASS" starttime="20210730 15:37:53.637" endtime="20210730 15:37:53.656"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:37:53.658" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:37:53.657" endtime="20210730 15:37:53.663"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:37:55.164" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:37:53.663" endtime="20210730 15:37:55.164"/>
</kw>
<status status="PASS" starttime="20210730 15:37:53.657" endtime="20210730 15:37:55.165"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:55.166" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:55.166" endtime="20210730 15:37:55.166"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:55.166" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:55.166" endtime="20210730 15:37:55.166"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:55.167" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:55.167" endtime="20210730 15:37:55.167"/>
</kw>
<msg timestamp="20210730 15:37:55.167" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:55.165" endtime="20210730 15:37:55.167"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:37:55.168" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:37:55.167" endtime="20210730 15:37:55.168"/>
</kw>
<status status="PASS" starttime="20210730 15:37:55.165" endtime="20210730 15:37:55.168"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:37:55.169" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:37:55.169" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:37:55.168" endtime="20210730 15:37:55.169"/>
</kw>
<status status="PASS" starttime="20210730 15:37:55.168" endtime="20210730 15:37:55.169"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:37:55.170" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:37:55.170" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:37:55.169" endtime="20210730 15:37:55.170"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:37:55.170" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:37:55.170" endtime="20210730 15:37:55.170"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:55.171" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:55.170" endtime="20210730 15:37:55.171"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:55.171" endtime="20210730 15:37:55.172"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:55.172" endtime="20210730 15:37:55.172"/>
</kw>
<status status="PASS" starttime="20210730 15:37:55.170" endtime="20210730 15:37:55.172"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:55.172" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:55.172" endtime="20210730 15:37:55.172"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:55.172" endtime="20210730 15:37:55.173"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:55.173" endtime="20210730 15:37:55.173"/>
</kw>
<status status="PASS" starttime="20210730 15:37:55.172" endtime="20210730 15:37:55.173"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:55.174" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:55.174" endtime="20210730 15:37:55.174"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:55.174" endtime="20210730 15:37:55.175"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:55.175" endtime="20210730 15:37:55.175"/>
</kw>
<status status="PASS" starttime="20210730 15:37:55.174" endtime="20210730 15:37:55.175"/>
</iter>
<status status="PASS" starttime="20210730 15:37:55.170" endtime="20210730 15:37:55.175"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:37:55.176" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:37:55.175" endtime="20210730 15:37:55.176"/>
</kw>
<status status="PASS" starttime="20210730 15:37:55.169" endtime="20210730 15:37:55.176"/>
</kw>
<status status="PASS" starttime="20210730 15:37:53.614" endtime="20210730 15:37:55.176"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 15:37:55.181" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:37:55.177" endtime="20210730 15:37:55.181"/>
</kw>
<msg timestamp="20210730 15:37:55.181" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:37:55.177" endtime="20210730 15:37:55.181"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>first_name</arg>
<arg>A first name containing more than 2 characters</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 15:37:55.182" endtime="20210730 15:37:55.182"/>
</kw>
<status status="PASS" starttime="20210730 15:37:55.181" endtime="20210730 15:37:55.182"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=firstname</arg>
<arg>field_data=${user_data}[first_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:55.184" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:37:55.183" endtime="20210730 15:37:55.184"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:55.184" level="INFO">${payload} = {'firstname': 'Hakan'}</msg>
<status status="PASS" starttime="20210730 15:37:55.184" endtime="20210730 15:37:55.184"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:55.193" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:55.194" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:55.185" endtime="20210730 15:37:55.194"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 15:37:55.194" endtime="20210730 15:37:55.194"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${field_data}</arg>
<arg>${system_user}</arg>
<status status="NOT RUN" starttime="20210730 15:37:55.194" endtime="20210730 15:37:55.194"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:55.184" endtime="20210730 15:37:55.194"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:55.184" endtime="20210730 15:37:55.194"/>
</for>
<status status="FAIL" starttime="20210730 15:37:55.183" endtime="20210730 15:37:55.194"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:55.183" endtime="20210730 15:37:55.194"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:55.182" endtime="20210730 15:37:55.194"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:55.199" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:55.218" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:55.219" level="INFO">${pids} = 10551
10558
10561</msg>
<status status="PASS" starttime="20210730 15:37:55.195" endtime="20210730 15:37:55.219"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:55.219" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:55.219" endtime="20210730 15:37:55.219"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:55.220" level="INFO">${pids} = ['10551', '10558', '10561']</msg>
<status status="PASS" starttime="20210730 15:37:55.220" endtime="20210730 15:37:55.220"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10551</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:55.224" level="INFO">Running command 'kill 10551 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:55.220" endtime="20210730 15:37:55.224"/>
</kw>
<status status="PASS" starttime="20210730 15:37:55.220" endtime="20210730 15:37:55.224"/>
</iter>
<iter>
<var name="${pid}">10558</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:55.228" level="INFO">Running command 'kill 10558 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:55.224" endtime="20210730 15:37:55.229"/>
</kw>
<status status="PASS" starttime="20210730 15:37:55.224" endtime="20210730 15:37:55.229"/>
</iter>
<iter>
<var name="${pid}">10561</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:55.233" level="INFO">Running command 'kill 10561 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:55.230" endtime="20210730 15:37:55.233"/>
</kw>
<status status="PASS" starttime="20210730 15:37:55.229" endtime="20210730 15:37:55.233"/>
</iter>
<status status="PASS" starttime="20210730 15:37:55.220" endtime="20210730 15:37:55.233"/>
</for>
<status status="PASS" starttime="20210730 15:37:55.220" endtime="20210730 15:37:55.233"/>
</branch>
<status status="PASS" starttime="20210730 15:37:55.219" endtime="20210730 15:37:55.234"/>
</if>
<status status="PASS" starttime="20210730 15:37:55.195" endtime="20210730 15:37:55.234"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
firstname as such:
{
"firstname": 'Hakan'
}
Then, each request should succeed with the following response body:
{
"message": "Updated",
"status": "SUCCESS"
}
This test not only verifies message and status but also verifies that the &lt;username&gt;'s data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:37:53.613" endtime="20210730 15:37:55.234">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t101" name="With Each Valid Token, Updating First Name Of Each System User With Hakan123!?. Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:55.249" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:55.258" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:55.259" level="INFO">${pids} = 10590</msg>
<status status="PASS" starttime="20210730 15:37:55.238" endtime="20210730 15:37:55.259"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:55.259" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:55.259" endtime="20210730 15:37:55.260"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:55.261" level="INFO">${pids} = ['10590']</msg>
<status status="PASS" starttime="20210730 15:37:55.260" endtime="20210730 15:37:55.261"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10590</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:55.265" level="INFO">Running command 'kill 10590 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:55.261" endtime="20210730 15:37:55.266"/>
</kw>
<status status="PASS" starttime="20210730 15:37:55.261" endtime="20210730 15:37:55.266"/>
</iter>
<status status="PASS" starttime="20210730 15:37:55.261" endtime="20210730 15:37:55.266"/>
</for>
<status status="PASS" starttime="20210730 15:37:55.260" endtime="20210730 15:37:55.266"/>
</branch>
<status status="PASS" starttime="20210730 15:37:55.260" endtime="20210730 15:37:55.266"/>
</if>
<status status="PASS" starttime="20210730 15:37:55.238" endtime="20210730 15:37:55.267"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:55.268" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:55.268" endtime="20210730 15:37:55.268"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:55.269" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:55.269" endtime="20210730 15:37:55.269"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:55.270" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:55.269" endtime="20210730 15:37:55.270"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:55.270" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:55.270" endtime="20210730 15:37:55.270"/>
</kw>
<msg timestamp="20210730 15:37:55.270" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:55.268" endtime="20210730 15:37:55.270"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:55.274" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:55.270" endtime="20210730 15:37:55.276"/>
</kw>
<status status="PASS" starttime="20210730 15:37:55.267" endtime="20210730 15:37:55.276"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:37:55.278" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:37:55.278" endtime="20210730 15:37:55.283"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:37:56.784" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:37:55.283" endtime="20210730 15:37:56.784"/>
</kw>
<status status="PASS" starttime="20210730 15:37:55.277" endtime="20210730 15:37:56.785"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:56.786" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:56.786" endtime="20210730 15:37:56.786"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:56.787" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:56.786" endtime="20210730 15:37:56.787"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:56.787" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:56.787" endtime="20210730 15:37:56.787"/>
</kw>
<msg timestamp="20210730 15:37:56.787" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:56.786" endtime="20210730 15:37:56.787"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:37:56.788" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:37:56.787" endtime="20210730 15:37:56.788"/>
</kw>
<status status="PASS" starttime="20210730 15:37:56.785" endtime="20210730 15:37:56.788"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:37:56.789" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:37:56.789" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:37:56.789" endtime="20210730 15:37:56.789"/>
</kw>
<status status="PASS" starttime="20210730 15:37:56.788" endtime="20210730 15:37:56.789"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:37:56.790" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:37:56.790" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:37:56.789" endtime="20210730 15:37:56.790"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:37:56.790" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:37:56.790" endtime="20210730 15:37:56.790"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:56.790" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:56.790" endtime="20210730 15:37:56.791"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:56.791" endtime="20210730 15:37:56.791"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:56.791" endtime="20210730 15:37:56.792"/>
</kw>
<status status="PASS" starttime="20210730 15:37:56.790" endtime="20210730 15:37:56.792"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:56.792" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:56.792" endtime="20210730 15:37:56.792"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:56.792" endtime="20210730 15:37:56.793"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:56.793" endtime="20210730 15:37:56.793"/>
</kw>
<status status="PASS" starttime="20210730 15:37:56.792" endtime="20210730 15:37:56.793"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:56.794" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:56.793" endtime="20210730 15:37:56.794"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:56.794" endtime="20210730 15:37:56.794"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:56.795" endtime="20210730 15:37:56.795"/>
</kw>
<status status="PASS" starttime="20210730 15:37:56.793" endtime="20210730 15:37:56.795"/>
</iter>
<status status="PASS" starttime="20210730 15:37:56.790" endtime="20210730 15:37:56.795"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:37:56.795" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:37:56.795" endtime="20210730 15:37:56.796"/>
</kw>
<status status="PASS" starttime="20210730 15:37:56.789" endtime="20210730 15:37:56.796"/>
</kw>
<status status="PASS" starttime="20210730 15:37:55.237" endtime="20210730 15:37:56.796"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 15:37:56.799" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:37:56.796" endtime="20210730 15:37:56.799"/>
</kw>
<msg timestamp="20210730 15:37:56.799" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:37:56.796" endtime="20210730 15:37:56.799"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>first_name</arg>
<arg>A name containing numbers and non-alphanumeric characters</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 15:37:56.800" endtime="20210730 15:37:56.800"/>
</kw>
<status status="PASS" starttime="20210730 15:37:56.799" endtime="20210730 15:37:56.800"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=firstname</arg>
<arg>field_data=${user_data}[first_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:56.802" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:37:56.801" endtime="20210730 15:37:56.802"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:56.802" level="INFO">${payload} = {'firstname': 'Hakan123!?.'}</msg>
<status status="PASS" starttime="20210730 15:37:56.802" endtime="20210730 15:37:56.802"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:56.816" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:56.816" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:56.803" endtime="20210730 15:37:56.816"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 15:37:56.817" endtime="20210730 15:37:56.817"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${field_data}</arg>
<arg>${system_user}</arg>
<status status="NOT RUN" starttime="20210730 15:37:56.817" endtime="20210730 15:37:56.817"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:56.802" endtime="20210730 15:37:56.817"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:56.802" endtime="20210730 15:37:56.817"/>
</for>
<status status="FAIL" starttime="20210730 15:37:56.801" endtime="20210730 15:37:56.817"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:56.801" endtime="20210730 15:37:56.817"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:56.800" endtime="20210730 15:37:56.817"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:56.821" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:56.833" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:56.833" level="INFO">${pids} = 10642
10649
10652</msg>
<status status="PASS" starttime="20210730 15:37:56.818" endtime="20210730 15:37:56.833"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:56.834" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:56.834" endtime="20210730 15:37:56.834"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:56.835" level="INFO">${pids} = ['10642', '10649', '10652']</msg>
<status status="PASS" starttime="20210730 15:37:56.835" endtime="20210730 15:37:56.835"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10642</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:56.839" level="INFO">Running command 'kill 10642 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:56.835" endtime="20210730 15:37:56.839"/>
</kw>
<status status="PASS" starttime="20210730 15:37:56.835" endtime="20210730 15:37:56.839"/>
</iter>
<iter>
<var name="${pid}">10649</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:56.852" level="INFO">Running command 'kill 10649 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:56.840" endtime="20210730 15:37:56.853"/>
</kw>
<status status="PASS" starttime="20210730 15:37:56.840" endtime="20210730 15:37:56.853"/>
</iter>
<iter>
<var name="${pid}">10652</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:56.859" level="INFO">Running command 'kill 10652 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:56.853" endtime="20210730 15:37:56.859"/>
</kw>
<status status="PASS" starttime="20210730 15:37:56.853" endtime="20210730 15:37:56.859"/>
</iter>
<status status="PASS" starttime="20210730 15:37:56.835" endtime="20210730 15:37:56.860"/>
</for>
<status status="PASS" starttime="20210730 15:37:56.834" endtime="20210730 15:37:56.860"/>
</branch>
<status status="PASS" starttime="20210730 15:37:56.834" endtime="20210730 15:37:56.860"/>
</if>
<status status="PASS" starttime="20210730 15:37:56.818" endtime="20210730 15:37:56.860"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
firstname as such:
{
"firstname": 'Hakan123!?.'
}
Then, each request should fail with the following response body:
{
"message": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:37:55.236" endtime="20210730 15:37:56.860">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t102" name="With Each Valid Token, Updating First Name Of Each System User With Ha Results In Success">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:56.866" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:56.880" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:56.880" level="INFO">${pids} = 10681</msg>
<status status="PASS" starttime="20210730 15:37:56.862" endtime="20210730 15:37:56.880"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:56.881" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:56.880" endtime="20210730 15:37:56.881"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:56.882" level="INFO">${pids} = ['10681']</msg>
<status status="PASS" starttime="20210730 15:37:56.881" endtime="20210730 15:37:56.882"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10681</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:56.886" level="INFO">Running command 'kill 10681 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:56.882" endtime="20210730 15:37:56.887"/>
</kw>
<status status="PASS" starttime="20210730 15:37:56.882" endtime="20210730 15:37:56.887"/>
</iter>
<status status="PASS" starttime="20210730 15:37:56.882" endtime="20210730 15:37:56.887"/>
</for>
<status status="PASS" starttime="20210730 15:37:56.881" endtime="20210730 15:37:56.887"/>
</branch>
<status status="PASS" starttime="20210730 15:37:56.881" endtime="20210730 15:37:56.887"/>
</if>
<status status="PASS" starttime="20210730 15:37:56.862" endtime="20210730 15:37:56.888"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:56.889" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:56.888" endtime="20210730 15:37:56.889"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:56.889" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:56.889" endtime="20210730 15:37:56.889"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:56.890" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:56.889" endtime="20210730 15:37:56.890"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:56.890" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:56.890" endtime="20210730 15:37:56.890"/>
</kw>
<msg timestamp="20210730 15:37:56.890" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:56.889" endtime="20210730 15:37:56.890"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:56.896" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:56.891" endtime="20210730 15:37:56.898"/>
</kw>
<status status="PASS" starttime="20210730 15:37:56.888" endtime="20210730 15:37:56.898"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:37:56.899" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:37:56.899" endtime="20210730 15:37:56.903"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:37:58.406" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:37:56.904" endtime="20210730 15:37:58.406"/>
</kw>
<status status="PASS" starttime="20210730 15:37:56.898" endtime="20210730 15:37:58.406"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:58.407" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:58.407" endtime="20210730 15:37:58.407"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:58.408" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:58.407" endtime="20210730 15:37:58.408"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:58.408" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:58.408" endtime="20210730 15:37:58.408"/>
</kw>
<msg timestamp="20210730 15:37:58.409" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:58.407" endtime="20210730 15:37:58.409"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:37:58.409" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:37:58.409" endtime="20210730 15:37:58.410"/>
</kw>
<status status="PASS" starttime="20210730 15:37:58.406" endtime="20210730 15:37:58.410"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:37:58.411" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:37:58.411" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:37:58.411" endtime="20210730 15:37:58.412"/>
</kw>
<status status="PASS" starttime="20210730 15:37:58.411" endtime="20210730 15:37:58.412"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:37:58.412" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:37:58.413" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:37:58.412" endtime="20210730 15:37:58.413"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:37:58.413" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:37:58.413" endtime="20210730 15:37:58.413"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:58.414" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:58.413" endtime="20210730 15:37:58.414"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:58.414" endtime="20210730 15:37:58.415"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:58.415" endtime="20210730 15:37:58.415"/>
</kw>
<status status="PASS" starttime="20210730 15:37:58.413" endtime="20210730 15:37:58.415"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:58.415" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:58.415" endtime="20210730 15:37:58.415"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:58.416" endtime="20210730 15:37:58.416"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:58.416" endtime="20210730 15:37:58.417"/>
</kw>
<status status="PASS" starttime="20210730 15:37:58.415" endtime="20210730 15:37:58.417"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:58.417" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:37:58.417" endtime="20210730 15:37:58.417"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:37:58.417" endtime="20210730 15:37:58.418"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:37:58.418" endtime="20210730 15:37:58.418"/>
</kw>
<status status="PASS" starttime="20210730 15:37:58.417" endtime="20210730 15:37:58.418"/>
</iter>
<status status="PASS" starttime="20210730 15:37:58.413" endtime="20210730 15:37:58.418"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:37:58.419" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:37:58.418" endtime="20210730 15:37:58.419"/>
</kw>
<status status="PASS" starttime="20210730 15:37:58.412" endtime="20210730 15:37:58.419"/>
</kw>
<status status="PASS" starttime="20210730 15:37:56.862" endtime="20210730 15:37:58.419"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 15:37:58.422" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:37:58.419" endtime="20210730 15:37:58.422"/>
</kw>
<msg timestamp="20210730 15:37:58.422" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:37:58.419" endtime="20210730 15:37:58.422"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>first_name</arg>
<arg>A minimum 2 characters first name</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 15:37:58.423" endtime="20210730 15:37:58.423"/>
</kw>
<status status="PASS" starttime="20210730 15:37:58.422" endtime="20210730 15:37:58.423"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=firstname</arg>
<arg>field_data=${user_data}[first_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:58.425" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:37:58.424" endtime="20210730 15:37:58.425"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:37:58.426" level="INFO">${payload} = {'firstname': 'Ha'}</msg>
<status status="PASS" starttime="20210730 15:37:58.425" endtime="20210730 15:37:58.426"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:37:58.435" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:37:58.435" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:37:58.426" endtime="20210730 15:37:58.435"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 15:37:58.436" endtime="20210730 15:37:58.436"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${field_data}</arg>
<arg>${system_user}</arg>
<status status="NOT RUN" starttime="20210730 15:37:58.436" endtime="20210730 15:37:58.436"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:58.426" endtime="20210730 15:37:58.436"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:58.426" endtime="20210730 15:37:58.436"/>
</for>
<status status="FAIL" starttime="20210730 15:37:58.424" endtime="20210730 15:37:58.436"/>
</kw>
<status status="FAIL" starttime="20210730 15:37:58.424" endtime="20210730 15:37:58.436"/>
</iter>
<status status="FAIL" starttime="20210730 15:37:58.423" endtime="20210730 15:37:58.436"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:58.440" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:58.457" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:58.457" level="INFO">${pids} = 10704
10711
10714</msg>
<status status="PASS" starttime="20210730 15:37:58.437" endtime="20210730 15:37:58.457"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:58.458" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:58.458" endtime="20210730 15:37:58.458"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:58.459" level="INFO">${pids} = ['10704', '10711', '10714']</msg>
<status status="PASS" starttime="20210730 15:37:58.459" endtime="20210730 15:37:58.459"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10704</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:58.472" level="INFO">Running command 'kill 10704 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:58.460" endtime="20210730 15:37:58.473"/>
</kw>
<status status="PASS" starttime="20210730 15:37:58.459" endtime="20210730 15:37:58.473"/>
</iter>
<iter>
<var name="${pid}">10711</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:58.487" level="INFO">Running command 'kill 10711 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:58.474" endtime="20210730 15:37:58.488"/>
</kw>
<status status="PASS" starttime="20210730 15:37:58.473" endtime="20210730 15:37:58.488"/>
</iter>
<iter>
<var name="${pid}">10714</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:58.499" level="INFO">Running command 'kill 10714 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:58.489" endtime="20210730 15:37:58.500"/>
</kw>
<status status="PASS" starttime="20210730 15:37:58.488" endtime="20210730 15:37:58.500"/>
</iter>
<status status="PASS" starttime="20210730 15:37:58.459" endtime="20210730 15:37:58.500"/>
</for>
<status status="PASS" starttime="20210730 15:37:58.459" endtime="20210730 15:37:58.500"/>
</branch>
<status status="PASS" starttime="20210730 15:37:58.459" endtime="20210730 15:37:58.500"/>
</if>
<status status="PASS" starttime="20210730 15:37:58.437" endtime="20210730 15:37:58.500"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
firstname as such:
{
"firstname": 'Ha'
}
Then, each request should fail with the following response body:
{
"message": "Updated",
"status": "SUCCESS"
}
This test not only verifies message and status but also verifies that the &lt;username&gt;'s data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:37:56.861" endtime="20210730 15:37:58.501">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t103" name="With Each Valid Token, Updating First Name Of Each System User With Ha Xu Results In Success">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:37:58.519" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:37:58.533" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:37:58.533" level="INFO">${pids} = 10743</msg>
<status status="PASS" starttime="20210730 15:37:58.503" endtime="20210730 15:37:58.533"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:58.534" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:37:58.534" endtime="20210730 15:37:58.534"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:37:58.535" level="INFO">${pids} = ['10743']</msg>
<status status="PASS" starttime="20210730 15:37:58.535" endtime="20210730 15:37:58.535"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10743</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:58.547" level="INFO">Running command 'kill 10743 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:58.536" endtime="20210730 15:37:58.548"/>
</kw>
<status status="PASS" starttime="20210730 15:37:58.535" endtime="20210730 15:37:58.548"/>
</iter>
<status status="PASS" starttime="20210730 15:37:58.535" endtime="20210730 15:37:58.548"/>
</for>
<status status="PASS" starttime="20210730 15:37:58.535" endtime="20210730 15:37:58.548"/>
</branch>
<status status="PASS" starttime="20210730 15:37:58.534" endtime="20210730 15:37:58.548"/>
</if>
<status status="PASS" starttime="20210730 15:37:58.503" endtime="20210730 15:37:58.548"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:58.550" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:58.550" endtime="20210730 15:37:58.550"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:58.551" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:37:58.551" endtime="20210730 15:37:58.552"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:37:58.552" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:37:58.552" endtime="20210730 15:37:58.552"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:37:58.552" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:58.552" endtime="20210730 15:37:58.552"/>
</kw>
<msg timestamp="20210730 15:37:58.553" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:37:58.551" endtime="20210730 15:37:58.553"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:37:58.564" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:37:58.553" endtime="20210730 15:37:58.567"/>
</kw>
<status status="PASS" starttime="20210730 15:37:58.549" endtime="20210730 15:37:58.567"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:37:58.569" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:37:58.568" endtime="20210730 15:37:58.573"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:38:00.076" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:37:58.574" endtime="20210730 15:38:00.076"/>
</kw>
<status status="PASS" starttime="20210730 15:37:58.567" endtime="20210730 15:38:00.077"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:00.078" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:00.078" endtime="20210730 15:38:00.078"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:00.078" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:00.078" endtime="20210730 15:38:00.079"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:00.079" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:00.079" endtime="20210730 15:38:00.079"/>
</kw>
<msg timestamp="20210730 15:38:00.079" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:00.077" endtime="20210730 15:38:00.079"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:38:00.080" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:38:00.079" endtime="20210730 15:38:00.080"/>
</kw>
<status status="PASS" starttime="20210730 15:38:00.077" endtime="20210730 15:38:00.080"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:38:00.081" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:38:00.081" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:38:00.081" endtime="20210730 15:38:00.082"/>
</kw>
<status status="PASS" starttime="20210730 15:38:00.081" endtime="20210730 15:38:00.082"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:38:00.083" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:38:00.083" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:38:00.083" endtime="20210730 15:38:00.083"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:38:00.083" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:38:00.083" endtime="20210730 15:38:00.083"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:00.084" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:00.083" endtime="20210730 15:38:00.084"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:00.084" endtime="20210730 15:38:00.085"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:00.085" endtime="20210730 15:38:00.085"/>
</kw>
<status status="PASS" starttime="20210730 15:38:00.083" endtime="20210730 15:38:00.085"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:00.085" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:00.085" endtime="20210730 15:38:00.085"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:00.086" endtime="20210730 15:38:00.086"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:00.086" endtime="20210730 15:38:00.087"/>
</kw>
<status status="PASS" starttime="20210730 15:38:00.085" endtime="20210730 15:38:00.087"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:00.087" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:00.087" endtime="20210730 15:38:00.087"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:00.087" endtime="20210730 15:38:00.088"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:00.088" endtime="20210730 15:38:00.088"/>
</kw>
<status status="PASS" starttime="20210730 15:38:00.087" endtime="20210730 15:38:00.088"/>
</iter>
<status status="PASS" starttime="20210730 15:38:00.083" endtime="20210730 15:38:00.088"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:38:00.089" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:38:00.088" endtime="20210730 15:38:00.089"/>
</kw>
<status status="PASS" starttime="20210730 15:38:00.082" endtime="20210730 15:38:00.089"/>
</kw>
<status status="PASS" starttime="20210730 15:37:58.502" endtime="20210730 15:38:00.089"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 15:38:00.092" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:00.089" endtime="20210730 15:38:00.092"/>
</kw>
<msg timestamp="20210730 15:38:00.092" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:00.089" endtime="20210730 15:38:00.092"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>first_name</arg>
<arg>minimum 2 characters first names for each first name</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 15:38:00.092" endtime="20210730 15:38:00.093"/>
</kw>
<status status="PASS" starttime="20210730 15:38:00.092" endtime="20210730 15:38:00.093"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=firstname</arg>
<arg>field_data=${user_data}[first_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:00.094" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:38:00.094" endtime="20210730 15:38:00.094"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:00.095" level="INFO">${payload} = {'firstname': 'Ha Xu'}</msg>
<status status="PASS" starttime="20210730 15:38:00.094" endtime="20210730 15:38:00.095"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:38:00.104" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:38:00.104" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:38:00.095" endtime="20210730 15:38:00.104"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 15:38:00.105" endtime="20210730 15:38:00.105"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${field_data}</arg>
<arg>${system_user}</arg>
<status status="NOT RUN" starttime="20210730 15:38:00.105" endtime="20210730 15:38:00.105"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:00.095" endtime="20210730 15:38:00.105"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:00.095" endtime="20210730 15:38:00.105"/>
</for>
<status status="FAIL" starttime="20210730 15:38:00.093" endtime="20210730 15:38:00.105"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:00.093" endtime="20210730 15:38:00.105"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:00.093" endtime="20210730 15:38:00.105"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:00.110" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:00.124" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:00.124" level="INFO">${pids} = 10769
10776
10778</msg>
<status status="PASS" starttime="20210730 15:38:00.106" endtime="20210730 15:38:00.125"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:00.125" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:00.125" endtime="20210730 15:38:00.126"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:00.126" level="INFO">${pids} = ['10769', '10776', '10778']</msg>
<status status="PASS" starttime="20210730 15:38:00.126" endtime="20210730 15:38:00.126"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10769</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:00.131" level="INFO">Running command 'kill 10769 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:00.127" endtime="20210730 15:38:00.132"/>
</kw>
<status status="PASS" starttime="20210730 15:38:00.127" endtime="20210730 15:38:00.132"/>
</iter>
<iter>
<var name="${pid}">10776</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:00.135" level="INFO">Running command 'kill 10776 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:00.132" endtime="20210730 15:38:00.136"/>
</kw>
<status status="PASS" starttime="20210730 15:38:00.132" endtime="20210730 15:38:00.136"/>
</iter>
<iter>
<var name="${pid}">10778</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:00.140" level="INFO">Running command 'kill 10778 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:00.137" endtime="20210730 15:38:00.141"/>
</kw>
<status status="PASS" starttime="20210730 15:38:00.136" endtime="20210730 15:38:00.141"/>
</iter>
<status status="PASS" starttime="20210730 15:38:00.126" endtime="20210730 15:38:00.141"/>
</for>
<status status="PASS" starttime="20210730 15:38:00.126" endtime="20210730 15:38:00.141"/>
</branch>
<status status="PASS" starttime="20210730 15:38:00.126" endtime="20210730 15:38:00.141"/>
</if>
<status status="PASS" starttime="20210730 15:38:00.105" endtime="20210730 15:38:00.141"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
firstname as such:
{
"firstname": 'Ha Xu'
}
Then, each request should succeed with the following response body:
{
"message": "Updated",
"status": "SUCCESS"
}
This test not only verifies message and status but also verifies that the &lt;username&gt;'s data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:37:58.501" endtime="20210730 15:38:00.141">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t104" name="With Each Valid Token, Updating First Name Of Each System User With H Xu Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:00.152" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:00.160" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:00.161" level="INFO">${pids} = 10817</msg>
<status status="PASS" starttime="20210730 15:38:00.144" endtime="20210730 15:38:00.161"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:00.162" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:00.161" endtime="20210730 15:38:00.162"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:00.162" level="INFO">${pids} = ['10817']</msg>
<status status="PASS" starttime="20210730 15:38:00.162" endtime="20210730 15:38:00.162"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10817</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:00.166" level="INFO">Running command 'kill 10817 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:00.163" endtime="20210730 15:38:00.167"/>
</kw>
<status status="PASS" starttime="20210730 15:38:00.163" endtime="20210730 15:38:00.168"/>
</iter>
<status status="PASS" starttime="20210730 15:38:00.163" endtime="20210730 15:38:00.168"/>
</for>
<status status="PASS" starttime="20210730 15:38:00.162" endtime="20210730 15:38:00.168"/>
</branch>
<status status="PASS" starttime="20210730 15:38:00.162" endtime="20210730 15:38:00.168"/>
</if>
<status status="PASS" starttime="20210730 15:38:00.143" endtime="20210730 15:38:00.169"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:00.170" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:00.170" endtime="20210730 15:38:00.170"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:00.171" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:00.171" endtime="20210730 15:38:00.171"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:00.171" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:00.171" endtime="20210730 15:38:00.171"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:00.172" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:00.171" endtime="20210730 15:38:00.172"/>
</kw>
<msg timestamp="20210730 15:38:00.172" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:00.170" endtime="20210730 15:38:00.172"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:00.182" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:00.172" endtime="20210730 15:38:00.184"/>
</kw>
<status status="PASS" starttime="20210730 15:38:00.169" endtime="20210730 15:38:00.184"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:38:00.186" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:38:00.185" endtime="20210730 15:38:00.190"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:38:01.692" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:38:00.190" endtime="20210730 15:38:01.692"/>
</kw>
<status status="PASS" starttime="20210730 15:38:00.185" endtime="20210730 15:38:01.692"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:01.694" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:01.694" endtime="20210730 15:38:01.694"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:01.695" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:01.694" endtime="20210730 15:38:01.695"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:01.695" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:01.695" endtime="20210730 15:38:01.695"/>
</kw>
<msg timestamp="20210730 15:38:01.695" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:01.694" endtime="20210730 15:38:01.695"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:38:01.696" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:38:01.696" endtime="20210730 15:38:01.696"/>
</kw>
<status status="PASS" starttime="20210730 15:38:01.693" endtime="20210730 15:38:01.697"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:38:01.697" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:38:01.697" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:38:01.697" endtime="20210730 15:38:01.698"/>
</kw>
<status status="PASS" starttime="20210730 15:38:01.697" endtime="20210730 15:38:01.698"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:38:01.698" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:38:01.698" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:38:01.698" endtime="20210730 15:38:01.698"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:38:01.699" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:38:01.699" endtime="20210730 15:38:01.699"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:01.699" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:01.699" endtime="20210730 15:38:01.699"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:01.699" endtime="20210730 15:38:01.700"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:01.700" endtime="20210730 15:38:01.701"/>
</kw>
<status status="PASS" starttime="20210730 15:38:01.699" endtime="20210730 15:38:01.701"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:01.701" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:01.701" endtime="20210730 15:38:01.701"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:01.701" endtime="20210730 15:38:01.702"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:01.702" endtime="20210730 15:38:01.702"/>
</kw>
<status status="PASS" starttime="20210730 15:38:01.701" endtime="20210730 15:38:01.702"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:01.703" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:01.702" endtime="20210730 15:38:01.703"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:01.703" endtime="20210730 15:38:01.703"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:01.703" endtime="20210730 15:38:01.704"/>
</kw>
<status status="PASS" starttime="20210730 15:38:01.702" endtime="20210730 15:38:01.704"/>
</iter>
<status status="PASS" starttime="20210730 15:38:01.699" endtime="20210730 15:38:01.704"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:38:01.704" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:38:01.704" endtime="20210730 15:38:01.704"/>
</kw>
<status status="PASS" starttime="20210730 15:38:01.698" endtime="20210730 15:38:01.704"/>
</kw>
<status status="PASS" starttime="20210730 15:38:00.143" endtime="20210730 15:38:01.704"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 15:38:01.707" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:01.705" endtime="20210730 15:38:01.707"/>
</kw>
<msg timestamp="20210730 15:38:01.708" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:01.705" endtime="20210730 15:38:01.708"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>first_name</arg>
<arg>The first first name is invalid with only 1 letter, the second first name is valid</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 15:38:01.708" endtime="20210730 15:38:01.709"/>
</kw>
<status status="PASS" starttime="20210730 15:38:01.708" endtime="20210730 15:38:01.709"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=firstname</arg>
<arg>field_data=${user_data}[first_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:01.710" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:38:01.710" endtime="20210730 15:38:01.710"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:01.711" level="INFO">${payload} = {'firstname': 'H Xu'}</msg>
<status status="PASS" starttime="20210730 15:38:01.711" endtime="20210730 15:38:01.711"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:38:01.721" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:38:01.721" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:38:01.712" endtime="20210730 15:38:01.721"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 15:38:01.722" endtime="20210730 15:38:01.722"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${field_data}</arg>
<arg>${system_user}</arg>
<status status="NOT RUN" starttime="20210730 15:38:01.722" endtime="20210730 15:38:01.722"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:01.711" endtime="20210730 15:38:01.722"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:01.711" endtime="20210730 15:38:01.722"/>
</for>
<status status="FAIL" starttime="20210730 15:38:01.709" endtime="20210730 15:38:01.722"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:01.709" endtime="20210730 15:38:01.722"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:01.709" endtime="20210730 15:38:01.722"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:01.726" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:01.738" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:01.738" level="INFO">${pids} = 10840
10847
10849</msg>
<status status="PASS" starttime="20210730 15:38:01.723" endtime="20210730 15:38:01.738"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:01.739" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:01.738" endtime="20210730 15:38:01.739"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:01.739" level="INFO">${pids} = ['10840', '10847', '10849']</msg>
<status status="PASS" starttime="20210730 15:38:01.739" endtime="20210730 15:38:01.739"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10840</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:01.749" level="INFO">Running command 'kill 10840 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:01.740" endtime="20210730 15:38:01.750"/>
</kw>
<status status="PASS" starttime="20210730 15:38:01.740" endtime="20210730 15:38:01.750"/>
</iter>
<iter>
<var name="${pid}">10847</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:01.755" level="INFO">Running command 'kill 10847 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:01.751" endtime="20210730 15:38:01.756"/>
</kw>
<status status="PASS" starttime="20210730 15:38:01.750" endtime="20210730 15:38:01.756"/>
</iter>
<iter>
<var name="${pid}">10849</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:01.760" level="INFO">Running command 'kill 10849 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:01.756" endtime="20210730 15:38:01.761"/>
</kw>
<status status="PASS" starttime="20210730 15:38:01.756" endtime="20210730 15:38:01.761"/>
</iter>
<status status="PASS" starttime="20210730 15:38:01.739" endtime="20210730 15:38:01.761"/>
</for>
<status status="PASS" starttime="20210730 15:38:01.739" endtime="20210730 15:38:01.761"/>
</branch>
<status status="PASS" starttime="20210730 15:38:01.739" endtime="20210730 15:38:01.761"/>
</if>
<status status="PASS" starttime="20210730 15:38:01.723" endtime="20210730 15:38:01.762"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
firstname as such:
{
"firstname": 'H Xu'
}
Then, each request should fail with the following response body:
{
"message": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:38:00.142" endtime="20210730 15:38:01.762">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t105" name="With Each Valid Token, Updating First Name Of Each System User With Ha X Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:01.767" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:01.779" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:01.779" level="INFO">${pids} = 10878</msg>
<status status="PASS" starttime="20210730 15:38:01.764" endtime="20210730 15:38:01.779"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:01.780" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:01.779" endtime="20210730 15:38:01.780"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:01.782" level="INFO">${pids} = ['10878']</msg>
<status status="PASS" starttime="20210730 15:38:01.781" endtime="20210730 15:38:01.782"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10878</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:01.785" level="INFO">Running command 'kill 10878 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:01.782" endtime="20210730 15:38:01.786"/>
</kw>
<status status="PASS" starttime="20210730 15:38:01.782" endtime="20210730 15:38:01.786"/>
</iter>
<status status="PASS" starttime="20210730 15:38:01.782" endtime="20210730 15:38:01.786"/>
</for>
<status status="PASS" starttime="20210730 15:38:01.781" endtime="20210730 15:38:01.786"/>
</branch>
<status status="PASS" starttime="20210730 15:38:01.780" endtime="20210730 15:38:01.786"/>
</if>
<status status="PASS" starttime="20210730 15:38:01.763" endtime="20210730 15:38:01.786"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:01.787" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:01.787" endtime="20210730 15:38:01.787"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:01.788" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:01.788" endtime="20210730 15:38:01.788"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:01.789" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:01.788" endtime="20210730 15:38:01.789"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:01.789" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:01.789" endtime="20210730 15:38:01.789"/>
</kw>
<msg timestamp="20210730 15:38:01.789" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:01.788" endtime="20210730 15:38:01.789"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:01.798" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:01.789" endtime="20210730 15:38:01.810"/>
</kw>
<status status="PASS" starttime="20210730 15:38:01.787" endtime="20210730 15:38:01.811"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:38:01.813" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:38:01.812" endtime="20210730 15:38:01.821"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:38:03.323" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:38:01.822" endtime="20210730 15:38:03.324"/>
</kw>
<status status="PASS" starttime="20210730 15:38:01.811" endtime="20210730 15:38:03.324"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:03.325" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:03.325" endtime="20210730 15:38:03.325"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:03.326" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:03.325" endtime="20210730 15:38:03.326"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:03.326" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:03.326" endtime="20210730 15:38:03.326"/>
</kw>
<msg timestamp="20210730 15:38:03.326" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:03.325" endtime="20210730 15:38:03.326"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:38:03.327" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:38:03.327" endtime="20210730 15:38:03.327"/>
</kw>
<status status="PASS" starttime="20210730 15:38:03.324" endtime="20210730 15:38:03.327"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:38:03.328" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:38:03.328" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:38:03.328" endtime="20210730 15:38:03.328"/>
</kw>
<status status="PASS" starttime="20210730 15:38:03.327" endtime="20210730 15:38:03.328"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:38:03.329" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:38:03.329" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:38:03.328" endtime="20210730 15:38:03.329"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:38:03.329" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:38:03.329" endtime="20210730 15:38:03.329"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:03.330" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:03.329" endtime="20210730 15:38:03.330"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:03.330" endtime="20210730 15:38:03.330"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:03.331" endtime="20210730 15:38:03.331"/>
</kw>
<status status="PASS" starttime="20210730 15:38:03.329" endtime="20210730 15:38:03.331"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:03.331" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:03.331" endtime="20210730 15:38:03.331"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:03.331" endtime="20210730 15:38:03.332"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:03.332" endtime="20210730 15:38:03.332"/>
</kw>
<status status="PASS" starttime="20210730 15:38:03.331" endtime="20210730 15:38:03.332"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:03.333" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:03.333" endtime="20210730 15:38:03.333"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:03.333" endtime="20210730 15:38:03.334"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:03.334" endtime="20210730 15:38:03.334"/>
</kw>
<status status="PASS" starttime="20210730 15:38:03.333" endtime="20210730 15:38:03.334"/>
</iter>
<status status="PASS" starttime="20210730 15:38:03.329" endtime="20210730 15:38:03.334"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:38:03.335" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:38:03.334" endtime="20210730 15:38:03.335"/>
</kw>
<status status="PASS" starttime="20210730 15:38:03.328" endtime="20210730 15:38:03.335"/>
</kw>
<status status="PASS" starttime="20210730 15:38:01.763" endtime="20210730 15:38:03.335"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 15:38:03.340" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:03.336" endtime="20210730 15:38:03.340"/>
</kw>
<msg timestamp="20210730 15:38:03.340" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:03.335" endtime="20210730 15:38:03.340"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>first_name</arg>
<arg>The second first name is invalid with only 1 letter, the first first name is valid</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 15:38:03.341" endtime="20210730 15:38:03.341"/>
</kw>
<status status="PASS" starttime="20210730 15:38:03.341" endtime="20210730 15:38:03.342"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=firstname</arg>
<arg>field_data=${user_data}[first_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:03.343" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:38:03.343" endtime="20210730 15:38:03.343"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:03.344" level="INFO">${payload} = {'firstname': 'Ha X'}</msg>
<status status="PASS" starttime="20210730 15:38:03.343" endtime="20210730 15:38:03.344"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:38:03.353" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:38:03.354" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:38:03.344" endtime="20210730 15:38:03.354"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 15:38:03.354" endtime="20210730 15:38:03.354"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${field_data}</arg>
<arg>${system_user}</arg>
<status status="NOT RUN" starttime="20210730 15:38:03.354" endtime="20210730 15:38:03.354"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:03.344" endtime="20210730 15:38:03.354"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:03.344" endtime="20210730 15:38:03.354"/>
</for>
<status status="FAIL" starttime="20210730 15:38:03.342" endtime="20210730 15:38:03.354"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:03.342" endtime="20210730 15:38:03.354"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:03.342" endtime="20210730 15:38:03.355"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:03.358" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:03.373" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:03.373" level="INFO">${pids} = 10901
10908
10915</msg>
<status status="PASS" starttime="20210730 15:38:03.355" endtime="20210730 15:38:03.373"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:03.374" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:03.373" endtime="20210730 15:38:03.374"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:03.375" level="INFO">${pids} = ['10901', '10908', '10915']</msg>
<status status="PASS" starttime="20210730 15:38:03.375" endtime="20210730 15:38:03.375"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10901</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:03.381" level="INFO">Running command 'kill 10901 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:03.376" endtime="20210730 15:38:03.381"/>
</kw>
<status status="PASS" starttime="20210730 15:38:03.376" endtime="20210730 15:38:03.382"/>
</iter>
<iter>
<var name="${pid}">10908</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:03.386" level="INFO">Running command 'kill 10908 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:03.382" endtime="20210730 15:38:03.386"/>
</kw>
<status status="PASS" starttime="20210730 15:38:03.382" endtime="20210730 15:38:03.386"/>
</iter>
<iter>
<var name="${pid}">10915</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:03.390" level="INFO">Running command 'kill 10915 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:03.387" endtime="20210730 15:38:03.390"/>
</kw>
<status status="PASS" starttime="20210730 15:38:03.386" endtime="20210730 15:38:03.390"/>
</iter>
<status status="PASS" starttime="20210730 15:38:03.375" endtime="20210730 15:38:03.390"/>
</for>
<status status="PASS" starttime="20210730 15:38:03.374" endtime="20210730 15:38:03.390"/>
</branch>
<status status="PASS" starttime="20210730 15:38:03.374" endtime="20210730 15:38:03.390"/>
</if>
<status status="PASS" starttime="20210730 15:38:03.355" endtime="20210730 15:38:03.391"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
firstname as such:
{
"firstname": 'Ha X'
}
Then, each request should fail with the following response body:
{
"message": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:38:01.762" endtime="20210730 15:38:03.391">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t106" name="With Each Valid Token, Updating First Name Of Each System User With H X Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:03.398" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:03.408" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:03.408" level="INFO">${pids} = 10944</msg>
<status status="PASS" starttime="20210730 15:38:03.392" endtime="20210730 15:38:03.408"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:03.409" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:03.409" endtime="20210730 15:38:03.409"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:03.410" level="INFO">${pids} = ['10944']</msg>
<status status="PASS" starttime="20210730 15:38:03.410" endtime="20210730 15:38:03.411"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10944</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:03.432" level="INFO">Running command 'kill 10944 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:03.411" endtime="20210730 15:38:03.433"/>
</kw>
<status status="PASS" starttime="20210730 15:38:03.411" endtime="20210730 15:38:03.433"/>
</iter>
<status status="PASS" starttime="20210730 15:38:03.411" endtime="20210730 15:38:03.433"/>
</for>
<status status="PASS" starttime="20210730 15:38:03.410" endtime="20210730 15:38:03.433"/>
</branch>
<status status="PASS" starttime="20210730 15:38:03.410" endtime="20210730 15:38:03.433"/>
</if>
<status status="PASS" starttime="20210730 15:38:03.392" endtime="20210730 15:38:03.434"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:03.435" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:03.435" endtime="20210730 15:38:03.435"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:03.436" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:03.436" endtime="20210730 15:38:03.436"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:03.437" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:03.437" endtime="20210730 15:38:03.437"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:03.438" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:03.438" endtime="20210730 15:38:03.438"/>
</kw>
<msg timestamp="20210730 15:38:03.438" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:03.436" endtime="20210730 15:38:03.438"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:03.442" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:03.438" endtime="20210730 15:38:03.444"/>
</kw>
<status status="PASS" starttime="20210730 15:38:03.434" endtime="20210730 15:38:03.445"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:38:03.447" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:38:03.446" endtime="20210730 15:38:03.451"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:38:04.955" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:38:03.451" endtime="20210730 15:38:04.955"/>
</kw>
<status status="PASS" starttime="20210730 15:38:03.445" endtime="20210730 15:38:04.955"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:04.956" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:04.956" endtime="20210730 15:38:04.956"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:04.957" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:04.956" endtime="20210730 15:38:04.957"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:04.957" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:04.957" endtime="20210730 15:38:04.957"/>
</kw>
<msg timestamp="20210730 15:38:04.957" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:04.956" endtime="20210730 15:38:04.957"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:38:04.958" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:38:04.957" endtime="20210730 15:38:04.958"/>
</kw>
<status status="PASS" starttime="20210730 15:38:04.955" endtime="20210730 15:38:04.958"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:38:04.959" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:38:04.959" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:38:04.959" endtime="20210730 15:38:04.959"/>
</kw>
<status status="PASS" starttime="20210730 15:38:04.958" endtime="20210730 15:38:04.959"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:38:04.960" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:38:04.960" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:38:04.959" endtime="20210730 15:38:04.960"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:38:04.961" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:38:04.960" endtime="20210730 15:38:04.961"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:04.961" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:04.961" endtime="20210730 15:38:04.961"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:04.961" endtime="20210730 15:38:04.962"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:04.962" endtime="20210730 15:38:04.963"/>
</kw>
<status status="PASS" starttime="20210730 15:38:04.961" endtime="20210730 15:38:04.963"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:04.963" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:04.963" endtime="20210730 15:38:04.963"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:04.963" endtime="20210730 15:38:04.964"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:04.964" endtime="20210730 15:38:04.964"/>
</kw>
<status status="PASS" starttime="20210730 15:38:04.963" endtime="20210730 15:38:04.964"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:04.965" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:04.964" endtime="20210730 15:38:04.965"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:04.965" endtime="20210730 15:38:04.966"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:04.966" endtime="20210730 15:38:04.966"/>
</kw>
<status status="PASS" starttime="20210730 15:38:04.964" endtime="20210730 15:38:04.966"/>
</iter>
<status status="PASS" starttime="20210730 15:38:04.961" endtime="20210730 15:38:04.966"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:38:04.966" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:38:04.966" endtime="20210730 15:38:04.967"/>
</kw>
<status status="PASS" starttime="20210730 15:38:04.959" endtime="20210730 15:38:04.967"/>
</kw>
<status status="PASS" starttime="20210730 15:38:03.392" endtime="20210730 15:38:04.967"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 15:38:04.970" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:04.967" endtime="20210730 15:38:04.970"/>
</kw>
<msg timestamp="20210730 15:38:04.970" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:04.967" endtime="20210730 15:38:04.970"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>first_name</arg>
<arg>The both first names are invalid with only 1 letter</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 15:38:04.971" endtime="20210730 15:38:04.971"/>
</kw>
<status status="PASS" starttime="20210730 15:38:04.970" endtime="20210730 15:38:04.971"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=firstname</arg>
<arg>field_data=${user_data}[first_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:04.973" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:38:04.973" endtime="20210730 15:38:04.973"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:04.974" level="INFO">${payload} = {'firstname': 'H X'}</msg>
<status status="PASS" starttime="20210730 15:38:04.973" endtime="20210730 15:38:04.974"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:38:04.986" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:38:04.986" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:38:04.974" endtime="20210730 15:38:04.986"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 15:38:04.986" endtime="20210730 15:38:04.986"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${field_data}</arg>
<arg>${system_user}</arg>
<status status="NOT RUN" starttime="20210730 15:38:04.986" endtime="20210730 15:38:04.986"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:04.974" endtime="20210730 15:38:04.986"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:04.974" endtime="20210730 15:38:04.986"/>
</for>
<status status="FAIL" starttime="20210730 15:38:04.972" endtime="20210730 15:38:04.987"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:04.972" endtime="20210730 15:38:04.987"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:04.971" endtime="20210730 15:38:04.987"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:04.991" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:05.006" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:05.006" level="INFO">${pids} = 10967
10974
10984</msg>
<status status="PASS" starttime="20210730 15:38:04.987" endtime="20210730 15:38:05.006"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:05.007" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:05.006" endtime="20210730 15:38:05.007"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:05.008" level="INFO">${pids} = ['10967', '10974', '10984']</msg>
<status status="PASS" starttime="20210730 15:38:05.007" endtime="20210730 15:38:05.008"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10967</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:05.012" level="INFO">Running command 'kill 10967 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:05.008" endtime="20210730 15:38:05.013"/>
</kw>
<status status="PASS" starttime="20210730 15:38:05.008" endtime="20210730 15:38:05.013"/>
</iter>
<iter>
<var name="${pid}">10974</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:05.018" level="INFO">Running command 'kill 10974 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:05.014" endtime="20210730 15:38:05.020"/>
</kw>
<status status="PASS" starttime="20210730 15:38:05.013" endtime="20210730 15:38:05.020"/>
</iter>
<iter>
<var name="${pid}">10984</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:05.023" level="INFO">Running command 'kill 10984 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:05.020" endtime="20210730 15:38:05.024"/>
</kw>
<status status="PASS" starttime="20210730 15:38:05.020" endtime="20210730 15:38:05.024"/>
</iter>
<status status="PASS" starttime="20210730 15:38:05.008" endtime="20210730 15:38:05.024"/>
</for>
<status status="PASS" starttime="20210730 15:38:05.007" endtime="20210730 15:38:05.024"/>
</branch>
<status status="PASS" starttime="20210730 15:38:05.007" endtime="20210730 15:38:05.024"/>
</if>
<status status="PASS" starttime="20210730 15:38:04.987" endtime="20210730 15:38:05.024"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
firstname as such:
{
"firstname": 'H X'
}
Then, each request should fail with the following response body:
{
"message": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:38:03.391" endtime="20210730 15:38:05.024">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t107" name="With Each Valid Token, Updating First Name Of Each System User With Helena123 Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:05.035" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:05.046" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:05.047" level="INFO">${pids} = 11013</msg>
<status status="PASS" starttime="20210730 15:38:05.027" endtime="20210730 15:38:05.047"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:05.048" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:05.047" endtime="20210730 15:38:05.048"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:05.048" level="INFO">${pids} = ['11013']</msg>
<status status="PASS" starttime="20210730 15:38:05.048" endtime="20210730 15:38:05.048"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11013</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:05.062" level="INFO">Running command 'kill 11013 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:05.049" endtime="20210730 15:38:05.063"/>
</kw>
<status status="PASS" starttime="20210730 15:38:05.049" endtime="20210730 15:38:05.063"/>
</iter>
<status status="PASS" starttime="20210730 15:38:05.049" endtime="20210730 15:38:05.063"/>
</for>
<status status="PASS" starttime="20210730 15:38:05.048" endtime="20210730 15:38:05.063"/>
</branch>
<status status="PASS" starttime="20210730 15:38:05.048" endtime="20210730 15:38:05.063"/>
</if>
<status status="PASS" starttime="20210730 15:38:05.026" endtime="20210730 15:38:05.063"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:05.065" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:05.064" endtime="20210730 15:38:05.065"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:05.065" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:05.065" endtime="20210730 15:38:05.065"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:05.066" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:05.066" endtime="20210730 15:38:05.066"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:05.066" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:05.066" endtime="20210730 15:38:05.066"/>
</kw>
<msg timestamp="20210730 15:38:05.066" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:05.065" endtime="20210730 15:38:05.066"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:05.070" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:05.067" endtime="20210730 15:38:05.072"/>
</kw>
<status status="PASS" starttime="20210730 15:38:05.064" endtime="20210730 15:38:05.072"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:38:05.073" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:38:05.073" endtime="20210730 15:38:05.079"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:38:06.580" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:38:05.079" endtime="20210730 15:38:06.580"/>
</kw>
<status status="PASS" starttime="20210730 15:38:05.072" endtime="20210730 15:38:06.581"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:06.582" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:06.581" endtime="20210730 15:38:06.582"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:06.582" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:06.582" endtime="20210730 15:38:06.583"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:06.583" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:06.583" endtime="20210730 15:38:06.583"/>
</kw>
<msg timestamp="20210730 15:38:06.583" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:06.581" endtime="20210730 15:38:06.583"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:38:06.584" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:38:06.583" endtime="20210730 15:38:06.584"/>
</kw>
<status status="PASS" starttime="20210730 15:38:06.581" endtime="20210730 15:38:06.584"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:38:06.585" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:38:06.585" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:38:06.585" endtime="20210730 15:38:06.585"/>
</kw>
<status status="PASS" starttime="20210730 15:38:06.584" endtime="20210730 15:38:06.585"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:38:06.586" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:38:06.586" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:38:06.586" endtime="20210730 15:38:06.586"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:38:06.586" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:38:06.586" endtime="20210730 15:38:06.586"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:06.587" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:06.587" endtime="20210730 15:38:06.587"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:06.587" endtime="20210730 15:38:06.588"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:06.588" endtime="20210730 15:38:06.588"/>
</kw>
<status status="PASS" starttime="20210730 15:38:06.587" endtime="20210730 15:38:06.588"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:06.589" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:06.589" endtime="20210730 15:38:06.589"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:06.589" endtime="20210730 15:38:06.590"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:06.590" endtime="20210730 15:38:06.590"/>
</kw>
<status status="PASS" starttime="20210730 15:38:06.588" endtime="20210730 15:38:06.590"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:06.591" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:06.590" endtime="20210730 15:38:06.591"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:06.591" endtime="20210730 15:38:06.592"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:06.592" endtime="20210730 15:38:06.592"/>
</kw>
<status status="PASS" starttime="20210730 15:38:06.590" endtime="20210730 15:38:06.592"/>
</iter>
<status status="PASS" starttime="20210730 15:38:06.586" endtime="20210730 15:38:06.592"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:38:06.593" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:38:06.592" endtime="20210730 15:38:06.593"/>
</kw>
<status status="PASS" starttime="20210730 15:38:06.585" endtime="20210730 15:38:06.593"/>
</kw>
<status status="PASS" starttime="20210730 15:38:05.026" endtime="20210730 15:38:06.593"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 15:38:06.596" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:06.594" endtime="20210730 15:38:06.596"/>
</kw>
<msg timestamp="20210730 15:38:06.597" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:06.593" endtime="20210730 15:38:06.597"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>first_name</arg>
<arg>First name does contain numbers, which makes it invalid</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 15:38:06.598" endtime="20210730 15:38:06.598"/>
</kw>
<status status="PASS" starttime="20210730 15:38:06.597" endtime="20210730 15:38:06.598"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=firstname</arg>
<arg>field_data=${user_data}[first_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:06.600" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:38:06.599" endtime="20210730 15:38:06.600"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:06.600" level="INFO">${payload} = {'firstname': 'Helena123'}</msg>
<status status="PASS" starttime="20210730 15:38:06.600" endtime="20210730 15:38:06.600"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:38:06.613" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:38:06.613" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:38:06.601" endtime="20210730 15:38:06.613"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 15:38:06.613" endtime="20210730 15:38:06.613"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${field_data}</arg>
<arg>${system_user}</arg>
<status status="NOT RUN" starttime="20210730 15:38:06.613" endtime="20210730 15:38:06.614"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:06.601" endtime="20210730 15:38:06.614"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:06.600" endtime="20210730 15:38:06.614"/>
</for>
<status status="FAIL" starttime="20210730 15:38:06.599" endtime="20210730 15:38:06.614"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:06.598" endtime="20210730 15:38:06.614"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:06.598" endtime="20210730 15:38:06.614"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:06.618" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:06.633" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:06.633" level="INFO">${pids} = 11036
11043
11045</msg>
<status status="PASS" starttime="20210730 15:38:06.615" endtime="20210730 15:38:06.633"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:06.634" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:06.634" endtime="20210730 15:38:06.635"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:06.636" level="INFO">${pids} = ['11036', '11043', '11045']</msg>
<status status="PASS" starttime="20210730 15:38:06.635" endtime="20210730 15:38:06.636"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11036</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:06.640" level="INFO">Running command 'kill 11036 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:06.636" endtime="20210730 15:38:06.641"/>
</kw>
<status status="PASS" starttime="20210730 15:38:06.636" endtime="20210730 15:38:06.641"/>
</iter>
<iter>
<var name="${pid}">11043</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:06.646" level="INFO">Running command 'kill 11043 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:06.641" endtime="20210730 15:38:06.647"/>
</kw>
<status status="PASS" starttime="20210730 15:38:06.641" endtime="20210730 15:38:06.647"/>
</iter>
<iter>
<var name="${pid}">11045</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:06.651" level="INFO">Running command 'kill 11045 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:06.647" endtime="20210730 15:38:06.651"/>
</kw>
<status status="PASS" starttime="20210730 15:38:06.647" endtime="20210730 15:38:06.651"/>
</iter>
<status status="PASS" starttime="20210730 15:38:06.636" endtime="20210730 15:38:06.651"/>
</for>
<status status="PASS" starttime="20210730 15:38:06.635" endtime="20210730 15:38:06.652"/>
</branch>
<status status="PASS" starttime="20210730 15:38:06.635" endtime="20210730 15:38:06.652"/>
</if>
<status status="PASS" starttime="20210730 15:38:06.614" endtime="20210730 15:38:06.652"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
firstname as such:
{
"firstname": 'Helena123'
}
Then, each request should fail with the following response body:
{
"message": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:38:05.025" endtime="20210730 15:38:06.652">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t108" name="With Each Valid Token, Updating First Name Of Each System User With Helena!.? Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:06.657" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:06.670" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:06.670" level="INFO">${pids} = 11074</msg>
<status status="PASS" starttime="20210730 15:38:06.654" endtime="20210730 15:38:06.670"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:06.671" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:06.670" endtime="20210730 15:38:06.671"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:06.672" level="INFO">${pids} = ['11074']</msg>
<status status="PASS" starttime="20210730 15:38:06.671" endtime="20210730 15:38:06.672"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11074</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:06.678" level="INFO">Running command 'kill 11074 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:06.672" endtime="20210730 15:38:06.678"/>
</kw>
<status status="PASS" starttime="20210730 15:38:06.672" endtime="20210730 15:38:06.678"/>
</iter>
<status status="PASS" starttime="20210730 15:38:06.672" endtime="20210730 15:38:06.678"/>
</for>
<status status="PASS" starttime="20210730 15:38:06.671" endtime="20210730 15:38:06.678"/>
</branch>
<status status="PASS" starttime="20210730 15:38:06.671" endtime="20210730 15:38:06.678"/>
</if>
<status status="PASS" starttime="20210730 15:38:06.654" endtime="20210730 15:38:06.679"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:06.683" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:06.683" endtime="20210730 15:38:06.683"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:06.684" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:06.684" endtime="20210730 15:38:06.684"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:06.684" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:06.684" endtime="20210730 15:38:06.684"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:06.685" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:06.685" endtime="20210730 15:38:06.685"/>
</kw>
<msg timestamp="20210730 15:38:06.685" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:06.683" endtime="20210730 15:38:06.685"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:06.689" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:06.685" endtime="20210730 15:38:06.690"/>
</kw>
<status status="PASS" starttime="20210730 15:38:06.682" endtime="20210730 15:38:06.690"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:38:06.692" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:38:06.691" endtime="20210730 15:38:06.697"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:38:08.198" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:38:06.697" endtime="20210730 15:38:08.198"/>
</kw>
<status status="PASS" starttime="20210730 15:38:06.691" endtime="20210730 15:38:08.198"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:08.199" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:08.199" endtime="20210730 15:38:08.199"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:08.200" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:08.200" endtime="20210730 15:38:08.200"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:08.200" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:08.200" endtime="20210730 15:38:08.200"/>
</kw>
<msg timestamp="20210730 15:38:08.200" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:08.199" endtime="20210730 15:38:08.201"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:38:08.201" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:38:08.201" endtime="20210730 15:38:08.201"/>
</kw>
<status status="PASS" starttime="20210730 15:38:08.199" endtime="20210730 15:38:08.201"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:38:08.202" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:38:08.202" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:38:08.202" endtime="20210730 15:38:08.202"/>
</kw>
<status status="PASS" starttime="20210730 15:38:08.202" endtime="20210730 15:38:08.202"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:38:08.203" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:38:08.203" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:38:08.203" endtime="20210730 15:38:08.203"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:38:08.203" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:38:08.203" endtime="20210730 15:38:08.203"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:08.204" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:08.203" endtime="20210730 15:38:08.204"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:08.204" endtime="20210730 15:38:08.204"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:08.205" endtime="20210730 15:38:08.205"/>
</kw>
<status status="PASS" starttime="20210730 15:38:08.203" endtime="20210730 15:38:08.205"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:08.206" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:08.205" endtime="20210730 15:38:08.206"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:08.206" endtime="20210730 15:38:08.206"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:08.206" endtime="20210730 15:38:08.207"/>
</kw>
<status status="PASS" starttime="20210730 15:38:08.205" endtime="20210730 15:38:08.207"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:08.207" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:08.207" endtime="20210730 15:38:08.207"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:08.207" endtime="20210730 15:38:08.208"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:08.208" endtime="20210730 15:38:08.208"/>
</kw>
<status status="PASS" starttime="20210730 15:38:08.207" endtime="20210730 15:38:08.208"/>
</iter>
<status status="PASS" starttime="20210730 15:38:08.203" endtime="20210730 15:38:08.208"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:38:08.209" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:38:08.208" endtime="20210730 15:38:08.209"/>
</kw>
<status status="PASS" starttime="20210730 15:38:08.202" endtime="20210730 15:38:08.209"/>
</kw>
<status status="PASS" starttime="20210730 15:38:06.653" endtime="20210730 15:38:08.209"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 15:38:08.213" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:08.210" endtime="20210730 15:38:08.213"/>
</kw>
<msg timestamp="20210730 15:38:08.214" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:08.210" endtime="20210730 15:38:08.214"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>first_name</arg>
<arg>First name does contain non alphanumeric characters, which makes it invalid</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 15:38:08.214" endtime="20210730 15:38:08.215"/>
</kw>
<status status="PASS" starttime="20210730 15:38:08.214" endtime="20210730 15:38:08.215"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=firstname</arg>
<arg>field_data=${user_data}[first_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:08.216" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:38:08.216" endtime="20210730 15:38:08.216"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:08.217" level="INFO">${payload} = {'firstname': 'Helena!.?'}</msg>
<status status="PASS" starttime="20210730 15:38:08.217" endtime="20210730 15:38:08.217"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:38:08.226" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:38:08.226" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:38:08.217" endtime="20210730 15:38:08.227"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 15:38:08.227" endtime="20210730 15:38:08.227"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${field_data}</arg>
<arg>${system_user}</arg>
<status status="NOT RUN" starttime="20210730 15:38:08.227" endtime="20210730 15:38:08.227"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:08.217" endtime="20210730 15:38:08.227"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:08.217" endtime="20210730 15:38:08.227"/>
</for>
<status status="FAIL" starttime="20210730 15:38:08.215" endtime="20210730 15:38:08.227"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:08.215" endtime="20210730 15:38:08.227"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:08.215" endtime="20210730 15:38:08.227"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:08.231" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:08.244" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:08.244" level="INFO">${pids} = 11097
11104
11108</msg>
<status status="PASS" starttime="20210730 15:38:08.228" endtime="20210730 15:38:08.245"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:08.246" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:08.245" endtime="20210730 15:38:08.246"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:08.247" level="INFO">${pids} = ['11097', '11104', '11108']</msg>
<status status="PASS" starttime="20210730 15:38:08.247" endtime="20210730 15:38:08.247"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11097</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:08.251" level="INFO">Running command 'kill 11097 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:08.248" endtime="20210730 15:38:08.252"/>
</kw>
<status status="PASS" starttime="20210730 15:38:08.248" endtime="20210730 15:38:08.252"/>
</iter>
<iter>
<var name="${pid}">11104</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:08.258" level="INFO">Running command 'kill 11104 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:08.252" endtime="20210730 15:38:08.260"/>
</kw>
<status status="PASS" starttime="20210730 15:38:08.252" endtime="20210730 15:38:08.260"/>
</iter>
<iter>
<var name="${pid}">11108</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:08.265" level="INFO">Running command 'kill 11108 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:08.261" endtime="20210730 15:38:08.266"/>
</kw>
<status status="PASS" starttime="20210730 15:38:08.260" endtime="20210730 15:38:08.266"/>
</iter>
<status status="PASS" starttime="20210730 15:38:08.247" endtime="20210730 15:38:08.266"/>
</for>
<status status="PASS" starttime="20210730 15:38:08.246" endtime="20210730 15:38:08.266"/>
</branch>
<status status="PASS" starttime="20210730 15:38:08.246" endtime="20210730 15:38:08.266"/>
</if>
<status status="PASS" starttime="20210730 15:38:08.228" endtime="20210730 15:38:08.266"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
firstname as such:
{
"firstname": 'Helena!.?'
}
Then, each request should fail with the following response body:
{
"message": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:38:06.653" endtime="20210730 15:38:08.267">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t109" name="With Each Valid Token, Updating First Name Of Each System User With Helena Margaretha Results In Success">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:08.276" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:08.288" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:08.288" level="INFO">${pids} = 11137</msg>
<status status="PASS" starttime="20210730 15:38:08.269" endtime="20210730 15:38:08.288"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:08.289" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:08.289" endtime="20210730 15:38:08.289"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:08.291" level="INFO">${pids} = ['11137']</msg>
<status status="PASS" starttime="20210730 15:38:08.290" endtime="20210730 15:38:08.291"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11137</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:08.304" level="INFO">Running command 'kill 11137 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:08.291" endtime="20210730 15:38:08.304"/>
</kw>
<status status="PASS" starttime="20210730 15:38:08.291" endtime="20210730 15:38:08.305"/>
</iter>
<status status="PASS" starttime="20210730 15:38:08.291" endtime="20210730 15:38:08.305"/>
</for>
<status status="PASS" starttime="20210730 15:38:08.289" endtime="20210730 15:38:08.305"/>
</branch>
<status status="PASS" starttime="20210730 15:38:08.289" endtime="20210730 15:38:08.305"/>
</if>
<status status="PASS" starttime="20210730 15:38:08.268" endtime="20210730 15:38:08.305"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:08.306" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:08.306" endtime="20210730 15:38:08.306"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:08.307" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:08.307" endtime="20210730 15:38:08.307"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:08.307" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:08.307" endtime="20210730 15:38:08.307"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:08.308" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:08.308" endtime="20210730 15:38:08.308"/>
</kw>
<msg timestamp="20210730 15:38:08.308" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:08.307" endtime="20210730 15:38:08.308"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:08.313" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:08.308" endtime="20210730 15:38:08.314"/>
</kw>
<status status="PASS" starttime="20210730 15:38:08.305" endtime="20210730 15:38:08.315"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:38:08.316" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:38:08.316" endtime="20210730 15:38:08.320"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:38:09.822" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:38:08.321" endtime="20210730 15:38:09.823"/>
</kw>
<status status="PASS" starttime="20210730 15:38:08.315" endtime="20210730 15:38:09.823"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:09.824" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:09.824" endtime="20210730 15:38:09.824"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:09.825" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:09.824" endtime="20210730 15:38:09.825"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:09.825" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:09.825" endtime="20210730 15:38:09.825"/>
</kw>
<msg timestamp="20210730 15:38:09.825" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:09.824" endtime="20210730 15:38:09.825"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:38:09.826" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:38:09.825" endtime="20210730 15:38:09.826"/>
</kw>
<status status="PASS" starttime="20210730 15:38:09.823" endtime="20210730 15:38:09.826"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:38:09.827" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:38:09.827" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:38:09.827" endtime="20210730 15:38:09.827"/>
</kw>
<status status="PASS" starttime="20210730 15:38:09.826" endtime="20210730 15:38:09.827"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:38:09.828" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:38:09.828" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:38:09.827" endtime="20210730 15:38:09.828"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:38:09.828" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:38:09.828" endtime="20210730 15:38:09.828"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:09.829" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:09.828" endtime="20210730 15:38:09.829"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:09.829" endtime="20210730 15:38:09.830"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:09.830" endtime="20210730 15:38:09.830"/>
</kw>
<status status="PASS" starttime="20210730 15:38:09.828" endtime="20210730 15:38:09.830"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:09.831" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:09.830" endtime="20210730 15:38:09.831"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:09.831" endtime="20210730 15:38:09.832"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:09.832" endtime="20210730 15:38:09.832"/>
</kw>
<status status="PASS" starttime="20210730 15:38:09.830" endtime="20210730 15:38:09.832"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:09.833" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:09.832" endtime="20210730 15:38:09.833"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:09.833" endtime="20210730 15:38:09.834"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:09.834" endtime="20210730 15:38:09.835"/>
</kw>
<status status="PASS" starttime="20210730 15:38:09.832" endtime="20210730 15:38:09.835"/>
</iter>
<status status="PASS" starttime="20210730 15:38:09.828" endtime="20210730 15:38:09.835"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:38:09.835" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:38:09.835" endtime="20210730 15:38:09.835"/>
</kw>
<status status="PASS" starttime="20210730 15:38:09.827" endtime="20210730 15:38:09.836"/>
</kw>
<status status="PASS" starttime="20210730 15:38:08.268" endtime="20210730 15:38:09.836"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 15:38:09.839" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:09.836" endtime="20210730 15:38:09.839"/>
</kw>
<msg timestamp="20210730 15:38:09.839" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:09.836" endtime="20210730 15:38:09.839"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>first_name</arg>
<arg>Two valid first names seperated by a single space character</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 15:38:09.840" endtime="20210730 15:38:09.841"/>
</kw>
<status status="PASS" starttime="20210730 15:38:09.839" endtime="20210730 15:38:09.841"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=firstname</arg>
<arg>field_data=${user_data}[first_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:09.845" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:38:09.844" endtime="20210730 15:38:09.845"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:09.846" level="INFO">${payload} = {'firstname': 'Helena Margaretha'}</msg>
<status status="PASS" starttime="20210730 15:38:09.845" endtime="20210730 15:38:09.846"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:38:09.855" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:38:09.855" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:38:09.846" endtime="20210730 15:38:09.855"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 15:38:09.856" endtime="20210730 15:38:09.856"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${field_data}</arg>
<arg>${system_user}</arg>
<status status="NOT RUN" starttime="20210730 15:38:09.856" endtime="20210730 15:38:09.856"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:09.846" endtime="20210730 15:38:09.856"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:09.846" endtime="20210730 15:38:09.856"/>
</for>
<status status="FAIL" starttime="20210730 15:38:09.843" endtime="20210730 15:38:09.856"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:09.843" endtime="20210730 15:38:09.856"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:09.841" endtime="20210730 15:38:09.856"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:09.861" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:09.879" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:09.879" level="INFO">${pids} = 11160
11167
11170</msg>
<status status="PASS" starttime="20210730 15:38:09.857" endtime="20210730 15:38:09.879"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:09.880" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:09.879" endtime="20210730 15:38:09.880"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:09.880" level="INFO">${pids} = ['11160', '11167', '11170']</msg>
<status status="PASS" starttime="20210730 15:38:09.880" endtime="20210730 15:38:09.880"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11160</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:09.886" level="INFO">Running command 'kill 11160 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:09.881" endtime="20210730 15:38:09.886"/>
</kw>
<status status="PASS" starttime="20210730 15:38:09.881" endtime="20210730 15:38:09.886"/>
</iter>
<iter>
<var name="${pid}">11167</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:09.890" level="INFO">Running command 'kill 11167 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:09.887" endtime="20210730 15:38:09.891"/>
</kw>
<status status="PASS" starttime="20210730 15:38:09.887" endtime="20210730 15:38:09.891"/>
</iter>
<iter>
<var name="${pid}">11170</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:09.895" level="INFO">Running command 'kill 11170 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:09.891" endtime="20210730 15:38:09.896"/>
</kw>
<status status="PASS" starttime="20210730 15:38:09.891" endtime="20210730 15:38:09.896"/>
</iter>
<status status="PASS" starttime="20210730 15:38:09.881" endtime="20210730 15:38:09.896"/>
</for>
<status status="PASS" starttime="20210730 15:38:09.880" endtime="20210730 15:38:09.896"/>
</branch>
<status status="PASS" starttime="20210730 15:38:09.880" endtime="20210730 15:38:09.896"/>
</if>
<status status="PASS" starttime="20210730 15:38:09.856" endtime="20210730 15:38:09.896"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
firstname as such:
{
"firstname": 'Helena Margaretha'
}
Then, each request should succeed with the following response body:
{
"message": "Updated",
"status": "SUCCESS"
}
This test not only verifies message and status but also verifies that the &lt;username&gt;'s data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:38:08.267" endtime="20210730 15:38:09.896">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t110" name="With Each Valid Token, Updating First Name Of Each System User With Helena      Margaretha Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:09.902" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:09.916" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:09.916" level="INFO">${pids} = 11199</msg>
<status status="PASS" starttime="20210730 15:38:09.898" endtime="20210730 15:38:09.916"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:09.917" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:09.917" endtime="20210730 15:38:09.917"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:09.918" level="INFO">${pids} = ['11199']</msg>
<status status="PASS" starttime="20210730 15:38:09.918" endtime="20210730 15:38:09.918"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11199</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:09.922" level="INFO">Running command 'kill 11199 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:09.918" endtime="20210730 15:38:09.922"/>
</kw>
<status status="PASS" starttime="20210730 15:38:09.918" endtime="20210730 15:38:09.922"/>
</iter>
<status status="PASS" starttime="20210730 15:38:09.918" endtime="20210730 15:38:09.922"/>
</for>
<status status="PASS" starttime="20210730 15:38:09.918" endtime="20210730 15:38:09.922"/>
</branch>
<status status="PASS" starttime="20210730 15:38:09.917" endtime="20210730 15:38:09.922"/>
</if>
<status status="PASS" starttime="20210730 15:38:09.898" endtime="20210730 15:38:09.922"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:09.923" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:09.923" endtime="20210730 15:38:09.924"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:09.924" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:09.924" endtime="20210730 15:38:09.924"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:09.925" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:09.924" endtime="20210730 15:38:09.925"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:09.925" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:09.925" endtime="20210730 15:38:09.925"/>
</kw>
<msg timestamp="20210730 15:38:09.925" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:09.924" endtime="20210730 15:38:09.925"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:09.930" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:09.925" endtime="20210730 15:38:09.931"/>
</kw>
<status status="PASS" starttime="20210730 15:38:09.923" endtime="20210730 15:38:09.931"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:38:09.933" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:38:09.932" endtime="20210730 15:38:09.938"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:38:11.443" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:38:09.938" endtime="20210730 15:38:11.444"/>
</kw>
<status status="PASS" starttime="20210730 15:38:09.932" endtime="20210730 15:38:11.446"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:11.447" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:11.447" endtime="20210730 15:38:11.447"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:11.448" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:11.447" endtime="20210730 15:38:11.448"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:11.448" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:11.448" endtime="20210730 15:38:11.448"/>
</kw>
<msg timestamp="20210730 15:38:11.448" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:11.447" endtime="20210730 15:38:11.448"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:38:11.449" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:38:11.448" endtime="20210730 15:38:11.449"/>
</kw>
<status status="PASS" starttime="20210730 15:38:11.446" endtime="20210730 15:38:11.449"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:38:11.450" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:38:11.450" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:38:11.450" endtime="20210730 15:38:11.450"/>
</kw>
<status status="PASS" starttime="20210730 15:38:11.449" endtime="20210730 15:38:11.450"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:38:11.451" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:38:11.451" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:38:11.451" endtime="20210730 15:38:11.451"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:38:11.451" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:38:11.451" endtime="20210730 15:38:11.451"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:11.452" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:11.452" endtime="20210730 15:38:11.452"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:11.452" endtime="20210730 15:38:11.453"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:11.453" endtime="20210730 15:38:11.453"/>
</kw>
<status status="PASS" starttime="20210730 15:38:11.451" endtime="20210730 15:38:11.453"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:11.453" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:11.453" endtime="20210730 15:38:11.453"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:11.453" endtime="20210730 15:38:11.454"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:11.454" endtime="20210730 15:38:11.455"/>
</kw>
<status status="PASS" starttime="20210730 15:38:11.453" endtime="20210730 15:38:11.455"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:11.455" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:11.455" endtime="20210730 15:38:11.455"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:11.455" endtime="20210730 15:38:11.456"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:11.456" endtime="20210730 15:38:11.456"/>
</kw>
<status status="PASS" starttime="20210730 15:38:11.455" endtime="20210730 15:38:11.457"/>
</iter>
<status status="PASS" starttime="20210730 15:38:11.451" endtime="20210730 15:38:11.457"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:38:11.457" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:38:11.457" endtime="20210730 15:38:11.457"/>
</kw>
<status status="PASS" starttime="20210730 15:38:11.450" endtime="20210730 15:38:11.457"/>
</kw>
<status status="PASS" starttime="20210730 15:38:09.898" endtime="20210730 15:38:11.457"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 15:38:11.460" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:11.458" endtime="20210730 15:38:11.460"/>
</kw>
<msg timestamp="20210730 15:38:11.460" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:11.457" endtime="20210730 15:38:11.460"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>first_name</arg>
<arg>Two valid first names seperated by multiple space characters making it invalid</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 15:38:11.461" endtime="20210730 15:38:11.461"/>
</kw>
<status status="PASS" starttime="20210730 15:38:11.461" endtime="20210730 15:38:11.462"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=firstname</arg>
<arg>field_data=${user_data}[first_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:11.463" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:38:11.463" endtime="20210730 15:38:11.463"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:11.463" level="INFO">${payload} = {'firstname': 'Helena      Margaretha'}</msg>
<status status="PASS" starttime="20210730 15:38:11.463" endtime="20210730 15:38:11.463"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:38:11.472" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:38:11.473" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:38:11.464" endtime="20210730 15:38:11.473"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 15:38:11.473" endtime="20210730 15:38:11.473"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${field_data}</arg>
<arg>${system_user}</arg>
<status status="NOT RUN" starttime="20210730 15:38:11.473" endtime="20210730 15:38:11.473"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:11.464" endtime="20210730 15:38:11.473"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:11.463" endtime="20210730 15:38:11.473"/>
</for>
<status status="FAIL" starttime="20210730 15:38:11.462" endtime="20210730 15:38:11.474"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:11.462" endtime="20210730 15:38:11.474"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:11.462" endtime="20210730 15:38:11.474"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:11.479" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:11.491" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:11.491" level="INFO">${pids} = 11223
11230
11232</msg>
<status status="PASS" starttime="20210730 15:38:11.474" endtime="20210730 15:38:11.491"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:11.492" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:11.492" endtime="20210730 15:38:11.492"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:11.493" level="INFO">${pids} = ['11223', '11230', '11232']</msg>
<status status="PASS" starttime="20210730 15:38:11.492" endtime="20210730 15:38:11.493"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11223</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:11.502" level="INFO">Running command 'kill 11223 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:11.494" endtime="20210730 15:38:11.503"/>
</kw>
<status status="PASS" starttime="20210730 15:38:11.493" endtime="20210730 15:38:11.503"/>
</iter>
<iter>
<var name="${pid}">11230</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:11.507" level="INFO">Running command 'kill 11230 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:11.504" endtime="20210730 15:38:11.507"/>
</kw>
<status status="PASS" starttime="20210730 15:38:11.503" endtime="20210730 15:38:11.507"/>
</iter>
<iter>
<var name="${pid}">11232</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:11.513" level="INFO">Running command 'kill 11232 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:11.508" endtime="20210730 15:38:11.513"/>
</kw>
<status status="PASS" starttime="20210730 15:38:11.508" endtime="20210730 15:38:11.513"/>
</iter>
<status status="PASS" starttime="20210730 15:38:11.493" endtime="20210730 15:38:11.513"/>
</for>
<status status="PASS" starttime="20210730 15:38:11.492" endtime="20210730 15:38:11.513"/>
</branch>
<status status="PASS" starttime="20210730 15:38:11.492" endtime="20210730 15:38:11.513"/>
</if>
<status status="PASS" starttime="20210730 15:38:11.474" endtime="20210730 15:38:11.514"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
firstname as such:
{
"firstname": 'Helena Margaretha'
}
Then, each request should fail with the following response body:
{
"message": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:38:09.897" endtime="20210730 15:38:11.514">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t111" name="With Each Valid Token, Updating Last Name Of Each System User With '' Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:11.521" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:11.533" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:11.533" level="INFO">${pids} = 11262</msg>
<status status="PASS" starttime="20210730 15:38:11.516" endtime="20210730 15:38:11.533"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:11.534" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:11.534" endtime="20210730 15:38:11.534"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:11.535" level="INFO">${pids} = ['11262']</msg>
<status status="PASS" starttime="20210730 15:38:11.535" endtime="20210730 15:38:11.535"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11262</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:11.549" level="INFO">Running command 'kill 11262 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:11.536" endtime="20210730 15:38:11.550"/>
</kw>
<status status="PASS" starttime="20210730 15:38:11.536" endtime="20210730 15:38:11.550"/>
</iter>
<status status="PASS" starttime="20210730 15:38:11.536" endtime="20210730 15:38:11.550"/>
</for>
<status status="PASS" starttime="20210730 15:38:11.535" endtime="20210730 15:38:11.550"/>
</branch>
<status status="PASS" starttime="20210730 15:38:11.535" endtime="20210730 15:38:11.550"/>
</if>
<status status="PASS" starttime="20210730 15:38:11.516" endtime="20210730 15:38:11.550"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:11.552" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:11.551" endtime="20210730 15:38:11.552"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:11.553" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:11.552" endtime="20210730 15:38:11.553"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:11.554" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:11.553" endtime="20210730 15:38:11.554"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:11.554" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:11.554" endtime="20210730 15:38:11.554"/>
</kw>
<msg timestamp="20210730 15:38:11.554" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:11.552" endtime="20210730 15:38:11.554"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:11.558" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:11.554" endtime="20210730 15:38:11.559"/>
</kw>
<status status="PASS" starttime="20210730 15:38:11.551" endtime="20210730 15:38:11.560"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:38:11.562" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:38:11.561" endtime="20210730 15:38:11.567"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:38:13.068" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:38:11.567" endtime="20210730 15:38:13.068"/>
</kw>
<status status="PASS" starttime="20210730 15:38:11.560" endtime="20210730 15:38:13.069"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:13.071" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:13.071" endtime="20210730 15:38:13.071"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:13.071" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:13.071" endtime="20210730 15:38:13.072"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:13.072" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:13.072" endtime="20210730 15:38:13.072"/>
</kw>
<msg timestamp="20210730 15:38:13.072" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:13.070" endtime="20210730 15:38:13.072"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:38:13.073" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:38:13.072" endtime="20210730 15:38:13.073"/>
</kw>
<status status="PASS" starttime="20210730 15:38:13.069" endtime="20210730 15:38:13.073"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:38:13.074" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:38:13.074" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:38:13.074" endtime="20210730 15:38:13.075"/>
</kw>
<status status="PASS" starttime="20210730 15:38:13.073" endtime="20210730 15:38:13.075"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:38:13.075" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:38:13.075" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:38:13.075" endtime="20210730 15:38:13.075"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:38:13.076" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:38:13.076" endtime="20210730 15:38:13.076"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:13.077" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:13.076" endtime="20210730 15:38:13.077"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:13.077" endtime="20210730 15:38:13.078"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:13.078" endtime="20210730 15:38:13.078"/>
</kw>
<status status="PASS" starttime="20210730 15:38:13.076" endtime="20210730 15:38:13.078"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:13.079" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:13.079" endtime="20210730 15:38:13.079"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:13.079" endtime="20210730 15:38:13.080"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:13.080" endtime="20210730 15:38:13.080"/>
</kw>
<status status="PASS" starttime="20210730 15:38:13.078" endtime="20210730 15:38:13.080"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:13.081" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:13.080" endtime="20210730 15:38:13.081"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:13.081" endtime="20210730 15:38:13.082"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:13.082" endtime="20210730 15:38:13.082"/>
</kw>
<status status="PASS" starttime="20210730 15:38:13.080" endtime="20210730 15:38:13.082"/>
</iter>
<status status="PASS" starttime="20210730 15:38:13.076" endtime="20210730 15:38:13.082"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:38:13.082" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:38:13.082" endtime="20210730 15:38:13.082"/>
</kw>
<status status="PASS" starttime="20210730 15:38:13.075" endtime="20210730 15:38:13.083"/>
</kw>
<status status="PASS" starttime="20210730 15:38:11.515" endtime="20210730 15:38:13.083"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 15:38:13.085" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:13.083" endtime="20210730 15:38:13.085"/>
</kw>
<msg timestamp="20210730 15:38:13.086" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:13.083" endtime="20210730 15:38:13.086"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>last_name</arg>
<arg>An empty last name</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 15:38:13.086" endtime="20210730 15:38:13.087"/>
</kw>
<status status="PASS" starttime="20210730 15:38:13.086" endtime="20210730 15:38:13.087"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=lastname</arg>
<arg>field_data=${user_data}[last_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:13.088" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:38:13.088" endtime="20210730 15:38:13.088"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:13.089" level="INFO">${payload} = {'lastname': ''}</msg>
<status status="PASS" starttime="20210730 15:38:13.088" endtime="20210730 15:38:13.089"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:38:13.099" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:38:13.099" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:38:13.089" endtime="20210730 15:38:13.099"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 15:38:13.100" endtime="20210730 15:38:13.100"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${field_data}</arg>
<arg>${system_user}</arg>
<status status="NOT RUN" starttime="20210730 15:38:13.100" endtime="20210730 15:38:13.100"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:13.089" endtime="20210730 15:38:13.100"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:13.089" endtime="20210730 15:38:13.100"/>
</for>
<status status="FAIL" starttime="20210730 15:38:13.087" endtime="20210730 15:38:13.100"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:13.087" endtime="20210730 15:38:13.100"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:13.087" endtime="20210730 15:38:13.100"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:13.104" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:13.116" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:13.116" level="INFO">${pids} = 11285
11292
11295</msg>
<status status="PASS" starttime="20210730 15:38:13.101" endtime="20210730 15:38:13.116"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:13.117" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:13.117" endtime="20210730 15:38:13.117"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:13.118" level="INFO">${pids} = ['11285', '11292', '11295']</msg>
<status status="PASS" starttime="20210730 15:38:13.118" endtime="20210730 15:38:13.118"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11285</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:13.124" level="INFO">Running command 'kill 11285 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:13.119" endtime="20210730 15:38:13.124"/>
</kw>
<status status="PASS" starttime="20210730 15:38:13.119" endtime="20210730 15:38:13.125"/>
</iter>
<iter>
<var name="${pid}">11292</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:13.129" level="INFO">Running command 'kill 11292 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:13.125" endtime="20210730 15:38:13.131"/>
</kw>
<status status="PASS" starttime="20210730 15:38:13.125" endtime="20210730 15:38:13.131"/>
</iter>
<iter>
<var name="${pid}">11295</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:13.135" level="INFO">Running command 'kill 11295 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:13.132" endtime="20210730 15:38:13.136"/>
</kw>
<status status="PASS" starttime="20210730 15:38:13.131" endtime="20210730 15:38:13.136"/>
</iter>
<status status="PASS" starttime="20210730 15:38:13.118" endtime="20210730 15:38:13.136"/>
</for>
<status status="PASS" starttime="20210730 15:38:13.118" endtime="20210730 15:38:13.136"/>
</branch>
<status status="PASS" starttime="20210730 15:38:13.118" endtime="20210730 15:38:13.136"/>
</if>
<status status="PASS" starttime="20210730 15:38:13.100" endtime="20210730 15:38:13.136"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
lastname as such:
{
"lastname": ''
}
Then, each request should fail with the following response body:
{
"message": "Each last name must contain only characters from the set [a-zA-Z]. Last names must be seperated by a a single space. Last names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:38:11.514" endtime="20210730 15:38:13.136">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t112" name="With Each Valid Token, Updating Last Name Of Each System User With Cuzdan Results In Success">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:13.141" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:13.154" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:13.154" level="INFO">${pids} = 11324</msg>
<status status="PASS" starttime="20210730 15:38:13.138" endtime="20210730 15:38:13.154"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:13.155" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:13.154" endtime="20210730 15:38:13.155"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:13.155" level="INFO">${pids} = ['11324']</msg>
<status status="PASS" starttime="20210730 15:38:13.155" endtime="20210730 15:38:13.155"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11324</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:13.159" level="INFO">Running command 'kill 11324 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:13.156" endtime="20210730 15:38:13.159"/>
</kw>
<status status="PASS" starttime="20210730 15:38:13.156" endtime="20210730 15:38:13.160"/>
</iter>
<status status="PASS" starttime="20210730 15:38:13.155" endtime="20210730 15:38:13.160"/>
</for>
<status status="PASS" starttime="20210730 15:38:13.155" endtime="20210730 15:38:13.160"/>
</branch>
<status status="PASS" starttime="20210730 15:38:13.155" endtime="20210730 15:38:13.160"/>
</if>
<status status="PASS" starttime="20210730 15:38:13.138" endtime="20210730 15:38:13.160"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:13.161" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:13.161" endtime="20210730 15:38:13.161"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:13.162" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:13.162" endtime="20210730 15:38:13.162"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:13.162" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:13.162" endtime="20210730 15:38:13.162"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:13.163" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:13.162" endtime="20210730 15:38:13.163"/>
</kw>
<msg timestamp="20210730 15:38:13.163" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:13.161" endtime="20210730 15:38:13.163"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:13.177" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:13.163" endtime="20210730 15:38:13.179"/>
</kw>
<status status="PASS" starttime="20210730 15:38:13.160" endtime="20210730 15:38:13.180"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:38:13.181" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:38:13.180" endtime="20210730 15:38:13.185"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:38:14.690" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:38:13.186" endtime="20210730 15:38:14.691"/>
</kw>
<status status="PASS" starttime="20210730 15:38:13.180" endtime="20210730 15:38:14.691"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:14.692" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:14.692" endtime="20210730 15:38:14.692"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:14.692" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:14.692" endtime="20210730 15:38:14.692"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:14.693" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:14.693" endtime="20210730 15:38:14.693"/>
</kw>
<msg timestamp="20210730 15:38:14.693" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:14.691" endtime="20210730 15:38:14.693"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:38:14.694" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:38:14.693" endtime="20210730 15:38:14.694"/>
</kw>
<status status="PASS" starttime="20210730 15:38:14.691" endtime="20210730 15:38:14.694"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:38:14.695" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:38:14.695" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:38:14.694" endtime="20210730 15:38:14.695"/>
</kw>
<status status="PASS" starttime="20210730 15:38:14.694" endtime="20210730 15:38:14.695"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:38:14.696" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:38:14.696" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:38:14.695" endtime="20210730 15:38:14.696"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:38:14.696" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:38:14.696" endtime="20210730 15:38:14.696"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:14.697" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:14.696" endtime="20210730 15:38:14.697"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:14.697" endtime="20210730 15:38:14.698"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:14.698" endtime="20210730 15:38:14.699"/>
</kw>
<status status="PASS" starttime="20210730 15:38:14.696" endtime="20210730 15:38:14.699"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:14.699" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:14.699" endtime="20210730 15:38:14.699"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:14.699" endtime="20210730 15:38:14.700"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:14.700" endtime="20210730 15:38:14.700"/>
</kw>
<status status="PASS" starttime="20210730 15:38:14.699" endtime="20210730 15:38:14.700"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:14.701" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:14.700" endtime="20210730 15:38:14.701"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:14.701" endtime="20210730 15:38:14.701"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:14.702" endtime="20210730 15:38:14.702"/>
</kw>
<status status="PASS" starttime="20210730 15:38:14.700" endtime="20210730 15:38:14.702"/>
</iter>
<status status="PASS" starttime="20210730 15:38:14.696" endtime="20210730 15:38:14.702"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:38:14.702" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:38:14.702" endtime="20210730 15:38:14.702"/>
</kw>
<status status="PASS" starttime="20210730 15:38:14.695" endtime="20210730 15:38:14.703"/>
</kw>
<status status="PASS" starttime="20210730 15:38:13.137" endtime="20210730 15:38:14.703"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 15:38:14.706" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:14.703" endtime="20210730 15:38:14.706"/>
</kw>
<msg timestamp="20210730 15:38:14.706" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:14.703" endtime="20210730 15:38:14.706"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>last_name</arg>
<arg>A last name containing more than 2 characters</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 15:38:14.707" endtime="20210730 15:38:14.707"/>
</kw>
<status status="PASS" starttime="20210730 15:38:14.706" endtime="20210730 15:38:14.707"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=lastname</arg>
<arg>field_data=${user_data}[last_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:14.709" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:38:14.708" endtime="20210730 15:38:14.709"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:14.709" level="INFO">${payload} = {'lastname': 'Cuzdan'}</msg>
<status status="PASS" starttime="20210730 15:38:14.709" endtime="20210730 15:38:14.709"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:38:14.720" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:38:14.720" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:38:14.710" endtime="20210730 15:38:14.720"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 15:38:14.720" endtime="20210730 15:38:14.720"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${field_data}</arg>
<arg>${system_user}</arg>
<status status="NOT RUN" starttime="20210730 15:38:14.720" endtime="20210730 15:38:14.720"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:14.710" endtime="20210730 15:38:14.720"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:14.709" endtime="20210730 15:38:14.720"/>
</for>
<status status="FAIL" starttime="20210730 15:38:14.708" endtime="20210730 15:38:14.721"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:14.708" endtime="20210730 15:38:14.721"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:14.707" endtime="20210730 15:38:14.721"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:14.724" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:14.737" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:14.737" level="INFO">${pids} = 11347
11354
11356</msg>
<status status="PASS" starttime="20210730 15:38:14.721" endtime="20210730 15:38:14.737"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:14.738" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:14.737" endtime="20210730 15:38:14.738"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:14.739" level="INFO">${pids} = ['11347', '11354', '11356']</msg>
<status status="PASS" starttime="20210730 15:38:14.738" endtime="20210730 15:38:14.739"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11347</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:14.745" level="INFO">Running command 'kill 11347 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:14.739" endtime="20210730 15:38:14.746"/>
</kw>
<status status="PASS" starttime="20210730 15:38:14.739" endtime="20210730 15:38:14.746"/>
</iter>
<iter>
<var name="${pid}">11354</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:14.750" level="INFO">Running command 'kill 11354 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:14.747" endtime="20210730 15:38:14.751"/>
</kw>
<status status="PASS" starttime="20210730 15:38:14.747" endtime="20210730 15:38:14.751"/>
</iter>
<iter>
<var name="${pid}">11356</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:14.755" level="INFO">Running command 'kill 11356 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:14.751" endtime="20210730 15:38:14.756"/>
</kw>
<status status="PASS" starttime="20210730 15:38:14.751" endtime="20210730 15:38:14.756"/>
</iter>
<status status="PASS" starttime="20210730 15:38:14.739" endtime="20210730 15:38:14.756"/>
</for>
<status status="PASS" starttime="20210730 15:38:14.738" endtime="20210730 15:38:14.756"/>
</branch>
<status status="PASS" starttime="20210730 15:38:14.738" endtime="20210730 15:38:14.756"/>
</if>
<status status="PASS" starttime="20210730 15:38:14.721" endtime="20210730 15:38:14.757"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
lastname as such:
{
"lastname": 'Cuzdan'
}
Then, each request should succeed with the following response body:
{
"message": "Updated",
"status": "SUCCESS"
}
This test not only verifies message and status but also verifies that the &lt;username&gt;'s data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:38:13.137" endtime="20210730 15:38:14.757">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t113" name="With Each Valid Token, Updating Last Name Of Each System User With Cuzdan123!?. Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:14.766" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:14.777" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:14.777" level="INFO">${pids} = 11385</msg>
<status status="PASS" starttime="20210730 15:38:14.759" endtime="20210730 15:38:14.777"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:14.778" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:14.777" endtime="20210730 15:38:14.778"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:14.780" level="INFO">${pids} = ['11385']</msg>
<status status="PASS" starttime="20210730 15:38:14.779" endtime="20210730 15:38:14.780"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11385</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:14.793" level="INFO">Running command 'kill 11385 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:14.780" endtime="20210730 15:38:14.794"/>
</kw>
<status status="PASS" starttime="20210730 15:38:14.780" endtime="20210730 15:38:14.794"/>
</iter>
<status status="PASS" starttime="20210730 15:38:14.780" endtime="20210730 15:38:14.794"/>
</for>
<status status="PASS" starttime="20210730 15:38:14.778" endtime="20210730 15:38:14.794"/>
</branch>
<status status="PASS" starttime="20210730 15:38:14.778" endtime="20210730 15:38:14.794"/>
</if>
<status status="PASS" starttime="20210730 15:38:14.759" endtime="20210730 15:38:14.794"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:14.796" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:14.795" endtime="20210730 15:38:14.796"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:14.796" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:14.796" endtime="20210730 15:38:14.796"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:14.797" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:14.797" endtime="20210730 15:38:14.797"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:14.797" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:14.797" endtime="20210730 15:38:14.797"/>
</kw>
<msg timestamp="20210730 15:38:14.798" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:14.796" endtime="20210730 15:38:14.798"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:14.801" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:14.798" endtime="20210730 15:38:14.803"/>
</kw>
<status status="PASS" starttime="20210730 15:38:14.795" endtime="20210730 15:38:14.803"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:38:14.804" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:38:14.804" endtime="20210730 15:38:14.808"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:38:16.310" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:38:14.809" endtime="20210730 15:38:16.311"/>
</kw>
<status status="PASS" starttime="20210730 15:38:14.803" endtime="20210730 15:38:16.311"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:16.312" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:16.312" endtime="20210730 15:38:16.312"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:16.313" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:16.313" endtime="20210730 15:38:16.313"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:16.313" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:16.313" endtime="20210730 15:38:16.313"/>
</kw>
<msg timestamp="20210730 15:38:16.313" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:16.312" endtime="20210730 15:38:16.313"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:38:16.314" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:38:16.313" endtime="20210730 15:38:16.314"/>
</kw>
<status status="PASS" starttime="20210730 15:38:16.311" endtime="20210730 15:38:16.314"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:38:16.315" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:38:16.315" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:38:16.315" endtime="20210730 15:38:16.315"/>
</kw>
<status status="PASS" starttime="20210730 15:38:16.315" endtime="20210730 15:38:16.315"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:38:16.316" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:38:16.316" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:38:16.316" endtime="20210730 15:38:16.316"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:38:16.316" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:38:16.316" endtime="20210730 15:38:16.316"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:16.317" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:16.317" endtime="20210730 15:38:16.317"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:16.317" endtime="20210730 15:38:16.318"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:16.318" endtime="20210730 15:38:16.318"/>
</kw>
<status status="PASS" starttime="20210730 15:38:16.316" endtime="20210730 15:38:16.318"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:16.318" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:16.318" endtime="20210730 15:38:16.318"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:16.319" endtime="20210730 15:38:16.319"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:16.319" endtime="20210730 15:38:16.319"/>
</kw>
<status status="PASS" starttime="20210730 15:38:16.318" endtime="20210730 15:38:16.320"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:16.320" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:16.320" endtime="20210730 15:38:16.320"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:16.320" endtime="20210730 15:38:16.321"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:16.321" endtime="20210730 15:38:16.321"/>
</kw>
<status status="PASS" starttime="20210730 15:38:16.320" endtime="20210730 15:38:16.321"/>
</iter>
<status status="PASS" starttime="20210730 15:38:16.316" endtime="20210730 15:38:16.321"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:38:16.322" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:38:16.321" endtime="20210730 15:38:16.322"/>
</kw>
<status status="PASS" starttime="20210730 15:38:16.315" endtime="20210730 15:38:16.322"/>
</kw>
<status status="PASS" starttime="20210730 15:38:14.758" endtime="20210730 15:38:16.322"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 15:38:16.325" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:16.322" endtime="20210730 15:38:16.325"/>
</kw>
<msg timestamp="20210730 15:38:16.325" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:16.322" endtime="20210730 15:38:16.325"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>last_name</arg>
<arg>A last name containing numbers and non-alphanumeric characters</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 15:38:16.326" endtime="20210730 15:38:16.327"/>
</kw>
<status status="PASS" starttime="20210730 15:38:16.325" endtime="20210730 15:38:16.327"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=lastname</arg>
<arg>field_data=${user_data}[last_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:16.329" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:38:16.328" endtime="20210730 15:38:16.329"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:16.329" level="INFO">${payload} = {'lastname': 'Cuzdan123!?.'}</msg>
<status status="PASS" starttime="20210730 15:38:16.329" endtime="20210730 15:38:16.329"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:38:16.339" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:38:16.339" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:38:16.330" endtime="20210730 15:38:16.339"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 15:38:16.339" endtime="20210730 15:38:16.340"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${field_data}</arg>
<arg>${system_user}</arg>
<status status="NOT RUN" starttime="20210730 15:38:16.340" endtime="20210730 15:38:16.340"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:16.329" endtime="20210730 15:38:16.340"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:16.329" endtime="20210730 15:38:16.340"/>
</for>
<status status="FAIL" starttime="20210730 15:38:16.327" endtime="20210730 15:38:16.340"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:16.327" endtime="20210730 15:38:16.340"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:16.327" endtime="20210730 15:38:16.340"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:16.345" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:16.358" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:16.359" level="INFO">${pids} = 11408
11415
11417</msg>
<status status="PASS" starttime="20210730 15:38:16.341" endtime="20210730 15:38:16.359"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:16.359" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:16.359" endtime="20210730 15:38:16.359"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:16.360" level="INFO">${pids} = ['11408', '11415', '11417']</msg>
<status status="PASS" starttime="20210730 15:38:16.360" endtime="20210730 15:38:16.360"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11408</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:16.366" level="INFO">Running command 'kill 11408 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:16.361" endtime="20210730 15:38:16.367"/>
</kw>
<status status="PASS" starttime="20210730 15:38:16.361" endtime="20210730 15:38:16.367"/>
</iter>
<iter>
<var name="${pid}">11415</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:16.371" level="INFO">Running command 'kill 11415 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:16.368" endtime="20210730 15:38:16.373"/>
</kw>
<status status="PASS" starttime="20210730 15:38:16.367" endtime="20210730 15:38:16.373"/>
</iter>
<iter>
<var name="${pid}">11417</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:16.378" level="INFO">Running command 'kill 11417 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:16.374" endtime="20210730 15:38:16.379"/>
</kw>
<status status="PASS" starttime="20210730 15:38:16.374" endtime="20210730 15:38:16.379"/>
</iter>
<status status="PASS" starttime="20210730 15:38:16.360" endtime="20210730 15:38:16.379"/>
</for>
<status status="PASS" starttime="20210730 15:38:16.360" endtime="20210730 15:38:16.379"/>
</branch>
<status status="PASS" starttime="20210730 15:38:16.360" endtime="20210730 15:38:16.379"/>
</if>
<status status="PASS" starttime="20210730 15:38:16.340" endtime="20210730 15:38:16.379"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
lastname as such:
{
"lastname": 'Cuzdan123!?.'
}
Then, each request should fail with the following response body:
{
"message": "Each last name must contain only characters from the set [a-zA-Z]. Last names must be seperated by a a single space. Last names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:38:14.758" endtime="20210730 15:38:16.379">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t114" name="With Each Valid Token, Updating Last Name Of Each System User With Wi Results In Success">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:16.386" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:16.397" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:16.397" level="INFO">${pids} = 11446</msg>
<status status="PASS" starttime="20210730 15:38:16.383" endtime="20210730 15:38:16.397"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:16.398" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:16.397" endtime="20210730 15:38:16.398"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:16.400" level="INFO">${pids} = ['11446']</msg>
<status status="PASS" starttime="20210730 15:38:16.399" endtime="20210730 15:38:16.400"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11446</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:16.415" level="INFO">Running command 'kill 11446 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:16.400" endtime="20210730 15:38:16.416"/>
</kw>
<status status="PASS" starttime="20210730 15:38:16.400" endtime="20210730 15:38:16.416"/>
</iter>
<status status="PASS" starttime="20210730 15:38:16.400" endtime="20210730 15:38:16.416"/>
</for>
<status status="PASS" starttime="20210730 15:38:16.399" endtime="20210730 15:38:16.416"/>
</branch>
<status status="PASS" starttime="20210730 15:38:16.399" endtime="20210730 15:38:16.416"/>
</if>
<status status="PASS" starttime="20210730 15:38:16.382" endtime="20210730 15:38:16.416"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:16.418" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:16.417" endtime="20210730 15:38:16.418"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:16.418" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:16.418" endtime="20210730 15:38:16.418"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:16.419" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:16.419" endtime="20210730 15:38:16.419"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:16.419" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:16.419" endtime="20210730 15:38:16.419"/>
</kw>
<msg timestamp="20210730 15:38:16.419" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:16.418" endtime="20210730 15:38:16.419"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:16.423" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:16.420" endtime="20210730 15:38:16.425"/>
</kw>
<status status="PASS" starttime="20210730 15:38:16.416" endtime="20210730 15:38:16.425"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:38:16.427" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:38:16.426" endtime="20210730 15:38:16.433"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:38:17.943" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:38:16.433" endtime="20210730 15:38:17.943"/>
</kw>
<status status="PASS" starttime="20210730 15:38:16.425" endtime="20210730 15:38:17.943"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:17.945" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:17.944" endtime="20210730 15:38:17.945"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:17.945" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:17.945" endtime="20210730 15:38:17.945"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:17.946" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:17.946" endtime="20210730 15:38:17.946"/>
</kw>
<msg timestamp="20210730 15:38:17.946" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:17.944" endtime="20210730 15:38:17.946"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:38:17.947" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:38:17.946" endtime="20210730 15:38:17.947"/>
</kw>
<status status="PASS" starttime="20210730 15:38:17.944" endtime="20210730 15:38:17.947"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:38:17.948" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:38:17.948" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:38:17.948" endtime="20210730 15:38:17.948"/>
</kw>
<status status="PASS" starttime="20210730 15:38:17.947" endtime="20210730 15:38:17.948"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:38:17.949" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:38:17.949" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:38:17.949" endtime="20210730 15:38:17.949"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:38:17.949" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:38:17.949" endtime="20210730 15:38:17.949"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:17.950" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:17.949" endtime="20210730 15:38:17.950"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:17.950" endtime="20210730 15:38:17.951"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:17.951" endtime="20210730 15:38:17.951"/>
</kw>
<status status="PASS" starttime="20210730 15:38:17.949" endtime="20210730 15:38:17.951"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:17.951" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:17.951" endtime="20210730 15:38:17.952"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:17.952" endtime="20210730 15:38:17.952"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:17.952" endtime="20210730 15:38:17.953"/>
</kw>
<status status="PASS" starttime="20210730 15:38:17.951" endtime="20210730 15:38:17.953"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:17.953" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:17.953" endtime="20210730 15:38:17.953"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:17.953" endtime="20210730 15:38:17.954"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:17.954" endtime="20210730 15:38:17.954"/>
</kw>
<status status="PASS" starttime="20210730 15:38:17.953" endtime="20210730 15:38:17.954"/>
</iter>
<status status="PASS" starttime="20210730 15:38:17.949" endtime="20210730 15:38:17.954"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:38:17.955" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:38:17.954" endtime="20210730 15:38:17.955"/>
</kw>
<status status="PASS" starttime="20210730 15:38:17.948" endtime="20210730 15:38:17.955"/>
</kw>
<status status="PASS" starttime="20210730 15:38:16.381" endtime="20210730 15:38:17.955"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 15:38:17.958" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:17.955" endtime="20210730 15:38:17.958"/>
</kw>
<msg timestamp="20210730 15:38:17.958" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:17.955" endtime="20210730 15:38:17.958"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>last_name</arg>
<arg>2 character last name with only one word</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 15:38:17.959" endtime="20210730 15:38:17.959"/>
</kw>
<status status="PASS" starttime="20210730 15:38:17.958" endtime="20210730 15:38:17.959"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=lastname</arg>
<arg>field_data=${user_data}[last_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:17.960" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:38:17.960" endtime="20210730 15:38:17.960"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:17.961" level="INFO">${payload} = {'lastname': 'Wi'}</msg>
<status status="PASS" starttime="20210730 15:38:17.961" endtime="20210730 15:38:17.961"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:38:17.970" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:38:17.970" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:38:17.961" endtime="20210730 15:38:17.971"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 15:38:17.971" endtime="20210730 15:38:17.971"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${field_data}</arg>
<arg>${system_user}</arg>
<status status="NOT RUN" starttime="20210730 15:38:17.971" endtime="20210730 15:38:17.972"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:17.961" endtime="20210730 15:38:17.972"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:17.961" endtime="20210730 15:38:17.972"/>
</for>
<status status="FAIL" starttime="20210730 15:38:17.959" endtime="20210730 15:38:17.972"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:17.959" endtime="20210730 15:38:17.972"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:17.959" endtime="20210730 15:38:17.972"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:17.977" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:17.991" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:17.991" level="INFO">${pids} = 11469
11476
11480</msg>
<status status="PASS" starttime="20210730 15:38:17.973" endtime="20210730 15:38:17.991"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:17.992" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:17.992" endtime="20210730 15:38:17.992"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:17.993" level="INFO">${pids} = ['11469', '11476', '11480']</msg>
<status status="PASS" starttime="20210730 15:38:17.993" endtime="20210730 15:38:17.993"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11469</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:17.999" level="INFO">Running command 'kill 11469 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:17.995" endtime="20210730 15:38:17.999"/>
</kw>
<status status="PASS" starttime="20210730 15:38:17.993" endtime="20210730 15:38:17.999"/>
</iter>
<iter>
<var name="${pid}">11476</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:18.005" level="INFO">Running command 'kill 11476 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:18.000" endtime="20210730 15:38:18.005"/>
</kw>
<status status="PASS" starttime="20210730 15:38:18.000" endtime="20210730 15:38:18.005"/>
</iter>
<iter>
<var name="${pid}">11480</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:18.010" level="INFO">Running command 'kill 11480 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:18.006" endtime="20210730 15:38:18.011"/>
</kw>
<status status="PASS" starttime="20210730 15:38:18.006" endtime="20210730 15:38:18.012"/>
</iter>
<status status="PASS" starttime="20210730 15:38:17.993" endtime="20210730 15:38:18.012"/>
</for>
<status status="PASS" starttime="20210730 15:38:17.993" endtime="20210730 15:38:18.012"/>
</branch>
<status status="PASS" starttime="20210730 15:38:17.992" endtime="20210730 15:38:18.012"/>
</if>
<status status="PASS" starttime="20210730 15:38:17.972" endtime="20210730 15:38:18.012"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
lastname as such:
{
"lastname": 'Wi'
}
Then, each request should fail with the following response body:
{
"message": "Updated",
"status": "SUCCESS"
}
This test not only verifies message and status but also verifies that the &lt;username&gt;'s data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:38:16.380" endtime="20210730 15:38:18.012">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t115" name="With Each Valid Token, Updating Last Name Of Each System User With Wi Xi Results In Success">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:18.019" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:18.030" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:18.030" level="INFO">${pids} = 11509</msg>
<status status="PASS" starttime="20210730 15:38:18.016" endtime="20210730 15:38:18.031"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:18.032" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:18.031" endtime="20210730 15:38:18.032"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:18.033" level="INFO">${pids} = ['11509']</msg>
<status status="PASS" starttime="20210730 15:38:18.032" endtime="20210730 15:38:18.033"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11509</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:18.037" level="INFO">Running command 'kill 11509 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:18.033" endtime="20210730 15:38:18.037"/>
</kw>
<status status="PASS" starttime="20210730 15:38:18.033" endtime="20210730 15:38:18.037"/>
</iter>
<status status="PASS" starttime="20210730 15:38:18.033" endtime="20210730 15:38:18.037"/>
</for>
<status status="PASS" starttime="20210730 15:38:18.032" endtime="20210730 15:38:18.038"/>
</branch>
<status status="PASS" starttime="20210730 15:38:18.032" endtime="20210730 15:38:18.038"/>
</if>
<status status="PASS" starttime="20210730 15:38:18.015" endtime="20210730 15:38:18.038"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:18.039" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:18.039" endtime="20210730 15:38:18.039"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:18.039" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:18.039" endtime="20210730 15:38:18.040"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:18.040" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:18.040" endtime="20210730 15:38:18.040"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:18.040" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:18.040" endtime="20210730 15:38:18.040"/>
</kw>
<msg timestamp="20210730 15:38:18.041" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:18.039" endtime="20210730 15:38:18.041"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:18.046" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:18.041" endtime="20210730 15:38:18.049"/>
</kw>
<status status="PASS" starttime="20210730 15:38:18.038" endtime="20210730 15:38:18.049"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:38:18.051" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:38:18.050" endtime="20210730 15:38:18.057"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:38:19.559" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:38:18.058" endtime="20210730 15:38:19.559"/>
</kw>
<status status="PASS" starttime="20210730 15:38:18.050" endtime="20210730 15:38:19.559"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:19.560" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:19.560" endtime="20210730 15:38:19.560"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:19.561" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:19.561" endtime="20210730 15:38:19.561"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:19.561" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:19.561" endtime="20210730 15:38:19.561"/>
</kw>
<msg timestamp="20210730 15:38:19.561" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:19.560" endtime="20210730 15:38:19.561"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:38:19.562" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:38:19.562" endtime="20210730 15:38:19.562"/>
</kw>
<status status="PASS" starttime="20210730 15:38:19.559" endtime="20210730 15:38:19.562"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:38:19.563" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:38:19.563" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:38:19.563" endtime="20210730 15:38:19.563"/>
</kw>
<status status="PASS" starttime="20210730 15:38:19.562" endtime="20210730 15:38:19.563"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:38:19.564" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:38:19.564" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:38:19.564" endtime="20210730 15:38:19.564"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:38:19.564" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:38:19.564" endtime="20210730 15:38:19.565"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:19.565" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:19.565" endtime="20210730 15:38:19.565"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:19.565" endtime="20210730 15:38:19.566"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:19.566" endtime="20210730 15:38:19.566"/>
</kw>
<status status="PASS" starttime="20210730 15:38:19.565" endtime="20210730 15:38:19.566"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:19.567" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:19.567" endtime="20210730 15:38:19.567"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:19.567" endtime="20210730 15:38:19.568"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:19.568" endtime="20210730 15:38:19.568"/>
</kw>
<status status="PASS" starttime="20210730 15:38:19.566" endtime="20210730 15:38:19.568"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:19.568" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:19.568" endtime="20210730 15:38:19.568"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:19.568" endtime="20210730 15:38:19.569"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:19.569" endtime="20210730 15:38:19.569"/>
</kw>
<status status="PASS" starttime="20210730 15:38:19.568" endtime="20210730 15:38:19.569"/>
</iter>
<status status="PASS" starttime="20210730 15:38:19.565" endtime="20210730 15:38:19.570"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:38:19.570" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:38:19.570" endtime="20210730 15:38:19.570"/>
</kw>
<status status="PASS" starttime="20210730 15:38:19.563" endtime="20210730 15:38:19.570"/>
</kw>
<status status="PASS" starttime="20210730 15:38:18.015" endtime="20210730 15:38:19.570"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 15:38:19.573" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:19.571" endtime="20210730 15:38:19.573"/>
</kw>
<msg timestamp="20210730 15:38:19.573" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:19.570" endtime="20210730 15:38:19.574"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>last_name</arg>
<arg>2 characters last name with two words</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 15:38:19.574" endtime="20210730 15:38:19.575"/>
</kw>
<status status="PASS" starttime="20210730 15:38:19.574" endtime="20210730 15:38:19.575"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=lastname</arg>
<arg>field_data=${user_data}[last_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:19.576" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:38:19.576" endtime="20210730 15:38:19.576"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:19.577" level="INFO">${payload} = {'lastname': 'Wi Xi'}</msg>
<status status="PASS" starttime="20210730 15:38:19.576" endtime="20210730 15:38:19.577"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:38:19.587" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:38:19.588" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:38:19.578" endtime="20210730 15:38:19.588"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 15:38:19.588" endtime="20210730 15:38:19.588"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${field_data}</arg>
<arg>${system_user}</arg>
<status status="NOT RUN" starttime="20210730 15:38:19.588" endtime="20210730 15:38:19.588"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:19.578" endtime="20210730 15:38:19.588"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:19.577" endtime="20210730 15:38:19.588"/>
</for>
<status status="FAIL" starttime="20210730 15:38:19.575" endtime="20210730 15:38:19.588"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:19.575" endtime="20210730 15:38:19.588"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:19.575" endtime="20210730 15:38:19.588"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:19.592" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:19.606" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:19.606" level="INFO">${pids} = 11532
11539
11541</msg>
<status status="PASS" starttime="20210730 15:38:19.589" endtime="20210730 15:38:19.606"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:19.607" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:19.607" endtime="20210730 15:38:19.607"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:19.609" level="INFO">${pids} = ['11532', '11539', '11541']</msg>
<status status="PASS" starttime="20210730 15:38:19.608" endtime="20210730 15:38:19.609"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11532</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:19.614" level="INFO">Running command 'kill 11532 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:19.610" endtime="20210730 15:38:19.615"/>
</kw>
<status status="PASS" starttime="20210730 15:38:19.609" endtime="20210730 15:38:19.615"/>
</iter>
<iter>
<var name="${pid}">11539</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:19.619" level="INFO">Running command 'kill 11539 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:19.615" endtime="20210730 15:38:19.619"/>
</kw>
<status status="PASS" starttime="20210730 15:38:19.615" endtime="20210730 15:38:19.619"/>
</iter>
<iter>
<var name="${pid}">11541</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:19.623" level="INFO">Running command 'kill 11541 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:19.620" endtime="20210730 15:38:19.624"/>
</kw>
<status status="PASS" starttime="20210730 15:38:19.619" endtime="20210730 15:38:19.624"/>
</iter>
<status status="PASS" starttime="20210730 15:38:19.609" endtime="20210730 15:38:19.624"/>
</for>
<status status="PASS" starttime="20210730 15:38:19.608" endtime="20210730 15:38:19.624"/>
</branch>
<status status="PASS" starttime="20210730 15:38:19.607" endtime="20210730 15:38:19.624"/>
</if>
<status status="PASS" starttime="20210730 15:38:19.589" endtime="20210730 15:38:19.624"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
lastname as such:
{
"lastname": 'Wi Xi'
}
Then, each request should succeed with the following response body:
{
"message": "Updated",
"status": "SUCCESS"
}
This test not only verifies message and status but also verifies that the &lt;username&gt;'s data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:38:18.014" endtime="20210730 15:38:19.624">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t116" name="With Each Valid Token, Updating Last Name Of Each System User With W Xi Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:19.631" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:19.645" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:19.645" level="INFO">${pids} = 11570</msg>
<status status="PASS" starttime="20210730 15:38:19.626" endtime="20210730 15:38:19.645"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:19.647" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:19.646" endtime="20210730 15:38:19.647"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:19.647" level="INFO">${pids} = ['11570']</msg>
<status status="PASS" starttime="20210730 15:38:19.647" endtime="20210730 15:38:19.647"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11570</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:19.651" level="INFO">Running command 'kill 11570 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:19.648" endtime="20210730 15:38:19.663"/>
</kw>
<status status="PASS" starttime="20210730 15:38:19.647" endtime="20210730 15:38:19.663"/>
</iter>
<status status="PASS" starttime="20210730 15:38:19.647" endtime="20210730 15:38:19.663"/>
</for>
<status status="PASS" starttime="20210730 15:38:19.647" endtime="20210730 15:38:19.663"/>
</branch>
<status status="PASS" starttime="20210730 15:38:19.647" endtime="20210730 15:38:19.663"/>
</if>
<status status="PASS" starttime="20210730 15:38:19.626" endtime="20210730 15:38:19.663"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:19.665" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:19.664" endtime="20210730 15:38:19.665"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:19.666" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:19.665" endtime="20210730 15:38:19.666"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:19.666" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:19.666" endtime="20210730 15:38:19.666"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:19.667" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:19.667" endtime="20210730 15:38:19.667"/>
</kw>
<msg timestamp="20210730 15:38:19.667" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:19.665" endtime="20210730 15:38:19.667"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:19.671" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:19.667" endtime="20210730 15:38:19.672"/>
</kw>
<status status="PASS" starttime="20210730 15:38:19.664" endtime="20210730 15:38:19.673"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:38:19.674" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:38:19.673" endtime="20210730 15:38:19.679"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:38:21.183" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:38:19.680" endtime="20210730 15:38:21.183"/>
</kw>
<status status="PASS" starttime="20210730 15:38:19.673" endtime="20210730 15:38:21.184"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:21.185" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:21.185" endtime="20210730 15:38:21.185"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:21.185" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:21.185" endtime="20210730 15:38:21.185"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:21.186" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:21.185" endtime="20210730 15:38:21.186"/>
</kw>
<msg timestamp="20210730 15:38:21.186" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:21.184" endtime="20210730 15:38:21.186"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:38:21.186" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:38:21.186" endtime="20210730 15:38:21.187"/>
</kw>
<status status="PASS" starttime="20210730 15:38:21.184" endtime="20210730 15:38:21.187"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:38:21.187" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:38:21.187" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:38:21.187" endtime="20210730 15:38:21.188"/>
</kw>
<status status="PASS" starttime="20210730 15:38:21.187" endtime="20210730 15:38:21.188"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:38:21.188" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:38:21.188" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:38:21.188" endtime="20210730 15:38:21.188"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:38:21.189" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:38:21.188" endtime="20210730 15:38:21.189"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:21.189" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:21.189" endtime="20210730 15:38:21.189"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:21.189" endtime="20210730 15:38:21.190"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:21.190" endtime="20210730 15:38:21.191"/>
</kw>
<status status="PASS" starttime="20210730 15:38:21.189" endtime="20210730 15:38:21.191"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:21.191" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:21.191" endtime="20210730 15:38:21.191"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:21.191" endtime="20210730 15:38:21.192"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:21.192" endtime="20210730 15:38:21.192"/>
</kw>
<status status="PASS" starttime="20210730 15:38:21.191" endtime="20210730 15:38:21.192"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:21.193" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:21.193" endtime="20210730 15:38:21.193"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:21.193" endtime="20210730 15:38:21.194"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:21.194" endtime="20210730 15:38:21.194"/>
</kw>
<status status="PASS" starttime="20210730 15:38:21.192" endtime="20210730 15:38:21.194"/>
</iter>
<status status="PASS" starttime="20210730 15:38:21.189" endtime="20210730 15:38:21.194"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:38:21.195" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:38:21.194" endtime="20210730 15:38:21.195"/>
</kw>
<status status="PASS" starttime="20210730 15:38:21.188" endtime="20210730 15:38:21.195"/>
</kw>
<status status="PASS" starttime="20210730 15:38:19.626" endtime="20210730 15:38:21.195"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 15:38:21.198" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:21.195" endtime="20210730 15:38:21.198"/>
</kw>
<msg timestamp="20210730 15:38:21.198" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:21.195" endtime="20210730 15:38:21.198"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>last_name</arg>
<arg>The first last name is invalid with only 1 letter, the second last name is valid</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 15:38:21.199" endtime="20210730 15:38:21.200"/>
</kw>
<status status="PASS" starttime="20210730 15:38:21.199" endtime="20210730 15:38:21.200"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=lastname</arg>
<arg>field_data=${user_data}[last_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:21.201" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:38:21.201" endtime="20210730 15:38:21.201"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:21.202" level="INFO">${payload} = {'lastname': 'W Xi'}</msg>
<status status="PASS" starttime="20210730 15:38:21.201" endtime="20210730 15:38:21.202"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:38:21.213" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:38:21.213" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:38:21.202" endtime="20210730 15:38:21.213"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 15:38:21.214" endtime="20210730 15:38:21.214"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${field_data}</arg>
<arg>${system_user}</arg>
<status status="NOT RUN" starttime="20210730 15:38:21.214" endtime="20210730 15:38:21.214"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:21.202" endtime="20210730 15:38:21.214"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:21.202" endtime="20210730 15:38:21.214"/>
</for>
<status status="FAIL" starttime="20210730 15:38:21.200" endtime="20210730 15:38:21.214"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:21.200" endtime="20210730 15:38:21.214"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:21.200" endtime="20210730 15:38:21.214"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:21.219" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:21.236" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:21.236" level="INFO">${pids} = 11593
11600
11602</msg>
<status status="PASS" starttime="20210730 15:38:21.215" endtime="20210730 15:38:21.236"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:21.237" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:21.236" endtime="20210730 15:38:21.237"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:21.237" level="INFO">${pids} = ['11593', '11600', '11602']</msg>
<status status="PASS" starttime="20210730 15:38:21.237" endtime="20210730 15:38:21.237"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11593</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:21.242" level="INFO">Running command 'kill 11593 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:21.238" endtime="20210730 15:38:21.243"/>
</kw>
<status status="PASS" starttime="20210730 15:38:21.238" endtime="20210730 15:38:21.243"/>
</iter>
<iter>
<var name="${pid}">11600</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:21.249" level="INFO">Running command 'kill 11600 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:21.244" endtime="20210730 15:38:21.249"/>
</kw>
<status status="PASS" starttime="20210730 15:38:21.244" endtime="20210730 15:38:21.249"/>
</iter>
<iter>
<var name="${pid}">11602</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:21.253" level="INFO">Running command 'kill 11602 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:21.250" endtime="20210730 15:38:21.254"/>
</kw>
<status status="PASS" starttime="20210730 15:38:21.250" endtime="20210730 15:38:21.254"/>
</iter>
<status status="PASS" starttime="20210730 15:38:21.237" endtime="20210730 15:38:21.254"/>
</for>
<status status="PASS" starttime="20210730 15:38:21.237" endtime="20210730 15:38:21.254"/>
</branch>
<status status="PASS" starttime="20210730 15:38:21.237" endtime="20210730 15:38:21.254"/>
</if>
<status status="PASS" starttime="20210730 15:38:21.215" endtime="20210730 15:38:21.254"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
lastname as such:
{
"lastname": 'W Xi'
}
Then, each request should fail with the following response body:
{
"message": "Each last name must contain only characters from the set [a-zA-Z]. Last names must be seperated by a a single space. Last names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:38:19.625" endtime="20210730 15:38:21.254">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t117" name="With Each Valid Token, Updating Last Name Of Each System User With Wi X Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:21.259" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:21.272" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:21.272" level="INFO">${pids} = 11631</msg>
<status status="PASS" starttime="20210730 15:38:21.256" endtime="20210730 15:38:21.272"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:21.273" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:21.272" endtime="20210730 15:38:21.273"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:21.274" level="INFO">${pids} = ['11631']</msg>
<status status="PASS" starttime="20210730 15:38:21.273" endtime="20210730 15:38:21.274"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11631</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:21.279" level="INFO">Running command 'kill 11631 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:21.275" endtime="20210730 15:38:21.280"/>
</kw>
<status status="PASS" starttime="20210730 15:38:21.275" endtime="20210730 15:38:21.280"/>
</iter>
<status status="PASS" starttime="20210730 15:38:21.275" endtime="20210730 15:38:21.280"/>
</for>
<status status="PASS" starttime="20210730 15:38:21.273" endtime="20210730 15:38:21.280"/>
</branch>
<status status="PASS" starttime="20210730 15:38:21.273" endtime="20210730 15:38:21.280"/>
</if>
<status status="PASS" starttime="20210730 15:38:21.256" endtime="20210730 15:38:21.280"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:21.282" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:21.281" endtime="20210730 15:38:21.282"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:21.283" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:21.282" endtime="20210730 15:38:21.283"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:21.283" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:21.283" endtime="20210730 15:38:21.283"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:21.284" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:21.283" endtime="20210730 15:38:21.284"/>
</kw>
<msg timestamp="20210730 15:38:21.284" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:21.282" endtime="20210730 15:38:21.284"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:21.288" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:21.284" endtime="20210730 15:38:21.290"/>
</kw>
<status status="PASS" starttime="20210730 15:38:21.281" endtime="20210730 15:38:21.290"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:38:21.292" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:38:21.291" endtime="20210730 15:38:21.296"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:38:22.798" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:38:21.296" endtime="20210730 15:38:22.798"/>
</kw>
<status status="PASS" starttime="20210730 15:38:21.291" endtime="20210730 15:38:22.800"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:22.804" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:22.803" endtime="20210730 15:38:22.804"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:22.805" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:22.805" endtime="20210730 15:38:22.805"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:22.806" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:22.806" endtime="20210730 15:38:22.806"/>
</kw>
<msg timestamp="20210730 15:38:22.807" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:22.802" endtime="20210730 15:38:22.807"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:38:22.808" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:38:22.807" endtime="20210730 15:38:22.809"/>
</kw>
<status status="PASS" starttime="20210730 15:38:22.800" endtime="20210730 15:38:22.809"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:38:22.810" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:38:22.810" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:38:22.810" endtime="20210730 15:38:22.811"/>
</kw>
<status status="PASS" starttime="20210730 15:38:22.809" endtime="20210730 15:38:22.811"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:38:22.812" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:38:22.812" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:38:22.811" endtime="20210730 15:38:22.812"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:38:22.812" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:38:22.812" endtime="20210730 15:38:22.812"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:22.813" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:22.812" endtime="20210730 15:38:22.813"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:22.813" endtime="20210730 15:38:22.814"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:22.814" endtime="20210730 15:38:22.814"/>
</kw>
<status status="PASS" starttime="20210730 15:38:22.812" endtime="20210730 15:38:22.814"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:22.814" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:22.814" endtime="20210730 15:38:22.814"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:22.815" endtime="20210730 15:38:22.815"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:22.815" endtime="20210730 15:38:22.816"/>
</kw>
<status status="PASS" starttime="20210730 15:38:22.814" endtime="20210730 15:38:22.816"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:22.816" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:22.816" endtime="20210730 15:38:22.816"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:22.816" endtime="20210730 15:38:22.817"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:22.817" endtime="20210730 15:38:22.817"/>
</kw>
<status status="PASS" starttime="20210730 15:38:22.816" endtime="20210730 15:38:22.817"/>
</iter>
<status status="PASS" starttime="20210730 15:38:22.812" endtime="20210730 15:38:22.817"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:38:22.818" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:38:22.817" endtime="20210730 15:38:22.818"/>
</kw>
<status status="PASS" starttime="20210730 15:38:22.811" endtime="20210730 15:38:22.818"/>
</kw>
<status status="PASS" starttime="20210730 15:38:21.256" endtime="20210730 15:38:22.818"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 15:38:22.820" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:22.818" endtime="20210730 15:38:22.820"/>
</kw>
<msg timestamp="20210730 15:38:22.821" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:22.818" endtime="20210730 15:38:22.821"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>last_name</arg>
<arg>The second last name is invalid with only 1 letter, the first last name is valid</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 15:38:22.821" endtime="20210730 15:38:22.822"/>
</kw>
<status status="PASS" starttime="20210730 15:38:22.821" endtime="20210730 15:38:22.822"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=lastname</arg>
<arg>field_data=${user_data}[last_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:22.823" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:38:22.823" endtime="20210730 15:38:22.823"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:22.824" level="INFO">${payload} = {'lastname': 'Wi X'}</msg>
<status status="PASS" starttime="20210730 15:38:22.823" endtime="20210730 15:38:22.824"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:38:22.833" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:38:22.833" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:38:22.824" endtime="20210730 15:38:22.833"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 15:38:22.834" endtime="20210730 15:38:22.834"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${field_data}</arg>
<arg>${system_user}</arg>
<status status="NOT RUN" starttime="20210730 15:38:22.834" endtime="20210730 15:38:22.834"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:22.824" endtime="20210730 15:38:22.834"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:22.824" endtime="20210730 15:38:22.834"/>
</for>
<status status="FAIL" starttime="20210730 15:38:22.822" endtime="20210730 15:38:22.834"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:22.822" endtime="20210730 15:38:22.834"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:22.822" endtime="20210730 15:38:22.834"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:22.838" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:22.856" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:22.857" level="INFO">${pids} = 11654
11661
11666</msg>
<status status="PASS" starttime="20210730 15:38:22.835" endtime="20210730 15:38:22.857"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:22.858" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:22.857" endtime="20210730 15:38:22.858"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:22.861" level="INFO">${pids} = ['11654', '11661', '11666']</msg>
<status status="PASS" starttime="20210730 15:38:22.860" endtime="20210730 15:38:22.861"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11654</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:22.865" level="INFO">Running command 'kill 11654 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:22.861" endtime="20210730 15:38:22.866"/>
</kw>
<status status="PASS" starttime="20210730 15:38:22.861" endtime="20210730 15:38:22.866"/>
</iter>
<iter>
<var name="${pid}">11661</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:22.872" level="INFO">Running command 'kill 11661 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:22.867" endtime="20210730 15:38:22.873"/>
</kw>
<status status="PASS" starttime="20210730 15:38:22.866" endtime="20210730 15:38:22.873"/>
</iter>
<iter>
<var name="${pid}">11666</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:22.877" level="INFO">Running command 'kill 11666 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:22.873" endtime="20210730 15:38:22.878"/>
</kw>
<status status="PASS" starttime="20210730 15:38:22.873" endtime="20210730 15:38:22.878"/>
</iter>
<status status="PASS" starttime="20210730 15:38:22.861" endtime="20210730 15:38:22.878"/>
</for>
<status status="PASS" starttime="20210730 15:38:22.860" endtime="20210730 15:38:22.878"/>
</branch>
<status status="PASS" starttime="20210730 15:38:22.858" endtime="20210730 15:38:22.878"/>
</if>
<status status="PASS" starttime="20210730 15:38:22.835" endtime="20210730 15:38:22.879"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
lastname as such:
{
"lastname": 'Wi X'
}
Then, each request should fail with the following response body:
{
"message": "Each last name must contain only characters from the set [a-zA-Z]. Last names must be seperated by a a single space. Last names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:38:21.255" endtime="20210730 15:38:22.879">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t118" name="With Each Valid Token, Updating Last Name Of Each System User With W X Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:22.884" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:22.896" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:22.896" level="INFO">${pids} = 11695</msg>
<status status="PASS" starttime="20210730 15:38:22.881" endtime="20210730 15:38:22.896"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:22.897" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:22.896" endtime="20210730 15:38:22.897"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:22.899" level="INFO">${pids} = ['11695']</msg>
<status status="PASS" starttime="20210730 15:38:22.897" endtime="20210730 15:38:22.899"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11695</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:22.904" level="INFO">Running command 'kill 11695 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:22.900" endtime="20210730 15:38:22.904"/>
</kw>
<status status="PASS" starttime="20210730 15:38:22.900" endtime="20210730 15:38:22.905"/>
</iter>
<status status="PASS" starttime="20210730 15:38:22.899" endtime="20210730 15:38:22.905"/>
</for>
<status status="PASS" starttime="20210730 15:38:22.897" endtime="20210730 15:38:22.905"/>
</branch>
<status status="PASS" starttime="20210730 15:38:22.897" endtime="20210730 15:38:22.905"/>
</if>
<status status="PASS" starttime="20210730 15:38:22.881" endtime="20210730 15:38:22.905"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:22.906" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:22.906" endtime="20210730 15:38:22.906"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:22.907" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:22.907" endtime="20210730 15:38:22.907"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:22.907" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:22.907" endtime="20210730 15:38:22.907"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:22.908" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:22.907" endtime="20210730 15:38:22.908"/>
</kw>
<msg timestamp="20210730 15:38:22.908" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:22.906" endtime="20210730 15:38:22.908"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:22.914" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:22.908" endtime="20210730 15:38:22.918"/>
</kw>
<status status="PASS" starttime="20210730 15:38:22.905" endtime="20210730 15:38:22.918"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:38:22.920" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:38:22.919" endtime="20210730 15:38:22.924"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:38:24.428" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:38:22.925" endtime="20210730 15:38:24.429"/>
</kw>
<status status="PASS" starttime="20210730 15:38:22.919" endtime="20210730 15:38:24.429"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:24.430" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:24.430" endtime="20210730 15:38:24.430"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:24.430" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:24.430" endtime="20210730 15:38:24.430"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:24.431" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:24.430" endtime="20210730 15:38:24.431"/>
</kw>
<msg timestamp="20210730 15:38:24.431" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:24.429" endtime="20210730 15:38:24.431"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:38:24.431" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:38:24.431" endtime="20210730 15:38:24.432"/>
</kw>
<status status="PASS" starttime="20210730 15:38:24.429" endtime="20210730 15:38:24.432"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:38:24.432" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:38:24.432" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:38:24.432" endtime="20210730 15:38:24.432"/>
</kw>
<status status="PASS" starttime="20210730 15:38:24.432" endtime="20210730 15:38:24.433"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:38:24.433" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:38:24.434" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:38:24.433" endtime="20210730 15:38:24.434"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:38:24.434" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:38:24.434" endtime="20210730 15:38:24.434"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:24.435" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:24.434" endtime="20210730 15:38:24.435"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:24.435" endtime="20210730 15:38:24.436"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:24.436" endtime="20210730 15:38:24.436"/>
</kw>
<status status="PASS" starttime="20210730 15:38:24.434" endtime="20210730 15:38:24.436"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:24.436" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:24.436" endtime="20210730 15:38:24.436"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:24.436" endtime="20210730 15:38:24.437"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:24.437" endtime="20210730 15:38:24.438"/>
</kw>
<status status="PASS" starttime="20210730 15:38:24.436" endtime="20210730 15:38:24.438"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:24.438" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:24.438" endtime="20210730 15:38:24.438"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:24.438" endtime="20210730 15:38:24.439"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:24.439" endtime="20210730 15:38:24.439"/>
</kw>
<status status="PASS" starttime="20210730 15:38:24.438" endtime="20210730 15:38:24.439"/>
</iter>
<status status="PASS" starttime="20210730 15:38:24.434" endtime="20210730 15:38:24.439"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:38:24.440" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:38:24.439" endtime="20210730 15:38:24.440"/>
</kw>
<status status="PASS" starttime="20210730 15:38:24.433" endtime="20210730 15:38:24.440"/>
</kw>
<status status="PASS" starttime="20210730 15:38:22.880" endtime="20210730 15:38:24.440"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 15:38:24.443" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:24.440" endtime="20210730 15:38:24.443"/>
</kw>
<msg timestamp="20210730 15:38:24.444" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:24.440" endtime="20210730 15:38:24.444"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>last_name</arg>
<arg>The both last names are invalid because they only have 1 letter</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 15:38:24.445" endtime="20210730 15:38:24.445"/>
</kw>
<status status="PASS" starttime="20210730 15:38:24.444" endtime="20210730 15:38:24.445"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=lastname</arg>
<arg>field_data=${user_data}[last_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:24.447" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:38:24.447" endtime="20210730 15:38:24.447"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:24.448" level="INFO">${payload} = {'lastname': 'W X'}</msg>
<status status="PASS" starttime="20210730 15:38:24.447" endtime="20210730 15:38:24.448"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:38:24.457" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:38:24.457" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:38:24.448" endtime="20210730 15:38:24.457"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 15:38:24.458" endtime="20210730 15:38:24.458"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${field_data}</arg>
<arg>${system_user}</arg>
<status status="NOT RUN" starttime="20210730 15:38:24.458" endtime="20210730 15:38:24.458"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:24.448" endtime="20210730 15:38:24.458"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:24.448" endtime="20210730 15:38:24.458"/>
</for>
<status status="FAIL" starttime="20210730 15:38:24.446" endtime="20210730 15:38:24.458"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:24.446" endtime="20210730 15:38:24.458"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:24.445" endtime="20210730 15:38:24.458"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:24.463" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:24.485" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:24.485" level="INFO">${pids} = 11718
11725
11727</msg>
<status status="PASS" starttime="20210730 15:38:24.459" endtime="20210730 15:38:24.485"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:24.486" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:24.485" endtime="20210730 15:38:24.486"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:24.487" level="INFO">${pids} = ['11718', '11725', '11727']</msg>
<status status="PASS" starttime="20210730 15:38:24.486" endtime="20210730 15:38:24.487"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11718</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:24.491" level="INFO">Running command 'kill 11718 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:24.487" endtime="20210730 15:38:24.491"/>
</kw>
<status status="PASS" starttime="20210730 15:38:24.487" endtime="20210730 15:38:24.491"/>
</iter>
<iter>
<var name="${pid}">11725</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:24.495" level="INFO">Running command 'kill 11725 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:24.492" endtime="20210730 15:38:24.497"/>
</kw>
<status status="PASS" starttime="20210730 15:38:24.491" endtime="20210730 15:38:24.498"/>
</iter>
<iter>
<var name="${pid}">11727</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:24.502" level="INFO">Running command 'kill 11727 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:24.498" endtime="20210730 15:38:24.503"/>
</kw>
<status status="PASS" starttime="20210730 15:38:24.498" endtime="20210730 15:38:24.503"/>
</iter>
<status status="PASS" starttime="20210730 15:38:24.487" endtime="20210730 15:38:24.503"/>
</for>
<status status="PASS" starttime="20210730 15:38:24.486" endtime="20210730 15:38:24.503"/>
</branch>
<status status="PASS" starttime="20210730 15:38:24.486" endtime="20210730 15:38:24.503"/>
</if>
<status status="PASS" starttime="20210730 15:38:24.459" endtime="20210730 15:38:24.503"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
lastname as such:
{
"lastname": 'W X'
}
Then, each request should fail with the following response body:
{
"message": "Each last name must contain only characters from the set [a-zA-Z]. Last names must be seperated by a a single space. Last names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:38:22.879" endtime="20210730 15:38:24.503">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t119" name="With Each Valid Token, Updating Last Name Of Each System User With Holm123 Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:24.508" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:24.522" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:24.523" level="INFO">${pids} = 11756</msg>
<status status="PASS" starttime="20210730 15:38:24.505" endtime="20210730 15:38:24.523"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:24.524" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:24.523" endtime="20210730 15:38:24.524"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:24.524" level="INFO">${pids} = ['11756']</msg>
<status status="PASS" starttime="20210730 15:38:24.524" endtime="20210730 15:38:24.524"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11756</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:24.528" level="INFO">Running command 'kill 11756 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:24.525" endtime="20210730 15:38:24.533"/>
</kw>
<status status="PASS" starttime="20210730 15:38:24.525" endtime="20210730 15:38:24.533"/>
</iter>
<status status="PASS" starttime="20210730 15:38:24.524" endtime="20210730 15:38:24.533"/>
</for>
<status status="PASS" starttime="20210730 15:38:24.524" endtime="20210730 15:38:24.533"/>
</branch>
<status status="PASS" starttime="20210730 15:38:24.524" endtime="20210730 15:38:24.533"/>
</if>
<status status="PASS" starttime="20210730 15:38:24.505" endtime="20210730 15:38:24.533"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:24.535" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:24.534" endtime="20210730 15:38:24.535"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:24.536" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:24.535" endtime="20210730 15:38:24.536"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:24.536" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:24.536" endtime="20210730 15:38:24.536"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:24.537" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:24.536" endtime="20210730 15:38:24.537"/>
</kw>
<msg timestamp="20210730 15:38:24.537" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:24.535" endtime="20210730 15:38:24.537"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:24.540" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:24.537" endtime="20210730 15:38:24.542"/>
</kw>
<status status="PASS" starttime="20210730 15:38:24.534" endtime="20210730 15:38:24.542"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:38:24.544" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:38:24.543" endtime="20210730 15:38:24.550"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:38:26.061" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:38:24.550" endtime="20210730 15:38:26.061"/>
</kw>
<status status="PASS" starttime="20210730 15:38:24.543" endtime="20210730 15:38:26.062"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:26.068" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:26.067" endtime="20210730 15:38:26.068"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:26.069" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:26.068" endtime="20210730 15:38:26.069"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:26.070" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:26.069" endtime="20210730 15:38:26.070"/>
</kw>
<msg timestamp="20210730 15:38:26.070" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:26.065" endtime="20210730 15:38:26.070"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:38:26.071" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:38:26.071" endtime="20210730 15:38:26.072"/>
</kw>
<status status="PASS" starttime="20210730 15:38:26.063" endtime="20210730 15:38:26.073"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:38:26.076" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:38:26.076" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:38:26.074" endtime="20210730 15:38:26.076"/>
</kw>
<status status="PASS" starttime="20210730 15:38:26.073" endtime="20210730 15:38:26.077"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:38:26.078" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:38:26.079" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:38:26.078" endtime="20210730 15:38:26.079"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:38:26.079" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:38:26.079" endtime="20210730 15:38:26.079"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:26.080" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:26.080" endtime="20210730 15:38:26.080"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:26.080" endtime="20210730 15:38:26.082"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:26.082" endtime="20210730 15:38:26.082"/>
</kw>
<status status="PASS" starttime="20210730 15:38:26.079" endtime="20210730 15:38:26.082"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:26.083" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:26.082" endtime="20210730 15:38:26.083"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:26.083" endtime="20210730 15:38:26.084"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:26.084" endtime="20210730 15:38:26.084"/>
</kw>
<status status="PASS" starttime="20210730 15:38:26.082" endtime="20210730 15:38:26.084"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:26.085" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:26.084" endtime="20210730 15:38:26.085"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:26.085" endtime="20210730 15:38:26.086"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:26.086" endtime="20210730 15:38:26.086"/>
</kw>
<status status="PASS" starttime="20210730 15:38:26.084" endtime="20210730 15:38:26.086"/>
</iter>
<status status="PASS" starttime="20210730 15:38:26.079" endtime="20210730 15:38:26.086"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:38:26.087" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:38:26.086" endtime="20210730 15:38:26.087"/>
</kw>
<status status="PASS" starttime="20210730 15:38:26.077" endtime="20210730 15:38:26.087"/>
</kw>
<status status="PASS" starttime="20210730 15:38:24.505" endtime="20210730 15:38:26.087"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 15:38:26.090" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:26.088" endtime="20210730 15:38:26.090"/>
</kw>
<msg timestamp="20210730 15:38:26.091" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:26.087" endtime="20210730 15:38:26.091"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>last_name</arg>
<arg>Last name does contain numbers, which makes it invalid</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 15:38:26.091" endtime="20210730 15:38:26.092"/>
</kw>
<status status="PASS" starttime="20210730 15:38:26.091" endtime="20210730 15:38:26.092"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=lastname</arg>
<arg>field_data=${user_data}[last_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:26.093" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:38:26.093" endtime="20210730 15:38:26.093"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:26.094" level="INFO">${payload} = {'lastname': 'Holm123'}</msg>
<status status="PASS" starttime="20210730 15:38:26.093" endtime="20210730 15:38:26.094"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:38:26.103" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:38:26.103" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:38:26.094" endtime="20210730 15:38:26.103"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 15:38:26.103" endtime="20210730 15:38:26.104"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${field_data}</arg>
<arg>${system_user}</arg>
<status status="NOT RUN" starttime="20210730 15:38:26.104" endtime="20210730 15:38:26.104"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:26.094" endtime="20210730 15:38:26.104"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:26.094" endtime="20210730 15:38:26.104"/>
</for>
<status status="FAIL" starttime="20210730 15:38:26.092" endtime="20210730 15:38:26.104"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:26.092" endtime="20210730 15:38:26.104"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:26.092" endtime="20210730 15:38:26.104"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:26.109" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:26.122" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:26.122" level="INFO">${pids} = 11779
11786
11788</msg>
<status status="PASS" starttime="20210730 15:38:26.105" endtime="20210730 15:38:26.122"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:26.123" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:26.123" endtime="20210730 15:38:26.123"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:26.124" level="INFO">${pids} = ['11779', '11786', '11788']</msg>
<status status="PASS" starttime="20210730 15:38:26.124" endtime="20210730 15:38:26.124"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11779</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:26.129" level="INFO">Running command 'kill 11779 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:26.124" endtime="20210730 15:38:26.130"/>
</kw>
<status status="PASS" starttime="20210730 15:38:26.124" endtime="20210730 15:38:26.130"/>
</iter>
<iter>
<var name="${pid}">11786</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:26.134" level="INFO">Running command 'kill 11786 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:26.131" endtime="20210730 15:38:26.136"/>
</kw>
<status status="PASS" starttime="20210730 15:38:26.130" endtime="20210730 15:38:26.136"/>
</iter>
<iter>
<var name="${pid}">11788</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:26.140" level="INFO">Running command 'kill 11788 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:26.137" endtime="20210730 15:38:26.141"/>
</kw>
<status status="PASS" starttime="20210730 15:38:26.137" endtime="20210730 15:38:26.141"/>
</iter>
<status status="PASS" starttime="20210730 15:38:26.124" endtime="20210730 15:38:26.141"/>
</for>
<status status="PASS" starttime="20210730 15:38:26.123" endtime="20210730 15:38:26.141"/>
</branch>
<status status="PASS" starttime="20210730 15:38:26.123" endtime="20210730 15:38:26.141"/>
</if>
<status status="PASS" starttime="20210730 15:38:26.104" endtime="20210730 15:38:26.141"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
lastname as such:
{
"lastname": 'Holm123'
}
Then, each request should fail with the following response body:
{
"message": "Each last name must contain only characters from the set [a-zA-Z]. Last names must be seperated by a a single space. Last names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:38:24.504" endtime="20210730 15:38:26.141">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t120" name="With Each Valid Token, Updating Last Name Of Each System User With Holm!.? Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:26.151" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:26.162" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:26.162" level="INFO">${pids} = 11817</msg>
<status status="PASS" starttime="20210730 15:38:26.145" endtime="20210730 15:38:26.162"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:26.163" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:26.162" endtime="20210730 15:38:26.163"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:26.164" level="INFO">${pids} = ['11817']</msg>
<status status="PASS" starttime="20210730 15:38:26.163" endtime="20210730 15:38:26.164"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11817</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:26.180" level="INFO">Running command 'kill 11817 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:26.164" endtime="20210730 15:38:26.180"/>
</kw>
<status status="PASS" starttime="20210730 15:38:26.164" endtime="20210730 15:38:26.180"/>
</iter>
<status status="PASS" starttime="20210730 15:38:26.164" endtime="20210730 15:38:26.180"/>
</for>
<status status="PASS" starttime="20210730 15:38:26.163" endtime="20210730 15:38:26.180"/>
</branch>
<status status="PASS" starttime="20210730 15:38:26.163" endtime="20210730 15:38:26.180"/>
</if>
<status status="PASS" starttime="20210730 15:38:26.144" endtime="20210730 15:38:26.181"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:26.182" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:26.182" endtime="20210730 15:38:26.182"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:26.183" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:26.183" endtime="20210730 15:38:26.183"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:26.184" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:26.183" endtime="20210730 15:38:26.184"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:26.185" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:26.184" endtime="20210730 15:38:26.185"/>
</kw>
<msg timestamp="20210730 15:38:26.186" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:26.182" endtime="20210730 15:38:26.186"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:26.191" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:26.186" endtime="20210730 15:38:26.192"/>
</kw>
<status status="PASS" starttime="20210730 15:38:26.181" endtime="20210730 15:38:26.193"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:38:26.194" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:38:26.193" endtime="20210730 15:38:26.199"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:38:27.706" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:38:26.199" endtime="20210730 15:38:27.706"/>
</kw>
<status status="PASS" starttime="20210730 15:38:26.193" endtime="20210730 15:38:27.706"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:27.707" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:27.707" endtime="20210730 15:38:27.707"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:27.708" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:27.707" endtime="20210730 15:38:27.708"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:27.708" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:27.708" endtime="20210730 15:38:27.708"/>
</kw>
<msg timestamp="20210730 15:38:27.708" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:27.707" endtime="20210730 15:38:27.708"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:38:27.709" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:38:27.708" endtime="20210730 15:38:27.709"/>
</kw>
<status status="PASS" starttime="20210730 15:38:27.706" endtime="20210730 15:38:27.709"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:38:27.710" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:38:27.710" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:38:27.710" endtime="20210730 15:38:27.710"/>
</kw>
<status status="PASS" starttime="20210730 15:38:27.710" endtime="20210730 15:38:27.710"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:38:27.711" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:38:27.711" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:38:27.711" endtime="20210730 15:38:27.711"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:38:27.712" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:38:27.712" endtime="20210730 15:38:27.712"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:27.712" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:27.712" endtime="20210730 15:38:27.712"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:27.712" endtime="20210730 15:38:27.713"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:27.713" endtime="20210730 15:38:27.714"/>
</kw>
<status status="PASS" starttime="20210730 15:38:27.712" endtime="20210730 15:38:27.714"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:27.714" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:27.714" endtime="20210730 15:38:27.714"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:27.715" endtime="20210730 15:38:27.716"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:27.716" endtime="20210730 15:38:27.716"/>
</kw>
<status status="PASS" starttime="20210730 15:38:27.714" endtime="20210730 15:38:27.716"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:27.716" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:27.716" endtime="20210730 15:38:27.716"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:27.716" endtime="20210730 15:38:27.717"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:27.717" endtime="20210730 15:38:27.717"/>
</kw>
<status status="PASS" starttime="20210730 15:38:27.716" endtime="20210730 15:38:27.717"/>
</iter>
<status status="PASS" starttime="20210730 15:38:27.712" endtime="20210730 15:38:27.717"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:38:27.718" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:38:27.718" endtime="20210730 15:38:27.718"/>
</kw>
<status status="PASS" starttime="20210730 15:38:27.711" endtime="20210730 15:38:27.718"/>
</kw>
<status status="PASS" starttime="20210730 15:38:26.143" endtime="20210730 15:38:27.718"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 15:38:27.721" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:27.719" endtime="20210730 15:38:27.721"/>
</kw>
<msg timestamp="20210730 15:38:27.721" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:27.718" endtime="20210730 15:38:27.721"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>last_name</arg>
<arg>Last name does contain non alphanumeric characters, which makes it invalid</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 15:38:27.722" endtime="20210730 15:38:27.722"/>
</kw>
<status status="PASS" starttime="20210730 15:38:27.722" endtime="20210730 15:38:27.722"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=lastname</arg>
<arg>field_data=${user_data}[last_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:27.724" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:38:27.723" endtime="20210730 15:38:27.724"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:27.724" level="INFO">${payload} = {'lastname': 'Holm!.?'}</msg>
<status status="PASS" starttime="20210730 15:38:27.724" endtime="20210730 15:38:27.724"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:38:27.733" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:38:27.734" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:38:27.725" endtime="20210730 15:38:27.734"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 15:38:27.734" endtime="20210730 15:38:27.734"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${field_data}</arg>
<arg>${system_user}</arg>
<status status="NOT RUN" starttime="20210730 15:38:27.734" endtime="20210730 15:38:27.734"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:27.725" endtime="20210730 15:38:27.734"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:27.724" endtime="20210730 15:38:27.734"/>
</for>
<status status="FAIL" starttime="20210730 15:38:27.723" endtime="20210730 15:38:27.734"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:27.723" endtime="20210730 15:38:27.734"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:27.723" endtime="20210730 15:38:27.734"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:27.738" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:27.755" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:27.755" level="INFO">${pids} = 11840
11847
11850</msg>
<status status="PASS" starttime="20210730 15:38:27.735" endtime="20210730 15:38:27.755"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:27.756" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:27.755" endtime="20210730 15:38:27.756"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:27.756" level="INFO">${pids} = ['11840', '11847', '11850']</msg>
<status status="PASS" starttime="20210730 15:38:27.756" endtime="20210730 15:38:27.756"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11840</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:27.761" level="INFO">Running command 'kill 11840 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:27.757" endtime="20210730 15:38:27.762"/>
</kw>
<status status="PASS" starttime="20210730 15:38:27.757" endtime="20210730 15:38:27.762"/>
</iter>
<iter>
<var name="${pid}">11847</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:27.766" level="INFO">Running command 'kill 11847 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:27.763" endtime="20210730 15:38:27.768"/>
</kw>
<status status="PASS" starttime="20210730 15:38:27.762" endtime="20210730 15:38:27.768"/>
</iter>
<iter>
<var name="${pid}">11850</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:27.772" level="INFO">Running command 'kill 11850 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:27.769" endtime="20210730 15:38:27.773"/>
</kw>
<status status="PASS" starttime="20210730 15:38:27.769" endtime="20210730 15:38:27.773"/>
</iter>
<status status="PASS" starttime="20210730 15:38:27.756" endtime="20210730 15:38:27.773"/>
</for>
<status status="PASS" starttime="20210730 15:38:27.756" endtime="20210730 15:38:27.773"/>
</branch>
<status status="PASS" starttime="20210730 15:38:27.756" endtime="20210730 15:38:27.773"/>
</if>
<status status="PASS" starttime="20210730 15:38:27.735" endtime="20210730 15:38:27.773"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
lastname as such:
{
"lastname": 'Holm!.?'
}
Then, each request should fail with the following response body:
{
"message": "Each last name must contain only characters from the set [a-zA-Z]. Last names must be seperated by a a single space. Last names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:38:26.142" endtime="20210730 15:38:27.773">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t121" name="With Each Valid Token, Updating Last Name Of Each System User With Holm Cuzdan Results In Success">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:27.783" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:27.797" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:27.797" level="INFO">${pids} = 11879</msg>
<status status="PASS" starttime="20210730 15:38:27.775" endtime="20210730 15:38:27.797"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:27.798" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:27.797" endtime="20210730 15:38:27.798"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:27.806" level="INFO">${pids} = ['11879']</msg>
<status status="PASS" starttime="20210730 15:38:27.798" endtime="20210730 15:38:27.806"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11879</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:27.814" level="INFO">Running command 'kill 11879 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:27.807" endtime="20210730 15:38:27.815"/>
</kw>
<status status="PASS" starttime="20210730 15:38:27.807" endtime="20210730 15:38:27.815"/>
</iter>
<status status="PASS" starttime="20210730 15:38:27.806" endtime="20210730 15:38:27.815"/>
</for>
<status status="PASS" starttime="20210730 15:38:27.798" endtime="20210730 15:38:27.815"/>
</branch>
<status status="PASS" starttime="20210730 15:38:27.798" endtime="20210730 15:38:27.815"/>
</if>
<status status="PASS" starttime="20210730 15:38:27.775" endtime="20210730 15:38:27.816"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:27.817" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:27.817" endtime="20210730 15:38:27.817"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:27.818" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:27.817" endtime="20210730 15:38:27.818"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:27.818" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:27.818" endtime="20210730 15:38:27.818"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:27.819" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:27.818" endtime="20210730 15:38:27.819"/>
</kw>
<msg timestamp="20210730 15:38:27.819" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:27.817" endtime="20210730 15:38:27.819"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:27.823" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:27.819" endtime="20210730 15:38:27.824"/>
</kw>
<status status="PASS" starttime="20210730 15:38:27.816" endtime="20210730 15:38:27.824"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:38:27.826" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:38:27.825" endtime="20210730 15:38:27.831"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:38:29.333" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:38:27.832" endtime="20210730 15:38:29.333"/>
</kw>
<status status="PASS" starttime="20210730 15:38:27.825" endtime="20210730 15:38:29.334"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:29.335" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:29.335" endtime="20210730 15:38:29.335"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:29.335" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:29.335" endtime="20210730 15:38:29.335"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:29.336" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:29.335" endtime="20210730 15:38:29.336"/>
</kw>
<msg timestamp="20210730 15:38:29.336" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:29.334" endtime="20210730 15:38:29.336"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:38:29.336" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:38:29.336" endtime="20210730 15:38:29.337"/>
</kw>
<status status="PASS" starttime="20210730 15:38:29.334" endtime="20210730 15:38:29.337"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:38:29.337" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:38:29.337" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:38:29.337" endtime="20210730 15:38:29.337"/>
</kw>
<status status="PASS" starttime="20210730 15:38:29.337" endtime="20210730 15:38:29.338"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:38:29.338" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:38:29.338" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:38:29.338" endtime="20210730 15:38:29.338"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:38:29.338" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:38:29.338" endtime="20210730 15:38:29.339"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:29.339" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:29.339" endtime="20210730 15:38:29.339"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:29.339" endtime="20210730 15:38:29.340"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:29.340" endtime="20210730 15:38:29.340"/>
</kw>
<status status="PASS" starttime="20210730 15:38:29.339" endtime="20210730 15:38:29.341"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:29.341" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:29.341" endtime="20210730 15:38:29.341"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:29.341" endtime="20210730 15:38:29.343"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:29.343" endtime="20210730 15:38:29.344"/>
</kw>
<status status="PASS" starttime="20210730 15:38:29.341" endtime="20210730 15:38:29.344"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:29.345" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:29.344" endtime="20210730 15:38:29.345"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:29.345" endtime="20210730 15:38:29.346"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:29.346" endtime="20210730 15:38:29.346"/>
</kw>
<status status="PASS" starttime="20210730 15:38:29.344" endtime="20210730 15:38:29.346"/>
</iter>
<status status="PASS" starttime="20210730 15:38:29.339" endtime="20210730 15:38:29.346"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:38:29.347" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:38:29.346" endtime="20210730 15:38:29.347"/>
</kw>
<status status="PASS" starttime="20210730 15:38:29.338" endtime="20210730 15:38:29.347"/>
</kw>
<status status="PASS" starttime="20210730 15:38:27.775" endtime="20210730 15:38:29.347"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 15:38:29.350" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:29.348" endtime="20210730 15:38:29.350"/>
</kw>
<msg timestamp="20210730 15:38:29.350" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:29.347" endtime="20210730 15:38:29.350"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>last_name</arg>
<arg>Two valid last names seperated by a single space character</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 15:38:29.351" endtime="20210730 15:38:29.352"/>
</kw>
<status status="PASS" starttime="20210730 15:38:29.351" endtime="20210730 15:38:29.352"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=lastname</arg>
<arg>field_data=${user_data}[last_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:29.353" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:38:29.353" endtime="20210730 15:38:29.353"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:29.354" level="INFO">${payload} = {'lastname': 'Holm Cuzdan'}</msg>
<status status="PASS" starttime="20210730 15:38:29.353" endtime="20210730 15:38:29.354"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:38:29.367" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:38:29.367" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:38:29.354" endtime="20210730 15:38:29.367"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 15:38:29.367" endtime="20210730 15:38:29.367"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${field_data}</arg>
<arg>${system_user}</arg>
<status status="NOT RUN" starttime="20210730 15:38:29.367" endtime="20210730 15:38:29.367"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:29.354" endtime="20210730 15:38:29.368"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:29.354" endtime="20210730 15:38:29.368"/>
</for>
<status status="FAIL" starttime="20210730 15:38:29.352" endtime="20210730 15:38:29.368"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:29.352" endtime="20210730 15:38:29.368"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:29.352" endtime="20210730 15:38:29.368"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:29.372" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:29.388" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:29.389" level="INFO">${pids} = 11902
11909
11911</msg>
<status status="PASS" starttime="20210730 15:38:29.368" endtime="20210730 15:38:29.389"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:29.390" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:29.389" endtime="20210730 15:38:29.390"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:29.390" level="INFO">${pids} = ['11902', '11909', '11911']</msg>
<status status="PASS" starttime="20210730 15:38:29.390" endtime="20210730 15:38:29.390"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11902</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:29.396" level="INFO">Running command 'kill 11902 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:29.391" endtime="20210730 15:38:29.397"/>
</kw>
<status status="PASS" starttime="20210730 15:38:29.391" endtime="20210730 15:38:29.397"/>
</iter>
<iter>
<var name="${pid}">11909</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:29.401" level="INFO">Running command 'kill 11909 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:29.398" endtime="20210730 15:38:29.403"/>
</kw>
<status status="PASS" starttime="20210730 15:38:29.397" endtime="20210730 15:38:29.403"/>
</iter>
<iter>
<var name="${pid}">11911</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:29.407" level="INFO">Running command 'kill 11911 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:29.403" endtime="20210730 15:38:29.408"/>
</kw>
<status status="PASS" starttime="20210730 15:38:29.403" endtime="20210730 15:38:29.408"/>
</iter>
<status status="PASS" starttime="20210730 15:38:29.391" endtime="20210730 15:38:29.408"/>
</for>
<status status="PASS" starttime="20210730 15:38:29.390" endtime="20210730 15:38:29.408"/>
</branch>
<status status="PASS" starttime="20210730 15:38:29.390" endtime="20210730 15:38:29.408"/>
</if>
<status status="PASS" starttime="20210730 15:38:29.368" endtime="20210730 15:38:29.408"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
lastname as such:
{
"lastname": 'Holm Cuzdan'
}
Then, each request should succeed with the following response body:
{
"message": "Updated",
"status": "SUCCESS"
}
This test not only verifies message and status but also verifies that the &lt;username&gt;'s data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:38:27.774" endtime="20210730 15:38:29.408">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t122" name="With Each Valid Token, Updating Last Name Of Each System User With Holm      Cuzdan Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:29.416" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:29.427" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:29.427" level="INFO">${pids} = 11940</msg>
<status status="PASS" starttime="20210730 15:38:29.411" endtime="20210730 15:38:29.427"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:29.428" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:29.428" endtime="20210730 15:38:29.428"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:29.429" level="INFO">${pids} = ['11940']</msg>
<status status="PASS" starttime="20210730 15:38:29.429" endtime="20210730 15:38:29.429"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11940</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:29.433" level="INFO">Running command 'kill 11940 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:29.429" endtime="20210730 15:38:29.433"/>
</kw>
<status status="PASS" starttime="20210730 15:38:29.429" endtime="20210730 15:38:29.433"/>
</iter>
<status status="PASS" starttime="20210730 15:38:29.429" endtime="20210730 15:38:29.433"/>
</for>
<status status="PASS" starttime="20210730 15:38:29.428" endtime="20210730 15:38:29.433"/>
</branch>
<status status="PASS" starttime="20210730 15:38:29.428" endtime="20210730 15:38:29.434"/>
</if>
<status status="PASS" starttime="20210730 15:38:29.411" endtime="20210730 15:38:29.434"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:29.435" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:29.435" endtime="20210730 15:38:29.435"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:29.436" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:29.435" endtime="20210730 15:38:29.436"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:29.436" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:29.436" endtime="20210730 15:38:29.436"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:29.436" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:29.436" endtime="20210730 15:38:29.436"/>
</kw>
<msg timestamp="20210730 15:38:29.437" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:29.435" endtime="20210730 15:38:29.437"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:29.443" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:29.437" endtime="20210730 15:38:29.446"/>
</kw>
<status status="PASS" starttime="20210730 15:38:29.434" endtime="20210730 15:38:29.446"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:38:29.448" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:38:29.447" endtime="20210730 15:38:29.453"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:38:30.958" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:38:29.453" endtime="20210730 15:38:30.958"/>
</kw>
<status status="PASS" starttime="20210730 15:38:29.446" endtime="20210730 15:38:30.958"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:30.959" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:30.959" endtime="20210730 15:38:30.959"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:30.959" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:30.959" endtime="20210730 15:38:30.959"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:30.960" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:30.960" endtime="20210730 15:38:30.960"/>
</kw>
<msg timestamp="20210730 15:38:30.960" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:30.959" endtime="20210730 15:38:30.960"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:38:30.961" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:38:30.960" endtime="20210730 15:38:30.961"/>
</kw>
<status status="PASS" starttime="20210730 15:38:30.958" endtime="20210730 15:38:30.961"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:38:30.962" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:38:30.962" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:38:30.962" endtime="20210730 15:38:30.962"/>
</kw>
<status status="PASS" starttime="20210730 15:38:30.961" endtime="20210730 15:38:30.962"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:38:30.963" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:38:30.963" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:38:30.962" endtime="20210730 15:38:30.963"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:38:30.963" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:38:30.963" endtime="20210730 15:38:30.963"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:30.964" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:30.963" endtime="20210730 15:38:30.964"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:30.964" endtime="20210730 15:38:30.964"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:30.965" endtime="20210730 15:38:30.965"/>
</kw>
<status status="PASS" starttime="20210730 15:38:30.963" endtime="20210730 15:38:30.965"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:30.965" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:30.965" endtime="20210730 15:38:30.965"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:30.966" endtime="20210730 15:38:30.966"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:30.966" endtime="20210730 15:38:30.967"/>
</kw>
<status status="PASS" starttime="20210730 15:38:30.965" endtime="20210730 15:38:30.967"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:30.967" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:30.967" endtime="20210730 15:38:30.967"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:30.967" endtime="20210730 15:38:30.968"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:30.968" endtime="20210730 15:38:30.968"/>
</kw>
<status status="PASS" starttime="20210730 15:38:30.967" endtime="20210730 15:38:30.968"/>
</iter>
<status status="PASS" starttime="20210730 15:38:30.963" endtime="20210730 15:38:30.968"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:38:30.969" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:38:30.968" endtime="20210730 15:38:30.969"/>
</kw>
<status status="PASS" starttime="20210730 15:38:30.962" endtime="20210730 15:38:30.969"/>
</kw>
<status status="PASS" starttime="20210730 15:38:29.410" endtime="20210730 15:38:30.969"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 15:38:30.972" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:30.969" endtime="20210730 15:38:30.972"/>
</kw>
<msg timestamp="20210730 15:38:30.972" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:30.969" endtime="20210730 15:38:30.972"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>last_name</arg>
<arg>Two valid last names seperated by many space characters</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 15:38:30.973" endtime="20210730 15:38:30.973"/>
</kw>
<status status="PASS" starttime="20210730 15:38:30.972" endtime="20210730 15:38:30.973"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=lastname</arg>
<arg>field_data=${user_data}[last_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:30.975" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:38:30.974" endtime="20210730 15:38:30.975"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:30.975" level="INFO">${payload} = {'lastname': 'Holm      Cuzdan'}</msg>
<status status="PASS" starttime="20210730 15:38:30.975" endtime="20210730 15:38:30.975"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:38:30.986" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:38:30.987" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:38:30.976" endtime="20210730 15:38:30.987"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 15:38:30.987" endtime="20210730 15:38:30.987"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${field_data}</arg>
<arg>${system_user}</arg>
<status status="NOT RUN" starttime="20210730 15:38:30.987" endtime="20210730 15:38:30.987"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:30.976" endtime="20210730 15:38:30.987"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:30.975" endtime="20210730 15:38:30.987"/>
</for>
<status status="FAIL" starttime="20210730 15:38:30.974" endtime="20210730 15:38:30.987"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:30.974" endtime="20210730 15:38:30.988"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:30.973" endtime="20210730 15:38:30.988"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:30.991" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:31.009" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:31.010" level="INFO">${pids} = 11963
11970
11972</msg>
<status status="PASS" starttime="20210730 15:38:30.988" endtime="20210730 15:38:31.010"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:31.012" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:31.011" endtime="20210730 15:38:31.012"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:31.013" level="INFO">${pids} = ['11963', '11970', '11972']</msg>
<status status="PASS" starttime="20210730 15:38:31.012" endtime="20210730 15:38:31.013"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11963</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:31.016" level="INFO">Running command 'kill 11963 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:31.013" endtime="20210730 15:38:31.017"/>
</kw>
<status status="PASS" starttime="20210730 15:38:31.013" endtime="20210730 15:38:31.017"/>
</iter>
<iter>
<var name="${pid}">11970</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:31.020" level="INFO">Running command 'kill 11970 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:31.017" endtime="20210730 15:38:31.022"/>
</kw>
<status status="PASS" starttime="20210730 15:38:31.017" endtime="20210730 15:38:31.022"/>
</iter>
<iter>
<var name="${pid}">11972</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:31.025" level="INFO">Running command 'kill 11972 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:31.022" endtime="20210730 15:38:31.026"/>
</kw>
<status status="PASS" starttime="20210730 15:38:31.022" endtime="20210730 15:38:31.026"/>
</iter>
<status status="PASS" starttime="20210730 15:38:31.013" endtime="20210730 15:38:31.026"/>
</for>
<status status="PASS" starttime="20210730 15:38:31.012" endtime="20210730 15:38:31.026"/>
</branch>
<status status="PASS" starttime="20210730 15:38:31.012" endtime="20210730 15:38:31.026"/>
</if>
<status status="PASS" starttime="20210730 15:38:30.988" endtime="20210730 15:38:31.026"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
lastname as such:
{
"lastname": 'Holm Cuzdan'
}
Then, each request should fail with the following response body:
{
"message": "Each last name must contain only characters from the set [a-zA-Z]. Last names must be seperated by a a single space. Last names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:38:29.409" endtime="20210730 15:38:31.027">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t123" name="With Each Valid Token, Updating Phone Number Of Each System User With Empty String Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:31.037" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:31.056" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:31.056" level="INFO">${pids} = 12001</msg>
<status status="PASS" starttime="20210730 15:38:31.029" endtime="20210730 15:38:31.056"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:31.058" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:31.057" endtime="20210730 15:38:31.058"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:31.059" level="INFO">${pids} = ['12001']</msg>
<status status="PASS" starttime="20210730 15:38:31.058" endtime="20210730 15:38:31.059"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12001</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:31.064" level="INFO">Running command 'kill 12001 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:31.059" endtime="20210730 15:38:31.065"/>
</kw>
<status status="PASS" starttime="20210730 15:38:31.059" endtime="20210730 15:38:31.065"/>
</iter>
<status status="PASS" starttime="20210730 15:38:31.059" endtime="20210730 15:38:31.066"/>
</for>
<status status="PASS" starttime="20210730 15:38:31.058" endtime="20210730 15:38:31.066"/>
</branch>
<status status="PASS" starttime="20210730 15:38:31.058" endtime="20210730 15:38:31.066"/>
</if>
<status status="PASS" starttime="20210730 15:38:31.029" endtime="20210730 15:38:31.066"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:31.067" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:31.067" endtime="20210730 15:38:31.067"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:31.068" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:31.068" endtime="20210730 15:38:31.068"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:31.068" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:31.068" endtime="20210730 15:38:31.068"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:31.069" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:31.068" endtime="20210730 15:38:31.069"/>
</kw>
<msg timestamp="20210730 15:38:31.069" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:31.067" endtime="20210730 15:38:31.069"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:31.073" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:31.069" endtime="20210730 15:38:31.074"/>
</kw>
<status status="PASS" starttime="20210730 15:38:31.066" endtime="20210730 15:38:31.075"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:38:31.076" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:38:31.076" endtime="20210730 15:38:31.082"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:38:32.585" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:38:31.082" endtime="20210730 15:38:32.585"/>
</kw>
<status status="PASS" starttime="20210730 15:38:31.075" endtime="20210730 15:38:32.586"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:32.587" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:32.587" endtime="20210730 15:38:32.587"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:32.587" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:32.587" endtime="20210730 15:38:32.587"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:32.588" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:32.587" endtime="20210730 15:38:32.588"/>
</kw>
<msg timestamp="20210730 15:38:32.588" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:32.586" endtime="20210730 15:38:32.588"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:38:32.588" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:38:32.588" endtime="20210730 15:38:32.589"/>
</kw>
<status status="PASS" starttime="20210730 15:38:32.586" endtime="20210730 15:38:32.589"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:38:32.589" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:38:32.589" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:38:32.589" endtime="20210730 15:38:32.590"/>
</kw>
<status status="PASS" starttime="20210730 15:38:32.589" endtime="20210730 15:38:32.590"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:38:32.591" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:38:32.591" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:38:32.590" endtime="20210730 15:38:32.591"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:38:32.591" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:38:32.591" endtime="20210730 15:38:32.591"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:32.592" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:32.591" endtime="20210730 15:38:32.592"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:32.592" endtime="20210730 15:38:32.592"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:32.592" endtime="20210730 15:38:32.593"/>
</kw>
<status status="PASS" starttime="20210730 15:38:32.591" endtime="20210730 15:38:32.593"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:32.593" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:32.593" endtime="20210730 15:38:32.593"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:32.593" endtime="20210730 15:38:32.594"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:32.594" endtime="20210730 15:38:32.594"/>
</kw>
<status status="PASS" starttime="20210730 15:38:32.593" endtime="20210730 15:38:32.595"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:32.595" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:32.595" endtime="20210730 15:38:32.595"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:32.596" endtime="20210730 15:38:32.596"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:32.597" endtime="20210730 15:38:32.597"/>
</kw>
<status status="PASS" starttime="20210730 15:38:32.595" endtime="20210730 15:38:32.597"/>
</iter>
<status status="PASS" starttime="20210730 15:38:32.591" endtime="20210730 15:38:32.597"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:38:32.597" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:38:32.597" endtime="20210730 15:38:32.597"/>
</kw>
<status status="PASS" starttime="20210730 15:38:32.590" endtime="20210730 15:38:32.598"/>
</kw>
<status status="PASS" starttime="20210730 15:38:31.028" endtime="20210730 15:38:32.598"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 15:38:32.600" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:32.598" endtime="20210730 15:38:32.600"/>
</kw>
<msg timestamp="20210730 15:38:32.601" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:32.598" endtime="20210730 15:38:32.601"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>phone_number</arg>
<arg>An empty phone number</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 15:38:32.601" endtime="20210730 15:38:32.602"/>
</kw>
<status status="PASS" starttime="20210730 15:38:32.601" endtime="20210730 15:38:32.602"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=phone</arg>
<arg>field_data=${user_data}[phone_number]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:32.603" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:38:32.603" endtime="20210730 15:38:32.603"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:32.604" level="INFO">${payload} = {'phone': ''}</msg>
<status status="PASS" starttime="20210730 15:38:32.603" endtime="20210730 15:38:32.604"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:38:32.614" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:38:32.615" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:38:32.604" endtime="20210730 15:38:32.615"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 15:38:32.615" endtime="20210730 15:38:32.615"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${field_data}</arg>
<arg>${system_user}</arg>
<status status="NOT RUN" starttime="20210730 15:38:32.615" endtime="20210730 15:38:32.615"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:32.604" endtime="20210730 15:38:32.615"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:32.604" endtime="20210730 15:38:32.615"/>
</for>
<status status="FAIL" starttime="20210730 15:38:32.602" endtime="20210730 15:38:32.615"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:32.602" endtime="20210730 15:38:32.615"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:32.602" endtime="20210730 15:38:32.615"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:32.620" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:32.636" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:32.636" level="INFO">${pids} = 12024
12031
12034</msg>
<status status="PASS" starttime="20210730 15:38:32.616" endtime="20210730 15:38:32.636"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:32.637" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:32.636" endtime="20210730 15:38:32.637"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:32.638" level="INFO">${pids} = ['12024', '12031', '12034']</msg>
<status status="PASS" starttime="20210730 15:38:32.637" endtime="20210730 15:38:32.638"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12024</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:32.641" level="INFO">Running command 'kill 12024 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:32.638" endtime="20210730 15:38:32.642"/>
</kw>
<status status="PASS" starttime="20210730 15:38:32.638" endtime="20210730 15:38:32.642"/>
</iter>
<iter>
<var name="${pid}">12031</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:32.647" level="INFO">Running command 'kill 12031 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:32.642" endtime="20210730 15:38:32.648"/>
</kw>
<status status="PASS" starttime="20210730 15:38:32.642" endtime="20210730 15:38:32.648"/>
</iter>
<iter>
<var name="${pid}">12034</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:32.653" level="INFO">Running command 'kill 12034 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:32.649" endtime="20210730 15:38:32.654"/>
</kw>
<status status="PASS" starttime="20210730 15:38:32.649" endtime="20210730 15:38:32.654"/>
</iter>
<status status="PASS" starttime="20210730 15:38:32.638" endtime="20210730 15:38:32.654"/>
</for>
<status status="PASS" starttime="20210730 15:38:32.637" endtime="20210730 15:38:32.654"/>
</branch>
<status status="PASS" starttime="20210730 15:38:32.637" endtime="20210730 15:38:32.654"/>
</if>
<status status="PASS" starttime="20210730 15:38:32.616" endtime="20210730 15:38:32.654"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
phone number as such:
{
"phone": ''
}
Then, each request should fail with the following response body:
{
"message": "mandatory phone number can only contain numbers [0-9] and optionally a single plus sign at the beginning indicating the country code",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:38:31.027" endtime="20210730 15:38:32.654">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t124" name="With Each Valid Token, Updating Phone Number Of Each System User With +358506662712 Results In Success">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:32.662" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:32.673" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:32.673" level="INFO">${pids} = 12064</msg>
<status status="PASS" starttime="20210730 15:38:32.656" endtime="20210730 15:38:32.674"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:32.675" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:32.674" endtime="20210730 15:38:32.675"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:32.676" level="INFO">${pids} = ['12064']</msg>
<status status="PASS" starttime="20210730 15:38:32.675" endtime="20210730 15:38:32.676"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12064</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:32.692" level="INFO">Running command 'kill 12064 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:32.676" endtime="20210730 15:38:32.693"/>
</kw>
<status status="PASS" starttime="20210730 15:38:32.676" endtime="20210730 15:38:32.693"/>
</iter>
<status status="PASS" starttime="20210730 15:38:32.676" endtime="20210730 15:38:32.693"/>
</for>
<status status="PASS" starttime="20210730 15:38:32.675" endtime="20210730 15:38:32.693"/>
</branch>
<status status="PASS" starttime="20210730 15:38:32.675" endtime="20210730 15:38:32.693"/>
</if>
<status status="PASS" starttime="20210730 15:38:32.656" endtime="20210730 15:38:32.693"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:32.695" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:32.694" endtime="20210730 15:38:32.695"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:32.696" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:32.696" endtime="20210730 15:38:32.696"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:32.696" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:32.696" endtime="20210730 15:38:32.696"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:32.697" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:32.697" endtime="20210730 15:38:32.697"/>
</kw>
<msg timestamp="20210730 15:38:32.697" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:32.695" endtime="20210730 15:38:32.697"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:32.701" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:32.697" endtime="20210730 15:38:32.702"/>
</kw>
<status status="PASS" starttime="20210730 15:38:32.694" endtime="20210730 15:38:32.703"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:38:32.704" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:38:32.703" endtime="20210730 15:38:32.709"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:38:34.211" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:38:32.709" endtime="20210730 15:38:34.211"/>
</kw>
<status status="PASS" starttime="20210730 15:38:32.703" endtime="20210730 15:38:34.211"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:34.213" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:34.212" endtime="20210730 15:38:34.213"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:34.213" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:34.213" endtime="20210730 15:38:34.213"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:34.214" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:34.213" endtime="20210730 15:38:34.214"/>
</kw>
<msg timestamp="20210730 15:38:34.214" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:34.212" endtime="20210730 15:38:34.214"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:38:34.214" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:38:34.214" endtime="20210730 15:38:34.215"/>
</kw>
<status status="PASS" starttime="20210730 15:38:34.212" endtime="20210730 15:38:34.215"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:38:34.216" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:38:34.216" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:38:34.216" endtime="20210730 15:38:34.216"/>
</kw>
<status status="PASS" starttime="20210730 15:38:34.215" endtime="20210730 15:38:34.216"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:38:34.217" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:38:34.217" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:38:34.216" endtime="20210730 15:38:34.217"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:38:34.217" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:38:34.217" endtime="20210730 15:38:34.217"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:34.218" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:34.218" endtime="20210730 15:38:34.218"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:34.218" endtime="20210730 15:38:34.219"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:34.219" endtime="20210730 15:38:34.219"/>
</kw>
<status status="PASS" starttime="20210730 15:38:34.217" endtime="20210730 15:38:34.219"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:34.220" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:34.220" endtime="20210730 15:38:34.220"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:34.220" endtime="20210730 15:38:34.221"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:34.221" endtime="20210730 15:38:34.221"/>
</kw>
<status status="PASS" starttime="20210730 15:38:34.219" endtime="20210730 15:38:34.221"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:34.222" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:34.221" endtime="20210730 15:38:34.222"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:34.222" endtime="20210730 15:38:34.223"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:34.223" endtime="20210730 15:38:34.223"/>
</kw>
<status status="PASS" starttime="20210730 15:38:34.221" endtime="20210730 15:38:34.223"/>
</iter>
<status status="PASS" starttime="20210730 15:38:34.217" endtime="20210730 15:38:34.223"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:38:34.223" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:38:34.223" endtime="20210730 15:38:34.223"/>
</kw>
<status status="PASS" starttime="20210730 15:38:34.216" endtime="20210730 15:38:34.224"/>
</kw>
<status status="PASS" starttime="20210730 15:38:32.656" endtime="20210730 15:38:34.224"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 15:38:34.228" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:34.224" endtime="20210730 15:38:34.228"/>
</kw>
<msg timestamp="20210730 15:38:34.228" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:34.224" endtime="20210730 15:38:34.228"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>phone_number</arg>
<arg>A valid phone number with a country code +358</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 15:38:34.229" endtime="20210730 15:38:34.229"/>
</kw>
<status status="PASS" starttime="20210730 15:38:34.228" endtime="20210730 15:38:34.229"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=phone</arg>
<arg>field_data=${user_data}[phone_number]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:34.231" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:38:34.231" endtime="20210730 15:38:34.231"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:34.232" level="INFO">${payload} = {'phone': '+358506662712'}</msg>
<status status="PASS" starttime="20210730 15:38:34.231" endtime="20210730 15:38:34.232"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:38:34.242" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:38:34.242" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:38:34.232" endtime="20210730 15:38:34.242"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 15:38:34.242" endtime="20210730 15:38:34.243"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${field_data}</arg>
<arg>${system_user}</arg>
<status status="NOT RUN" starttime="20210730 15:38:34.243" endtime="20210730 15:38:34.243"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:34.232" endtime="20210730 15:38:34.243"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:34.232" endtime="20210730 15:38:34.243"/>
</for>
<status status="FAIL" starttime="20210730 15:38:34.230" endtime="20210730 15:38:34.243"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:34.230" endtime="20210730 15:38:34.243"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:34.229" endtime="20210730 15:38:34.243"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:34.248" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:34.263" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:34.263" level="INFO">${pids} = 12089
12097
12101</msg>
<status status="PASS" starttime="20210730 15:38:34.244" endtime="20210730 15:38:34.263"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:34.264" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:34.264" endtime="20210730 15:38:34.264"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:34.265" level="INFO">${pids} = ['12089', '12097', '12101']</msg>
<status status="PASS" starttime="20210730 15:38:34.265" endtime="20210730 15:38:34.265"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12089</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:34.270" level="INFO">Running command 'kill 12089 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:34.266" endtime="20210730 15:38:34.271"/>
</kw>
<status status="PASS" starttime="20210730 15:38:34.265" endtime="20210730 15:38:34.271"/>
</iter>
<iter>
<var name="${pid}">12097</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:34.274" level="INFO">Running command 'kill 12097 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:34.271" endtime="20210730 15:38:34.277"/>
</kw>
<status status="PASS" starttime="20210730 15:38:34.271" endtime="20210730 15:38:34.277"/>
</iter>
<iter>
<var name="${pid}">12101</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:34.282" level="INFO">Running command 'kill 12101 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:34.278" endtime="20210730 15:38:34.283"/>
</kw>
<status status="PASS" starttime="20210730 15:38:34.278" endtime="20210730 15:38:34.283"/>
</iter>
<status status="PASS" starttime="20210730 15:38:34.265" endtime="20210730 15:38:34.283"/>
</for>
<status status="PASS" starttime="20210730 15:38:34.265" endtime="20210730 15:38:34.283"/>
</branch>
<status status="PASS" starttime="20210730 15:38:34.264" endtime="20210730 15:38:34.283"/>
</if>
<status status="PASS" starttime="20210730 15:38:34.244" endtime="20210730 15:38:34.283"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
phone number as such:
{
"phone": '+358506662712'
}
Then, each request should succeed with the following response body:
{
"message": "Updated",
"status": "SUCCESS"
}
This test not only verifies message and status but also verifies that the &lt;username&gt;'s data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:38:32.655" endtime="20210730 15:38:34.283">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t125" name="With Each Valid Token, Updating Phone Number Of Each System User With +358+50666+2712 Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:34.289" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:34.300" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:34.300" level="INFO">${pids} = 12213</msg>
<status status="PASS" starttime="20210730 15:38:34.286" endtime="20210730 15:38:34.300"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:34.301" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:34.301" endtime="20210730 15:38:34.301"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:34.303" level="INFO">${pids} = ['12213']</msg>
<status status="PASS" starttime="20210730 15:38:34.302" endtime="20210730 15:38:34.303"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12213</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:34.307" level="INFO">Running command 'kill 12213 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:34.303" endtime="20210730 15:38:34.307"/>
</kw>
<status status="PASS" starttime="20210730 15:38:34.303" endtime="20210730 15:38:34.307"/>
</iter>
<status status="PASS" starttime="20210730 15:38:34.303" endtime="20210730 15:38:34.307"/>
</for>
<status status="PASS" starttime="20210730 15:38:34.302" endtime="20210730 15:38:34.307"/>
</branch>
<status status="PASS" starttime="20210730 15:38:34.302" endtime="20210730 15:38:34.307"/>
</if>
<status status="PASS" starttime="20210730 15:38:34.285" endtime="20210730 15:38:34.307"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:34.308" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:34.308" endtime="20210730 15:38:34.308"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:34.309" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:34.309" endtime="20210730 15:38:34.309"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:34.309" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:34.309" endtime="20210730 15:38:34.309"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:34.310" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:34.310" endtime="20210730 15:38:34.310"/>
</kw>
<msg timestamp="20210730 15:38:34.310" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:34.309" endtime="20210730 15:38:34.310"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:34.316" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:34.310" endtime="20210730 15:38:34.318"/>
</kw>
<status status="PASS" starttime="20210730 15:38:34.308" endtime="20210730 15:38:34.319"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:38:34.320" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:38:34.320" endtime="20210730 15:38:34.325"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:38:35.827" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:38:34.325" endtime="20210730 15:38:35.828"/>
</kw>
<status status="PASS" starttime="20210730 15:38:34.319" endtime="20210730 15:38:35.828"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:35.829" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:35.829" endtime="20210730 15:38:35.829"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:35.830" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:35.829" endtime="20210730 15:38:35.830"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:35.830" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:35.830" endtime="20210730 15:38:35.830"/>
</kw>
<msg timestamp="20210730 15:38:35.830" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:35.829" endtime="20210730 15:38:35.830"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:38:35.831" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:38:35.830" endtime="20210730 15:38:35.831"/>
</kw>
<status status="PASS" starttime="20210730 15:38:35.828" endtime="20210730 15:38:35.831"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:38:35.832" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:38:35.832" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:38:35.831" endtime="20210730 15:38:35.832"/>
</kw>
<status status="PASS" starttime="20210730 15:38:35.831" endtime="20210730 15:38:35.832"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:38:35.833" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:38:35.833" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:38:35.832" endtime="20210730 15:38:35.833"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:38:35.833" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:38:35.833" endtime="20210730 15:38:35.833"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:35.834" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:35.833" endtime="20210730 15:38:35.834"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:35.834" endtime="20210730 15:38:35.834"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:35.835" endtime="20210730 15:38:35.835"/>
</kw>
<status status="PASS" starttime="20210730 15:38:35.833" endtime="20210730 15:38:35.835"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:35.835" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:35.835" endtime="20210730 15:38:35.835"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:35.835" endtime="20210730 15:38:35.836"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:35.836" endtime="20210730 15:38:35.836"/>
</kw>
<status status="PASS" starttime="20210730 15:38:35.835" endtime="20210730 15:38:35.837"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:35.837" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:35.837" endtime="20210730 15:38:35.837"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:35.837" endtime="20210730 15:38:35.838"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:35.838" endtime="20210730 15:38:35.838"/>
</kw>
<status status="PASS" starttime="20210730 15:38:35.837" endtime="20210730 15:38:35.838"/>
</iter>
<status status="PASS" starttime="20210730 15:38:35.833" endtime="20210730 15:38:35.838"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:38:35.839" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:38:35.838" endtime="20210730 15:38:35.839"/>
</kw>
<status status="PASS" starttime="20210730 15:38:35.832" endtime="20210730 15:38:35.839"/>
</kw>
<status status="PASS" starttime="20210730 15:38:34.285" endtime="20210730 15:38:35.839"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 15:38:35.843" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:35.839" endtime="20210730 15:38:35.843"/>
</kw>
<msg timestamp="20210730 15:38:35.843" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:35.839" endtime="20210730 15:38:35.843"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>phone_number</arg>
<arg>An invalid phone number with a country code with second and third + signs misplaced</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 15:38:35.844" endtime="20210730 15:38:35.845"/>
</kw>
<status status="PASS" starttime="20210730 15:38:35.844" endtime="20210730 15:38:35.846"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=phone</arg>
<arg>field_data=${user_data}[phone_number]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:35.847" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:38:35.847" endtime="20210730 15:38:35.847"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:35.848" level="INFO">${payload} = {'phone': '+358+50666+2712'}</msg>
<status status="PASS" starttime="20210730 15:38:35.848" endtime="20210730 15:38:35.848"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:38:35.857" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:38:35.857" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:38:35.848" endtime="20210730 15:38:35.857"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 15:38:35.858" endtime="20210730 15:38:35.858"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${field_data}</arg>
<arg>${system_user}</arg>
<status status="NOT RUN" starttime="20210730 15:38:35.858" endtime="20210730 15:38:35.858"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:35.848" endtime="20210730 15:38:35.858"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:35.848" endtime="20210730 15:38:35.858"/>
</for>
<status status="FAIL" starttime="20210730 15:38:35.846" endtime="20210730 15:38:35.858"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:35.846" endtime="20210730 15:38:35.858"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:35.846" endtime="20210730 15:38:35.858"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:35.863" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:35.883" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:35.883" level="INFO">${pids} = 12236
12243
12252</msg>
<status status="PASS" starttime="20210730 15:38:35.859" endtime="20210730 15:38:35.883"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:35.885" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:35.884" endtime="20210730 15:38:35.885"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:35.886" level="INFO">${pids} = ['12236', '12243', '12252']</msg>
<status status="PASS" starttime="20210730 15:38:35.885" endtime="20210730 15:38:35.886"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12236</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:35.891" level="INFO">Running command 'kill 12236 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:35.886" endtime="20210730 15:38:35.892"/>
</kw>
<status status="PASS" starttime="20210730 15:38:35.886" endtime="20210730 15:38:35.892"/>
</iter>
<iter>
<var name="${pid}">12243</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:35.897" level="INFO">Running command 'kill 12243 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:35.892" endtime="20210730 15:38:35.897"/>
</kw>
<status status="PASS" starttime="20210730 15:38:35.892" endtime="20210730 15:38:35.897"/>
</iter>
<iter>
<var name="${pid}">12252</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:35.901" level="INFO">Running command 'kill 12252 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:35.898" endtime="20210730 15:38:35.902"/>
</kw>
<status status="PASS" starttime="20210730 15:38:35.898" endtime="20210730 15:38:35.902"/>
</iter>
<status status="PASS" starttime="20210730 15:38:35.886" endtime="20210730 15:38:35.902"/>
</for>
<status status="PASS" starttime="20210730 15:38:35.885" endtime="20210730 15:38:35.902"/>
</branch>
<status status="PASS" starttime="20210730 15:38:35.885" endtime="20210730 15:38:35.902"/>
</if>
<status status="PASS" starttime="20210730 15:38:35.859" endtime="20210730 15:38:35.902"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
phone number as such:
{
"phone": '+358+50666+2712'
}
Then, each request should fail with the following response body:
{
"message": "mandatory phone number can only contain numbers [0-9] and optionally a single plus sign at the beginning indicating the country code",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:38:34.284" endtime="20210730 15:38:35.902">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t126" name="With Each Valid Token, Updating Phone Number Of Each System User With 0+506662712+ Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:35.908" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:35.920" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:35.920" level="INFO">${pids} = 12281</msg>
<status status="PASS" starttime="20210730 15:38:35.904" endtime="20210730 15:38:35.920"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:35.921" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:35.921" endtime="20210730 15:38:35.921"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:35.922" level="INFO">${pids} = ['12281']</msg>
<status status="PASS" starttime="20210730 15:38:35.922" endtime="20210730 15:38:35.922"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12281</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:35.926" level="INFO">Running command 'kill 12281 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:35.922" endtime="20210730 15:38:35.927"/>
</kw>
<status status="PASS" starttime="20210730 15:38:35.922" endtime="20210730 15:38:35.927"/>
</iter>
<status status="PASS" starttime="20210730 15:38:35.922" endtime="20210730 15:38:35.927"/>
</for>
<status status="PASS" starttime="20210730 15:38:35.921" endtime="20210730 15:38:35.927"/>
</branch>
<status status="PASS" starttime="20210730 15:38:35.921" endtime="20210730 15:38:35.927"/>
</if>
<status status="PASS" starttime="20210730 15:38:35.904" endtime="20210730 15:38:35.927"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:35.928" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:35.928" endtime="20210730 15:38:35.928"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:35.930" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:35.929" endtime="20210730 15:38:35.930"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:35.930" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:35.930" endtime="20210730 15:38:35.930"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:35.931" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:35.930" endtime="20210730 15:38:35.931"/>
</kw>
<msg timestamp="20210730 15:38:35.931" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:35.928" endtime="20210730 15:38:35.931"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:35.937" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:35.931" endtime="20210730 15:38:35.939"/>
</kw>
<status status="PASS" starttime="20210730 15:38:35.927" endtime="20210730 15:38:35.939"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:38:35.940" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:38:35.940" endtime="20210730 15:38:35.946"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:38:37.447" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:38:35.946" endtime="20210730 15:38:37.447"/>
</kw>
<status status="PASS" starttime="20210730 15:38:35.939" endtime="20210730 15:38:37.447"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:37.449" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:37.448" endtime="20210730 15:38:37.449"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:37.449" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:37.449" endtime="20210730 15:38:37.449"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:37.449" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:37.449" endtime="20210730 15:38:37.449"/>
</kw>
<msg timestamp="20210730 15:38:37.450" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:37.448" endtime="20210730 15:38:37.450"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:38:37.450" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:38:37.450" endtime="20210730 15:38:37.451"/>
</kw>
<status status="PASS" starttime="20210730 15:38:37.448" endtime="20210730 15:38:37.451"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:38:37.451" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:38:37.451" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:38:37.451" endtime="20210730 15:38:37.452"/>
</kw>
<status status="PASS" starttime="20210730 15:38:37.451" endtime="20210730 15:38:37.452"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:38:37.452" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:38:37.452" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:38:37.452" endtime="20210730 15:38:37.452"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:38:37.453" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:38:37.452" endtime="20210730 15:38:37.453"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:37.453" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:37.453" endtime="20210730 15:38:37.453"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:37.453" endtime="20210730 15:38:37.454"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:37.454" endtime="20210730 15:38:37.454"/>
</kw>
<status status="PASS" starttime="20210730 15:38:37.453" endtime="20210730 15:38:37.454"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:37.455" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:37.455" endtime="20210730 15:38:37.455"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:37.455" endtime="20210730 15:38:37.456"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:37.456" endtime="20210730 15:38:37.456"/>
</kw>
<status status="PASS" starttime="20210730 15:38:37.454" endtime="20210730 15:38:37.456"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:37.456" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:37.456" endtime="20210730 15:38:37.456"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:37.456" endtime="20210730 15:38:37.457"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:37.457" endtime="20210730 15:38:37.457"/>
</kw>
<status status="PASS" starttime="20210730 15:38:37.456" endtime="20210730 15:38:37.457"/>
</iter>
<status status="PASS" starttime="20210730 15:38:37.453" endtime="20210730 15:38:37.457"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:38:37.458" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:38:37.458" endtime="20210730 15:38:37.458"/>
</kw>
<status status="PASS" starttime="20210730 15:38:37.452" endtime="20210730 15:38:37.458"/>
</kw>
<status status="PASS" starttime="20210730 15:38:35.904" endtime="20210730 15:38:37.458"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 15:38:37.462" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:37.459" endtime="20210730 15:38:37.462"/>
</kw>
<msg timestamp="20210730 15:38:37.462" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:37.459" endtime="20210730 15:38:37.462"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>phone_number</arg>
<arg>An invalid phone number with two + signs misplaced</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 15:38:37.463" endtime="20210730 15:38:37.464"/>
</kw>
<status status="PASS" starttime="20210730 15:38:37.463" endtime="20210730 15:38:37.464"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=phone</arg>
<arg>field_data=${user_data}[phone_number]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:37.465" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:38:37.465" endtime="20210730 15:38:37.465"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:37.466" level="INFO">${payload} = {'phone': '0+506662712+'}</msg>
<status status="PASS" starttime="20210730 15:38:37.465" endtime="20210730 15:38:37.466"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:38:37.476" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:38:37.476" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:38:37.466" endtime="20210730 15:38:37.476"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 15:38:37.476" endtime="20210730 15:38:37.476"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${field_data}</arg>
<arg>${system_user}</arg>
<status status="NOT RUN" starttime="20210730 15:38:37.476" endtime="20210730 15:38:37.476"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:37.466" endtime="20210730 15:38:37.476"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:37.466" endtime="20210730 15:38:37.476"/>
</for>
<status status="FAIL" starttime="20210730 15:38:37.464" endtime="20210730 15:38:37.477"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:37.464" endtime="20210730 15:38:37.477"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:37.464" endtime="20210730 15:38:37.477"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:37.482" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:37.493" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:37.493" level="INFO">${pids} = 12304
12311
12315</msg>
<status status="PASS" starttime="20210730 15:38:37.478" endtime="20210730 15:38:37.493"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:37.494" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:37.493" endtime="20210730 15:38:37.494"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:37.495" level="INFO">${pids} = ['12304', '12311', '12315']</msg>
<status status="PASS" starttime="20210730 15:38:37.495" endtime="20210730 15:38:37.495"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12304</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:37.499" level="INFO">Running command 'kill 12304 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:37.496" endtime="20210730 15:38:37.499"/>
</kw>
<status status="PASS" starttime="20210730 15:38:37.495" endtime="20210730 15:38:37.499"/>
</iter>
<iter>
<var name="${pid}">12311</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:37.506" level="INFO">Running command 'kill 12311 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:37.500" endtime="20210730 15:38:37.508"/>
</kw>
<status status="PASS" starttime="20210730 15:38:37.500" endtime="20210730 15:38:37.509"/>
</iter>
<iter>
<var name="${pid}">12315</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:37.517" level="INFO">Running command 'kill 12315 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:37.509" endtime="20210730 15:38:37.517"/>
</kw>
<status status="PASS" starttime="20210730 15:38:37.509" endtime="20210730 15:38:37.517"/>
</iter>
<status status="PASS" starttime="20210730 15:38:37.495" endtime="20210730 15:38:37.518"/>
</for>
<status status="PASS" starttime="20210730 15:38:37.494" endtime="20210730 15:38:37.518"/>
</branch>
<status status="PASS" starttime="20210730 15:38:37.494" endtime="20210730 15:38:37.518"/>
</if>
<status status="PASS" starttime="20210730 15:38:37.477" endtime="20210730 15:38:37.518"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
phone number as such:
{
"phone": '0+506662712+'
}
Then, each request should fail with the following response body:
{
"message": "mandatory phone number can only contain numbers [0-9] and optionally a single plus sign at the beginning indicating the country code",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:38:35.903" endtime="20210730 15:38:37.518">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t127" name="With Each Valid Token, Updating Phone Number Of Each System User With 0506662712 Results In Success">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:37.524" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:37.535" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:37.535" level="INFO">${pids} = 12344</msg>
<status status="PASS" starttime="20210730 15:38:37.520" endtime="20210730 15:38:37.535"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:37.536" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:37.536" endtime="20210730 15:38:37.536"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:37.537" level="INFO">${pids} = ['12344']</msg>
<status status="PASS" starttime="20210730 15:38:37.537" endtime="20210730 15:38:37.537"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12344</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:37.541" level="INFO">Running command 'kill 12344 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:37.537" endtime="20210730 15:38:37.541"/>
</kw>
<status status="PASS" starttime="20210730 15:38:37.537" endtime="20210730 15:38:37.541"/>
</iter>
<status status="PASS" starttime="20210730 15:38:37.537" endtime="20210730 15:38:37.541"/>
</for>
<status status="PASS" starttime="20210730 15:38:37.536" endtime="20210730 15:38:37.541"/>
</branch>
<status status="PASS" starttime="20210730 15:38:37.536" endtime="20210730 15:38:37.541"/>
</if>
<status status="PASS" starttime="20210730 15:38:37.520" endtime="20210730 15:38:37.542"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:37.543" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:37.543" endtime="20210730 15:38:37.543"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:37.545" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:37.544" endtime="20210730 15:38:37.545"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:37.545" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:37.545" endtime="20210730 15:38:37.545"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:37.546" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:37.545" endtime="20210730 15:38:37.546"/>
</kw>
<msg timestamp="20210730 15:38:37.546" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:37.544" endtime="20210730 15:38:37.546"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:37.556" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:37.546" endtime="20210730 15:38:37.557"/>
</kw>
<status status="PASS" starttime="20210730 15:38:37.542" endtime="20210730 15:38:37.558"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:38:37.559" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:38:37.559" endtime="20210730 15:38:37.563"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:38:39.065" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:38:37.564" endtime="20210730 15:38:39.066"/>
</kw>
<status status="PASS" starttime="20210730 15:38:37.558" endtime="20210730 15:38:39.066"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:39.067" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:39.067" endtime="20210730 15:38:39.067"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:39.068" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:39.067" endtime="20210730 15:38:39.068"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:39.068" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:39.068" endtime="20210730 15:38:39.068"/>
</kw>
<msg timestamp="20210730 15:38:39.068" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:39.067" endtime="20210730 15:38:39.068"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:38:39.069" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:38:39.069" endtime="20210730 15:38:39.069"/>
</kw>
<status status="PASS" starttime="20210730 15:38:39.066" endtime="20210730 15:38:39.070"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:38:39.070" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:38:39.070" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:38:39.070" endtime="20210730 15:38:39.070"/>
</kw>
<status status="PASS" starttime="20210730 15:38:39.070" endtime="20210730 15:38:39.070"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:38:39.071" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:38:39.071" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:38:39.071" endtime="20210730 15:38:39.071"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:38:39.071" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:38:39.071" endtime="20210730 15:38:39.071"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:39.072" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:39.071" endtime="20210730 15:38:39.072"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:39.072" endtime="20210730 15:38:39.072"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:39.073" endtime="20210730 15:38:39.073"/>
</kw>
<status status="PASS" starttime="20210730 15:38:39.071" endtime="20210730 15:38:39.073"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:39.073" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:39.073" endtime="20210730 15:38:39.073"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:39.073" endtime="20210730 15:38:39.074"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:39.074" endtime="20210730 15:38:39.074"/>
</kw>
<status status="PASS" starttime="20210730 15:38:39.073" endtime="20210730 15:38:39.074"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:39.075" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:39.075" endtime="20210730 15:38:39.075"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:39.075" endtime="20210730 15:38:39.076"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:39.076" endtime="20210730 15:38:39.076"/>
</kw>
<status status="PASS" starttime="20210730 15:38:39.075" endtime="20210730 15:38:39.076"/>
</iter>
<status status="PASS" starttime="20210730 15:38:39.071" endtime="20210730 15:38:39.076"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:38:39.077" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:38:39.076" endtime="20210730 15:38:39.077"/>
</kw>
<status status="PASS" starttime="20210730 15:38:39.070" endtime="20210730 15:38:39.077"/>
</kw>
<status status="PASS" starttime="20210730 15:38:37.519" endtime="20210730 15:38:39.077"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 15:38:39.081" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:39.078" endtime="20210730 15:38:39.081"/>
</kw>
<msg timestamp="20210730 15:38:39.082" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:39.078" endtime="20210730 15:38:39.082"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>phone_number</arg>
<arg>A valid phone number without a country code. This assumes Finland</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 15:38:39.082" endtime="20210730 15:38:39.083"/>
</kw>
<status status="PASS" starttime="20210730 15:38:39.082" endtime="20210730 15:38:39.083"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=phone</arg>
<arg>field_data=${user_data}[phone_number]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:39.084" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:38:39.084" endtime="20210730 15:38:39.084"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:39.085" level="INFO">${payload} = {'phone': '0506662712'}</msg>
<status status="PASS" starttime="20210730 15:38:39.084" endtime="20210730 15:38:39.085"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:38:39.094" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:38:39.095" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:38:39.085" endtime="20210730 15:38:39.095"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 15:38:39.095" endtime="20210730 15:38:39.095"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${field_data}</arg>
<arg>${system_user}</arg>
<status status="NOT RUN" starttime="20210730 15:38:39.095" endtime="20210730 15:38:39.095"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:39.085" endtime="20210730 15:38:39.095"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:39.085" endtime="20210730 15:38:39.095"/>
</for>
<status status="FAIL" starttime="20210730 15:38:39.083" endtime="20210730 15:38:39.095"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:39.083" endtime="20210730 15:38:39.095"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:39.083" endtime="20210730 15:38:39.096"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:39.099" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:39.114" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:39.114" level="INFO">${pids} = 12367
12374
12376</msg>
<status status="PASS" starttime="20210730 15:38:39.096" endtime="20210730 15:38:39.114"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:39.115" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:39.114" endtime="20210730 15:38:39.115"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:39.117" level="INFO">${pids} = ['12367', '12374', '12376']</msg>
<status status="PASS" starttime="20210730 15:38:39.115" endtime="20210730 15:38:39.117"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12367</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:39.120" level="INFO">Running command 'kill 12367 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:39.117" endtime="20210730 15:38:39.121"/>
</kw>
<status status="PASS" starttime="20210730 15:38:39.117" endtime="20210730 15:38:39.121"/>
</iter>
<iter>
<var name="${pid}">12374</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:39.127" level="INFO">Running command 'kill 12374 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:39.121" endtime="20210730 15:38:39.130"/>
</kw>
<status status="PASS" starttime="20210730 15:38:39.121" endtime="20210730 15:38:39.130"/>
</iter>
<iter>
<var name="${pid}">12376</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:39.134" level="INFO">Running command 'kill 12376 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:39.130" endtime="20210730 15:38:39.134"/>
</kw>
<status status="PASS" starttime="20210730 15:38:39.130" endtime="20210730 15:38:39.134"/>
</iter>
<status status="PASS" starttime="20210730 15:38:39.117" endtime="20210730 15:38:39.134"/>
</for>
<status status="PASS" starttime="20210730 15:38:39.115" endtime="20210730 15:38:39.135"/>
</branch>
<status status="PASS" starttime="20210730 15:38:39.115" endtime="20210730 15:38:39.135"/>
</if>
<status status="PASS" starttime="20210730 15:38:39.096" endtime="20210730 15:38:39.135"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
phone number as such:
{
"phone": '0506662712'
}
Then, each request should succeed with the following response body:
{
"message": "Updated",
"status": "SUCCESS"
}
This test not only verifies message and status but also verifies that the &lt;username&gt;'s data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:38:37.519" endtime="20210730 15:38:39.135">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t128" name="With Each Valid Token, Updating Phone Number Of Each System User With +358506abc!#662712 Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:39.140" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:39.156" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:39.157" level="INFO">${pids} = 12405</msg>
<status status="PASS" starttime="20210730 15:38:39.137" endtime="20210730 15:38:39.157"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:39.158" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:39.157" endtime="20210730 15:38:39.158"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:39.158" level="INFO">${pids} = ['12405']</msg>
<status status="PASS" starttime="20210730 15:38:39.158" endtime="20210730 15:38:39.158"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12405</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:39.162" level="INFO">Running command 'kill 12405 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:39.159" endtime="20210730 15:38:39.163"/>
</kw>
<status status="PASS" starttime="20210730 15:38:39.159" endtime="20210730 15:38:39.163"/>
</iter>
<status status="PASS" starttime="20210730 15:38:39.158" endtime="20210730 15:38:39.163"/>
</for>
<status status="PASS" starttime="20210730 15:38:39.158" endtime="20210730 15:38:39.163"/>
</branch>
<status status="PASS" starttime="20210730 15:38:39.158" endtime="20210730 15:38:39.163"/>
</if>
<status status="PASS" starttime="20210730 15:38:39.137" endtime="20210730 15:38:39.163"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:39.165" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:39.164" endtime="20210730 15:38:39.165"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:39.165" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:39.165" endtime="20210730 15:38:39.165"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:39.166" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:39.165" endtime="20210730 15:38:39.166"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:39.166" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:39.166" endtime="20210730 15:38:39.166"/>
</kw>
<msg timestamp="20210730 15:38:39.167" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:39.165" endtime="20210730 15:38:39.167"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:39.185" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:39.167" endtime="20210730 15:38:39.187"/>
</kw>
<status status="PASS" starttime="20210730 15:38:39.164" endtime="20210730 15:38:39.188"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:38:39.191" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:38:39.190" endtime="20210730 15:38:39.209"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:38:40.723" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:38:39.210" endtime="20210730 15:38:40.723"/>
</kw>
<status status="PASS" starttime="20210730 15:38:39.189" endtime="20210730 15:38:40.724"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:40.725" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:40.725" endtime="20210730 15:38:40.725"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:40.726" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:40.726" endtime="20210730 15:38:40.726"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:40.726" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:40.726" endtime="20210730 15:38:40.726"/>
</kw>
<msg timestamp="20210730 15:38:40.727" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:40.724" endtime="20210730 15:38:40.727"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:38:40.727" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:38:40.727" endtime="20210730 15:38:40.728"/>
</kw>
<status status="PASS" starttime="20210730 15:38:40.724" endtime="20210730 15:38:40.728"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:38:40.728" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:38:40.728" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:38:40.728" endtime="20210730 15:38:40.729"/>
</kw>
<status status="PASS" starttime="20210730 15:38:40.728" endtime="20210730 15:38:40.729"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:38:40.729" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:38:40.729" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:38:40.729" endtime="20210730 15:38:40.729"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:38:40.730" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:38:40.729" endtime="20210730 15:38:40.730"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:40.730" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:40.730" endtime="20210730 15:38:40.730"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:40.730" endtime="20210730 15:38:40.731"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:40.731" endtime="20210730 15:38:40.732"/>
</kw>
<status status="PASS" starttime="20210730 15:38:40.730" endtime="20210730 15:38:40.732"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:40.732" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:40.732" endtime="20210730 15:38:40.732"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:40.732" endtime="20210730 15:38:40.733"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:40.733" endtime="20210730 15:38:40.733"/>
</kw>
<status status="PASS" starttime="20210730 15:38:40.732" endtime="20210730 15:38:40.733"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:40.734" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:40.733" endtime="20210730 15:38:40.734"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:40.734" endtime="20210730 15:38:40.734"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:40.735" endtime="20210730 15:38:40.735"/>
</kw>
<status status="PASS" starttime="20210730 15:38:40.733" endtime="20210730 15:38:40.735"/>
</iter>
<status status="PASS" starttime="20210730 15:38:40.730" endtime="20210730 15:38:40.735"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:38:40.735" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:38:40.735" endtime="20210730 15:38:40.735"/>
</kw>
<status status="PASS" starttime="20210730 15:38:40.729" endtime="20210730 15:38:40.735"/>
</kw>
<status status="PASS" starttime="20210730 15:38:39.136" endtime="20210730 15:38:40.735"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 15:38:40.739" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:40.736" endtime="20210730 15:38:40.739"/>
</kw>
<msg timestamp="20210730 15:38:40.739" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:40.736" endtime="20210730 15:38:40.739"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>phone_number</arg>
<arg>An invalid phone number containing letters, non-alphanumeric characters</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 15:38:40.739" endtime="20210730 15:38:40.740"/>
</kw>
<status status="PASS" starttime="20210730 15:38:40.739" endtime="20210730 15:38:40.740"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=phone</arg>
<arg>field_data=${user_data}[phone_number]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:40.741" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:38:40.741" endtime="20210730 15:38:40.741"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:40.742" level="INFO">${payload} = {'phone': '+358506abc!#662712'}</msg>
<status status="PASS" starttime="20210730 15:38:40.741" endtime="20210730 15:38:40.742"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:38:40.752" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:38:40.752" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:38:40.742" endtime="20210730 15:38:40.752"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 15:38:40.752" endtime="20210730 15:38:40.753"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${field_data}</arg>
<arg>${system_user}</arg>
<status status="NOT RUN" starttime="20210730 15:38:40.753" endtime="20210730 15:38:40.753"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:40.742" endtime="20210730 15:38:40.753"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:40.742" endtime="20210730 15:38:40.753"/>
</for>
<status status="FAIL" starttime="20210730 15:38:40.740" endtime="20210730 15:38:40.753"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:40.740" endtime="20210730 15:38:40.753"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:40.740" endtime="20210730 15:38:40.753"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:40.757" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:40.772" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:40.772" level="INFO">${pids} = 12428
12435
12437</msg>
<status status="PASS" starttime="20210730 15:38:40.754" endtime="20210730 15:38:40.772"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:40.773" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:40.773" endtime="20210730 15:38:40.773"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:40.774" level="INFO">${pids} = ['12428', '12435', '12437']</msg>
<status status="PASS" starttime="20210730 15:38:40.774" endtime="20210730 15:38:40.774"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12428</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:40.779" level="INFO">Running command 'kill 12428 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:40.774" endtime="20210730 15:38:40.779"/>
</kw>
<status status="PASS" starttime="20210730 15:38:40.774" endtime="20210730 15:38:40.779"/>
</iter>
<iter>
<var name="${pid}">12435</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:40.784" level="INFO">Running command 'kill 12435 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:40.780" endtime="20210730 15:38:40.786"/>
</kw>
<status status="PASS" starttime="20210730 15:38:40.780" endtime="20210730 15:38:40.786"/>
</iter>
<iter>
<var name="${pid}">12437</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:40.790" level="INFO">Running command 'kill 12437 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:40.786" endtime="20210730 15:38:40.790"/>
</kw>
<status status="PASS" starttime="20210730 15:38:40.786" endtime="20210730 15:38:40.790"/>
</iter>
<status status="PASS" starttime="20210730 15:38:40.774" endtime="20210730 15:38:40.790"/>
</for>
<status status="PASS" starttime="20210730 15:38:40.774" endtime="20210730 15:38:40.790"/>
</branch>
<status status="PASS" starttime="20210730 15:38:40.773" endtime="20210730 15:38:40.790"/>
</if>
<status status="PASS" starttime="20210730 15:38:40.753" endtime="20210730 15:38:40.791"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
phone number as such:
{
"phone": '+358506abc!#662712'
}
Then, each request should fail with the following response body:
{
"message": "mandatory phone number can only contain numbers [0-9] and optionally a single plus sign at the beginning indicating the country code",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:38:39.136" endtime="20210730 15:38:40.791">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t129" name="With Each Valid Token, Updating Phone Number Of Each System User With 050!?.#662712 Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:40.801" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:40.812" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:40.813" level="INFO">${pids} = 12466</msg>
<status status="PASS" starttime="20210730 15:38:40.793" endtime="20210730 15:38:40.813"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:40.814" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:40.813" endtime="20210730 15:38:40.814"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:40.823" level="INFO">${pids} = ['12466']</msg>
<status status="PASS" starttime="20210730 15:38:40.814" endtime="20210730 15:38:40.823"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12466</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:40.828" level="INFO">Running command 'kill 12466 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:40.824" endtime="20210730 15:38:40.829"/>
</kw>
<status status="PASS" starttime="20210730 15:38:40.823" endtime="20210730 15:38:40.829"/>
</iter>
<status status="PASS" starttime="20210730 15:38:40.823" endtime="20210730 15:38:40.829"/>
</for>
<status status="PASS" starttime="20210730 15:38:40.814" endtime="20210730 15:38:40.829"/>
</branch>
<status status="PASS" starttime="20210730 15:38:40.814" endtime="20210730 15:38:40.829"/>
</if>
<status status="PASS" starttime="20210730 15:38:40.793" endtime="20210730 15:38:40.830"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:40.831" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:40.831" endtime="20210730 15:38:40.831"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:40.832" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:40.831" endtime="20210730 15:38:40.832"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:40.832" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:40.832" endtime="20210730 15:38:40.832"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:40.833" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:40.832" endtime="20210730 15:38:40.833"/>
</kw>
<msg timestamp="20210730 15:38:40.833" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:40.831" endtime="20210730 15:38:40.833"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:40.837" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:40.833" endtime="20210730 15:38:40.839"/>
</kw>
<status status="PASS" starttime="20210730 15:38:40.830" endtime="20210730 15:38:40.839"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:38:40.840" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:38:40.840" endtime="20210730 15:38:40.846"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:38:42.348" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:38:40.846" endtime="20210730 15:38:42.348"/>
</kw>
<status status="PASS" starttime="20210730 15:38:40.839" endtime="20210730 15:38:42.348"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:42.349" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:42.349" endtime="20210730 15:38:42.349"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:42.350" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:42.349" endtime="20210730 15:38:42.350"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:42.350" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:42.350" endtime="20210730 15:38:42.350"/>
</kw>
<msg timestamp="20210730 15:38:42.350" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:42.349" endtime="20210730 15:38:42.350"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:38:42.351" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:38:42.350" endtime="20210730 15:38:42.351"/>
</kw>
<status status="PASS" starttime="20210730 15:38:42.348" endtime="20210730 15:38:42.351"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:38:42.351" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:38:42.352" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:38:42.351" endtime="20210730 15:38:42.352"/>
</kw>
<status status="PASS" starttime="20210730 15:38:42.351" endtime="20210730 15:38:42.352"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:38:42.352" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:38:42.352" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:38:42.352" endtime="20210730 15:38:42.352"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:38:42.353" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:38:42.353" endtime="20210730 15:38:42.353"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:42.353" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:42.353" endtime="20210730 15:38:42.353"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:42.354" endtime="20210730 15:38:42.354"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:42.354" endtime="20210730 15:38:42.355"/>
</kw>
<status status="PASS" starttime="20210730 15:38:42.353" endtime="20210730 15:38:42.355"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:42.355" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:42.355" endtime="20210730 15:38:42.355"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:42.355" endtime="20210730 15:38:42.356"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:42.356" endtime="20210730 15:38:42.356"/>
</kw>
<status status="PASS" starttime="20210730 15:38:42.355" endtime="20210730 15:38:42.357"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:42.357" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:42.357" endtime="20210730 15:38:42.357"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:42.357" endtime="20210730 15:38:42.358"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:42.358" endtime="20210730 15:38:42.358"/>
</kw>
<status status="PASS" starttime="20210730 15:38:42.357" endtime="20210730 15:38:42.358"/>
</iter>
<status status="PASS" starttime="20210730 15:38:42.353" endtime="20210730 15:38:42.358"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:38:42.358" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:38:42.358" endtime="20210730 15:38:42.359"/>
</kw>
<status status="PASS" starttime="20210730 15:38:42.352" endtime="20210730 15:38:42.359"/>
</kw>
<status status="PASS" starttime="20210730 15:38:40.792" endtime="20210730 15:38:42.359"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 15:38:42.362" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:42.359" endtime="20210730 15:38:42.362"/>
</kw>
<msg timestamp="20210730 15:38:42.362" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:42.359" endtime="20210730 15:38:42.362"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>phone_number</arg>
<arg>An invalid phone number containing non-alphanumeric characters</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 15:38:42.363" endtime="20210730 15:38:42.363"/>
</kw>
<status status="PASS" starttime="20210730 15:38:42.362" endtime="20210730 15:38:42.364"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=phone</arg>
<arg>field_data=${user_data}[phone_number]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:42.365" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:38:42.364" endtime="20210730 15:38:42.365"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:42.365" level="INFO">${payload} = {'phone': '050!?.#662712'}</msg>
<status status="PASS" starttime="20210730 15:38:42.365" endtime="20210730 15:38:42.365"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:38:42.375" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:38:42.375" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:38:42.366" endtime="20210730 15:38:42.375"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 15:38:42.376" endtime="20210730 15:38:42.376"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${field_data}</arg>
<arg>${system_user}</arg>
<status status="NOT RUN" starttime="20210730 15:38:42.376" endtime="20210730 15:38:42.376"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:42.366" endtime="20210730 15:38:42.376"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:42.365" endtime="20210730 15:38:42.376"/>
</for>
<status status="FAIL" starttime="20210730 15:38:42.364" endtime="20210730 15:38:42.376"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:42.364" endtime="20210730 15:38:42.376"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:42.364" endtime="20210730 15:38:42.376"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:42.381" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:42.393" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:42.393" level="INFO">${pids} = 12489
12496
12499</msg>
<status status="PASS" starttime="20210730 15:38:42.377" endtime="20210730 15:38:42.393"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:42.394" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:42.393" endtime="20210730 15:38:42.394"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:42.395" level="INFO">${pids} = ['12489', '12496', '12499']</msg>
<status status="PASS" starttime="20210730 15:38:42.394" endtime="20210730 15:38:42.395"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12489</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:42.401" level="INFO">Running command 'kill 12489 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:42.395" endtime="20210730 15:38:42.401"/>
</kw>
<status status="PASS" starttime="20210730 15:38:42.395" endtime="20210730 15:38:42.401"/>
</iter>
<iter>
<var name="${pid}">12496</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:42.405" level="INFO">Running command 'kill 12496 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:42.402" endtime="20210730 15:38:42.407"/>
</kw>
<status status="PASS" starttime="20210730 15:38:42.402" endtime="20210730 15:38:42.407"/>
</iter>
<iter>
<var name="${pid}">12499</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:42.412" level="INFO">Running command 'kill 12499 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:42.407" endtime="20210730 15:38:42.412"/>
</kw>
<status status="PASS" starttime="20210730 15:38:42.407" endtime="20210730 15:38:42.412"/>
</iter>
<status status="PASS" starttime="20210730 15:38:42.395" endtime="20210730 15:38:42.413"/>
</for>
<status status="PASS" starttime="20210730 15:38:42.394" endtime="20210730 15:38:42.413"/>
</branch>
<status status="PASS" starttime="20210730 15:38:42.394" endtime="20210730 15:38:42.413"/>
</if>
<status status="PASS" starttime="20210730 15:38:42.377" endtime="20210730 15:38:42.413"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
phone number as such:
{
"phone": '050!?.#662712'
}
Then, each request should fail with the following response body:
{
"message": "mandatory phone number can only contain numbers [0-9] and optionally a single plus sign at the beginning indicating the country code",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:38:40.792" endtime="20210730 15:38:42.413">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t130" name="With Each Valid Token, Updating Phone Number Of Each System User With +358abc662712xyz Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:42.420" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:42.432" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:42.433" level="INFO">${pids} = 12528</msg>
<status status="PASS" starttime="20210730 15:38:42.415" endtime="20210730 15:38:42.433"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:42.434" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:42.433" endtime="20210730 15:38:42.434"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:42.434" level="INFO">${pids} = ['12528']</msg>
<status status="PASS" starttime="20210730 15:38:42.434" endtime="20210730 15:38:42.434"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12528</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:42.448" level="INFO">Running command 'kill 12528 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:42.435" endtime="20210730 15:38:42.450"/>
</kw>
<status status="PASS" starttime="20210730 15:38:42.435" endtime="20210730 15:38:42.450"/>
</iter>
<status status="PASS" starttime="20210730 15:38:42.435" endtime="20210730 15:38:42.450"/>
</for>
<status status="PASS" starttime="20210730 15:38:42.434" endtime="20210730 15:38:42.450"/>
</branch>
<status status="PASS" starttime="20210730 15:38:42.434" endtime="20210730 15:38:42.450"/>
</if>
<status status="PASS" starttime="20210730 15:38:42.415" endtime="20210730 15:38:42.450"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:42.452" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:42.451" endtime="20210730 15:38:42.452"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:42.453" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:42.452" endtime="20210730 15:38:42.453"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:42.453" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:42.453" endtime="20210730 15:38:42.453"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:42.454" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:42.453" endtime="20210730 15:38:42.454"/>
</kw>
<msg timestamp="20210730 15:38:42.454" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:42.452" endtime="20210730 15:38:42.454"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:42.458" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:42.454" endtime="20210730 15:38:42.459"/>
</kw>
<status status="PASS" starttime="20210730 15:38:42.451" endtime="20210730 15:38:42.460"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:38:42.462" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:38:42.461" endtime="20210730 15:38:42.467"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:38:43.969" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:38:42.468" endtime="20210730 15:38:43.969"/>
</kw>
<status status="PASS" starttime="20210730 15:38:42.460" endtime="20210730 15:38:43.969"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:43.970" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:43.970" endtime="20210730 15:38:43.970"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:43.971" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:43.970" endtime="20210730 15:38:43.971"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:43.971" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:43.971" endtime="20210730 15:38:43.971"/>
</kw>
<msg timestamp="20210730 15:38:43.971" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:43.970" endtime="20210730 15:38:43.971"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:38:43.972" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:38:43.971" endtime="20210730 15:38:43.972"/>
</kw>
<status status="PASS" starttime="20210730 15:38:43.969" endtime="20210730 15:38:43.972"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:38:43.972" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:38:43.972" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:38:43.972" endtime="20210730 15:38:43.973"/>
</kw>
<status status="PASS" starttime="20210730 15:38:43.972" endtime="20210730 15:38:43.973"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:38:43.973" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:38:43.973" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:38:43.973" endtime="20210730 15:38:43.974"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:38:43.974" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:38:43.974" endtime="20210730 15:38:43.974"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:43.974" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:43.974" endtime="20210730 15:38:43.974"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:43.975" endtime="20210730 15:38:43.975"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:43.976" endtime="20210730 15:38:43.976"/>
</kw>
<status status="PASS" starttime="20210730 15:38:43.974" endtime="20210730 15:38:43.976"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:43.976" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:43.976" endtime="20210730 15:38:43.976"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:43.976" endtime="20210730 15:38:43.978"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:43.978" endtime="20210730 15:38:43.978"/>
</kw>
<status status="PASS" starttime="20210730 15:38:43.976" endtime="20210730 15:38:43.978"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:43.979" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:43.978" endtime="20210730 15:38:43.979"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:43.979" endtime="20210730 15:38:43.979"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:43.980" endtime="20210730 15:38:43.980"/>
</kw>
<status status="PASS" starttime="20210730 15:38:43.978" endtime="20210730 15:38:43.980"/>
</iter>
<status status="PASS" starttime="20210730 15:38:43.974" endtime="20210730 15:38:43.980"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:38:43.980" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:38:43.980" endtime="20210730 15:38:43.980"/>
</kw>
<status status="PASS" starttime="20210730 15:38:43.973" endtime="20210730 15:38:43.980"/>
</kw>
<status status="PASS" starttime="20210730 15:38:42.415" endtime="20210730 15:38:43.980"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 15:38:43.984" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:43.981" endtime="20210730 15:38:43.984"/>
</kw>
<msg timestamp="20210730 15:38:43.984" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:43.981" endtime="20210730 15:38:43.984"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>phone_number</arg>
<arg>An invalid phone number containing letters in between</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 15:38:43.984" endtime="20210730 15:38:43.985"/>
</kw>
<status status="PASS" starttime="20210730 15:38:43.984" endtime="20210730 15:38:43.985"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=phone</arg>
<arg>field_data=${user_data}[phone_number]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:43.986" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:38:43.986" endtime="20210730 15:38:43.986"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:43.987" level="INFO">${payload} = {'phone': '+358abc662712xyz'}</msg>
<status status="PASS" starttime="20210730 15:38:43.987" endtime="20210730 15:38:43.987"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:38:43.997" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:38:43.997" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:38:43.987" endtime="20210730 15:38:43.997"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 15:38:43.997" endtime="20210730 15:38:43.997"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${field_data}</arg>
<arg>${system_user}</arg>
<status status="NOT RUN" starttime="20210730 15:38:43.997" endtime="20210730 15:38:43.998"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:43.987" endtime="20210730 15:38:43.998"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:43.987" endtime="20210730 15:38:43.998"/>
</for>
<status status="FAIL" starttime="20210730 15:38:43.985" endtime="20210730 15:38:43.998"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:43.985" endtime="20210730 15:38:43.998"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:43.985" endtime="20210730 15:38:43.998"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:44.002" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:44.019" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:44.019" level="INFO">${pids} = 12551
12558
12561</msg>
<status status="PASS" starttime="20210730 15:38:43.998" endtime="20210730 15:38:44.019"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:44.020" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:44.020" endtime="20210730 15:38:44.020"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:44.021" level="INFO">${pids} = ['12551', '12558', '12561']</msg>
<status status="PASS" starttime="20210730 15:38:44.021" endtime="20210730 15:38:44.021"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12551</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:44.025" level="INFO">Running command 'kill 12551 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:44.021" endtime="20210730 15:38:44.026"/>
</kw>
<status status="PASS" starttime="20210730 15:38:44.021" endtime="20210730 15:38:44.026"/>
</iter>
<iter>
<var name="${pid}">12558</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:44.031" level="INFO">Running command 'kill 12558 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:44.026" endtime="20210730 15:38:44.033"/>
</kw>
<status status="PASS" starttime="20210730 15:38:44.026" endtime="20210730 15:38:44.033"/>
</iter>
<iter>
<var name="${pid}">12561</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:44.037" level="INFO">Running command 'kill 12561 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:44.034" endtime="20210730 15:38:44.037"/>
</kw>
<status status="PASS" starttime="20210730 15:38:44.033" endtime="20210730 15:38:44.038"/>
</iter>
<status status="PASS" starttime="20210730 15:38:44.021" endtime="20210730 15:38:44.038"/>
</for>
<status status="PASS" starttime="20210730 15:38:44.020" endtime="20210730 15:38:44.038"/>
</branch>
<status status="PASS" starttime="20210730 15:38:44.020" endtime="20210730 15:38:44.038"/>
</if>
<status status="PASS" starttime="20210730 15:38:43.998" endtime="20210730 15:38:44.038"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
phone number as such:
{
"phone": '+358abc662712xyz'
}
Then, each request should fail with the following response body:
{
"message": "mandatory phone number can only contain numbers [0-9] and optionally a single plus sign at the beginning indicating the country code",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:38:42.414" endtime="20210730 15:38:44.038">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t131" name="With Each Valid Token, Updating Phone Number Of Each System User With +35840 687 54 53 Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:44.051" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:44.062" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:44.063" level="INFO">${pids} = 12590</msg>
<status status="PASS" starttime="20210730 15:38:44.040" endtime="20210730 15:38:44.063"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:44.064" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:44.063" endtime="20210730 15:38:44.064"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:44.064" level="INFO">${pids} = ['12590']</msg>
<status status="PASS" starttime="20210730 15:38:44.064" endtime="20210730 15:38:44.064"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12590</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:44.068" level="INFO">Running command 'kill 12590 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:44.065" endtime="20210730 15:38:44.069"/>
</kw>
<status status="PASS" starttime="20210730 15:38:44.065" endtime="20210730 15:38:44.069"/>
</iter>
<status status="PASS" starttime="20210730 15:38:44.064" endtime="20210730 15:38:44.069"/>
</for>
<status status="PASS" starttime="20210730 15:38:44.064" endtime="20210730 15:38:44.069"/>
</branch>
<status status="PASS" starttime="20210730 15:38:44.064" endtime="20210730 15:38:44.069"/>
</if>
<status status="PASS" starttime="20210730 15:38:44.040" endtime="20210730 15:38:44.069"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:44.071" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:44.070" endtime="20210730 15:38:44.071"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:44.071" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:44.071" endtime="20210730 15:38:44.071"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:44.072" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:44.071" endtime="20210730 15:38:44.072"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:44.072" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:44.072" endtime="20210730 15:38:44.072"/>
</kw>
<msg timestamp="20210730 15:38:44.072" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:44.071" endtime="20210730 15:38:44.072"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:44.079" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:44.072" endtime="20210730 15:38:44.082"/>
</kw>
<status status="PASS" starttime="20210730 15:38:44.069" endtime="20210730 15:38:44.082"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 15:38:44.084" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 15:38:44.083" endtime="20210730 15:38:44.088"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 15:38:45.591" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 15:38:44.089" endtime="20210730 15:38:45.592"/>
</kw>
<status status="PASS" starttime="20210730 15:38:44.083" endtime="20210730 15:38:45.592"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:45.594" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 15:38:45.593" endtime="20210730 15:38:45.594"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 15:38:45.594" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 15:38:45.594" endtime="20210730 15:38:45.594"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 15:38:45.594" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:45.594" endtime="20210730 15:38:45.594"/>
</kw>
<msg timestamp="20210730 15:38:45.595" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 15:38:45.593" endtime="20210730 15:38:45.595"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 15:38:45.595" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 15:38:45.595" endtime="20210730 15:38:45.595"/>
</kw>
<status status="PASS" starttime="20210730 15:38:45.592" endtime="20210730 15:38:45.596"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 15:38:45.596" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 15:38:45.596" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 15:38:45.596" endtime="20210730 15:38:45.597"/>
</kw>
<status status="PASS" starttime="20210730 15:38:45.596" endtime="20210730 15:38:45.597"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 15:38:45.597" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 15:38:45.597" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 15:38:45.597" endtime="20210730 15:38:45.597"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 15:38:45.598" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 15:38:45.598" endtime="20210730 15:38:45.598"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:45.598" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:45.598" endtime="20210730 15:38:45.598"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:45.598" endtime="20210730 15:38:45.599"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:45.599" endtime="20210730 15:38:45.600"/>
</kw>
<status status="PASS" starttime="20210730 15:38:45.598" endtime="20210730 15:38:45.600"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:45.600" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:45.600" endtime="20210730 15:38:45.600"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:45.600" endtime="20210730 15:38:45.601"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:45.601" endtime="20210730 15:38:45.601"/>
</kw>
<status status="PASS" starttime="20210730 15:38:45.600" endtime="20210730 15:38:45.601"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:45.601" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 15:38:45.601" endtime="20210730 15:38:45.601"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 15:38:45.602" endtime="20210730 15:38:45.602"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 15:38:45.602" endtime="20210730 15:38:45.603"/>
</kw>
<status status="PASS" starttime="20210730 15:38:45.601" endtime="20210730 15:38:45.603"/>
</iter>
<status status="PASS" starttime="20210730 15:38:45.598" endtime="20210730 15:38:45.603"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 15:38:45.603" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 15:38:45.603" endtime="20210730 15:38:45.603"/>
</kw>
<status status="PASS" starttime="20210730 15:38:45.597" endtime="20210730 15:38:45.603"/>
</kw>
<status status="PASS" starttime="20210730 15:38:44.040" endtime="20210730 15:38:45.603"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 15:38:45.606" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:45.604" endtime="20210730 15:38:45.606"/>
</kw>
<msg timestamp="20210730 15:38:45.607" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 15:38:45.603" endtime="20210730 15:38:45.607"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>phone_number</arg>
<arg>An invalid phone number containing spaces in between digits</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 15:38:45.607" endtime="20210730 15:38:45.608"/>
</kw>
<status status="PASS" starttime="20210730 15:38:45.607" endtime="20210730 15:38:45.608"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=phone</arg>
<arg>field_data=${user_data}[phone_number]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:45.609" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 15:38:45.609" endtime="20210730 15:38:45.609"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 15:38:45.610" level="INFO">${payload} = {'phone': '+35840 687 54 53'}</msg>
<status status="PASS" starttime="20210730 15:38:45.609" endtime="20210730 15:38:45.610"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 15:38:45.619" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 15:38:45.620" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 15:38:45.610" endtime="20210730 15:38:45.620"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 15:38:45.620" endtime="20210730 15:38:45.620"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${field_data}</arg>
<arg>${system_user}</arg>
<status status="NOT RUN" starttime="20210730 15:38:45.620" endtime="20210730 15:38:45.620"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:45.610" endtime="20210730 15:38:45.620"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:45.610" endtime="20210730 15:38:45.620"/>
</for>
<status status="FAIL" starttime="20210730 15:38:45.608" endtime="20210730 15:38:45.620"/>
</kw>
<status status="FAIL" starttime="20210730 15:38:45.608" endtime="20210730 15:38:45.621"/>
</iter>
<status status="FAIL" starttime="20210730 15:38:45.608" endtime="20210730 15:38:45.621"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 15:38:45.625" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 15:38:45.637" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 15:38:45.637" level="INFO">${pids} = 12613
12620
12623</msg>
<status status="PASS" starttime="20210730 15:38:45.621" endtime="20210730 15:38:45.637"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:45.638" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 15:38:45.637" endtime="20210730 15:38:45.638"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 15:38:45.639" level="INFO">${pids} = ['12613', '12620', '12623']</msg>
<status status="PASS" starttime="20210730 15:38:45.638" endtime="20210730 15:38:45.639"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12613</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:45.645" level="INFO">Running command 'kill 12613 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:45.639" endtime="20210730 15:38:45.646"/>
</kw>
<status status="PASS" starttime="20210730 15:38:45.639" endtime="20210730 15:38:45.646"/>
</iter>
<iter>
<var name="${pid}">12620</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:45.650" level="INFO">Running command 'kill 12620 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:45.646" endtime="20210730 15:38:45.651"/>
</kw>
<status status="PASS" starttime="20210730 15:38:45.646" endtime="20210730 15:38:45.651"/>
</iter>
<iter>
<var name="${pid}">12623</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 15:38:45.655" level="INFO">Running command 'kill 12623 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 15:38:45.652" endtime="20210730 15:38:45.655"/>
</kw>
<status status="PASS" starttime="20210730 15:38:45.651" endtime="20210730 15:38:45.655"/>
</iter>
<status status="PASS" starttime="20210730 15:38:45.639" endtime="20210730 15:38:45.655"/>
</for>
<status status="PASS" starttime="20210730 15:38:45.638" endtime="20210730 15:38:45.655"/>
</branch>
<status status="PASS" starttime="20210730 15:38:45.638" endtime="20210730 15:38:45.655"/>
</if>
<status status="PASS" starttime="20210730 15:38:45.621" endtime="20210730 15:38:45.656"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
phone number as such:
{
"phone": '+35840 687 54 53'
}
Then, each request should fail with the following response body:
{
"message": "mandatory phone number can only contain numbers [0-9] and optionally a single plus sign at the beginning indicating the country code",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 15:38:44.039" endtime="20210730 15:38:45.656">We expected a JSON, but received text/html</status>
</test>
<doc>This test suite contains test cases for CRF Demo API.
Documentation for the API can be found:
https://github.com/Interview-demoapp/Flasky
The acceptance criteria we verify here is
"3: As an API Consumer, if authenticated, I can update personal information of users"
Definitions
(1) System User: The user, who is registered to the system under test with a valid token
(2) API User: The user, who calls the API to update personal information of the system user</doc>
<status status="FAIL" starttime="20210730 15:35:11.496" endtime="20210730 15:38:45.661"/>
</suite>
<statistics>
<total>
<stat pass="0" fail="131" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="0" fail="131" skip="0" id="s1" name="3-Updating-Personal-Information">3-Updating-Personal-Information</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20210730 15:36:28.469" level="WARN">Multiple test cases with name 'With Each Valid Token, Updating Password Of Each System User With ABCDEFG Results In "Field update not allowed"' executed in test suite '3-Updating-Personal-Information'.</msg>
<msg timestamp="20210730 15:36:30.078" level="WARN">Multiple test cases with name 'With Each Valid Token, Updating Password Of Each System User With ABCDEFGH Results In "Field update not allowed"' executed in test suite '3-Updating-Personal-Information'.</msg>
<msg timestamp="20210730 15:36:31.719" level="WARN">Multiple test cases with name 'With Each Valid Token, Updating Password Of Each System User With ABCDEFGHJKLMNPRSTOÖUÜVYZ Results In "Field update not allowed"' executed in test suite '3-Updating-Personal-Information'.</msg>
<msg timestamp="20210730 15:36:57.794" level="WARN">Multiple test cases with name 'With Each Valid Token, Updating Password Of Each System User With ABCD012 Results In "Field update not allowed"' executed in test suite '3-Updating-Personal-Information'.</msg>
<msg timestamp="20210730 15:36:59.439" level="WARN">Multiple test cases with name 'With Each Valid Token, Updating Password Of Each System User With ABCD0123 Results In "Field update not allowed"' executed in test suite '3-Updating-Personal-Information'.</msg>
<msg timestamp="20210730 15:37:02.716" level="WARN">Multiple test cases with name 'With Each Valid Token, Updating Password Of Each System User With ABCD!?. Results In "Field update not allowed"' executed in test suite '3-Updating-Personal-Information'.</msg>
</errors>
</robot>
