<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 4.0.3 (Python 3.7.4 on linux)" generated="20210731 10:42:06.290" rpa="false" schemaversion="2">
<suite id="s1" name="3-Updating-Personal-Information" source="/home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/Tests/API/3-Updating-Personal-Information.robot">
<kw name="Import DataManager" library="Common" type="SETUP">
<kw name="Convert Suite Variables To Correct Types" library="Common">
<doc>This keyword is needed because parameters passed by command line
to robot (i.e. -v variable_name:value) are of string types.
In run command we pass 2 parameters to robot:
robot -d Results/ -v DATA_SET_LENGTH:100 -v USE_EXISTING_FORM_DATA_SET:True -v BROWSER:chromium -P CustomLibs Tests/
So, we have the following variables passed as strings:
- DATA_SET_LENGTH:100
- USE_EXISTING_FORM_DATA_SET:True
We need to convert:
- DATA_SET_LENGTH to int (i.e. integer)
- USE_EXISTING_FORM_DATA_SET to bool (i.e. boolean)
Later these values will be used while loading DataManager.robot resource.</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${DATA_SET_LENGTH}</var>
<arg>int($DATA_SET_LENGTH)</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:07.001" level="INFO">${DATA_SET_LENGTH} = 100</msg>
<status status="PASS" starttime="20210731 10:42:06.998" endtime="20210731 10:42:07.001"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${USE_EXISTING_FORM_DATA_SET}</var>
<arg>$USE_EXISTING_FORM_DATA_SET=='True'</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:07.001" level="INFO">${USE_EXISTING_FORM_DATA_SET} = True</msg>
<status status="PASS" starttime="20210731 10:42:07.001" endtime="20210731 10:42:07.001"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${DATA_SET_LENGTH}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:42:07.002" level="INFO">${DATA_SET_LENGTH} = 100</msg>
<status status="PASS" starttime="20210731 10:42:07.001" endtime="20210731 10:42:07.002"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${USE_EXISTING_FORM_DATA_SET}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:42:07.002" level="INFO">${USE_EXISTING_FORM_DATA_SET} = True</msg>
<status status="PASS" starttime="20210731 10:42:07.002" endtime="20210731 10:42:07.002"/>
</kw>
<status status="PASS" starttime="20210731 10:42:06.997" endtime="20210731 10:42:07.002"/>
</kw>
<kw name="Import Resource" library="BuiltIn">
<arg>${EXECDIR}${/}Resources${/}DataManager.robot</arg>
<doc>Imports a resource file with the given path.</doc>
<status status="PASS" starttime="20210731 10:42:07.003" endtime="20210731 10:42:07.010"/>
</kw>
<status status="PASS" starttime="20210731 10:42:06.997" endtime="20210731 10:42:07.010"/>
</kw>
<test id="s1-t1" name="With Each Valid Token, Updating Username Of Each System User With '' Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:07.015" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:07.023" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:07.023" level="INFO">${pids} = 10178</msg>
<status status="PASS" starttime="20210731 10:42:07.012" endtime="20210731 10:42:07.023"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:07.024" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:07.024" endtime="20210731 10:42:07.024"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:07.025" level="INFO">${pids} = ['10178']</msg>
<status status="PASS" starttime="20210731 10:42:07.025" endtime="20210731 10:42:07.025"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10178</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:07.029" level="INFO">Running command 'kill 10178 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:07.026" endtime="20210731 10:42:07.029"/>
</kw>
<status status="PASS" starttime="20210731 10:42:07.025" endtime="20210731 10:42:07.029"/>
</iter>
<status status="PASS" starttime="20210731 10:42:07.025" endtime="20210731 10:42:07.029"/>
</for>
<status status="PASS" starttime="20210731 10:42:07.025" endtime="20210731 10:42:07.029"/>
</branch>
<status status="PASS" starttime="20210731 10:42:07.025" endtime="20210731 10:42:07.029"/>
</if>
<status status="PASS" starttime="20210731 10:42:07.011" endtime="20210731 10:42:07.030"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:07.031" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:07.030" endtime="20210731 10:42:07.031"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:07.031" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:07.031" endtime="20210731 10:42:07.031"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:07.032" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:07.031" endtime="20210731 10:42:07.032"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:07.032" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:07.032" endtime="20210731 10:42:07.032"/>
</kw>
<msg timestamp="20210731 10:42:07.032" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:07.031" endtime="20210731 10:42:07.032"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:07.038" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:07.032" endtime="20210731 10:42:07.043"/>
</kw>
<status status="PASS" starttime="20210731 10:42:07.030" endtime="20210731 10:42:07.043"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:42:07.045" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:42:07.044" endtime="20210731 10:42:07.049"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:42:08.550" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:42:07.049" endtime="20210731 10:42:08.551"/>
</kw>
<status status="PASS" starttime="20210731 10:42:07.044" endtime="20210731 10:42:08.551"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:08.552" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:08.552" endtime="20210731 10:42:08.552"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:08.552" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:08.552" endtime="20210731 10:42:08.552"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:08.553" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:08.553" endtime="20210731 10:42:08.553"/>
</kw>
<msg timestamp="20210731 10:42:08.553" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:08.551" endtime="20210731 10:42:08.553"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:42:08.555" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:42:08.553" endtime="20210731 10:42:08.555"/>
</kw>
<status status="PASS" starttime="20210731 10:42:08.551" endtime="20210731 10:42:08.555"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:42:08.556" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:42:08.556" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:42:08.556" endtime="20210731 10:42:08.556"/>
</kw>
<status status="PASS" starttime="20210731 10:42:08.556" endtime="20210731 10:42:08.556"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:42:08.557" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:42:08.557" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:42:08.557" endtime="20210731 10:42:08.557"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:42:08.557" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:42:08.557" endtime="20210731 10:42:08.557"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:08.558" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:08.558" endtime="20210731 10:42:08.558"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:08.558" endtime="20210731 10:42:08.559"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:08.559" endtime="20210731 10:42:08.559"/>
</kw>
<status status="PASS" starttime="20210731 10:42:08.558" endtime="20210731 10:42:08.559"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:08.560" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:08.559" endtime="20210731 10:42:08.560"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:08.560" endtime="20210731 10:42:08.560"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:08.561" endtime="20210731 10:42:08.561"/>
</kw>
<status status="PASS" starttime="20210731 10:42:08.559" endtime="20210731 10:42:08.561"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:08.562" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:08.562" endtime="20210731 10:42:08.562"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:08.562" endtime="20210731 10:42:08.563"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:08.563" endtime="20210731 10:42:08.563"/>
</kw>
<status status="PASS" starttime="20210731 10:42:08.562" endtime="20210731 10:42:08.563"/>
</iter>
<status status="PASS" starttime="20210731 10:42:08.557" endtime="20210731 10:42:08.563"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:42:08.564" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:42:08.563" endtime="20210731 10:42:08.564"/>
</kw>
<status status="PASS" starttime="20210731 10:42:08.556" endtime="20210731 10:42:08.564"/>
</kw>
<status status="PASS" starttime="20210731 10:42:07.011" endtime="20210731 10:42:08.564"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=${EMPTY}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:08.566" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:42:08.566" endtime="20210731 10:42:08.566"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:08.567" level="INFO">${payload} = {'username': ''}</msg>
<status status="PASS" starttime="20210731 10:42:08.566" endtime="20210731 10:42:08.567"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:08.578" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:08.578" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:08.567" endtime="20210731 10:42:08.579"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:08.579" endtime="20210731 10:42:08.579"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:08.579" endtime="20210731 10:42:08.579"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:08.567" endtime="20210731 10:42:08.579"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:08.567" endtime="20210731 10:42:08.579"/>
</for>
<status status="FAIL" starttime="20210731 10:42:08.564" endtime="20210731 10:42:08.579"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:08.564" endtime="20210731 10:42:08.579"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=${EMPTY}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:08.581" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:42:08.580" endtime="20210731 10:42:08.581"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:08.581" level="INFO">${payload} = {'username': ''}</msg>
<status status="PASS" starttime="20210731 10:42:08.581" endtime="20210731 10:42:08.581"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:08.586" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:08.586" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:08.582" endtime="20210731 10:42:08.586"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:08.586" endtime="20210731 10:42:08.586"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:08.586" endtime="20210731 10:42:08.586"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:08.581" endtime="20210731 10:42:08.586"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:08.581" endtime="20210731 10:42:08.586"/>
</for>
<status status="FAIL" starttime="20210731 10:42:08.579" endtime="20210731 10:42:08.587"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:08.579" endtime="20210731 10:42:08.587"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=${EMPTY}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:08.589" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:42:08.589" endtime="20210731 10:42:08.589"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:08.590" level="INFO">${payload} = {'username': ''}</msg>
<status status="PASS" starttime="20210731 10:42:08.589" endtime="20210731 10:42:08.590"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:08.595" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:08.595" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:08.590" endtime="20210731 10:42:08.595"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:08.596" endtime="20210731 10:42:08.596"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:08.596" endtime="20210731 10:42:08.596"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:08.590" endtime="20210731 10:42:08.596"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:08.590" endtime="20210731 10:42:08.596"/>
</for>
<status status="FAIL" starttime="20210731 10:42:08.587" endtime="20210731 10:42:08.596"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:08.587" endtime="20210731 10:42:08.596"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:08.564" endtime="20210731 10:42:08.596"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:08.600" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:08.610" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:08.610" level="INFO">${pids} = 10201
10208
10213</msg>
<status status="PASS" starttime="20210731 10:42:08.597" endtime="20210731 10:42:08.610"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:08.611" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:08.610" endtime="20210731 10:42:08.611"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:08.611" level="INFO">${pids} = ['10201', '10208', '10213']</msg>
<status status="PASS" starttime="20210731 10:42:08.611" endtime="20210731 10:42:08.611"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10201</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:08.614" level="INFO">Running command 'kill 10201 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:08.612" endtime="20210731 10:42:08.615"/>
</kw>
<status status="PASS" starttime="20210731 10:42:08.612" endtime="20210731 10:42:08.615"/>
</iter>
<iter>
<var name="${pid}">10208</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:08.617" level="INFO">Running command 'kill 10208 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:08.615" endtime="20210731 10:42:08.619"/>
</kw>
<status status="PASS" starttime="20210731 10:42:08.615" endtime="20210731 10:42:08.619"/>
</iter>
<iter>
<var name="${pid}">10213</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:08.628" level="INFO">Running command 'kill 10213 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:08.619" endtime="20210731 10:42:08.628"/>
</kw>
<status status="PASS" starttime="20210731 10:42:08.619" endtime="20210731 10:42:08.628"/>
</iter>
<status status="PASS" starttime="20210731 10:42:08.611" endtime="20210731 10:42:08.628"/>
</for>
<status status="PASS" starttime="20210731 10:42:08.611" endtime="20210731 10:42:08.629"/>
</branch>
<status status="PASS" starttime="20210731 10:42:08.611" endtime="20210731 10:42:08.629"/>
</if>
<status status="PASS" starttime="20210731 10:42:08.597" endtime="20210731 10:42:08.629"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
username as such:
{
"username": ''
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:42:07.011" endtime="20210731 10:42:08.629">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t2" name="With Each Valid Token, Updating Username Of Each System User With !#%&amp;/¤% Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:08.634" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:08.643" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:08.643" level="INFO">${pids} = 10242</msg>
<status status="PASS" starttime="20210731 10:42:08.631" endtime="20210731 10:42:08.643"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:08.644" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:08.643" endtime="20210731 10:42:08.644"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:08.645" level="INFO">${pids} = ['10242']</msg>
<status status="PASS" starttime="20210731 10:42:08.644" endtime="20210731 10:42:08.645"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10242</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:08.652" level="INFO">Running command 'kill 10242 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:08.645" endtime="20210731 10:42:08.652"/>
</kw>
<status status="PASS" starttime="20210731 10:42:08.645" endtime="20210731 10:42:08.652"/>
</iter>
<status status="PASS" starttime="20210731 10:42:08.645" endtime="20210731 10:42:08.652"/>
</for>
<status status="PASS" starttime="20210731 10:42:08.644" endtime="20210731 10:42:08.652"/>
</branch>
<status status="PASS" starttime="20210731 10:42:08.644" endtime="20210731 10:42:08.652"/>
</if>
<status status="PASS" starttime="20210731 10:42:08.631" endtime="20210731 10:42:08.654"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:08.655" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:08.655" endtime="20210731 10:42:08.655"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:08.656" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:08.656" endtime="20210731 10:42:08.656"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:08.657" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:08.657" endtime="20210731 10:42:08.657"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:08.657" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:08.657" endtime="20210731 10:42:08.657"/>
</kw>
<msg timestamp="20210731 10:42:08.658" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:08.656" endtime="20210731 10:42:08.658"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:08.661" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:08.658" endtime="20210731 10:42:08.663"/>
</kw>
<status status="PASS" starttime="20210731 10:42:08.654" endtime="20210731 10:42:08.663"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:42:08.664" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:42:08.664" endtime="20210731 10:42:08.667"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:42:10.186" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:42:08.668" endtime="20210731 10:42:10.186"/>
</kw>
<status status="PASS" starttime="20210731 10:42:08.663" endtime="20210731 10:42:10.187"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:10.188" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:10.188" endtime="20210731 10:42:10.188"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:10.188" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:10.188" endtime="20210731 10:42:10.189"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:10.189" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:10.189" endtime="20210731 10:42:10.189"/>
</kw>
<msg timestamp="20210731 10:42:10.189" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:10.187" endtime="20210731 10:42:10.189"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:42:10.190" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:42:10.189" endtime="20210731 10:42:10.190"/>
</kw>
<status status="PASS" starttime="20210731 10:42:10.187" endtime="20210731 10:42:10.190"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:42:10.191" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:42:10.191" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:42:10.191" endtime="20210731 10:42:10.191"/>
</kw>
<status status="PASS" starttime="20210731 10:42:10.190" endtime="20210731 10:42:10.191"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:42:10.192" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:42:10.192" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:42:10.192" endtime="20210731 10:42:10.192"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:42:10.193" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:42:10.192" endtime="20210731 10:42:10.193"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:10.193" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:10.193" endtime="20210731 10:42:10.193"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:10.193" endtime="20210731 10:42:10.194"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:10.194" endtime="20210731 10:42:10.194"/>
</kw>
<status status="PASS" starttime="20210731 10:42:10.193" endtime="20210731 10:42:10.194"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:10.195" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:10.194" endtime="20210731 10:42:10.195"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:10.195" endtime="20210731 10:42:10.195"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:10.195" endtime="20210731 10:42:10.196"/>
</kw>
<status status="PASS" starttime="20210731 10:42:10.194" endtime="20210731 10:42:10.196"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:10.196" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:10.196" endtime="20210731 10:42:10.196"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:10.196" endtime="20210731 10:42:10.197"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:10.197" endtime="20210731 10:42:10.197"/>
</kw>
<status status="PASS" starttime="20210731 10:42:10.196" endtime="20210731 10:42:10.197"/>
</iter>
<status status="PASS" starttime="20210731 10:42:10.193" endtime="20210731 10:42:10.197"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:42:10.198" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:42:10.197" endtime="20210731 10:42:10.198"/>
</kw>
<status status="PASS" starttime="20210731 10:42:10.191" endtime="20210731 10:42:10.198"/>
</kw>
<status status="PASS" starttime="20210731 10:42:08.631" endtime="20210731 10:42:10.198"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤%</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:10.199" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:42:10.199" endtime="20210731 10:42:10.199"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:10.199" level="INFO">${payload} = {'username': '!#%&amp;/¤%'}</msg>
<status status="PASS" starttime="20210731 10:42:10.199" endtime="20210731 10:42:10.200"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:10.211" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:10.211" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:10.200" endtime="20210731 10:42:10.211"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:10.211" endtime="20210731 10:42:10.211"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:10.212" endtime="20210731 10:42:10.212"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:10.200" endtime="20210731 10:42:10.212"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:10.200" endtime="20210731 10:42:10.212"/>
</for>
<status status="FAIL" starttime="20210731 10:42:10.198" endtime="20210731 10:42:10.212"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:10.198" endtime="20210731 10:42:10.212"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤%</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:10.213" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:42:10.213" endtime="20210731 10:42:10.213"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:10.214" level="INFO">${payload} = {'username': '!#%&amp;/¤%'}</msg>
<status status="PASS" starttime="20210731 10:42:10.213" endtime="20210731 10:42:10.214"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:10.218" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:10.219" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:10.214" endtime="20210731 10:42:10.219"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:10.219" endtime="20210731 10:42:10.219"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:10.219" endtime="20210731 10:42:10.219"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:10.214" endtime="20210731 10:42:10.219"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:10.214" endtime="20210731 10:42:10.219"/>
</for>
<status status="FAIL" starttime="20210731 10:42:10.212" endtime="20210731 10:42:10.219"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:10.212" endtime="20210731 10:42:10.219"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤%</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:10.221" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:42:10.220" endtime="20210731 10:42:10.221"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:10.221" level="INFO">${payload} = {'username': '!#%&amp;/¤%'}</msg>
<status status="PASS" starttime="20210731 10:42:10.221" endtime="20210731 10:42:10.221"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:10.226" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:10.226" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:10.222" endtime="20210731 10:42:10.227"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:10.227" endtime="20210731 10:42:10.227"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:10.227" endtime="20210731 10:42:10.227"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:10.222" endtime="20210731 10:42:10.227"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:10.222" endtime="20210731 10:42:10.227"/>
</for>
<status status="FAIL" starttime="20210731 10:42:10.220" endtime="20210731 10:42:10.227"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:10.220" endtime="20210731 10:42:10.227"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:10.198" endtime="20210731 10:42:10.227"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:10.232" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:10.241" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:10.241" level="INFO">${pids} = 10265
10272
10279</msg>
<status status="PASS" starttime="20210731 10:42:10.228" endtime="20210731 10:42:10.241"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:10.242" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:10.241" endtime="20210731 10:42:10.242"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:10.243" level="INFO">${pids} = ['10265', '10272', '10279']</msg>
<status status="PASS" starttime="20210731 10:42:10.243" endtime="20210731 10:42:10.243"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10265</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:10.252" level="INFO">Running command 'kill 10265 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:10.243" endtime="20210731 10:42:10.252"/>
</kw>
<status status="PASS" starttime="20210731 10:42:10.243" endtime="20210731 10:42:10.252"/>
</iter>
<iter>
<var name="${pid}">10272</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:10.256" level="INFO">Running command 'kill 10272 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:10.253" endtime="20210731 10:42:10.256"/>
</kw>
<status status="PASS" starttime="20210731 10:42:10.252" endtime="20210731 10:42:10.257"/>
</iter>
<iter>
<var name="${pid}">10279</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:10.264" level="INFO">Running command 'kill 10279 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:10.257" endtime="20210731 10:42:10.264"/>
</kw>
<status status="PASS" starttime="20210731 10:42:10.257" endtime="20210731 10:42:10.264"/>
</iter>
<status status="PASS" starttime="20210731 10:42:10.243" endtime="20210731 10:42:10.264"/>
</for>
<status status="PASS" starttime="20210731 10:42:10.242" endtime="20210731 10:42:10.264"/>
</branch>
<status status="PASS" starttime="20210731 10:42:10.242" endtime="20210731 10:42:10.264"/>
</if>
<status status="PASS" starttime="20210731 10:42:10.228" endtime="20210731 10:42:10.264"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '!#%&amp;/¤%'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:42:08.630" endtime="20210731 10:42:10.265">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t3" name="With Each Valid Token, Updating Username Of Each System User With !#%&amp;/¤%= Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:10.270" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:10.281" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:10.281" level="INFO">${pids} = 10308</msg>
<status status="PASS" starttime="20210731 10:42:10.267" endtime="20210731 10:42:10.281"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:10.282" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:10.282" endtime="20210731 10:42:10.282"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:10.283" level="INFO">${pids} = ['10308']</msg>
<status status="PASS" starttime="20210731 10:42:10.283" endtime="20210731 10:42:10.283"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10308</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:10.286" level="INFO">Running command 'kill 10308 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:10.283" endtime="20210731 10:42:10.286"/>
</kw>
<status status="PASS" starttime="20210731 10:42:10.283" endtime="20210731 10:42:10.286"/>
</iter>
<status status="PASS" starttime="20210731 10:42:10.283" endtime="20210731 10:42:10.286"/>
</for>
<status status="PASS" starttime="20210731 10:42:10.282" endtime="20210731 10:42:10.286"/>
</branch>
<status status="PASS" starttime="20210731 10:42:10.282" endtime="20210731 10:42:10.287"/>
</if>
<status status="PASS" starttime="20210731 10:42:10.266" endtime="20210731 10:42:10.287"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:10.288" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:10.288" endtime="20210731 10:42:10.288"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:10.289" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:10.289" endtime="20210731 10:42:10.289"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:10.289" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:10.289" endtime="20210731 10:42:10.289"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:10.290" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:10.289" endtime="20210731 10:42:10.290"/>
</kw>
<msg timestamp="20210731 10:42:10.290" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:10.288" endtime="20210731 10:42:10.290"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:10.295" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:10.290" endtime="20210731 10:42:10.297"/>
</kw>
<status status="PASS" starttime="20210731 10:42:10.287" endtime="20210731 10:42:10.297"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:42:10.299" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:42:10.298" endtime="20210731 10:42:10.315"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:42:11.817" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:42:10.316" endtime="20210731 10:42:11.817"/>
</kw>
<status status="PASS" starttime="20210731 10:42:10.298" endtime="20210731 10:42:11.818"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:11.819" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:11.818" endtime="20210731 10:42:11.819"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:11.819" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:11.819" endtime="20210731 10:42:11.819"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:11.819" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:11.819" endtime="20210731 10:42:11.819"/>
</kw>
<msg timestamp="20210731 10:42:11.820" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:11.818" endtime="20210731 10:42:11.820"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:42:11.820" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:42:11.820" endtime="20210731 10:42:11.821"/>
</kw>
<status status="PASS" starttime="20210731 10:42:11.818" endtime="20210731 10:42:11.821"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:42:11.822" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:42:11.822" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:42:11.822" endtime="20210731 10:42:11.822"/>
</kw>
<status status="PASS" starttime="20210731 10:42:11.821" endtime="20210731 10:42:11.822"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:42:11.823" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:42:11.823" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:42:11.823" endtime="20210731 10:42:11.823"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:42:11.823" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:42:11.823" endtime="20210731 10:42:11.823"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:11.824" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:11.824" endtime="20210731 10:42:11.824"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:11.824" endtime="20210731 10:42:11.825"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:11.825" endtime="20210731 10:42:11.825"/>
</kw>
<status status="PASS" starttime="20210731 10:42:11.823" endtime="20210731 10:42:11.825"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:11.825" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:11.825" endtime="20210731 10:42:11.825"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:11.825" endtime="20210731 10:42:11.827"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:11.828" endtime="20210731 10:42:11.828"/>
</kw>
<status status="PASS" starttime="20210731 10:42:11.825" endtime="20210731 10:42:11.828"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:11.828" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:11.828" endtime="20210731 10:42:11.828"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:11.828" endtime="20210731 10:42:11.829"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:11.829" endtime="20210731 10:42:11.829"/>
</kw>
<status status="PASS" starttime="20210731 10:42:11.828" endtime="20210731 10:42:11.829"/>
</iter>
<status status="PASS" starttime="20210731 10:42:11.823" endtime="20210731 10:42:11.829"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:42:11.830" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:42:11.830" endtime="20210731 10:42:11.830"/>
</kw>
<status status="PASS" starttime="20210731 10:42:11.822" endtime="20210731 10:42:11.830"/>
</kw>
<status status="PASS" starttime="20210731 10:42:10.266" endtime="20210731 10:42:11.830"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤%=</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:11.831" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:42:11.831" endtime="20210731 10:42:11.831"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:11.832" level="INFO">${payload} = {'username': '!#%&amp;/¤%='}</msg>
<status status="PASS" starttime="20210731 10:42:11.831" endtime="20210731 10:42:11.832"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:11.842" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:11.842" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:11.832" endtime="20210731 10:42:11.842"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:11.842" endtime="20210731 10:42:11.843"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:11.843" endtime="20210731 10:42:11.843"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:11.832" endtime="20210731 10:42:11.843"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:11.832" endtime="20210731 10:42:11.843"/>
</for>
<status status="FAIL" starttime="20210731 10:42:11.831" endtime="20210731 10:42:11.843"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:11.830" endtime="20210731 10:42:11.843"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤%=</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:11.844" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:42:11.844" endtime="20210731 10:42:11.844"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:11.845" level="INFO">${payload} = {'username': '!#%&amp;/¤%='}</msg>
<status status="PASS" starttime="20210731 10:42:11.844" endtime="20210731 10:42:11.845"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:11.851" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:11.851" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:11.845" endtime="20210731 10:42:11.851"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:11.852" endtime="20210731 10:42:11.852"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:11.852" endtime="20210731 10:42:11.852"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:11.845" endtime="20210731 10:42:11.852"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:11.845" endtime="20210731 10:42:11.852"/>
</for>
<status status="FAIL" starttime="20210731 10:42:11.843" endtime="20210731 10:42:11.854"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:11.843" endtime="20210731 10:42:11.854"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤%=</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:11.855" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:42:11.855" endtime="20210731 10:42:11.855"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:11.856" level="INFO">${payload} = {'username': '!#%&amp;/¤%='}</msg>
<status status="PASS" starttime="20210731 10:42:11.855" endtime="20210731 10:42:11.856"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:11.861" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:11.862" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:11.856" endtime="20210731 10:42:11.862"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:11.862" endtime="20210731 10:42:11.862"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:11.862" endtime="20210731 10:42:11.862"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:11.856" endtime="20210731 10:42:11.862"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:11.856" endtime="20210731 10:42:11.862"/>
</for>
<status status="FAIL" starttime="20210731 10:42:11.854" endtime="20210731 10:42:11.862"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:11.854" endtime="20210731 10:42:11.862"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:11.830" endtime="20210731 10:42:11.863"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:11.867" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:11.877" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:11.877" level="INFO">${pids} = 10331
10338
10348</msg>
<status status="PASS" starttime="20210731 10:42:11.863" endtime="20210731 10:42:11.877"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:11.878" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:11.878" endtime="20210731 10:42:11.878"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:11.879" level="INFO">${pids} = ['10331', '10338', '10348']</msg>
<status status="PASS" starttime="20210731 10:42:11.879" endtime="20210731 10:42:11.879"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10331</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:11.882" level="INFO">Running command 'kill 10331 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:11.879" endtime="20210731 10:42:11.883"/>
</kw>
<status status="PASS" starttime="20210731 10:42:11.879" endtime="20210731 10:42:11.883"/>
</iter>
<iter>
<var name="${pid}">10338</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:11.886" level="INFO">Running command 'kill 10338 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:11.883" endtime="20210731 10:42:11.889"/>
</kw>
<status status="PASS" starttime="20210731 10:42:11.883" endtime="20210731 10:42:11.889"/>
</iter>
<iter>
<var name="${pid}">10348</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:11.895" level="INFO">Running command 'kill 10348 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:11.890" endtime="20210731 10:42:11.895"/>
</kw>
<status status="PASS" starttime="20210731 10:42:11.889" endtime="20210731 10:42:11.895"/>
</iter>
<status status="PASS" starttime="20210731 10:42:11.879" endtime="20210731 10:42:11.895"/>
</for>
<status status="PASS" starttime="20210731 10:42:11.878" endtime="20210731 10:42:11.895"/>
</branch>
<status status="PASS" starttime="20210731 10:42:11.878" endtime="20210731 10:42:11.895"/>
</if>
<status status="PASS" starttime="20210731 10:42:11.863" endtime="20210731 10:42:11.896"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '!#%&amp;/¤%='
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:42:10.265" endtime="20210731 10:42:11.896">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t4" name="With Each Valid Token, Updating Username Of Each System User With !#%&amp;/¤%=!()=? Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:11.902" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:11.912" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:11.912" level="INFO">${pids} = 10377</msg>
<status status="PASS" starttime="20210731 10:42:11.898" endtime="20210731 10:42:11.912"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:11.914" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:11.913" endtime="20210731 10:42:11.914"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:11.915" level="INFO">${pids} = ['10377']</msg>
<status status="PASS" starttime="20210731 10:42:11.915" endtime="20210731 10:42:11.915"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10377</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:11.919" level="INFO">Running command 'kill 10377 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:11.916" endtime="20210731 10:42:11.920"/>
</kw>
<status status="PASS" starttime="20210731 10:42:11.916" endtime="20210731 10:42:11.920"/>
</iter>
<status status="PASS" starttime="20210731 10:42:11.915" endtime="20210731 10:42:11.920"/>
</for>
<status status="PASS" starttime="20210731 10:42:11.914" endtime="20210731 10:42:11.920"/>
</branch>
<status status="PASS" starttime="20210731 10:42:11.914" endtime="20210731 10:42:11.920"/>
</if>
<status status="PASS" starttime="20210731 10:42:11.898" endtime="20210731 10:42:11.920"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:11.922" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:11.922" endtime="20210731 10:42:11.922"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:11.923" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:11.923" endtime="20210731 10:42:11.923"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:11.923" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:11.923" endtime="20210731 10:42:11.923"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:11.924" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:11.923" endtime="20210731 10:42:11.924"/>
</kw>
<msg timestamp="20210731 10:42:11.924" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:11.922" endtime="20210731 10:42:11.924"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:11.928" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:11.924" endtime="20210731 10:42:11.929"/>
</kw>
<status status="PASS" starttime="20210731 10:42:11.921" endtime="20210731 10:42:11.929"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:42:11.931" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:42:11.930" endtime="20210731 10:42:11.935"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:42:13.439" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:42:11.936" endtime="20210731 10:42:13.439"/>
</kw>
<status status="PASS" starttime="20210731 10:42:11.930" endtime="20210731 10:42:13.440"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:13.441" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:13.441" endtime="20210731 10:42:13.441"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:13.441" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:13.441" endtime="20210731 10:42:13.441"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:13.442" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:13.441" endtime="20210731 10:42:13.442"/>
</kw>
<msg timestamp="20210731 10:42:13.442" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:13.440" endtime="20210731 10:42:13.442"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:42:13.442" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:42:13.442" endtime="20210731 10:42:13.443"/>
</kw>
<status status="PASS" starttime="20210731 10:42:13.440" endtime="20210731 10:42:13.443"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:42:13.444" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:42:13.444" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:42:13.444" endtime="20210731 10:42:13.445"/>
</kw>
<status status="PASS" starttime="20210731 10:42:13.444" endtime="20210731 10:42:13.445"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:42:13.445" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:42:13.445" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:42:13.445" endtime="20210731 10:42:13.445"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:42:13.446" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:42:13.446" endtime="20210731 10:42:13.446"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:13.446" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:13.446" endtime="20210731 10:42:13.446"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:13.446" endtime="20210731 10:42:13.447"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:13.447" endtime="20210731 10:42:13.447"/>
</kw>
<status status="PASS" starttime="20210731 10:42:13.446" endtime="20210731 10:42:13.447"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:13.448" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:13.448" endtime="20210731 10:42:13.448"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:13.448" endtime="20210731 10:42:13.449"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:13.449" endtime="20210731 10:42:13.449"/>
</kw>
<status status="PASS" starttime="20210731 10:42:13.448" endtime="20210731 10:42:13.449"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:13.450" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:13.449" endtime="20210731 10:42:13.450"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:13.450" endtime="20210731 10:42:13.451"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:13.451" endtime="20210731 10:42:13.451"/>
</kw>
<status status="PASS" starttime="20210731 10:42:13.449" endtime="20210731 10:42:13.451"/>
</iter>
<status status="PASS" starttime="20210731 10:42:13.446" endtime="20210731 10:42:13.451"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:42:13.452" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:42:13.451" endtime="20210731 10:42:13.452"/>
</kw>
<status status="PASS" starttime="20210731 10:42:13.445" endtime="20210731 10:42:13.452"/>
</kw>
<status status="PASS" starttime="20210731 10:42:11.897" endtime="20210731 10:42:13.452"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤%=!()=?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:13.453" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:42:13.453" endtime="20210731 10:42:13.454"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:13.454" level="INFO">${payload} = {'username': '!#%&amp;/¤%=!()=?'}</msg>
<status status="PASS" starttime="20210731 10:42:13.454" endtime="20210731 10:42:13.454"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:13.466" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:13.466" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:13.456" endtime="20210731 10:42:13.466"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:13.466" endtime="20210731 10:42:13.466"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:13.466" endtime="20210731 10:42:13.466"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:13.455" endtime="20210731 10:42:13.467"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:13.454" endtime="20210731 10:42:13.467"/>
</for>
<status status="FAIL" starttime="20210731 10:42:13.452" endtime="20210731 10:42:13.467"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:13.452" endtime="20210731 10:42:13.467"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤%=!()=?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:13.468" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:42:13.468" endtime="20210731 10:42:13.468"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:13.469" level="INFO">${payload} = {'username': '!#%&amp;/¤%=!()=?'}</msg>
<status status="PASS" starttime="20210731 10:42:13.468" endtime="20210731 10:42:13.469"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:13.475" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:13.475" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:13.469" endtime="20210731 10:42:13.475"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:13.475" endtime="20210731 10:42:13.475"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:13.475" endtime="20210731 10:42:13.476"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:13.469" endtime="20210731 10:42:13.476"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:13.469" endtime="20210731 10:42:13.476"/>
</for>
<status status="FAIL" starttime="20210731 10:42:13.467" endtime="20210731 10:42:13.476"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:13.467" endtime="20210731 10:42:13.476"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤%=!()=?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:13.477" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:42:13.477" endtime="20210731 10:42:13.477"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:13.478" level="INFO">${payload} = {'username': '!#%&amp;/¤%=!()=?'}</msg>
<status status="PASS" starttime="20210731 10:42:13.477" endtime="20210731 10:42:13.478"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:13.483" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:13.483" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:13.478" endtime="20210731 10:42:13.483"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:13.484" endtime="20210731 10:42:13.484"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:13.484" endtime="20210731 10:42:13.484"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:13.478" endtime="20210731 10:42:13.484"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:13.478" endtime="20210731 10:42:13.484"/>
</for>
<status status="FAIL" starttime="20210731 10:42:13.476" endtime="20210731 10:42:13.484"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:13.476" endtime="20210731 10:42:13.484"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:13.452" endtime="20210731 10:42:13.484"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:13.488" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:13.498" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:13.498" level="INFO">${pids} = 10400
10407
10412</msg>
<status status="PASS" starttime="20210731 10:42:13.485" endtime="20210731 10:42:13.498"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:13.499" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:13.499" endtime="20210731 10:42:13.499"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:13.500" level="INFO">${pids} = ['10400', '10407', '10412']</msg>
<status status="PASS" starttime="20210731 10:42:13.500" endtime="20210731 10:42:13.500"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10400</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:13.504" level="INFO">Running command 'kill 10400 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:13.500" endtime="20210731 10:42:13.505"/>
</kw>
<status status="PASS" starttime="20210731 10:42:13.500" endtime="20210731 10:42:13.505"/>
</iter>
<iter>
<var name="${pid}">10407</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:13.509" level="INFO">Running command 'kill 10407 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:13.506" endtime="20210731 10:42:13.510"/>
</kw>
<status status="PASS" starttime="20210731 10:42:13.505" endtime="20210731 10:42:13.510"/>
</iter>
<iter>
<var name="${pid}">10412</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:13.514" level="INFO">Running command 'kill 10412 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:13.511" endtime="20210731 10:42:13.514"/>
</kw>
<status status="PASS" starttime="20210731 10:42:13.510" endtime="20210731 10:42:13.514"/>
</iter>
<status status="PASS" starttime="20210731 10:42:13.500" endtime="20210731 10:42:13.515"/>
</for>
<status status="PASS" starttime="20210731 10:42:13.499" endtime="20210731 10:42:13.515"/>
</branch>
<status status="PASS" starttime="20210731 10:42:13.499" endtime="20210731 10:42:13.515"/>
</if>
<status status="PASS" starttime="20210731 10:42:13.485" endtime="20210731 10:42:13.515"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '!#%&amp;/¤%=!()=?'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:42:11.896" endtime="20210731 10:42:13.515">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t5" name="With Each Valid Token, Updating Username Of Each System User With 1234567 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:13.527" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:13.537" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:13.537" level="INFO">${pids} = 10441</msg>
<status status="PASS" starttime="20210731 10:42:13.518" endtime="20210731 10:42:13.537"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:13.538" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:13.537" endtime="20210731 10:42:13.538"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:13.540" level="INFO">${pids} = ['10441']</msg>
<status status="PASS" starttime="20210731 10:42:13.539" endtime="20210731 10:42:13.540"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10441</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:13.544" level="INFO">Running command 'kill 10441 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:13.540" endtime="20210731 10:42:13.545"/>
</kw>
<status status="PASS" starttime="20210731 10:42:13.540" endtime="20210731 10:42:13.545"/>
</iter>
<status status="PASS" starttime="20210731 10:42:13.540" endtime="20210731 10:42:13.545"/>
</for>
<status status="PASS" starttime="20210731 10:42:13.539" endtime="20210731 10:42:13.545"/>
</branch>
<status status="PASS" starttime="20210731 10:42:13.538" endtime="20210731 10:42:13.545"/>
</if>
<status status="PASS" starttime="20210731 10:42:13.517" endtime="20210731 10:42:13.545"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:13.547" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:13.546" endtime="20210731 10:42:13.547"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:13.548" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:13.548" endtime="20210731 10:42:13.548"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:13.548" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:13.548" endtime="20210731 10:42:13.548"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:13.549" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:13.549" endtime="20210731 10:42:13.549"/>
</kw>
<msg timestamp="20210731 10:42:13.551" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:13.547" endtime="20210731 10:42:13.551"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:13.555" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:13.551" endtime="20210731 10:42:13.557"/>
</kw>
<status status="PASS" starttime="20210731 10:42:13.546" endtime="20210731 10:42:13.557"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:42:13.559" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:42:13.558" endtime="20210731 10:42:13.563"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:42:15.067" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:42:13.564" endtime="20210731 10:42:15.067"/>
</kw>
<status status="PASS" starttime="20210731 10:42:13.558" endtime="20210731 10:42:15.067"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:15.068" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:15.068" endtime="20210731 10:42:15.068"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:15.069" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:15.068" endtime="20210731 10:42:15.069"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:15.069" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:15.069" endtime="20210731 10:42:15.069"/>
</kw>
<msg timestamp="20210731 10:42:15.069" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:15.068" endtime="20210731 10:42:15.069"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:42:15.070" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:42:15.069" endtime="20210731 10:42:15.070"/>
</kw>
<status status="PASS" starttime="20210731 10:42:15.067" endtime="20210731 10:42:15.070"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:42:15.071" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:42:15.071" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:42:15.071" endtime="20210731 10:42:15.071"/>
</kw>
<status status="PASS" starttime="20210731 10:42:15.070" endtime="20210731 10:42:15.071"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:42:15.072" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:42:15.072" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:42:15.071" endtime="20210731 10:42:15.072"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:42:15.073" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:42:15.072" endtime="20210731 10:42:15.073"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:15.074" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:15.073" endtime="20210731 10:42:15.074"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:15.074" endtime="20210731 10:42:15.075"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:15.075" endtime="20210731 10:42:15.075"/>
</kw>
<status status="PASS" starttime="20210731 10:42:15.073" endtime="20210731 10:42:15.075"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:15.076" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:15.075" endtime="20210731 10:42:15.076"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:15.076" endtime="20210731 10:42:15.077"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:15.077" endtime="20210731 10:42:15.077"/>
</kw>
<status status="PASS" starttime="20210731 10:42:15.075" endtime="20210731 10:42:15.077"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:15.078" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:15.078" endtime="20210731 10:42:15.078"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:15.078" endtime="20210731 10:42:15.079"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:15.079" endtime="20210731 10:42:15.079"/>
</kw>
<status status="PASS" starttime="20210731 10:42:15.077" endtime="20210731 10:42:15.079"/>
</iter>
<status status="PASS" starttime="20210731 10:42:15.073" endtime="20210731 10:42:15.079"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:42:15.079" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:42:15.079" endtime="20210731 10:42:15.079"/>
</kw>
<status status="PASS" starttime="20210731 10:42:15.071" endtime="20210731 10:42:15.079"/>
</kw>
<status status="PASS" starttime="20210731 10:42:13.517" endtime="20210731 10:42:15.079"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=1234567</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:15.081" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:42:15.080" endtime="20210731 10:42:15.081"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:15.081" level="INFO">${payload} = {'username': '1234567'}</msg>
<status status="PASS" starttime="20210731 10:42:15.081" endtime="20210731 10:42:15.081"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:15.091" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:15.091" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:15.081" endtime="20210731 10:42:15.091"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:15.092" endtime="20210731 10:42:15.092"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:15.092" endtime="20210731 10:42:15.092"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:15.081" endtime="20210731 10:42:15.092"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:15.081" endtime="20210731 10:42:15.092"/>
</for>
<status status="FAIL" starttime="20210731 10:42:15.080" endtime="20210731 10:42:15.092"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:15.080" endtime="20210731 10:42:15.092"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=1234567</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:15.094" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:42:15.093" endtime="20210731 10:42:15.094"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:15.094" level="INFO">${payload} = {'username': '1234567'}</msg>
<status status="PASS" starttime="20210731 10:42:15.094" endtime="20210731 10:42:15.094"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:15.099" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:15.099" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:15.094" endtime="20210731 10:42:15.099"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:15.099" endtime="20210731 10:42:15.099"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:15.099" endtime="20210731 10:42:15.099"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:15.094" endtime="20210731 10:42:15.099"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:15.094" endtime="20210731 10:42:15.099"/>
</for>
<status status="FAIL" starttime="20210731 10:42:15.092" endtime="20210731 10:42:15.100"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:15.092" endtime="20210731 10:42:15.100"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=1234567</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:15.101" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:42:15.101" endtime="20210731 10:42:15.101"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:15.102" level="INFO">${payload} = {'username': '1234567'}</msg>
<status status="PASS" starttime="20210731 10:42:15.101" endtime="20210731 10:42:15.102"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:15.107" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:15.108" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:15.102" endtime="20210731 10:42:15.108"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:15.108" endtime="20210731 10:42:15.108"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:15.108" endtime="20210731 10:42:15.108"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:15.102" endtime="20210731 10:42:15.108"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:15.102" endtime="20210731 10:42:15.108"/>
</for>
<status status="FAIL" starttime="20210731 10:42:15.100" endtime="20210731 10:42:15.108"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:15.100" endtime="20210731 10:42:15.108"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:15.080" endtime="20210731 10:42:15.108"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:15.112" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:15.122" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:15.122" level="INFO">${pids} = 10464
10471
10475</msg>
<status status="PASS" starttime="20210731 10:42:15.109" endtime="20210731 10:42:15.122"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:15.123" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:15.122" endtime="20210731 10:42:15.123"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:15.124" level="INFO">${pids} = ['10464', '10471', '10475']</msg>
<status status="PASS" starttime="20210731 10:42:15.124" endtime="20210731 10:42:15.124"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10464</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:15.127" level="INFO">Running command 'kill 10464 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:15.124" endtime="20210731 10:42:15.128"/>
</kw>
<status status="PASS" starttime="20210731 10:42:15.124" endtime="20210731 10:42:15.128"/>
</iter>
<iter>
<var name="${pid}">10471</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:15.137" level="INFO">Running command 'kill 10471 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:15.128" endtime="20210731 10:42:15.138"/>
</kw>
<status status="PASS" starttime="20210731 10:42:15.128" endtime="20210731 10:42:15.141"/>
</iter>
<iter>
<var name="${pid}">10475</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:15.145" level="INFO">Running command 'kill 10475 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:15.141" endtime="20210731 10:42:15.146"/>
</kw>
<status status="PASS" starttime="20210731 10:42:15.141" endtime="20210731 10:42:15.146"/>
</iter>
<status status="PASS" starttime="20210731 10:42:15.124" endtime="20210731 10:42:15.146"/>
</for>
<status status="PASS" starttime="20210731 10:42:15.123" endtime="20210731 10:42:15.146"/>
</branch>
<status status="PASS" starttime="20210731 10:42:15.123" endtime="20210731 10:42:15.146"/>
</if>
<status status="PASS" starttime="20210731 10:42:15.109" endtime="20210731 10:42:15.146"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '1234567'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:42:13.516" endtime="20210731 10:42:15.147">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t6" name="With Each Valid Token, Updating Username Of Each System User With 12345678 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:15.158" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:15.167" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:15.167" level="INFO">${pids} = 10504</msg>
<status status="PASS" starttime="20210731 10:42:15.149" endtime="20210731 10:42:15.167"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:15.168" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:15.168" endtime="20210731 10:42:15.168"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:15.169" level="INFO">${pids} = ['10504']</msg>
<status status="PASS" starttime="20210731 10:42:15.169" endtime="20210731 10:42:15.169"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10504</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:15.174" level="INFO">Running command 'kill 10504 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:15.171" endtime="20210731 10:42:15.175"/>
</kw>
<status status="PASS" starttime="20210731 10:42:15.170" endtime="20210731 10:42:15.175"/>
</iter>
<status status="PASS" starttime="20210731 10:42:15.169" endtime="20210731 10:42:15.175"/>
</for>
<status status="PASS" starttime="20210731 10:42:15.169" endtime="20210731 10:42:15.175"/>
</branch>
<status status="PASS" starttime="20210731 10:42:15.169" endtime="20210731 10:42:15.175"/>
</if>
<status status="PASS" starttime="20210731 10:42:15.148" endtime="20210731 10:42:15.175"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:15.177" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:15.176" endtime="20210731 10:42:15.177"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:15.178" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:15.177" endtime="20210731 10:42:15.178"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:15.178" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:15.178" endtime="20210731 10:42:15.178"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:15.178" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:15.178" endtime="20210731 10:42:15.178"/>
</kw>
<msg timestamp="20210731 10:42:15.179" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:15.177" endtime="20210731 10:42:15.179"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:15.182" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:15.179" endtime="20210731 10:42:15.184"/>
</kw>
<status status="PASS" starttime="20210731 10:42:15.176" endtime="20210731 10:42:15.184"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:42:15.186" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:42:15.185" endtime="20210731 10:42:15.191"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:42:16.693" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:42:15.191" endtime="20210731 10:42:16.693"/>
</kw>
<status status="PASS" starttime="20210731 10:42:15.185" endtime="20210731 10:42:16.693"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:16.694" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:16.694" endtime="20210731 10:42:16.694"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:16.694" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:16.694" endtime="20210731 10:42:16.694"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:16.695" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:16.695" endtime="20210731 10:42:16.695"/>
</kw>
<msg timestamp="20210731 10:42:16.695" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:16.694" endtime="20210731 10:42:16.695"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:42:16.695" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:42:16.695" endtime="20210731 10:42:16.697"/>
</kw>
<status status="PASS" starttime="20210731 10:42:16.693" endtime="20210731 10:42:16.697"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:42:16.698" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:42:16.698" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:42:16.698" endtime="20210731 10:42:16.698"/>
</kw>
<status status="PASS" starttime="20210731 10:42:16.697" endtime="20210731 10:42:16.698"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:42:16.698" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:42:16.699" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:42:16.698" endtime="20210731 10:42:16.699"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:42:16.699" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:42:16.699" endtime="20210731 10:42:16.699"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:16.699" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:16.699" endtime="20210731 10:42:16.699"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:16.700" endtime="20210731 10:42:16.700"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:16.700" endtime="20210731 10:42:16.701"/>
</kw>
<status status="PASS" starttime="20210731 10:42:16.699" endtime="20210731 10:42:16.701"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:16.701" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:16.701" endtime="20210731 10:42:16.701"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:16.701" endtime="20210731 10:42:16.702"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:16.702" endtime="20210731 10:42:16.702"/>
</kw>
<status status="PASS" starttime="20210731 10:42:16.701" endtime="20210731 10:42:16.702"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:16.702" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:16.702" endtime="20210731 10:42:16.702"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:16.703" endtime="20210731 10:42:16.703"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:16.703" endtime="20210731 10:42:16.704"/>
</kw>
<status status="PASS" starttime="20210731 10:42:16.702" endtime="20210731 10:42:16.704"/>
</iter>
<status status="PASS" starttime="20210731 10:42:16.699" endtime="20210731 10:42:16.704"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:42:16.704" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:42:16.704" endtime="20210731 10:42:16.704"/>
</kw>
<status status="PASS" starttime="20210731 10:42:16.698" endtime="20210731 10:42:16.704"/>
</kw>
<status status="PASS" starttime="20210731 10:42:15.148" endtime="20210731 10:42:16.705"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=12345678</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:16.707" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:42:16.706" endtime="20210731 10:42:16.707"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:16.707" level="INFO">${payload} = {'username': '12345678'}</msg>
<status status="PASS" starttime="20210731 10:42:16.707" endtime="20210731 10:42:16.707"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:16.719" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:16.719" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:16.709" endtime="20210731 10:42:16.719"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:16.719" endtime="20210731 10:42:16.719"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:16.719" endtime="20210731 10:42:16.719"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:16.709" endtime="20210731 10:42:16.719"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:16.707" endtime="20210731 10:42:16.720"/>
</for>
<status status="FAIL" starttime="20210731 10:42:16.705" endtime="20210731 10:42:16.720"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:16.705" endtime="20210731 10:42:16.720"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=12345678</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:16.721" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:42:16.721" endtime="20210731 10:42:16.721"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:16.722" level="INFO">${payload} = {'username': '12345678'}</msg>
<status status="PASS" starttime="20210731 10:42:16.721" endtime="20210731 10:42:16.722"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:16.733" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:16.733" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:16.722" endtime="20210731 10:42:16.733"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:16.733" endtime="20210731 10:42:16.733"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:16.733" endtime="20210731 10:42:16.733"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:16.722" endtime="20210731 10:42:16.734"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:16.722" endtime="20210731 10:42:16.734"/>
</for>
<status status="FAIL" starttime="20210731 10:42:16.720" endtime="20210731 10:42:16.734"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:16.720" endtime="20210731 10:42:16.734"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=12345678</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:16.735" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:42:16.735" endtime="20210731 10:42:16.735"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:16.736" level="INFO">${payload} = {'username': '12345678'}</msg>
<status status="PASS" starttime="20210731 10:42:16.735" endtime="20210731 10:42:16.736"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:16.742" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:16.743" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:16.736" endtime="20210731 10:42:16.743"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:16.743" endtime="20210731 10:42:16.743"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:16.743" endtime="20210731 10:42:16.743"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:16.736" endtime="20210731 10:42:16.743"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:16.736" endtime="20210731 10:42:16.743"/>
</for>
<status status="FAIL" starttime="20210731 10:42:16.734" endtime="20210731 10:42:16.744"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:16.734" endtime="20210731 10:42:16.744"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:16.705" endtime="20210731 10:42:16.744"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:16.751" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:16.763" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:16.763" level="INFO">${pids} = 10527
10534
10544</msg>
<status status="PASS" starttime="20210731 10:42:16.745" endtime="20210731 10:42:16.763"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:16.764" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:16.764" endtime="20210731 10:42:16.764"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:16.765" level="INFO">${pids} = ['10527', '10534', '10544']</msg>
<status status="PASS" starttime="20210731 10:42:16.765" endtime="20210731 10:42:16.765"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10527</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:16.770" level="INFO">Running command 'kill 10527 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:16.766" endtime="20210731 10:42:16.771"/>
</kw>
<status status="PASS" starttime="20210731 10:42:16.766" endtime="20210731 10:42:16.771"/>
</iter>
<iter>
<var name="${pid}">10534</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:16.775" level="INFO">Running command 'kill 10534 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:16.772" endtime="20210731 10:42:16.776"/>
</kw>
<status status="PASS" starttime="20210731 10:42:16.771" endtime="20210731 10:42:16.776"/>
</iter>
<iter>
<var name="${pid}">10544</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:16.782" level="INFO">Running command 'kill 10544 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:16.777" endtime="20210731 10:42:16.783"/>
</kw>
<status status="PASS" starttime="20210731 10:42:16.777" endtime="20210731 10:42:16.783"/>
</iter>
<status status="PASS" starttime="20210731 10:42:16.766" endtime="20210731 10:42:16.783"/>
</for>
<status status="PASS" starttime="20210731 10:42:16.765" endtime="20210731 10:42:16.783"/>
</branch>
<status status="PASS" starttime="20210731 10:42:16.765" endtime="20210731 10:42:16.783"/>
</if>
<status status="PASS" starttime="20210731 10:42:16.744" endtime="20210731 10:42:16.783"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '12345678'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:42:15.147" endtime="20210731 10:42:16.784">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t7" name="With Each Valid Token, Updating Username Of Each System User With 12345678912345 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:16.795" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:16.807" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:16.807" level="INFO">${pids} = 10573</msg>
<status status="PASS" starttime="20210731 10:42:16.791" endtime="20210731 10:42:16.807"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:16.809" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:16.808" endtime="20210731 10:42:16.809"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:16.810" level="INFO">${pids} = ['10573']</msg>
<status status="PASS" starttime="20210731 10:42:16.810" endtime="20210731 10:42:16.810"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10573</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:16.818" level="INFO">Running command 'kill 10573 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:16.814" endtime="20210731 10:42:16.818"/>
</kw>
<status status="PASS" starttime="20210731 10:42:16.813" endtime="20210731 10:42:16.818"/>
</iter>
<status status="PASS" starttime="20210731 10:42:16.810" endtime="20210731 10:42:16.818"/>
</for>
<status status="PASS" starttime="20210731 10:42:16.809" endtime="20210731 10:42:16.818"/>
</branch>
<status status="PASS" starttime="20210731 10:42:16.809" endtime="20210731 10:42:16.818"/>
</if>
<status status="PASS" starttime="20210731 10:42:16.790" endtime="20210731 10:42:16.819"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:16.820" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:16.820" endtime="20210731 10:42:16.820"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:16.821" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:16.821" endtime="20210731 10:42:16.821"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:16.822" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:16.821" endtime="20210731 10:42:16.822"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:16.822" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:16.822" endtime="20210731 10:42:16.823"/>
</kw>
<msg timestamp="20210731 10:42:16.825" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:16.820" endtime="20210731 10:42:16.825"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:16.829" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:16.825" endtime="20210731 10:42:16.831"/>
</kw>
<status status="PASS" starttime="20210731 10:42:16.819" endtime="20210731 10:42:16.831"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:42:16.834" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:42:16.833" endtime="20210731 10:42:16.839"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:42:18.341" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:42:16.840" endtime="20210731 10:42:18.341"/>
</kw>
<status status="PASS" starttime="20210731 10:42:16.832" endtime="20210731 10:42:18.342"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:18.343" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:18.343" endtime="20210731 10:42:18.343"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:18.343" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:18.343" endtime="20210731 10:42:18.343"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:18.344" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:18.343" endtime="20210731 10:42:18.344"/>
</kw>
<msg timestamp="20210731 10:42:18.344" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:18.342" endtime="20210731 10:42:18.344"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:42:18.344" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:42:18.344" endtime="20210731 10:42:18.344"/>
</kw>
<status status="PASS" starttime="20210731 10:42:18.342" endtime="20210731 10:42:18.345"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:42:18.345" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:42:18.345" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:42:18.345" endtime="20210731 10:42:18.345"/>
</kw>
<status status="PASS" starttime="20210731 10:42:18.345" endtime="20210731 10:42:18.346"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:42:18.346" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:42:18.346" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:42:18.346" endtime="20210731 10:42:18.346"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:42:18.346" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:42:18.346" endtime="20210731 10:42:18.346"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:18.347" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:18.347" endtime="20210731 10:42:18.347"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:18.347" endtime="20210731 10:42:18.348"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:18.348" endtime="20210731 10:42:18.349"/>
</kw>
<status status="PASS" starttime="20210731 10:42:18.347" endtime="20210731 10:42:18.349"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:18.350" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:18.349" endtime="20210731 10:42:18.350"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:18.351" endtime="20210731 10:42:18.351"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:18.351" endtime="20210731 10:42:18.352"/>
</kw>
<status status="PASS" starttime="20210731 10:42:18.349" endtime="20210731 10:42:18.352"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:18.352" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:18.352" endtime="20210731 10:42:18.352"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:18.352" endtime="20210731 10:42:18.353"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:18.353" endtime="20210731 10:42:18.353"/>
</kw>
<status status="PASS" starttime="20210731 10:42:18.352" endtime="20210731 10:42:18.353"/>
</iter>
<status status="PASS" starttime="20210731 10:42:18.347" endtime="20210731 10:42:18.353"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:42:18.354" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:42:18.354" endtime="20210731 10:42:18.354"/>
</kw>
<status status="PASS" starttime="20210731 10:42:18.346" endtime="20210731 10:42:18.354"/>
</kw>
<status status="PASS" starttime="20210731 10:42:16.790" endtime="20210731 10:42:18.354"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=12345678912345</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:18.355" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:42:18.355" endtime="20210731 10:42:18.355"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:18.356" level="INFO">${payload} = {'username': '12345678912345'}</msg>
<status status="PASS" starttime="20210731 10:42:18.356" endtime="20210731 10:42:18.356"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:18.366" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:18.366" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:18.356" endtime="20210731 10:42:18.366"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:18.366" endtime="20210731 10:42:18.367"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:18.367" endtime="20210731 10:42:18.367"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:18.356" endtime="20210731 10:42:18.367"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:18.356" endtime="20210731 10:42:18.367"/>
</for>
<status status="FAIL" starttime="20210731 10:42:18.355" endtime="20210731 10:42:18.367"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:18.355" endtime="20210731 10:42:18.367"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=12345678912345</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:18.368" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:42:18.368" endtime="20210731 10:42:18.368"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:18.368" level="INFO">${payload} = {'username': '12345678912345'}</msg>
<status status="PASS" starttime="20210731 10:42:18.368" endtime="20210731 10:42:18.368"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:18.374" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:18.374" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:18.369" endtime="20210731 10:42:18.374"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:18.375" endtime="20210731 10:42:18.376"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:18.376" endtime="20210731 10:42:18.376"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:18.369" endtime="20210731 10:42:18.376"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:18.368" endtime="20210731 10:42:18.376"/>
</for>
<status status="FAIL" starttime="20210731 10:42:18.367" endtime="20210731 10:42:18.376"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:18.367" endtime="20210731 10:42:18.376"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=12345678912345</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:18.378" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:42:18.377" endtime="20210731 10:42:18.378"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:18.378" level="INFO">${payload} = {'username': '12345678912345'}</msg>
<status status="PASS" starttime="20210731 10:42:18.378" endtime="20210731 10:42:18.378"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:18.383" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:18.383" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:18.378" endtime="20210731 10:42:18.383"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:18.383" endtime="20210731 10:42:18.384"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:18.384" endtime="20210731 10:42:18.384"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:18.378" endtime="20210731 10:42:18.384"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:18.378" endtime="20210731 10:42:18.384"/>
</for>
<status status="FAIL" starttime="20210731 10:42:18.377" endtime="20210731 10:42:18.384"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:18.377" endtime="20210731 10:42:18.384"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:18.354" endtime="20210731 10:42:18.384"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:18.388" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:18.397" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:18.398" level="INFO">${pids} = 10596
10603
10608</msg>
<status status="PASS" starttime="20210731 10:42:18.385" endtime="20210731 10:42:18.398"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:18.399" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:18.398" endtime="20210731 10:42:18.399"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:18.399" level="INFO">${pids} = ['10596', '10603', '10608']</msg>
<status status="PASS" starttime="20210731 10:42:18.399" endtime="20210731 10:42:18.399"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10596</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:18.403" level="INFO">Running command 'kill 10596 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:18.400" endtime="20210731 10:42:18.403"/>
</kw>
<status status="PASS" starttime="20210731 10:42:18.400" endtime="20210731 10:42:18.404"/>
</iter>
<iter>
<var name="${pid}">10603</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:18.408" level="INFO">Running command 'kill 10603 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:18.404" endtime="20210731 10:42:18.410"/>
</kw>
<status status="PASS" starttime="20210731 10:42:18.404" endtime="20210731 10:42:18.410"/>
</iter>
<iter>
<var name="${pid}">10608</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:18.413" level="INFO">Running command 'kill 10608 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:18.410" endtime="20210731 10:42:18.414"/>
</kw>
<status status="PASS" starttime="20210731 10:42:18.410" endtime="20210731 10:42:18.414"/>
</iter>
<status status="PASS" starttime="20210731 10:42:18.399" endtime="20210731 10:42:18.414"/>
</for>
<status status="PASS" starttime="20210731 10:42:18.399" endtime="20210731 10:42:18.414"/>
</branch>
<status status="PASS" starttime="20210731 10:42:18.399" endtime="20210731 10:42:18.414"/>
</if>
<status status="PASS" starttime="20210731 10:42:18.384" endtime="20210731 10:42:18.414"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '12345678912345'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:42:16.789" endtime="20210731 10:42:18.415">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t8" name="With Each Valid Token, Updating Username Of Each System User With abcdefg Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:18.422" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:18.434" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:18.435" level="INFO">${pids} = 10637</msg>
<status status="PASS" starttime="20210731 10:42:18.419" endtime="20210731 10:42:18.435"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:18.436" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:18.435" endtime="20210731 10:42:18.436"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:18.436" level="INFO">${pids} = ['10637']</msg>
<status status="PASS" starttime="20210731 10:42:18.436" endtime="20210731 10:42:18.436"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10637</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:18.441" level="INFO">Running command 'kill 10637 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:18.437" endtime="20210731 10:42:18.442"/>
</kw>
<status status="PASS" starttime="20210731 10:42:18.437" endtime="20210731 10:42:18.442"/>
</iter>
<status status="PASS" starttime="20210731 10:42:18.437" endtime="20210731 10:42:18.442"/>
</for>
<status status="PASS" starttime="20210731 10:42:18.436" endtime="20210731 10:42:18.442"/>
</branch>
<status status="PASS" starttime="20210731 10:42:18.436" endtime="20210731 10:42:18.442"/>
</if>
<status status="PASS" starttime="20210731 10:42:18.418" endtime="20210731 10:42:18.443"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:18.444" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:18.444" endtime="20210731 10:42:18.444"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:18.445" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:18.444" endtime="20210731 10:42:18.445"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:18.445" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:18.445" endtime="20210731 10:42:18.445"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:18.446" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:18.445" endtime="20210731 10:42:18.446"/>
</kw>
<msg timestamp="20210731 10:42:18.446" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:18.444" endtime="20210731 10:42:18.446"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:18.449" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:18.446" endtime="20210731 10:42:18.451"/>
</kw>
<status status="PASS" starttime="20210731 10:42:18.443" endtime="20210731 10:42:18.451"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:42:18.452" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:42:18.452" endtime="20210731 10:42:18.456"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:42:19.958" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:42:18.457" endtime="20210731 10:42:19.959"/>
</kw>
<status status="PASS" starttime="20210731 10:42:18.451" endtime="20210731 10:42:19.959"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:19.963" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:19.962" endtime="20210731 10:42:19.963"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:19.963" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:19.963" endtime="20210731 10:42:19.963"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:19.964" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:19.963" endtime="20210731 10:42:19.964"/>
</kw>
<msg timestamp="20210731 10:42:19.964" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:19.962" endtime="20210731 10:42:19.964"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:42:19.965" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:42:19.964" endtime="20210731 10:42:19.966"/>
</kw>
<status status="PASS" starttime="20210731 10:42:19.960" endtime="20210731 10:42:19.966"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:42:19.967" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:42:19.967" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:42:19.967" endtime="20210731 10:42:19.967"/>
</kw>
<status status="PASS" starttime="20210731 10:42:19.966" endtime="20210731 10:42:19.967"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:42:19.968" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:42:19.968" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:42:19.967" endtime="20210731 10:42:19.968"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:42:19.968" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:42:19.968" endtime="20210731 10:42:19.968"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:19.969" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:19.968" endtime="20210731 10:42:19.969"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:19.969" endtime="20210731 10:42:19.970"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:19.970" endtime="20210731 10:42:19.970"/>
</kw>
<status status="PASS" starttime="20210731 10:42:19.968" endtime="20210731 10:42:19.970"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:19.970" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:19.970" endtime="20210731 10:42:19.970"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:19.970" endtime="20210731 10:42:19.971"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:19.971" endtime="20210731 10:42:19.972"/>
</kw>
<status status="PASS" starttime="20210731 10:42:19.970" endtime="20210731 10:42:19.972"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:19.972" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:19.972" endtime="20210731 10:42:19.972"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:19.973" endtime="20210731 10:42:19.974"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:19.974" endtime="20210731 10:42:19.975"/>
</kw>
<status status="PASS" starttime="20210731 10:42:19.972" endtime="20210731 10:42:19.975"/>
</iter>
<status status="PASS" starttime="20210731 10:42:19.968" endtime="20210731 10:42:19.975"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:42:19.976" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:42:19.976" endtime="20210731 10:42:19.976"/>
</kw>
<status status="PASS" starttime="20210731 10:42:19.967" endtime="20210731 10:42:19.976"/>
</kw>
<status status="PASS" starttime="20210731 10:42:18.416" endtime="20210731 10:42:19.976"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcdefg</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:19.978" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:42:19.978" endtime="20210731 10:42:19.978"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:19.980" level="INFO">${payload} = {'username': 'abcdefg'}</msg>
<status status="PASS" starttime="20210731 10:42:19.978" endtime="20210731 10:42:19.980"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:19.989" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:19.990" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:19.980" endtime="20210731 10:42:19.990"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:19.990" endtime="20210731 10:42:19.990"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:19.990" endtime="20210731 10:42:19.990"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:19.980" endtime="20210731 10:42:19.990"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:19.980" endtime="20210731 10:42:19.990"/>
</for>
<status status="FAIL" starttime="20210731 10:42:19.977" endtime="20210731 10:42:19.991"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:19.977" endtime="20210731 10:42:19.991"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcdefg</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:19.992" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:42:19.991" endtime="20210731 10:42:19.992"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:19.992" level="INFO">${payload} = {'username': 'abcdefg'}</msg>
<status status="PASS" starttime="20210731 10:42:19.992" endtime="20210731 10:42:19.992"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:19.997" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:19.997" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:19.993" endtime="20210731 10:42:19.997"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:19.997" endtime="20210731 10:42:19.997"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:19.997" endtime="20210731 10:42:19.997"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:19.993" endtime="20210731 10:42:19.998"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:19.992" endtime="20210731 10:42:19.998"/>
</for>
<status status="FAIL" starttime="20210731 10:42:19.991" endtime="20210731 10:42:19.998"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:19.991" endtime="20210731 10:42:19.998"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcdefg</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:19.999" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:42:19.999" endtime="20210731 10:42:19.999"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:20.000" level="INFO">${payload} = {'username': 'abcdefg'}</msg>
<status status="PASS" starttime="20210731 10:42:19.999" endtime="20210731 10:42:20.000"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:20.005" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:20.006" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:20.000" endtime="20210731 10:42:20.006"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:20.006" endtime="20210731 10:42:20.006"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:20.006" endtime="20210731 10:42:20.007"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:20.000" endtime="20210731 10:42:20.007"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:20.000" endtime="20210731 10:42:20.007"/>
</for>
<status status="FAIL" starttime="20210731 10:42:19.998" endtime="20210731 10:42:20.007"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:19.998" endtime="20210731 10:42:20.007"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:19.977" endtime="20210731 10:42:20.007"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:20.018" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:20.028" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:20.028" level="INFO">${pids} = 10660
10667
10674</msg>
<status status="PASS" starttime="20210731 10:42:20.008" endtime="20210731 10:42:20.028"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:20.030" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:20.029" endtime="20210731 10:42:20.030"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:20.030" level="INFO">${pids} = ['10660', '10667', '10674']</msg>
<status status="PASS" starttime="20210731 10:42:20.030" endtime="20210731 10:42:20.031"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10660</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:20.034" level="INFO">Running command 'kill 10660 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:20.031" endtime="20210731 10:42:20.035"/>
</kw>
<status status="PASS" starttime="20210731 10:42:20.031" endtime="20210731 10:42:20.035"/>
</iter>
<iter>
<var name="${pid}">10667</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:20.040" level="INFO">Running command 'kill 10667 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:20.036" endtime="20210731 10:42:20.043"/>
</kw>
<status status="PASS" starttime="20210731 10:42:20.036" endtime="20210731 10:42:20.043"/>
</iter>
<iter>
<var name="${pid}">10674</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:20.047" level="INFO">Running command 'kill 10674 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:20.043" endtime="20210731 10:42:20.047"/>
</kw>
<status status="PASS" starttime="20210731 10:42:20.043" endtime="20210731 10:42:20.047"/>
</iter>
<status status="PASS" starttime="20210731 10:42:20.031" endtime="20210731 10:42:20.047"/>
</for>
<status status="PASS" starttime="20210731 10:42:20.030" endtime="20210731 10:42:20.048"/>
</branch>
<status status="PASS" starttime="20210731 10:42:20.030" endtime="20210731 10:42:20.048"/>
</if>
<status status="PASS" starttime="20210731 10:42:20.007" endtime="20210731 10:42:20.048"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": 'abcdefg'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:42:18.415" endtime="20210731 10:42:20.048">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t9" name="With Each Valid Token, Updating Username Of Each System User With abcdefgh Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:20.053" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:20.064" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:20.064" level="INFO">${pids} = 10703</msg>
<status status="PASS" starttime="20210731 10:42:20.051" endtime="20210731 10:42:20.064"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:20.066" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:20.065" endtime="20210731 10:42:20.066"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:20.067" level="INFO">${pids} = ['10703']</msg>
<status status="PASS" starttime="20210731 10:42:20.066" endtime="20210731 10:42:20.067"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10703</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:20.070" level="INFO">Running command 'kill 10703 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:20.067" endtime="20210731 10:42:20.071"/>
</kw>
<status status="PASS" starttime="20210731 10:42:20.067" endtime="20210731 10:42:20.071"/>
</iter>
<status status="PASS" starttime="20210731 10:42:20.067" endtime="20210731 10:42:20.071"/>
</for>
<status status="PASS" starttime="20210731 10:42:20.066" endtime="20210731 10:42:20.071"/>
</branch>
<status status="PASS" starttime="20210731 10:42:20.066" endtime="20210731 10:42:20.071"/>
</if>
<status status="PASS" starttime="20210731 10:42:20.050" endtime="20210731 10:42:20.072"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:20.074" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:20.073" endtime="20210731 10:42:20.074"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:20.075" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:20.075" endtime="20210731 10:42:20.075"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:20.076" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:20.075" endtime="20210731 10:42:20.076"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:20.078" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:20.076" endtime="20210731 10:42:20.078"/>
</kw>
<msg timestamp="20210731 10:42:20.078" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:20.074" endtime="20210731 10:42:20.078"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:20.082" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:20.079" endtime="20210731 10:42:20.084"/>
</kw>
<status status="PASS" starttime="20210731 10:42:20.072" endtime="20210731 10:42:20.084"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:42:20.086" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:42:20.085" endtime="20210731 10:42:20.091"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:42:21.595" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:42:20.092" endtime="20210731 10:42:21.595"/>
</kw>
<status status="PASS" starttime="20210731 10:42:20.085" endtime="20210731 10:42:21.596"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:21.597" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:21.597" endtime="20210731 10:42:21.597"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:21.598" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:21.597" endtime="20210731 10:42:21.598"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:21.599" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:21.599" endtime="20210731 10:42:21.599"/>
</kw>
<msg timestamp="20210731 10:42:21.599" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:21.596" endtime="20210731 10:42:21.599"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:42:21.599" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:42:21.599" endtime="20210731 10:42:21.600"/>
</kw>
<status status="PASS" starttime="20210731 10:42:21.596" endtime="20210731 10:42:21.600"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:42:21.601" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:42:21.601" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:42:21.601" endtime="20210731 10:42:21.601"/>
</kw>
<status status="PASS" starttime="20210731 10:42:21.600" endtime="20210731 10:42:21.601"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:42:21.602" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:42:21.602" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:42:21.602" endtime="20210731 10:42:21.602"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:42:21.603" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:42:21.602" endtime="20210731 10:42:21.603"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:21.603" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:21.603" endtime="20210731 10:42:21.603"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:21.604" endtime="20210731 10:42:21.604"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:21.604" endtime="20210731 10:42:21.605"/>
</kw>
<status status="PASS" starttime="20210731 10:42:21.603" endtime="20210731 10:42:21.605"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:21.606" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:21.605" endtime="20210731 10:42:21.606"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:21.607" endtime="20210731 10:42:21.608"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:21.608" endtime="20210731 10:42:21.608"/>
</kw>
<status status="PASS" starttime="20210731 10:42:21.605" endtime="20210731 10:42:21.608"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:21.609" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:21.609" endtime="20210731 10:42:21.609"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:21.609" endtime="20210731 10:42:21.610"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:21.610" endtime="20210731 10:42:21.610"/>
</kw>
<status status="PASS" starttime="20210731 10:42:21.609" endtime="20210731 10:42:21.610"/>
</iter>
<status status="PASS" starttime="20210731 10:42:21.603" endtime="20210731 10:42:21.610"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:42:21.611" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:42:21.610" endtime="20210731 10:42:21.611"/>
</kw>
<status status="PASS" starttime="20210731 10:42:21.602" endtime="20210731 10:42:21.611"/>
</kw>
<status status="PASS" starttime="20210731 10:42:20.050" endtime="20210731 10:42:21.611"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcdefgh</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:21.613" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:42:21.613" endtime="20210731 10:42:21.613"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:21.614" level="INFO">${payload} = {'username': 'abcdefgh'}</msg>
<status status="PASS" starttime="20210731 10:42:21.613" endtime="20210731 10:42:21.614"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:21.624" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:21.624" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:21.614" endtime="20210731 10:42:21.624"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:21.624" endtime="20210731 10:42:21.624"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:21.624" endtime="20210731 10:42:21.624"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:21.614" endtime="20210731 10:42:21.625"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:21.614" endtime="20210731 10:42:21.625"/>
</for>
<status status="FAIL" starttime="20210731 10:42:21.612" endtime="20210731 10:42:21.625"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:21.611" endtime="20210731 10:42:21.625"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcdefgh</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:21.626" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:42:21.626" endtime="20210731 10:42:21.626"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:21.626" level="INFO">${payload} = {'username': 'abcdefgh'}</msg>
<status status="PASS" starttime="20210731 10:42:21.626" endtime="20210731 10:42:21.626"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:21.631" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:21.632" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:21.627" endtime="20210731 10:42:21.632"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:21.633" endtime="20210731 10:42:21.633"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:21.633" endtime="20210731 10:42:21.633"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:21.627" endtime="20210731 10:42:21.634"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:21.626" endtime="20210731 10:42:21.634"/>
</for>
<status status="FAIL" starttime="20210731 10:42:21.625" endtime="20210731 10:42:21.634"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:21.625" endtime="20210731 10:42:21.634"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcdefgh</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:21.635" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:42:21.635" endtime="20210731 10:42:21.635"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:21.636" level="INFO">${payload} = {'username': 'abcdefgh'}</msg>
<status status="PASS" starttime="20210731 10:42:21.635" endtime="20210731 10:42:21.636"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:21.642" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:21.642" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:21.636" endtime="20210731 10:42:21.642"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:21.642" endtime="20210731 10:42:21.642"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:21.642" endtime="20210731 10:42:21.642"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:21.636" endtime="20210731 10:42:21.642"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:21.636" endtime="20210731 10:42:21.642"/>
</for>
<status status="FAIL" starttime="20210731 10:42:21.634" endtime="20210731 10:42:21.643"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:21.634" endtime="20210731 10:42:21.643"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:21.611" endtime="20210731 10:42:21.643"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:21.654" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:21.664" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:21.664" level="INFO">${pids} = 10726
10733
10743</msg>
<status status="PASS" starttime="20210731 10:42:21.643" endtime="20210731 10:42:21.664"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:21.665" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:21.664" endtime="20210731 10:42:21.665"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:21.666" level="INFO">${pids} = ['10726', '10733', '10743']</msg>
<status status="PASS" starttime="20210731 10:42:21.666" endtime="20210731 10:42:21.666"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10726</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:21.677" level="INFO">Running command 'kill 10726 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:21.666" endtime="20210731 10:42:21.677"/>
</kw>
<status status="PASS" starttime="20210731 10:42:21.666" endtime="20210731 10:42:21.677"/>
</iter>
<iter>
<var name="${pid}">10733</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:21.682" level="INFO">Running command 'kill 10733 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:21.678" endtime="20210731 10:42:21.683"/>
</kw>
<status status="PASS" starttime="20210731 10:42:21.678" endtime="20210731 10:42:21.683"/>
</iter>
<iter>
<var name="${pid}">10743</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:21.687" level="INFO">Running command 'kill 10743 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:21.684" endtime="20210731 10:42:21.687"/>
</kw>
<status status="PASS" starttime="20210731 10:42:21.683" endtime="20210731 10:42:21.687"/>
</iter>
<status status="PASS" starttime="20210731 10:42:21.666" endtime="20210731 10:42:21.688"/>
</for>
<status status="PASS" starttime="20210731 10:42:21.665" endtime="20210731 10:42:21.688"/>
</branch>
<status status="PASS" starttime="20210731 10:42:21.665" endtime="20210731 10:42:21.688"/>
</if>
<status status="PASS" starttime="20210731 10:42:21.643" endtime="20210731 10:42:21.688"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": 'abcdefgh'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:42:20.049" endtime="20210731 10:42:21.688">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t10" name="With Each Valid Token, Updating Username Of Each System User With abcdefghijklmnprstop Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:21.694" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:21.703" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:21.703" level="INFO">${pids} = 10772</msg>
<status status="PASS" starttime="20210731 10:42:21.691" endtime="20210731 10:42:21.703"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:21.706" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:21.704" endtime="20210731 10:42:21.706"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:21.707" level="INFO">${pids} = ['10772']</msg>
<status status="PASS" starttime="20210731 10:42:21.707" endtime="20210731 10:42:21.707"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10772</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:21.711" level="INFO">Running command 'kill 10772 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:21.708" endtime="20210731 10:42:21.712"/>
</kw>
<status status="PASS" starttime="20210731 10:42:21.707" endtime="20210731 10:42:21.712"/>
</iter>
<status status="PASS" starttime="20210731 10:42:21.707" endtime="20210731 10:42:21.712"/>
</for>
<status status="PASS" starttime="20210731 10:42:21.706" endtime="20210731 10:42:21.712"/>
</branch>
<status status="PASS" starttime="20210731 10:42:21.706" endtime="20210731 10:42:21.712"/>
</if>
<status status="PASS" starttime="20210731 10:42:21.690" endtime="20210731 10:42:21.712"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:21.714" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:21.713" endtime="20210731 10:42:21.714"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:21.714" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:21.714" endtime="20210731 10:42:21.715"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:21.715" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:21.715" endtime="20210731 10:42:21.715"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:21.715" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:21.715" endtime="20210731 10:42:21.715"/>
</kw>
<msg timestamp="20210731 10:42:21.716" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:21.714" endtime="20210731 10:42:21.716"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:21.719" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:21.716" endtime="20210731 10:42:21.722"/>
</kw>
<status status="PASS" starttime="20210731 10:42:21.713" endtime="20210731 10:42:21.722"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:42:21.724" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:42:21.723" endtime="20210731 10:42:21.735"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:42:23.240" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:42:21.736" endtime="20210731 10:42:23.240"/>
</kw>
<status status="PASS" starttime="20210731 10:42:21.723" endtime="20210731 10:42:23.241"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:23.242" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:23.242" endtime="20210731 10:42:23.242"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:23.242" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:23.242" endtime="20210731 10:42:23.242"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:23.243" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:23.243" endtime="20210731 10:42:23.243"/>
</kw>
<msg timestamp="20210731 10:42:23.243" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:23.241" endtime="20210731 10:42:23.243"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:42:23.244" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:42:23.243" endtime="20210731 10:42:23.244"/>
</kw>
<status status="PASS" starttime="20210731 10:42:23.241" endtime="20210731 10:42:23.244"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:42:23.245" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:42:23.245" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:42:23.245" endtime="20210731 10:42:23.245"/>
</kw>
<status status="PASS" starttime="20210731 10:42:23.244" endtime="20210731 10:42:23.245"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:42:23.246" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:42:23.246" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:42:23.245" endtime="20210731 10:42:23.246"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:42:23.246" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:42:23.246" endtime="20210731 10:42:23.246"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:23.247" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:23.246" endtime="20210731 10:42:23.247"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:23.247" endtime="20210731 10:42:23.247"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:23.247" endtime="20210731 10:42:23.248"/>
</kw>
<status status="PASS" starttime="20210731 10:42:23.246" endtime="20210731 10:42:23.248"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:23.248" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:23.248" endtime="20210731 10:42:23.248"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:23.248" endtime="20210731 10:42:23.249"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:23.249" endtime="20210731 10:42:23.249"/>
</kw>
<status status="PASS" starttime="20210731 10:42:23.248" endtime="20210731 10:42:23.249"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:23.250" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:23.249" endtime="20210731 10:42:23.250"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:23.250" endtime="20210731 10:42:23.251"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:23.251" endtime="20210731 10:42:23.251"/>
</kw>
<status status="PASS" starttime="20210731 10:42:23.249" endtime="20210731 10:42:23.251"/>
</iter>
<status status="PASS" starttime="20210731 10:42:23.246" endtime="20210731 10:42:23.251"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:42:23.251" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:42:23.251" endtime="20210731 10:42:23.251"/>
</kw>
<status status="PASS" starttime="20210731 10:42:23.245" endtime="20210731 10:42:23.252"/>
</kw>
<status status="PASS" starttime="20210731 10:42:21.690" endtime="20210731 10:42:23.252"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcdefghijklmnprstop</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:23.253" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:42:23.253" endtime="20210731 10:42:23.253"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:23.254" level="INFO">${payload} = {'username': 'abcdefghijklmnprstop'}</msg>
<status status="PASS" starttime="20210731 10:42:23.253" endtime="20210731 10:42:23.254"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:23.264" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:23.264" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:23.254" endtime="20210731 10:42:23.264"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:23.264" endtime="20210731 10:42:23.264"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:23.264" endtime="20210731 10:42:23.264"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:23.254" endtime="20210731 10:42:23.265"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:23.254" endtime="20210731 10:42:23.265"/>
</for>
<status status="FAIL" starttime="20210731 10:42:23.252" endtime="20210731 10:42:23.265"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:23.252" endtime="20210731 10:42:23.265"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcdefghijklmnprstop</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:23.266" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:42:23.266" endtime="20210731 10:42:23.266"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:23.267" level="INFO">${payload} = {'username': 'abcdefghijklmnprstop'}</msg>
<status status="PASS" starttime="20210731 10:42:23.266" endtime="20210731 10:42:23.267"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:23.272" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:23.272" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:23.267" endtime="20210731 10:42:23.272"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:23.273" endtime="20210731 10:42:23.273"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:23.273" endtime="20210731 10:42:23.273"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:23.267" endtime="20210731 10:42:23.273"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:23.267" endtime="20210731 10:42:23.273"/>
</for>
<status status="FAIL" starttime="20210731 10:42:23.265" endtime="20210731 10:42:23.273"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:23.265" endtime="20210731 10:42:23.273"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcdefghijklmnprstop</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:23.275" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:42:23.274" endtime="20210731 10:42:23.275"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:23.276" level="INFO">${payload} = {'username': 'abcdefghijklmnprstop'}</msg>
<status status="PASS" starttime="20210731 10:42:23.275" endtime="20210731 10:42:23.276"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:23.281" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:23.282" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:23.276" endtime="20210731 10:42:23.282"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:23.282" endtime="20210731 10:42:23.282"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:23.282" endtime="20210731 10:42:23.282"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:23.276" endtime="20210731 10:42:23.282"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:23.276" endtime="20210731 10:42:23.282"/>
</for>
<status status="FAIL" starttime="20210731 10:42:23.274" endtime="20210731 10:42:23.282"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:23.274" endtime="20210731 10:42:23.282"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:23.252" endtime="20210731 10:42:23.282"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:23.287" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:23.297" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:23.297" level="INFO">${pids} = 10795
10802
10807</msg>
<status status="PASS" starttime="20210731 10:42:23.283" endtime="20210731 10:42:23.297"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:23.298" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:23.298" endtime="20210731 10:42:23.298"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:23.299" level="INFO">${pids} = ['10795', '10802', '10807']</msg>
<status status="PASS" starttime="20210731 10:42:23.299" endtime="20210731 10:42:23.299"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10795</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:23.303" level="INFO">Running command 'kill 10795 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:23.300" endtime="20210731 10:42:23.304"/>
</kw>
<status status="PASS" starttime="20210731 10:42:23.299" endtime="20210731 10:42:23.304"/>
</iter>
<iter>
<var name="${pid}">10802</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:23.309" level="INFO">Running command 'kill 10802 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:23.304" endtime="20210731 10:42:23.311"/>
</kw>
<status status="PASS" starttime="20210731 10:42:23.304" endtime="20210731 10:42:23.311"/>
</iter>
<iter>
<var name="${pid}">10807</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:23.315" level="INFO">Running command 'kill 10807 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:23.312" endtime="20210731 10:42:23.316"/>
</kw>
<status status="PASS" starttime="20210731 10:42:23.311" endtime="20210731 10:42:23.316"/>
</iter>
<status status="PASS" starttime="20210731 10:42:23.299" endtime="20210731 10:42:23.316"/>
</for>
<status status="PASS" starttime="20210731 10:42:23.299" endtime="20210731 10:42:23.316"/>
</branch>
<status status="PASS" starttime="20210731 10:42:23.298" endtime="20210731 10:42:23.316"/>
</if>
<status status="PASS" starttime="20210731 10:42:23.283" endtime="20210731 10:42:23.316"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": 'abcdefghijklmnprstop'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:42:21.689" endtime="20210731 10:42:23.317">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t11" name="With Each Valid Token, Updating Username Of Each System User With hakan12 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:23.323" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:23.332" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:23.332" level="INFO">${pids} = 10836</msg>
<status status="PASS" starttime="20210731 10:42:23.319" endtime="20210731 10:42:23.332"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:23.334" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:23.333" endtime="20210731 10:42:23.334"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:23.334" level="INFO">${pids} = ['10836']</msg>
<status status="PASS" starttime="20210731 10:42:23.334" endtime="20210731 10:42:23.334"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10836</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:23.338" level="INFO">Running command 'kill 10836 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:23.335" endtime="20210731 10:42:23.339"/>
</kw>
<status status="PASS" starttime="20210731 10:42:23.335" endtime="20210731 10:42:23.339"/>
</iter>
<status status="PASS" starttime="20210731 10:42:23.335" endtime="20210731 10:42:23.339"/>
</for>
<status status="PASS" starttime="20210731 10:42:23.334" endtime="20210731 10:42:23.339"/>
</branch>
<status status="PASS" starttime="20210731 10:42:23.334" endtime="20210731 10:42:23.339"/>
</if>
<status status="PASS" starttime="20210731 10:42:23.319" endtime="20210731 10:42:23.340"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:23.342" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:23.341" endtime="20210731 10:42:23.342"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:23.343" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:23.343" endtime="20210731 10:42:23.343"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:23.343" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:23.343" endtime="20210731 10:42:23.344"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:23.345" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:23.344" endtime="20210731 10:42:23.345"/>
</kw>
<msg timestamp="20210731 10:42:23.345" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:23.342" endtime="20210731 10:42:23.345"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:23.349" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:23.345" endtime="20210731 10:42:23.351"/>
</kw>
<status status="PASS" starttime="20210731 10:42:23.340" endtime="20210731 10:42:23.351"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:42:23.353" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:42:23.352" endtime="20210731 10:42:23.358"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:42:24.876" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:42:23.358" endtime="20210731 10:42:24.876"/>
</kw>
<status status="PASS" starttime="20210731 10:42:23.352" endtime="20210731 10:42:24.876"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:24.878" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:24.877" endtime="20210731 10:42:24.878"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:24.878" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:24.878" endtime="20210731 10:42:24.878"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:24.878" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:24.878" endtime="20210731 10:42:24.878"/>
</kw>
<msg timestamp="20210731 10:42:24.878" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:24.877" endtime="20210731 10:42:24.878"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:42:24.879" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:42:24.879" endtime="20210731 10:42:24.879"/>
</kw>
<status status="PASS" starttime="20210731 10:42:24.876" endtime="20210731 10:42:24.880"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:42:24.880" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:42:24.880" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:42:24.880" endtime="20210731 10:42:24.880"/>
</kw>
<status status="PASS" starttime="20210731 10:42:24.880" endtime="20210731 10:42:24.880"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:42:24.881" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:42:24.881" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:42:24.881" endtime="20210731 10:42:24.881"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:42:24.881" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:42:24.881" endtime="20210731 10:42:24.881"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:24.882" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:24.882" endtime="20210731 10:42:24.882"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:24.882" endtime="20210731 10:42:24.883"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:24.883" endtime="20210731 10:42:24.883"/>
</kw>
<status status="PASS" starttime="20210731 10:42:24.882" endtime="20210731 10:42:24.883"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:24.885" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:24.885" endtime="20210731 10:42:24.885"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:24.885" endtime="20210731 10:42:24.886"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:24.886" endtime="20210731 10:42:24.886"/>
</kw>
<status status="PASS" starttime="20210731 10:42:24.883" endtime="20210731 10:42:24.886"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:24.886" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:24.886" endtime="20210731 10:42:24.886"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:24.886" endtime="20210731 10:42:24.887"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:24.887" endtime="20210731 10:42:24.888"/>
</kw>
<status status="PASS" starttime="20210731 10:42:24.886" endtime="20210731 10:42:24.888"/>
</iter>
<status status="PASS" starttime="20210731 10:42:24.881" endtime="20210731 10:42:24.888"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:42:24.888" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:42:24.888" endtime="20210731 10:42:24.888"/>
</kw>
<status status="PASS" starttime="20210731 10:42:24.880" endtime="20210731 10:42:24.888"/>
</kw>
<status status="PASS" starttime="20210731 10:42:23.318" endtime="20210731 10:42:24.889"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=hakan12</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:24.890" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:42:24.890" endtime="20210731 10:42:24.890"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:24.890" level="INFO">${payload} = {'username': 'hakan12'}</msg>
<status status="PASS" starttime="20210731 10:42:24.890" endtime="20210731 10:42:24.890"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:24.901" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:24.902" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:24.891" endtime="20210731 10:42:24.902"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:24.902" endtime="20210731 10:42:24.902"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:24.902" endtime="20210731 10:42:24.903"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:24.891" endtime="20210731 10:42:24.903"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:24.890" endtime="20210731 10:42:24.903"/>
</for>
<status status="FAIL" starttime="20210731 10:42:24.889" endtime="20210731 10:42:24.903"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:24.889" endtime="20210731 10:42:24.903"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=hakan12</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:24.904" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:42:24.904" endtime="20210731 10:42:24.904"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:24.905" level="INFO">${payload} = {'username': 'hakan12'}</msg>
<status status="PASS" starttime="20210731 10:42:24.904" endtime="20210731 10:42:24.905"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:24.912" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:24.912" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:24.905" endtime="20210731 10:42:24.912"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:24.912" endtime="20210731 10:42:24.912"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:24.912" endtime="20210731 10:42:24.912"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:24.905" endtime="20210731 10:42:24.912"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:24.905" endtime="20210731 10:42:24.912"/>
</for>
<status status="FAIL" starttime="20210731 10:42:24.903" endtime="20210731 10:42:24.913"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:24.903" endtime="20210731 10:42:24.913"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=hakan12</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:24.914" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:42:24.914" endtime="20210731 10:42:24.915"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:24.915" level="INFO">${payload} = {'username': 'hakan12'}</msg>
<status status="PASS" starttime="20210731 10:42:24.915" endtime="20210731 10:42:24.915"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:24.920" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:24.920" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:24.915" endtime="20210731 10:42:24.920"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:24.920" endtime="20210731 10:42:24.921"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:24.921" endtime="20210731 10:42:24.921"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:24.915" endtime="20210731 10:42:24.921"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:24.915" endtime="20210731 10:42:24.921"/>
</for>
<status status="FAIL" starttime="20210731 10:42:24.913" endtime="20210731 10:42:24.921"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:24.913" endtime="20210731 10:42:24.921"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:24.889" endtime="20210731 10:42:24.921"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:24.931" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:24.941" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:24.941" level="INFO">${pids} = 10859
10866
10870</msg>
<status status="PASS" starttime="20210731 10:42:24.922" endtime="20210731 10:42:24.941"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:24.943" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:24.942" endtime="20210731 10:42:24.943"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:24.943" level="INFO">${pids} = ['10859', '10866', '10870']</msg>
<status status="PASS" starttime="20210731 10:42:24.943" endtime="20210731 10:42:24.943"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10859</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:24.947" level="INFO">Running command 'kill 10859 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:24.944" endtime="20210731 10:42:24.947"/>
</kw>
<status status="PASS" starttime="20210731 10:42:24.944" endtime="20210731 10:42:24.947"/>
</iter>
<iter>
<var name="${pid}">10866</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:24.956" level="INFO">Running command 'kill 10866 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:24.948" endtime="20210731 10:42:24.957"/>
</kw>
<status status="PASS" starttime="20210731 10:42:24.948" endtime="20210731 10:42:24.957"/>
</iter>
<iter>
<var name="${pid}">10870</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:24.961" level="INFO">Running command 'kill 10870 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:24.958" endtime="20210731 10:42:24.961"/>
</kw>
<status status="PASS" starttime="20210731 10:42:24.957" endtime="20210731 10:42:24.961"/>
</iter>
<status status="PASS" starttime="20210731 10:42:24.943" endtime="20210731 10:42:24.962"/>
</for>
<status status="PASS" starttime="20210731 10:42:24.943" endtime="20210731 10:42:24.962"/>
</branch>
<status status="PASS" starttime="20210731 10:42:24.943" endtime="20210731 10:42:24.962"/>
</if>
<status status="PASS" starttime="20210731 10:42:24.922" endtime="20210731 10:42:24.962"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": 'hakan12'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:42:23.318" endtime="20210731 10:42:24.962">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t12" name="With Each Valid Token, Updating Username Of Each System User With hakan123 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:24.968" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:24.977" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:24.977" level="INFO">${pids} = 10899</msg>
<status status="PASS" starttime="20210731 10:42:24.964" endtime="20210731 10:42:24.978"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:24.979" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:24.978" endtime="20210731 10:42:24.979"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:24.979" level="INFO">${pids} = ['10899']</msg>
<status status="PASS" starttime="20210731 10:42:24.979" endtime="20210731 10:42:24.979"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10899</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:24.983" level="INFO">Running command 'kill 10899 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:24.980" endtime="20210731 10:42:24.983"/>
</kw>
<status status="PASS" starttime="20210731 10:42:24.980" endtime="20210731 10:42:24.983"/>
</iter>
<status status="PASS" starttime="20210731 10:42:24.979" endtime="20210731 10:42:24.983"/>
</for>
<status status="PASS" starttime="20210731 10:42:24.979" endtime="20210731 10:42:24.983"/>
</branch>
<status status="PASS" starttime="20210731 10:42:24.979" endtime="20210731 10:42:24.983"/>
</if>
<status status="PASS" starttime="20210731 10:42:24.964" endtime="20210731 10:42:24.984"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:24.985" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:24.984" endtime="20210731 10:42:24.985"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:24.986" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:24.986" endtime="20210731 10:42:24.986"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:24.986" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:24.986" endtime="20210731 10:42:24.986"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:24.987" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:24.986" endtime="20210731 10:42:24.987"/>
</kw>
<msg timestamp="20210731 10:42:24.987" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:24.985" endtime="20210731 10:42:24.987"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:24.990" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:24.987" endtime="20210731 10:42:24.992"/>
</kw>
<status status="PASS" starttime="20210731 10:42:24.984" endtime="20210731 10:42:24.993"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:42:24.994" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:42:24.994" endtime="20210731 10:42:24.999"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:42:26.501" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:42:24.999" endtime="20210731 10:42:26.501"/>
</kw>
<status status="PASS" starttime="20210731 10:42:24.993" endtime="20210731 10:42:26.502"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:26.505" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:26.504" endtime="20210731 10:42:26.505"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:26.506" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:26.505" endtime="20210731 10:42:26.506"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:26.509" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:26.506" endtime="20210731 10:42:26.509"/>
</kw>
<msg timestamp="20210731 10:42:26.509" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:26.503" endtime="20210731 10:42:26.509"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:42:26.511" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:42:26.511" endtime="20210731 10:42:26.511"/>
</kw>
<status status="PASS" starttime="20210731 10:42:26.503" endtime="20210731 10:42:26.511"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:42:26.512" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:42:26.512" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:42:26.512" endtime="20210731 10:42:26.512"/>
</kw>
<status status="PASS" starttime="20210731 10:42:26.512" endtime="20210731 10:42:26.512"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:42:26.513" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:42:26.513" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:42:26.513" endtime="20210731 10:42:26.513"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:42:26.513" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:42:26.513" endtime="20210731 10:42:26.513"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:26.514" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:26.514" endtime="20210731 10:42:26.514"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:26.514" endtime="20210731 10:42:26.515"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:26.515" endtime="20210731 10:42:26.515"/>
</kw>
<status status="PASS" starttime="20210731 10:42:26.514" endtime="20210731 10:42:26.515"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:26.516" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:26.515" endtime="20210731 10:42:26.516"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:26.516" endtime="20210731 10:42:26.516"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:26.517" endtime="20210731 10:42:26.517"/>
</kw>
<status status="PASS" starttime="20210731 10:42:26.515" endtime="20210731 10:42:26.517"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:26.517" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:26.517" endtime="20210731 10:42:26.517"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:26.517" endtime="20210731 10:42:26.518"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:26.518" endtime="20210731 10:42:26.519"/>
</kw>
<status status="PASS" starttime="20210731 10:42:26.517" endtime="20210731 10:42:26.519"/>
</iter>
<status status="PASS" starttime="20210731 10:42:26.514" endtime="20210731 10:42:26.519"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:42:26.519" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:42:26.519" endtime="20210731 10:42:26.519"/>
</kw>
<status status="PASS" starttime="20210731 10:42:26.512" endtime="20210731 10:42:26.519"/>
</kw>
<status status="PASS" starttime="20210731 10:42:24.963" endtime="20210731 10:42:26.519"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=hakan123</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:26.522" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:42:26.520" endtime="20210731 10:42:26.522"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:26.523" level="INFO">${payload} = {'username': 'hakan123'}</msg>
<status status="PASS" starttime="20210731 10:42:26.522" endtime="20210731 10:42:26.523"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:26.542" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:26.543" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:26.523" endtime="20210731 10:42:26.543"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:26.543" endtime="20210731 10:42:26.543"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:26.543" endtime="20210731 10:42:26.543"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:26.523" endtime="20210731 10:42:26.543"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:26.523" endtime="20210731 10:42:26.543"/>
</for>
<status status="FAIL" starttime="20210731 10:42:26.520" endtime="20210731 10:42:26.543"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:26.520" endtime="20210731 10:42:26.543"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=hakan123</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:26.545" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:42:26.544" endtime="20210731 10:42:26.545"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:26.545" level="INFO">${payload} = {'username': 'hakan123'}</msg>
<status status="PASS" starttime="20210731 10:42:26.545" endtime="20210731 10:42:26.545"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:26.551" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:26.552" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:26.546" endtime="20210731 10:42:26.552"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:26.552" endtime="20210731 10:42:26.552"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:26.552" endtime="20210731 10:42:26.552"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:26.546" endtime="20210731 10:42:26.553"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:26.545" endtime="20210731 10:42:26.553"/>
</for>
<status status="FAIL" starttime="20210731 10:42:26.544" endtime="20210731 10:42:26.553"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:26.544" endtime="20210731 10:42:26.553"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=hakan123</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:26.556" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:42:26.556" endtime="20210731 10:42:26.556"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:26.559" level="INFO">${payload} = {'username': 'hakan123'}</msg>
<status status="PASS" starttime="20210731 10:42:26.557" endtime="20210731 10:42:26.559"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:26.565" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:26.565" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:26.559" endtime="20210731 10:42:26.565"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:26.565" endtime="20210731 10:42:26.566"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:26.566" endtime="20210731 10:42:26.566"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:26.559" endtime="20210731 10:42:26.566"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:26.559" endtime="20210731 10:42:26.566"/>
</for>
<status status="FAIL" starttime="20210731 10:42:26.555" endtime="20210731 10:42:26.566"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:26.555" endtime="20210731 10:42:26.566"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:26.519" endtime="20210731 10:42:26.566"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:26.571" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:26.586" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:26.587" level="INFO">${pids} = 10922
10929
10939</msg>
<status status="PASS" starttime="20210731 10:42:26.568" endtime="20210731 10:42:26.587"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:26.588" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:26.587" endtime="20210731 10:42:26.588"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:26.589" level="INFO">${pids} = ['10922', '10929', '10939']</msg>
<status status="PASS" starttime="20210731 10:42:26.588" endtime="20210731 10:42:26.589"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10922</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:26.593" level="INFO">Running command 'kill 10922 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:26.590" endtime="20210731 10:42:26.594"/>
</kw>
<status status="PASS" starttime="20210731 10:42:26.589" endtime="20210731 10:42:26.594"/>
</iter>
<iter>
<var name="${pid}">10929</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:26.606" level="INFO">Running command 'kill 10929 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:26.594" endtime="20210731 10:42:26.606"/>
</kw>
<status status="PASS" starttime="20210731 10:42:26.594" endtime="20210731 10:42:26.606"/>
</iter>
<iter>
<var name="${pid}">10939</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:26.612" level="INFO">Running command 'kill 10939 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:26.607" endtime="20210731 10:42:26.613"/>
</kw>
<status status="PASS" starttime="20210731 10:42:26.607" endtime="20210731 10:42:26.613"/>
</iter>
<status status="PASS" starttime="20210731 10:42:26.589" endtime="20210731 10:42:26.613"/>
</for>
<status status="PASS" starttime="20210731 10:42:26.588" endtime="20210731 10:42:26.613"/>
</branch>
<status status="PASS" starttime="20210731 10:42:26.588" endtime="20210731 10:42:26.613"/>
</if>
<status status="PASS" starttime="20210731 10:42:26.567" endtime="20210731 10:42:26.613"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": 'hakan123'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:42:24.963" endtime="20210731 10:42:26.614">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t13" name="With Each Valid Token, Updating Username Of Each System User With hakan123456789123456789 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:26.620" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:26.630" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:26.630" level="INFO">${pids} = 10968</msg>
<status status="PASS" starttime="20210731 10:42:26.617" endtime="20210731 10:42:26.630"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:26.631" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:26.631" endtime="20210731 10:42:26.631"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:26.632" level="INFO">${pids} = ['10968']</msg>
<status status="PASS" starttime="20210731 10:42:26.632" endtime="20210731 10:42:26.632"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10968</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:26.636" level="INFO">Running command 'kill 10968 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:26.633" endtime="20210731 10:42:26.636"/>
</kw>
<status status="PASS" starttime="20210731 10:42:26.633" endtime="20210731 10:42:26.636"/>
</iter>
<status status="PASS" starttime="20210731 10:42:26.632" endtime="20210731 10:42:26.637"/>
</for>
<status status="PASS" starttime="20210731 10:42:26.632" endtime="20210731 10:42:26.637"/>
</branch>
<status status="PASS" starttime="20210731 10:42:26.631" endtime="20210731 10:42:26.637"/>
</if>
<status status="PASS" starttime="20210731 10:42:26.616" endtime="20210731 10:42:26.637"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:26.638" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:26.638" endtime="20210731 10:42:26.639"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:26.640" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:26.639" endtime="20210731 10:42:26.640"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:26.643" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:26.641" endtime="20210731 10:42:26.643"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:26.644" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:26.644" endtime="20210731 10:42:26.644"/>
</kw>
<msg timestamp="20210731 10:42:26.644" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:26.639" endtime="20210731 10:42:26.644"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:26.648" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:26.644" endtime="20210731 10:42:26.654"/>
</kw>
<status status="PASS" starttime="20210731 10:42:26.637" endtime="20210731 10:42:26.654"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:42:26.656" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:42:26.655" endtime="20210731 10:42:26.661"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:42:28.169" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:42:26.662" endtime="20210731 10:42:28.169"/>
</kw>
<status status="PASS" starttime="20210731 10:42:26.655" endtime="20210731 10:42:28.170"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:28.171" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:28.171" endtime="20210731 10:42:28.171"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:28.171" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:28.171" endtime="20210731 10:42:28.172"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:28.172" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:28.172" endtime="20210731 10:42:28.172"/>
</kw>
<msg timestamp="20210731 10:42:28.172" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:28.170" endtime="20210731 10:42:28.172"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:42:28.173" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:42:28.173" endtime="20210731 10:42:28.174"/>
</kw>
<status status="PASS" starttime="20210731 10:42:28.170" endtime="20210731 10:42:28.175"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:42:28.176" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:42:28.176" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:42:28.176" endtime="20210731 10:42:28.176"/>
</kw>
<status status="PASS" starttime="20210731 10:42:28.175" endtime="20210731 10:42:28.176"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:42:28.177" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:42:28.177" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:42:28.177" endtime="20210731 10:42:28.177"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:42:28.178" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:42:28.177" endtime="20210731 10:42:28.178"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:28.178" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:28.178" endtime="20210731 10:42:28.178"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:28.178" endtime="20210731 10:42:28.179"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:28.179" endtime="20210731 10:42:28.180"/>
</kw>
<status status="PASS" starttime="20210731 10:42:28.178" endtime="20210731 10:42:28.180"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:28.182" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:28.181" endtime="20210731 10:42:28.182"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:28.182" endtime="20210731 10:42:28.184"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:28.184" endtime="20210731 10:42:28.185"/>
</kw>
<status status="PASS" starttime="20210731 10:42:28.180" endtime="20210731 10:42:28.185"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:28.185" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:28.185" endtime="20210731 10:42:28.185"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:28.185" endtime="20210731 10:42:28.186"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:28.186" endtime="20210731 10:42:28.186"/>
</kw>
<status status="PASS" starttime="20210731 10:42:28.185" endtime="20210731 10:42:28.186"/>
</iter>
<status status="PASS" starttime="20210731 10:42:28.178" endtime="20210731 10:42:28.186"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:42:28.187" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:42:28.186" endtime="20210731 10:42:28.187"/>
</kw>
<status status="PASS" starttime="20210731 10:42:28.176" endtime="20210731 10:42:28.187"/>
</kw>
<status status="PASS" starttime="20210731 10:42:26.616" endtime="20210731 10:42:28.187"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=hakan123456789123456789</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:28.188" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:42:28.188" endtime="20210731 10:42:28.188"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:28.189" level="INFO">${payload} = {'username': 'hakan123456789123456789'}</msg>
<status status="PASS" starttime="20210731 10:42:28.189" endtime="20210731 10:42:28.189"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:28.199" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:28.199" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:28.189" endtime="20210731 10:42:28.199"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:28.199" endtime="20210731 10:42:28.199"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:28.199" endtime="20210731 10:42:28.199"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:28.189" endtime="20210731 10:42:28.199"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:28.189" endtime="20210731 10:42:28.199"/>
</for>
<status status="FAIL" starttime="20210731 10:42:28.187" endtime="20210731 10:42:28.200"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:28.187" endtime="20210731 10:42:28.200"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=hakan123456789123456789</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:28.201" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:42:28.200" endtime="20210731 10:42:28.201"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:28.202" level="INFO">${payload} = {'username': 'hakan123456789123456789'}</msg>
<status status="PASS" starttime="20210731 10:42:28.201" endtime="20210731 10:42:28.202"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:28.209" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:28.209" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:28.202" endtime="20210731 10:42:28.209"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:28.209" endtime="20210731 10:42:28.209"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:28.210" endtime="20210731 10:42:28.210"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:28.202" endtime="20210731 10:42:28.210"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:28.202" endtime="20210731 10:42:28.210"/>
</for>
<status status="FAIL" starttime="20210731 10:42:28.200" endtime="20210731 10:42:28.210"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:28.200" endtime="20210731 10:42:28.210"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=hakan123456789123456789</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:28.211" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:42:28.211" endtime="20210731 10:42:28.211"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:28.212" level="INFO">${payload} = {'username': 'hakan123456789123456789'}</msg>
<status status="PASS" starttime="20210731 10:42:28.211" endtime="20210731 10:42:28.212"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:28.217" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:28.217" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:28.212" endtime="20210731 10:42:28.217"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:28.217" endtime="20210731 10:42:28.217"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:28.218" endtime="20210731 10:42:28.218"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:28.212" endtime="20210731 10:42:28.218"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:28.212" endtime="20210731 10:42:28.218"/>
</for>
<status status="FAIL" starttime="20210731 10:42:28.210" endtime="20210731 10:42:28.218"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:28.210" endtime="20210731 10:42:28.218"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:28.187" endtime="20210731 10:42:28.218"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:28.223" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:28.232" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:28.232" level="INFO">${pids} = 10991
10998
11003</msg>
<status status="PASS" starttime="20210731 10:42:28.219" endtime="20210731 10:42:28.232"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:28.233" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:28.233" endtime="20210731 10:42:28.233"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:28.234" level="INFO">${pids} = ['10991', '10998', '11003']</msg>
<status status="PASS" starttime="20210731 10:42:28.234" endtime="20210731 10:42:28.234"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10991</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:28.238" level="INFO">Running command 'kill 10991 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:28.235" endtime="20210731 10:42:28.239"/>
</kw>
<status status="PASS" starttime="20210731 10:42:28.234" endtime="20210731 10:42:28.239"/>
</iter>
<iter>
<var name="${pid}">10998</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:28.243" level="INFO">Running command 'kill 10998 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:28.239" endtime="20210731 10:42:28.243"/>
</kw>
<status status="PASS" starttime="20210731 10:42:28.239" endtime="20210731 10:42:28.244"/>
</iter>
<iter>
<var name="${pid}">11003</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:28.248" level="INFO">Running command 'kill 11003 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:28.244" endtime="20210731 10:42:28.248"/>
</kw>
<status status="PASS" starttime="20210731 10:42:28.244" endtime="20210731 10:42:28.248"/>
</iter>
<status status="PASS" starttime="20210731 10:42:28.234" endtime="20210731 10:42:28.248"/>
</for>
<status status="PASS" starttime="20210731 10:42:28.234" endtime="20210731 10:42:28.248"/>
</branch>
<status status="PASS" starttime="20210731 10:42:28.233" endtime="20210731 10:42:28.248"/>
</if>
<status status="PASS" starttime="20210731 10:42:28.218" endtime="20210731 10:42:28.249"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": 'hakan123456789123456789'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:42:26.614" endtime="20210731 10:42:28.249">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t14" name="With Each Valid Token, Updating Username Of Each System User With #¤%123! Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:28.256" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:28.265" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:28.265" level="INFO">${pids} = 11032</msg>
<status status="PASS" starttime="20210731 10:42:28.252" endtime="20210731 10:42:28.265"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:28.267" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:28.266" endtime="20210731 10:42:28.267"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:28.267" level="INFO">${pids} = ['11032']</msg>
<status status="PASS" starttime="20210731 10:42:28.267" endtime="20210731 10:42:28.267"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11032</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:28.271" level="INFO">Running command 'kill 11032 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:28.268" endtime="20210731 10:42:28.272"/>
</kw>
<status status="PASS" starttime="20210731 10:42:28.268" endtime="20210731 10:42:28.272"/>
</iter>
<status status="PASS" starttime="20210731 10:42:28.267" endtime="20210731 10:42:28.272"/>
</for>
<status status="PASS" starttime="20210731 10:42:28.267" endtime="20210731 10:42:28.272"/>
</branch>
<status status="PASS" starttime="20210731 10:42:28.267" endtime="20210731 10:42:28.272"/>
</if>
<status status="PASS" starttime="20210731 10:42:28.251" endtime="20210731 10:42:28.272"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:28.274" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:28.274" endtime="20210731 10:42:28.274"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:28.275" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:28.275" endtime="20210731 10:42:28.275"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:28.275" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:28.275" endtime="20210731 10:42:28.275"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:28.277" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:28.276" endtime="20210731 10:42:28.277"/>
</kw>
<msg timestamp="20210731 10:42:28.277" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:28.274" endtime="20210731 10:42:28.277"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:28.280" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:28.277" endtime="20210731 10:42:28.282"/>
</kw>
<status status="PASS" starttime="20210731 10:42:28.273" endtime="20210731 10:42:28.283"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:42:28.284" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:42:28.283" endtime="20210731 10:42:28.289"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:42:29.791" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:42:28.290" endtime="20210731 10:42:29.791"/>
</kw>
<status status="PASS" starttime="20210731 10:42:28.283" endtime="20210731 10:42:29.791"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:29.793" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:29.792" endtime="20210731 10:42:29.793"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:29.793" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:29.793" endtime="20210731 10:42:29.793"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:29.793" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:29.793" endtime="20210731 10:42:29.793"/>
</kw>
<msg timestamp="20210731 10:42:29.794" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:29.792" endtime="20210731 10:42:29.794"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:42:29.795" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:42:29.794" endtime="20210731 10:42:29.795"/>
</kw>
<status status="PASS" starttime="20210731 10:42:29.791" endtime="20210731 10:42:29.795"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:42:29.796" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:42:29.796" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:42:29.795" endtime="20210731 10:42:29.796"/>
</kw>
<status status="PASS" starttime="20210731 10:42:29.795" endtime="20210731 10:42:29.796"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:42:29.796" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:42:29.797" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:42:29.796" endtime="20210731 10:42:29.797"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:42:29.797" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:42:29.797" endtime="20210731 10:42:29.797"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:29.798" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:29.797" endtime="20210731 10:42:29.798"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:29.798" endtime="20210731 10:42:29.798"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:29.798" endtime="20210731 10:42:29.799"/>
</kw>
<status status="PASS" starttime="20210731 10:42:29.797" endtime="20210731 10:42:29.799"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:29.799" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:29.799" endtime="20210731 10:42:29.799"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:29.799" endtime="20210731 10:42:29.800"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:29.800" endtime="20210731 10:42:29.800"/>
</kw>
<status status="PASS" starttime="20210731 10:42:29.799" endtime="20210731 10:42:29.800"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:29.800" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:29.800" endtime="20210731 10:42:29.800"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:29.800" endtime="20210731 10:42:29.801"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:29.802" endtime="20210731 10:42:29.802"/>
</kw>
<status status="PASS" starttime="20210731 10:42:29.800" endtime="20210731 10:42:29.802"/>
</iter>
<status status="PASS" starttime="20210731 10:42:29.797" endtime="20210731 10:42:29.802"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:42:29.803" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:42:29.802" endtime="20210731 10:42:29.803"/>
</kw>
<status status="PASS" starttime="20210731 10:42:29.796" endtime="20210731 10:42:29.803"/>
</kw>
<status status="PASS" starttime="20210731 10:42:28.251" endtime="20210731 10:42:29.803"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤%123!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:29.807" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:42:29.806" endtime="20210731 10:42:29.807"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:29.808" level="INFO">${payload} = {'username': '#¤%123!'}</msg>
<status status="PASS" starttime="20210731 10:42:29.807" endtime="20210731 10:42:29.808"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:29.818" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:29.818" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:29.808" endtime="20210731 10:42:29.818"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:29.818" endtime="20210731 10:42:29.818"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:29.818" endtime="20210731 10:42:29.818"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:29.808" endtime="20210731 10:42:29.818"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:29.808" endtime="20210731 10:42:29.818"/>
</for>
<status status="FAIL" starttime="20210731 10:42:29.804" endtime="20210731 10:42:29.819"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:29.804" endtime="20210731 10:42:29.819"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤%123!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:29.820" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:42:29.819" endtime="20210731 10:42:29.820"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:29.820" level="INFO">${payload} = {'username': '#¤%123!'}</msg>
<status status="PASS" starttime="20210731 10:42:29.820" endtime="20210731 10:42:29.820"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:29.825" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:29.825" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:29.821" endtime="20210731 10:42:29.825"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:29.826" endtime="20210731 10:42:29.826"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:29.826" endtime="20210731 10:42:29.826"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:29.820" endtime="20210731 10:42:29.826"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:29.820" endtime="20210731 10:42:29.826"/>
</for>
<status status="FAIL" starttime="20210731 10:42:29.819" endtime="20210731 10:42:29.826"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:29.819" endtime="20210731 10:42:29.826"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤%123!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:29.827" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:42:29.827" endtime="20210731 10:42:29.827"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:29.828" level="INFO">${payload} = {'username': '#¤%123!'}</msg>
<status status="PASS" starttime="20210731 10:42:29.827" endtime="20210731 10:42:29.828"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:29.833" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:29.833" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:29.828" endtime="20210731 10:42:29.833"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:29.833" endtime="20210731 10:42:29.833"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:29.833" endtime="20210731 10:42:29.834"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:29.828" endtime="20210731 10:42:29.834"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:29.828" endtime="20210731 10:42:29.834"/>
</for>
<status status="FAIL" starttime="20210731 10:42:29.826" endtime="20210731 10:42:29.834"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:29.826" endtime="20210731 10:42:29.834"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:29.803" endtime="20210731 10:42:29.834"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:29.840" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:29.850" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:29.850" level="INFO">${pids} = 11055
11062
11066</msg>
<status status="PASS" starttime="20210731 10:42:29.836" endtime="20210731 10:42:29.850"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:29.851" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:29.850" endtime="20210731 10:42:29.851"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:29.853" level="INFO">${pids} = ['11055', '11062', '11066']</msg>
<status status="PASS" starttime="20210731 10:42:29.851" endtime="20210731 10:42:29.853"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11055</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:29.857" level="INFO">Running command 'kill 11055 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:29.854" endtime="20210731 10:42:29.858"/>
</kw>
<status status="PASS" starttime="20210731 10:42:29.854" endtime="20210731 10:42:29.858"/>
</iter>
<iter>
<var name="${pid}">11062</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:29.861" level="INFO">Running command 'kill 11062 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:29.858" endtime="20210731 10:42:29.862"/>
</kw>
<status status="PASS" starttime="20210731 10:42:29.858" endtime="20210731 10:42:29.862"/>
</iter>
<iter>
<var name="${pid}">11066</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:29.871" level="INFO">Running command 'kill 11066 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:29.862" endtime="20210731 10:42:29.871"/>
</kw>
<status status="PASS" starttime="20210731 10:42:29.862" endtime="20210731 10:42:29.871"/>
</iter>
<status status="PASS" starttime="20210731 10:42:29.854" endtime="20210731 10:42:29.871"/>
</for>
<status status="PASS" starttime="20210731 10:42:29.851" endtime="20210731 10:42:29.871"/>
</branch>
<status status="PASS" starttime="20210731 10:42:29.851" endtime="20210731 10:42:29.871"/>
</if>
<status status="PASS" starttime="20210731 10:42:29.836" endtime="20210731 10:42:29.872"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤%123!'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:42:28.250" endtime="20210731 10:42:29.872">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t15" name="With Each Valid Token, Updating Username Of Each System User With #¤%123!&amp; Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:29.878" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:29.888" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:29.888" level="INFO">${pids} = 11095</msg>
<status status="PASS" starttime="20210731 10:42:29.875" endtime="20210731 10:42:29.888"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:29.889" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:29.888" endtime="20210731 10:42:29.889"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:29.890" level="INFO">${pids} = ['11095']</msg>
<status status="PASS" starttime="20210731 10:42:29.890" endtime="20210731 10:42:29.890"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11095</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:29.894" level="INFO">Running command 'kill 11095 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:29.891" endtime="20210731 10:42:29.895"/>
</kw>
<status status="PASS" starttime="20210731 10:42:29.890" endtime="20210731 10:42:29.895"/>
</iter>
<status status="PASS" starttime="20210731 10:42:29.890" endtime="20210731 10:42:29.895"/>
</for>
<status status="PASS" starttime="20210731 10:42:29.889" endtime="20210731 10:42:29.895"/>
</branch>
<status status="PASS" starttime="20210731 10:42:29.889" endtime="20210731 10:42:29.895"/>
</if>
<status status="PASS" starttime="20210731 10:42:29.875" endtime="20210731 10:42:29.895"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:29.896" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:29.896" endtime="20210731 10:42:29.896"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:29.897" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:29.897" endtime="20210731 10:42:29.897"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:29.899" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:29.898" endtime="20210731 10:42:29.899"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:29.900" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:29.899" endtime="20210731 10:42:29.900"/>
</kw>
<msg timestamp="20210731 10:42:29.900" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:29.897" endtime="20210731 10:42:29.900"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:29.904" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:29.900" endtime="20210731 10:42:29.905"/>
</kw>
<status status="PASS" starttime="20210731 10:42:29.895" endtime="20210731 10:42:29.906"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:42:29.908" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:42:29.907" endtime="20210731 10:42:29.912"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:42:31.414" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:42:29.913" endtime="20210731 10:42:31.414"/>
</kw>
<status status="PASS" starttime="20210731 10:42:29.906" endtime="20210731 10:42:31.414"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:31.416" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:31.415" endtime="20210731 10:42:31.416"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:31.416" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:31.416" endtime="20210731 10:42:31.416"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:31.417" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:31.416" endtime="20210731 10:42:31.417"/>
</kw>
<msg timestamp="20210731 10:42:31.417" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:31.415" endtime="20210731 10:42:31.417"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:42:31.417" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:42:31.417" endtime="20210731 10:42:31.418"/>
</kw>
<status status="PASS" starttime="20210731 10:42:31.415" endtime="20210731 10:42:31.418"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:42:31.419" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:42:31.419" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:42:31.419" endtime="20210731 10:42:31.419"/>
</kw>
<status status="PASS" starttime="20210731 10:42:31.418" endtime="20210731 10:42:31.419"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:42:31.420" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:42:31.420" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:42:31.420" endtime="20210731 10:42:31.420"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:42:31.420" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:42:31.420" endtime="20210731 10:42:31.420"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:31.421" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:31.421" endtime="20210731 10:42:31.421"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:31.421" endtime="20210731 10:42:31.423"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:31.423" endtime="20210731 10:42:31.425"/>
</kw>
<status status="PASS" starttime="20210731 10:42:31.421" endtime="20210731 10:42:31.425"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:31.426" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:31.425" endtime="20210731 10:42:31.426"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:31.426" endtime="20210731 10:42:31.427"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:31.428" endtime="20210731 10:42:31.428"/>
</kw>
<status status="PASS" starttime="20210731 10:42:31.425" endtime="20210731 10:42:31.428"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:31.429" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:31.429" endtime="20210731 10:42:31.429"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:31.429" endtime="20210731 10:42:31.432"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:31.432" endtime="20210731 10:42:31.433"/>
</kw>
<status status="PASS" starttime="20210731 10:42:31.428" endtime="20210731 10:42:31.433"/>
</iter>
<status status="PASS" starttime="20210731 10:42:31.421" endtime="20210731 10:42:31.433"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:42:31.434" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:42:31.433" endtime="20210731 10:42:31.434"/>
</kw>
<status status="PASS" starttime="20210731 10:42:31.419" endtime="20210731 10:42:31.434"/>
</kw>
<status status="PASS" starttime="20210731 10:42:29.874" endtime="20210731 10:42:31.434"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤%123!&amp;</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:31.436" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:42:31.435" endtime="20210731 10:42:31.436"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:31.437" level="INFO">${payload} = {'username': '#¤%123!&amp;'}</msg>
<status status="PASS" starttime="20210731 10:42:31.436" endtime="20210731 10:42:31.437"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:31.448" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:31.449" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:31.437" endtime="20210731 10:42:31.449"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:31.449" endtime="20210731 10:42:31.449"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:31.449" endtime="20210731 10:42:31.449"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:31.437" endtime="20210731 10:42:31.449"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:31.437" endtime="20210731 10:42:31.449"/>
</for>
<status status="FAIL" starttime="20210731 10:42:31.435" endtime="20210731 10:42:31.449"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:31.435" endtime="20210731 10:42:31.449"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤%123!&amp;</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:31.451" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:42:31.450" endtime="20210731 10:42:31.451"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:31.451" level="INFO">${payload} = {'username': '#¤%123!&amp;'}</msg>
<status status="PASS" starttime="20210731 10:42:31.451" endtime="20210731 10:42:31.451"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:31.457" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:31.457" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:31.452" endtime="20210731 10:42:31.457"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:31.458" endtime="20210731 10:42:31.458"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:31.458" endtime="20210731 10:42:31.458"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:31.451" endtime="20210731 10:42:31.458"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:31.451" endtime="20210731 10:42:31.458"/>
</for>
<status status="FAIL" starttime="20210731 10:42:31.450" endtime="20210731 10:42:31.458"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:31.450" endtime="20210731 10:42:31.458"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤%123!&amp;</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:31.460" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:42:31.459" endtime="20210731 10:42:31.460"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:31.460" level="INFO">${payload} = {'username': '#¤%123!&amp;'}</msg>
<status status="PASS" starttime="20210731 10:42:31.460" endtime="20210731 10:42:31.460"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:31.465" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:31.466" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:31.461" endtime="20210731 10:42:31.466"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:31.466" endtime="20210731 10:42:31.466"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:31.466" endtime="20210731 10:42:31.466"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:31.461" endtime="20210731 10:42:31.466"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:31.461" endtime="20210731 10:42:31.466"/>
</for>
<status status="FAIL" starttime="20210731 10:42:31.459" endtime="20210731 10:42:31.466"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:31.458" endtime="20210731 10:42:31.467"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:31.434" endtime="20210731 10:42:31.467"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:31.471" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:31.481" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:31.481" level="INFO">${pids} = 11118
11125
11137</msg>
<status status="PASS" starttime="20210731 10:42:31.467" endtime="20210731 10:42:31.481"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:31.482" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:31.482" endtime="20210731 10:42:31.482"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:31.484" level="INFO">${pids} = ['11118', '11125', '11137']</msg>
<status status="PASS" starttime="20210731 10:42:31.483" endtime="20210731 10:42:31.484"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11118</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:31.491" level="INFO">Running command 'kill 11118 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:31.484" endtime="20210731 10:42:31.492"/>
</kw>
<status status="PASS" starttime="20210731 10:42:31.484" endtime="20210731 10:42:31.492"/>
</iter>
<iter>
<var name="${pid}">11125</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:31.499" level="INFO">Running command 'kill 11125 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:31.492" endtime="20210731 10:42:31.499"/>
</kw>
<status status="PASS" starttime="20210731 10:42:31.492" endtime="20210731 10:42:31.499"/>
</iter>
<iter>
<var name="${pid}">11137</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:31.504" level="INFO">Running command 'kill 11137 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:31.500" endtime="20210731 10:42:31.505"/>
</kw>
<status status="PASS" starttime="20210731 10:42:31.500" endtime="20210731 10:42:31.505"/>
</iter>
<status status="PASS" starttime="20210731 10:42:31.484" endtime="20210731 10:42:31.505"/>
</for>
<status status="PASS" starttime="20210731 10:42:31.483" endtime="20210731 10:42:31.505"/>
</branch>
<status status="PASS" starttime="20210731 10:42:31.482" endtime="20210731 10:42:31.505"/>
</if>
<status status="PASS" starttime="20210731 10:42:31.467" endtime="20210731 10:42:31.506"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤%123!&amp;'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:42:29.873" endtime="20210731 10:42:31.506">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t16" name="With Each Valid Token, Updating Username Of Each System User With #¤%123!&amp;7683##()=?@#¤%&amp;34567 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:31.519" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:31.530" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:31.530" level="INFO">${pids} = 11166</msg>
<status status="PASS" starttime="20210731 10:42:31.509" endtime="20210731 10:42:31.530"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:31.531" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:31.530" endtime="20210731 10:42:31.531"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:31.532" level="INFO">${pids} = ['11166']</msg>
<status status="PASS" starttime="20210731 10:42:31.532" endtime="20210731 10:42:31.532"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11166</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:31.536" level="INFO">Running command 'kill 11166 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:31.533" endtime="20210731 10:42:31.536"/>
</kw>
<status status="PASS" starttime="20210731 10:42:31.532" endtime="20210731 10:42:31.536"/>
</iter>
<status status="PASS" starttime="20210731 10:42:31.532" endtime="20210731 10:42:31.536"/>
</for>
<status status="PASS" starttime="20210731 10:42:31.531" endtime="20210731 10:42:31.537"/>
</branch>
<status status="PASS" starttime="20210731 10:42:31.531" endtime="20210731 10:42:31.537"/>
</if>
<status status="PASS" starttime="20210731 10:42:31.508" endtime="20210731 10:42:31.537"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:31.538" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:31.538" endtime="20210731 10:42:31.538"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:31.540" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:31.539" endtime="20210731 10:42:31.540"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:31.540" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:31.540" endtime="20210731 10:42:31.540"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:31.541" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:31.540" endtime="20210731 10:42:31.541"/>
</kw>
<msg timestamp="20210731 10:42:31.541" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:31.539" endtime="20210731 10:42:31.541"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:31.545" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:31.541" endtime="20210731 10:42:31.547"/>
</kw>
<status status="PASS" starttime="20210731 10:42:31.537" endtime="20210731 10:42:31.547"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:42:31.549" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:42:31.548" endtime="20210731 10:42:31.553"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:42:33.067" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:42:31.554" endtime="20210731 10:42:33.067"/>
</kw>
<status status="PASS" starttime="20210731 10:42:31.548" endtime="20210731 10:42:33.067"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:33.068" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:33.068" endtime="20210731 10:42:33.068"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:33.069" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:33.069" endtime="20210731 10:42:33.069"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:33.069" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:33.069" endtime="20210731 10:42:33.069"/>
</kw>
<msg timestamp="20210731 10:42:33.074" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:33.068" endtime="20210731 10:42:33.074"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:42:33.075" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:42:33.074" endtime="20210731 10:42:33.075"/>
</kw>
<status status="PASS" starttime="20210731 10:42:33.067" endtime="20210731 10:42:33.076"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:42:33.076" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:42:33.076" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:42:33.076" endtime="20210731 10:42:33.077"/>
</kw>
<status status="PASS" starttime="20210731 10:42:33.076" endtime="20210731 10:42:33.077"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:42:33.078" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:42:33.078" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:42:33.077" endtime="20210731 10:42:33.078"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:42:33.078" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:42:33.078" endtime="20210731 10:42:33.078"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:33.079" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:33.078" endtime="20210731 10:42:33.079"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:33.079" endtime="20210731 10:42:33.080"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:33.080" endtime="20210731 10:42:33.080"/>
</kw>
<status status="PASS" starttime="20210731 10:42:33.078" endtime="20210731 10:42:33.080"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:33.081" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:33.080" endtime="20210731 10:42:33.081"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:33.081" endtime="20210731 10:42:33.082"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:33.082" endtime="20210731 10:42:33.082"/>
</kw>
<status status="PASS" starttime="20210731 10:42:33.080" endtime="20210731 10:42:33.082"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:33.082" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:33.082" endtime="20210731 10:42:33.083"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:33.083" endtime="20210731 10:42:33.083"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:33.084" endtime="20210731 10:42:33.084"/>
</kw>
<status status="PASS" starttime="20210731 10:42:33.082" endtime="20210731 10:42:33.084"/>
</iter>
<status status="PASS" starttime="20210731 10:42:33.078" endtime="20210731 10:42:33.084"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:42:33.084" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:42:33.084" endtime="20210731 10:42:33.084"/>
</kw>
<status status="PASS" starttime="20210731 10:42:33.077" endtime="20210731 10:42:33.084"/>
</kw>
<status status="PASS" starttime="20210731 10:42:31.508" endtime="20210731 10:42:33.085"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤%123!&amp;7683##()=?@#¤%&amp;34567</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:33.087" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:42:33.087" endtime="20210731 10:42:33.087"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:33.088" level="INFO">${payload} = {'username': '#¤%123!&amp;7683##()=?@#¤%&amp;34567'}</msg>
<status status="PASS" starttime="20210731 10:42:33.087" endtime="20210731 10:42:33.088"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:33.102" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:33.103" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:33.088" endtime="20210731 10:42:33.103"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:33.103" endtime="20210731 10:42:33.103"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:33.103" endtime="20210731 10:42:33.103"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:33.088" endtime="20210731 10:42:33.103"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:33.088" endtime="20210731 10:42:33.103"/>
</for>
<status status="FAIL" starttime="20210731 10:42:33.085" endtime="20210731 10:42:33.104"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:33.085" endtime="20210731 10:42:33.104"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤%123!&amp;7683##()=?@#¤%&amp;34567</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:33.105" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:42:33.104" endtime="20210731 10:42:33.105"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:33.106" level="INFO">${payload} = {'username': '#¤%123!&amp;7683##()=?@#¤%&amp;34567'}</msg>
<status status="PASS" starttime="20210731 10:42:33.105" endtime="20210731 10:42:33.106"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:33.111" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:33.112" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:33.106" endtime="20210731 10:42:33.112"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:33.112" endtime="20210731 10:42:33.112"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:33.112" endtime="20210731 10:42:33.112"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:33.106" endtime="20210731 10:42:33.112"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:33.106" endtime="20210731 10:42:33.112"/>
</for>
<status status="FAIL" starttime="20210731 10:42:33.104" endtime="20210731 10:42:33.113"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:33.104" endtime="20210731 10:42:33.113"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤%123!&amp;7683##()=?@#¤%&amp;34567</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:33.114" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:42:33.114" endtime="20210731 10:42:33.114"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:33.115" level="INFO">${payload} = {'username': '#¤%123!&amp;7683##()=?@#¤%&amp;34567'}</msg>
<status status="PASS" starttime="20210731 10:42:33.114" endtime="20210731 10:42:33.115"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:33.120" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:33.120" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:33.115" endtime="20210731 10:42:33.121"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:33.121" endtime="20210731 10:42:33.121"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:33.122" endtime="20210731 10:42:33.123"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:33.115" endtime="20210731 10:42:33.123"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:33.115" endtime="20210731 10:42:33.123"/>
</for>
<status status="FAIL" starttime="20210731 10:42:33.113" endtime="20210731 10:42:33.124"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:33.113" endtime="20210731 10:42:33.124"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:33.085" endtime="20210731 10:42:33.124"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:33.146" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:33.156" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:33.156" level="INFO">${pids} = 11189
11196
11201</msg>
<status status="PASS" starttime="20210731 10:42:33.125" endtime="20210731 10:42:33.156"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:33.157" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:33.156" endtime="20210731 10:42:33.157"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:33.158" level="INFO">${pids} = ['11189', '11196', '11201']</msg>
<status status="PASS" starttime="20210731 10:42:33.158" endtime="20210731 10:42:33.158"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11189</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:33.162" level="INFO">Running command 'kill 11189 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:33.159" endtime="20210731 10:42:33.163"/>
</kw>
<status status="PASS" starttime="20210731 10:42:33.159" endtime="20210731 10:42:33.163"/>
</iter>
<iter>
<var name="${pid}">11196</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:33.166" level="INFO">Running command 'kill 11196 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:33.163" endtime="20210731 10:42:33.167"/>
</kw>
<status status="PASS" starttime="20210731 10:42:33.163" endtime="20210731 10:42:33.167"/>
</iter>
<iter>
<var name="${pid}">11201</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:33.170" level="INFO">Running command 'kill 11201 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:33.168" endtime="20210731 10:42:33.170"/>
</kw>
<status status="PASS" starttime="20210731 10:42:33.167" endtime="20210731 10:42:33.170"/>
</iter>
<status status="PASS" starttime="20210731 10:42:33.158" endtime="20210731 10:42:33.171"/>
</for>
<status status="PASS" starttime="20210731 10:42:33.158" endtime="20210731 10:42:33.171"/>
</branch>
<status status="PASS" starttime="20210731 10:42:33.157" endtime="20210731 10:42:33.171"/>
</if>
<status status="PASS" starttime="20210731 10:42:33.124" endtime="20210731 10:42:33.171"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤%123!&amp;7683##()=?@#¤%&amp;34567'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:42:31.507" endtime="20210731 10:42:33.171">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t17" name="With Each Valid Token, Updating Username Of Each System User With #¤123ab Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:33.179" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:33.203" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:33.203" level="INFO">${pids} = 11230</msg>
<status status="PASS" starttime="20210731 10:42:33.175" endtime="20210731 10:42:33.203"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:33.204" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:33.203" endtime="20210731 10:42:33.204"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:33.205" level="INFO">${pids} = ['11230']</msg>
<status status="PASS" starttime="20210731 10:42:33.204" endtime="20210731 10:42:33.205"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11230</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:33.211" level="INFO">Running command 'kill 11230 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:33.206" endtime="20210731 10:42:33.211"/>
</kw>
<status status="PASS" starttime="20210731 10:42:33.206" endtime="20210731 10:42:33.211"/>
</iter>
<status status="PASS" starttime="20210731 10:42:33.205" endtime="20210731 10:42:33.211"/>
</for>
<status status="PASS" starttime="20210731 10:42:33.204" endtime="20210731 10:42:33.211"/>
</branch>
<status status="PASS" starttime="20210731 10:42:33.204" endtime="20210731 10:42:33.211"/>
</if>
<status status="PASS" starttime="20210731 10:42:33.175" endtime="20210731 10:42:33.212"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:33.213" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:33.213" endtime="20210731 10:42:33.213"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:33.214" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:33.214" endtime="20210731 10:42:33.214"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:33.215" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:33.214" endtime="20210731 10:42:33.215"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:33.215" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:33.215" endtime="20210731 10:42:33.215"/>
</kw>
<msg timestamp="20210731 10:42:33.215" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:33.214" endtime="20210731 10:42:33.215"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:33.220" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:33.215" endtime="20210731 10:42:33.222"/>
</kw>
<status status="PASS" starttime="20210731 10:42:33.212" endtime="20210731 10:42:33.223"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:42:33.224" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:42:33.223" endtime="20210731 10:42:33.228"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:42:34.731" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:42:33.228" endtime="20210731 10:42:34.732"/>
</kw>
<status status="PASS" starttime="20210731 10:42:33.223" endtime="20210731 10:42:34.732"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:34.733" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:34.733" endtime="20210731 10:42:34.733"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:34.734" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:34.733" endtime="20210731 10:42:34.734"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:34.734" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:34.734" endtime="20210731 10:42:34.734"/>
</kw>
<msg timestamp="20210731 10:42:34.735" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:34.733" endtime="20210731 10:42:34.735"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:42:34.735" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:42:34.735" endtime="20210731 10:42:34.736"/>
</kw>
<status status="PASS" starttime="20210731 10:42:34.732" endtime="20210731 10:42:34.736"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:42:34.736" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:42:34.737" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:42:34.736" endtime="20210731 10:42:34.737"/>
</kw>
<status status="PASS" starttime="20210731 10:42:34.736" endtime="20210731 10:42:34.737"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:42:34.738" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:42:34.738" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:42:34.737" endtime="20210731 10:42:34.738"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:42:34.739" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:42:34.738" endtime="20210731 10:42:34.739"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:34.740" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:34.740" endtime="20210731 10:42:34.740"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:34.741" endtime="20210731 10:42:34.742"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:34.742" endtime="20210731 10:42:34.742"/>
</kw>
<status status="PASS" starttime="20210731 10:42:34.739" endtime="20210731 10:42:34.742"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:34.743" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:34.742" endtime="20210731 10:42:34.743"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:34.743" endtime="20210731 10:42:34.744"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:34.744" endtime="20210731 10:42:34.744"/>
</kw>
<status status="PASS" starttime="20210731 10:42:34.742" endtime="20210731 10:42:34.744"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:34.744" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:34.744" endtime="20210731 10:42:34.745"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:34.745" endtime="20210731 10:42:34.746"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:34.747" endtime="20210731 10:42:34.747"/>
</kw>
<status status="PASS" starttime="20210731 10:42:34.744" endtime="20210731 10:42:34.747"/>
</iter>
<status status="PASS" starttime="20210731 10:42:34.739" endtime="20210731 10:42:34.747"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:42:34.748" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:42:34.747" endtime="20210731 10:42:34.748"/>
</kw>
<status status="PASS" starttime="20210731 10:42:34.737" endtime="20210731 10:42:34.748"/>
</kw>
<status status="PASS" starttime="20210731 10:42:33.173" endtime="20210731 10:42:34.748"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤123ab</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:34.751" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:42:34.750" endtime="20210731 10:42:34.751"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:34.751" level="INFO">${payload} = {'username': '#¤123ab'}</msg>
<status status="PASS" starttime="20210731 10:42:34.751" endtime="20210731 10:42:34.751"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:34.763" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:34.764" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:34.752" endtime="20210731 10:42:34.764"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:34.764" endtime="20210731 10:42:34.764"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:34.764" endtime="20210731 10:42:34.764"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:34.751" endtime="20210731 10:42:34.764"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:34.751" endtime="20210731 10:42:34.764"/>
</for>
<status status="FAIL" starttime="20210731 10:42:34.749" endtime="20210731 10:42:34.764"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:34.749" endtime="20210731 10:42:34.765"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤123ab</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:34.766" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:42:34.766" endtime="20210731 10:42:34.766"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:34.767" level="INFO">${payload} = {'username': '#¤123ab'}</msg>
<status status="PASS" starttime="20210731 10:42:34.766" endtime="20210731 10:42:34.767"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:34.773" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:34.774" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:34.767" endtime="20210731 10:42:34.774"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:34.774" endtime="20210731 10:42:34.774"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:34.774" endtime="20210731 10:42:34.774"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:34.767" endtime="20210731 10:42:34.775"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:34.767" endtime="20210731 10:42:34.775"/>
</for>
<status status="FAIL" starttime="20210731 10:42:34.765" endtime="20210731 10:42:34.775"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:34.765" endtime="20210731 10:42:34.775"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤123ab</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:34.778" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:42:34.777" endtime="20210731 10:42:34.778"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:34.778" level="INFO">${payload} = {'username': '#¤123ab'}</msg>
<status status="PASS" starttime="20210731 10:42:34.778" endtime="20210731 10:42:34.778"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:34.784" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:34.784" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:34.779" endtime="20210731 10:42:34.785"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:34.785" endtime="20210731 10:42:34.785"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:34.785" endtime="20210731 10:42:34.785"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:34.779" endtime="20210731 10:42:34.785"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:34.778" endtime="20210731 10:42:34.785"/>
</for>
<status status="FAIL" starttime="20210731 10:42:34.775" endtime="20210731 10:42:34.785"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:34.775" endtime="20210731 10:42:34.785"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:34.749" endtime="20210731 10:42:34.786"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:34.791" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:34.801" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:34.801" level="INFO">${pids} = 11253
11260
11264</msg>
<status status="PASS" starttime="20210731 10:42:34.786" endtime="20210731 10:42:34.801"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:34.802" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:34.802" endtime="20210731 10:42:34.802"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:34.803" level="INFO">${pids} = ['11253', '11260', '11264']</msg>
<status status="PASS" starttime="20210731 10:42:34.803" endtime="20210731 10:42:34.803"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11253</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:34.811" level="INFO">Running command 'kill 11253 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:34.804" endtime="20210731 10:42:34.812"/>
</kw>
<status status="PASS" starttime="20210731 10:42:34.804" endtime="20210731 10:42:34.812"/>
</iter>
<iter>
<var name="${pid}">11260</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:34.816" level="INFO">Running command 'kill 11260 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:34.813" endtime="20210731 10:42:34.817"/>
</kw>
<status status="PASS" starttime="20210731 10:42:34.812" endtime="20210731 10:42:34.817"/>
</iter>
<iter>
<var name="${pid}">11264</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:34.821" level="INFO">Running command 'kill 11264 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:34.817" endtime="20210731 10:42:34.822"/>
</kw>
<status status="PASS" starttime="20210731 10:42:34.817" endtime="20210731 10:42:34.822"/>
</iter>
<status status="PASS" starttime="20210731 10:42:34.803" endtime="20210731 10:42:34.822"/>
</for>
<status status="PASS" starttime="20210731 10:42:34.803" endtime="20210731 10:42:34.822"/>
</branch>
<status status="PASS" starttime="20210731 10:42:34.803" endtime="20210731 10:42:34.822"/>
</if>
<status status="PASS" starttime="20210731 10:42:34.786" endtime="20210731 10:42:34.822"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤123ab'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:42:33.172" endtime="20210731 10:42:34.823">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t18" name="With Each Valid Token, Updating Username Of Each System User With #¤123abc Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:34.829" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:34.839" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:34.839" level="INFO">${pids} = 11293</msg>
<status status="PASS" starttime="20210731 10:42:34.825" endtime="20210731 10:42:34.839"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:34.841" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:34.840" endtime="20210731 10:42:34.841"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:34.842" level="INFO">${pids} = ['11293']</msg>
<status status="PASS" starttime="20210731 10:42:34.841" endtime="20210731 10:42:34.842"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11293</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:34.845" level="INFO">Running command 'kill 11293 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:34.842" endtime="20210731 10:42:34.846"/>
</kw>
<status status="PASS" starttime="20210731 10:42:34.842" endtime="20210731 10:42:34.846"/>
</iter>
<status status="PASS" starttime="20210731 10:42:34.842" endtime="20210731 10:42:34.846"/>
</for>
<status status="PASS" starttime="20210731 10:42:34.841" endtime="20210731 10:42:34.846"/>
</branch>
<status status="PASS" starttime="20210731 10:42:34.841" endtime="20210731 10:42:34.846"/>
</if>
<status status="PASS" starttime="20210731 10:42:34.825" endtime="20210731 10:42:34.846"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:34.847" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:34.847" endtime="20210731 10:42:34.847"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:34.848" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:34.848" endtime="20210731 10:42:34.848"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:34.849" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:34.848" endtime="20210731 10:42:34.849"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:34.849" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:34.849" endtime="20210731 10:42:34.849"/>
</kw>
<msg timestamp="20210731 10:42:34.850" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:34.848" endtime="20210731 10:42:34.850"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:34.853" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:34.850" endtime="20210731 10:42:34.855"/>
</kw>
<status status="PASS" starttime="20210731 10:42:34.846" endtime="20210731 10:42:34.856"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:42:34.858" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:42:34.857" endtime="20210731 10:42:34.862"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:42:36.363" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:42:34.862" endtime="20210731 10:42:36.363"/>
</kw>
<status status="PASS" starttime="20210731 10:42:34.856" endtime="20210731 10:42:36.364"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:36.365" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:36.365" endtime="20210731 10:42:36.365"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:36.365" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:36.365" endtime="20210731 10:42:36.365"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:36.366" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:36.365" endtime="20210731 10:42:36.366"/>
</kw>
<msg timestamp="20210731 10:42:36.366" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:36.364" endtime="20210731 10:42:36.366"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:42:36.366" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:42:36.366" endtime="20210731 10:42:36.367"/>
</kw>
<status status="PASS" starttime="20210731 10:42:36.364" endtime="20210731 10:42:36.367"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:42:36.367" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:42:36.367" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:42:36.367" endtime="20210731 10:42:36.368"/>
</kw>
<status status="PASS" starttime="20210731 10:42:36.367" endtime="20210731 10:42:36.368"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:42:36.368" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:42:36.368" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:42:36.368" endtime="20210731 10:42:36.368"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:42:36.369" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:42:36.368" endtime="20210731 10:42:36.369"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:36.371" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:36.369" endtime="20210731 10:42:36.371"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:36.371" endtime="20210731 10:42:36.371"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:36.372" endtime="20210731 10:42:36.372"/>
</kw>
<status status="PASS" starttime="20210731 10:42:36.369" endtime="20210731 10:42:36.372"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:36.373" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:36.373" endtime="20210731 10:42:36.373"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:36.373" endtime="20210731 10:42:36.375"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:36.375" endtime="20210731 10:42:36.375"/>
</kw>
<status status="PASS" starttime="20210731 10:42:36.372" endtime="20210731 10:42:36.375"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:36.376" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:36.376" endtime="20210731 10:42:36.376"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:36.376" endtime="20210731 10:42:36.377"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:36.377" endtime="20210731 10:42:36.377"/>
</kw>
<status status="PASS" starttime="20210731 10:42:36.375" endtime="20210731 10:42:36.377"/>
</iter>
<status status="PASS" starttime="20210731 10:42:36.369" endtime="20210731 10:42:36.377"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:42:36.378" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:42:36.378" endtime="20210731 10:42:36.378"/>
</kw>
<status status="PASS" starttime="20210731 10:42:36.368" endtime="20210731 10:42:36.378"/>
</kw>
<status status="PASS" starttime="20210731 10:42:34.824" endtime="20210731 10:42:36.378"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤123abc</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:36.381" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:42:36.380" endtime="20210731 10:42:36.381"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:36.381" level="INFO">${payload} = {'username': '#¤123abc'}</msg>
<status status="PASS" starttime="20210731 10:42:36.381" endtime="20210731 10:42:36.381"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:36.395" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:36.395" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:36.382" endtime="20210731 10:42:36.395"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:36.395" endtime="20210731 10:42:36.395"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:36.395" endtime="20210731 10:42:36.395"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:36.382" endtime="20210731 10:42:36.395"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:36.381" endtime="20210731 10:42:36.395"/>
</for>
<status status="FAIL" starttime="20210731 10:42:36.379" endtime="20210731 10:42:36.396"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:36.379" endtime="20210731 10:42:36.396"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤123abc</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:36.397" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:42:36.396" endtime="20210731 10:42:36.397"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:36.398" level="INFO">${payload} = {'username': '#¤123abc'}</msg>
<status status="PASS" starttime="20210731 10:42:36.397" endtime="20210731 10:42:36.398"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:36.403" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:36.403" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:36.398" endtime="20210731 10:42:36.403"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:36.403" endtime="20210731 10:42:36.403"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:36.403" endtime="20210731 10:42:36.403"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:36.398" endtime="20210731 10:42:36.403"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:36.398" endtime="20210731 10:42:36.403"/>
</for>
<status status="FAIL" starttime="20210731 10:42:36.396" endtime="20210731 10:42:36.403"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:36.396" endtime="20210731 10:42:36.404"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤123abc</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:36.405" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:42:36.405" endtime="20210731 10:42:36.405"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:36.406" level="INFO">${payload} = {'username': '#¤123abc'}</msg>
<status status="PASS" starttime="20210731 10:42:36.406" endtime="20210731 10:42:36.406"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:36.413" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:36.414" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:36.407" endtime="20210731 10:42:36.414"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:36.414" endtime="20210731 10:42:36.414"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:36.414" endtime="20210731 10:42:36.414"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:36.406" endtime="20210731 10:42:36.414"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:36.406" endtime="20210731 10:42:36.414"/>
</for>
<status status="FAIL" starttime="20210731 10:42:36.404" endtime="20210731 10:42:36.416"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:36.404" endtime="20210731 10:42:36.416"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:36.379" endtime="20210731 10:42:36.416"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:36.424" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:36.434" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:36.434" level="INFO">${pids} = 11316
11323
11333</msg>
<status status="PASS" starttime="20210731 10:42:36.417" endtime="20210731 10:42:36.434"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:36.435" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:36.434" endtime="20210731 10:42:36.435"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:36.436" level="INFO">${pids} = ['11316', '11323', '11333']</msg>
<status status="PASS" starttime="20210731 10:42:36.435" endtime="20210731 10:42:36.436"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11316</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:36.441" level="INFO">Running command 'kill 11316 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:36.436" endtime="20210731 10:42:36.442"/>
</kw>
<status status="PASS" starttime="20210731 10:42:36.436" endtime="20210731 10:42:36.442"/>
</iter>
<iter>
<var name="${pid}">11323</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:36.446" level="INFO">Running command 'kill 11323 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:36.442" endtime="20210731 10:42:36.446"/>
</kw>
<status status="PASS" starttime="20210731 10:42:36.442" endtime="20210731 10:42:36.446"/>
</iter>
<iter>
<var name="${pid}">11333</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:36.451" level="INFO">Running command 'kill 11333 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:36.447" endtime="20210731 10:42:36.451"/>
</kw>
<status status="PASS" starttime="20210731 10:42:36.446" endtime="20210731 10:42:36.451"/>
</iter>
<status status="PASS" starttime="20210731 10:42:36.436" endtime="20210731 10:42:36.451"/>
</for>
<status status="PASS" starttime="20210731 10:42:36.435" endtime="20210731 10:42:36.451"/>
</branch>
<status status="PASS" starttime="20210731 10:42:36.435" endtime="20210731 10:42:36.451"/>
</if>
<status status="PASS" starttime="20210731 10:42:36.417" endtime="20210731 10:42:36.452"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤123abc'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:42:34.823" endtime="20210731 10:42:36.452">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t19" name="With Each Valid Token, Updating Username Of Each System User With #¤/&amp;¤!!123abc456hjk Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:36.458" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:36.468" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:36.468" level="INFO">${pids} = 11362</msg>
<status status="PASS" starttime="20210731 10:42:36.455" endtime="20210731 10:42:36.468"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:36.469" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:36.468" endtime="20210731 10:42:36.469"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:36.471" level="INFO">${pids} = ['11362']</msg>
<status status="PASS" starttime="20210731 10:42:36.470" endtime="20210731 10:42:36.471"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11362</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:36.483" level="INFO">Running command 'kill 11362 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:36.471" endtime="20210731 10:42:36.484"/>
</kw>
<status status="PASS" starttime="20210731 10:42:36.471" endtime="20210731 10:42:36.484"/>
</iter>
<status status="PASS" starttime="20210731 10:42:36.471" endtime="20210731 10:42:36.484"/>
</for>
<status status="PASS" starttime="20210731 10:42:36.470" endtime="20210731 10:42:36.484"/>
</branch>
<status status="PASS" starttime="20210731 10:42:36.469" endtime="20210731 10:42:36.484"/>
</if>
<status status="PASS" starttime="20210731 10:42:36.454" endtime="20210731 10:42:36.485"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:36.486" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:36.486" endtime="20210731 10:42:36.486"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:36.488" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:36.487" endtime="20210731 10:42:36.488"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:36.491" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:36.490" endtime="20210731 10:42:36.491"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:36.492" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:36.491" endtime="20210731 10:42:36.492"/>
</kw>
<msg timestamp="20210731 10:42:36.493" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:36.487" endtime="20210731 10:42:36.493"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:36.510" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:36.493" endtime="20210731 10:42:36.512"/>
</kw>
<status status="PASS" starttime="20210731 10:42:36.485" endtime="20210731 10:42:36.513"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:42:36.515" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:42:36.514" endtime="20210731 10:42:36.537"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:42:38.048" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:42:36.538" endtime="20210731 10:42:38.048"/>
</kw>
<status status="PASS" starttime="20210731 10:42:36.513" endtime="20210731 10:42:38.048"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:38.049" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:38.049" endtime="20210731 10:42:38.050"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:38.050" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:38.050" endtime="20210731 10:42:38.050"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:38.050" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:38.050" endtime="20210731 10:42:38.050"/>
</kw>
<msg timestamp="20210731 10:42:38.051" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:38.049" endtime="20210731 10:42:38.051"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:42:38.051" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:42:38.051" endtime="20210731 10:42:38.052"/>
</kw>
<status status="PASS" starttime="20210731 10:42:38.048" endtime="20210731 10:42:38.052"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:42:38.052" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:42:38.053" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:42:38.052" endtime="20210731 10:42:38.053"/>
</kw>
<status status="PASS" starttime="20210731 10:42:38.052" endtime="20210731 10:42:38.053"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:42:38.054" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:42:38.054" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:42:38.053" endtime="20210731 10:42:38.054"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:42:38.054" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:42:38.054" endtime="20210731 10:42:38.054"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:38.055" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:38.055" endtime="20210731 10:42:38.055"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:38.055" endtime="20210731 10:42:38.056"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:38.057" endtime="20210731 10:42:38.057"/>
</kw>
<status status="PASS" starttime="20210731 10:42:38.055" endtime="20210731 10:42:38.057"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:38.058" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:38.057" endtime="20210731 10:42:38.058"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:38.058" endtime="20210731 10:42:38.059"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:38.059" endtime="20210731 10:42:38.059"/>
</kw>
<status status="PASS" starttime="20210731 10:42:38.057" endtime="20210731 10:42:38.059"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:38.059" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:38.059" endtime="20210731 10:42:38.059"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:38.060" endtime="20210731 10:42:38.060"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:38.061" endtime="20210731 10:42:38.061"/>
</kw>
<status status="PASS" starttime="20210731 10:42:38.059" endtime="20210731 10:42:38.061"/>
</iter>
<status status="PASS" starttime="20210731 10:42:38.055" endtime="20210731 10:42:38.061"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:42:38.062" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:42:38.061" endtime="20210731 10:42:38.062"/>
</kw>
<status status="PASS" starttime="20210731 10:42:38.053" endtime="20210731 10:42:38.062"/>
</kw>
<status status="PASS" starttime="20210731 10:42:36.454" endtime="20210731 10:42:38.062"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/&amp;¤!!123abc456hjk</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:38.063" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:42:38.063" endtime="20210731 10:42:38.063"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:38.064" level="INFO">${payload} = {'username': '#¤/&amp;¤!!123abc456hjk'}</msg>
<status status="PASS" starttime="20210731 10:42:38.064" endtime="20210731 10:42:38.064"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:38.076" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:38.077" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:38.064" endtime="20210731 10:42:38.077"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:38.077" endtime="20210731 10:42:38.077"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:38.077" endtime="20210731 10:42:38.077"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:38.064" endtime="20210731 10:42:38.077"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:38.064" endtime="20210731 10:42:38.077"/>
</for>
<status status="FAIL" starttime="20210731 10:42:38.062" endtime="20210731 10:42:38.077"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:38.062" endtime="20210731 10:42:38.077"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/&amp;¤!!123abc456hjk</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:38.079" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:42:38.078" endtime="20210731 10:42:38.079"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:38.079" level="INFO">${payload} = {'username': '#¤/&amp;¤!!123abc456hjk'}</msg>
<status status="PASS" starttime="20210731 10:42:38.079" endtime="20210731 10:42:38.079"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:38.084" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:38.085" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:38.080" endtime="20210731 10:42:38.085"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:38.085" endtime="20210731 10:42:38.085"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:38.085" endtime="20210731 10:42:38.085"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:38.080" endtime="20210731 10:42:38.085"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:38.079" endtime="20210731 10:42:38.085"/>
</for>
<status status="FAIL" starttime="20210731 10:42:38.078" endtime="20210731 10:42:38.086"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:38.078" endtime="20210731 10:42:38.086"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/&amp;¤!!123abc456hjk</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:38.087" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:42:38.087" endtime="20210731 10:42:38.087"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:38.088" level="INFO">${payload} = {'username': '#¤/&amp;¤!!123abc456hjk'}</msg>
<status status="PASS" starttime="20210731 10:42:38.087" endtime="20210731 10:42:38.088"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:38.094" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:38.094" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:38.088" endtime="20210731 10:42:38.094"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:38.094" endtime="20210731 10:42:38.094"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:38.094" endtime="20210731 10:42:38.094"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:38.088" endtime="20210731 10:42:38.094"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:38.088" endtime="20210731 10:42:38.094"/>
</for>
<status status="FAIL" starttime="20210731 10:42:38.086" endtime="20210731 10:42:38.095"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:38.086" endtime="20210731 10:42:38.095"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:38.062" endtime="20210731 10:42:38.095"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:38.099" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:38.111" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:38.111" level="INFO">${pids} = 11388
11395
11400</msg>
<status status="PASS" starttime="20210731 10:42:38.096" endtime="20210731 10:42:38.111"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:38.112" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:38.112" endtime="20210731 10:42:38.113"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:38.114" level="INFO">${pids} = ['11388', '11395', '11400']</msg>
<status status="PASS" starttime="20210731 10:42:38.113" endtime="20210731 10:42:38.114"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11388</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:38.118" level="INFO">Running command 'kill 11388 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:38.114" endtime="20210731 10:42:38.119"/>
</kw>
<status status="PASS" starttime="20210731 10:42:38.114" endtime="20210731 10:42:38.119"/>
</iter>
<iter>
<var name="${pid}">11395</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:38.123" level="INFO">Running command 'kill 11395 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:38.119" endtime="20210731 10:42:38.127"/>
</kw>
<status status="PASS" starttime="20210731 10:42:38.119" endtime="20210731 10:42:38.127"/>
</iter>
<iter>
<var name="${pid}">11400</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:38.130" level="INFO">Running command 'kill 11400 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:38.127" endtime="20210731 10:42:38.131"/>
</kw>
<status status="PASS" starttime="20210731 10:42:38.127" endtime="20210731 10:42:38.131"/>
</iter>
<status status="PASS" starttime="20210731 10:42:38.114" endtime="20210731 10:42:38.131"/>
</for>
<status status="PASS" starttime="20210731 10:42:38.113" endtime="20210731 10:42:38.131"/>
</branch>
<status status="PASS" starttime="20210731 10:42:38.113" endtime="20210731 10:42:38.131"/>
</if>
<status status="PASS" starttime="20210731 10:42:38.095" endtime="20210731 10:42:38.131"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤/&amp;¤!!123abc456hjk'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:42:36.453" endtime="20210731 10:42:38.132">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t20" name="With Each Valid Token, Updating Username Of Each System User With #¤/abc! Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:38.138" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:38.148" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:38.149" level="INFO">${pids} = 11429</msg>
<status status="PASS" starttime="20210731 10:42:38.134" endtime="20210731 10:42:38.149"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:38.150" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:38.149" endtime="20210731 10:42:38.150"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:38.151" level="INFO">${pids} = ['11429']</msg>
<status status="PASS" starttime="20210731 10:42:38.150" endtime="20210731 10:42:38.151"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11429</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:38.155" level="INFO">Running command 'kill 11429 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:38.151" endtime="20210731 10:42:38.155"/>
</kw>
<status status="PASS" starttime="20210731 10:42:38.151" endtime="20210731 10:42:38.155"/>
</iter>
<status status="PASS" starttime="20210731 10:42:38.151" endtime="20210731 10:42:38.156"/>
</for>
<status status="PASS" starttime="20210731 10:42:38.150" endtime="20210731 10:42:38.156"/>
</branch>
<status status="PASS" starttime="20210731 10:42:38.150" endtime="20210731 10:42:38.156"/>
</if>
<status status="PASS" starttime="20210731 10:42:38.134" endtime="20210731 10:42:38.156"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:38.157" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:38.157" endtime="20210731 10:42:38.157"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:38.158" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:38.158" endtime="20210731 10:42:38.158"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:38.159" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:38.158" endtime="20210731 10:42:38.159"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:38.159" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:38.159" endtime="20210731 10:42:38.159"/>
</kw>
<msg timestamp="20210731 10:42:38.160" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:38.158" endtime="20210731 10:42:38.160"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:38.163" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:38.160" endtime="20210731 10:42:38.165"/>
</kw>
<status status="PASS" starttime="20210731 10:42:38.156" endtime="20210731 10:42:38.166"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:42:38.167" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:42:38.167" endtime="20210731 10:42:38.172"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:42:39.675" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:42:38.172" endtime="20210731 10:42:39.675"/>
</kw>
<status status="PASS" starttime="20210731 10:42:38.166" endtime="20210731 10:42:39.675"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:39.676" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:39.676" endtime="20210731 10:42:39.676"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:39.677" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:39.677" endtime="20210731 10:42:39.677"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:39.677" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:39.677" endtime="20210731 10:42:39.677"/>
</kw>
<msg timestamp="20210731 10:42:39.678" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:39.676" endtime="20210731 10:42:39.678"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:42:39.678" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:42:39.678" endtime="20210731 10:42:39.679"/>
</kw>
<status status="PASS" starttime="20210731 10:42:39.675" endtime="20210731 10:42:39.679"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:42:39.679" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:42:39.679" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:42:39.679" endtime="20210731 10:42:39.680"/>
</kw>
<status status="PASS" starttime="20210731 10:42:39.679" endtime="20210731 10:42:39.680"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:42:39.681" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:42:39.681" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:42:39.680" endtime="20210731 10:42:39.681"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:42:39.681" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:42:39.681" endtime="20210731 10:42:39.681"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:39.682" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:39.682" endtime="20210731 10:42:39.682"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:39.682" endtime="20210731 10:42:39.683"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:39.683" endtime="20210731 10:42:39.683"/>
</kw>
<status status="PASS" starttime="20210731 10:42:39.681" endtime="20210731 10:42:39.683"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:39.684" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:39.684" endtime="20210731 10:42:39.684"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:39.684" endtime="20210731 10:42:39.685"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:39.685" endtime="20210731 10:42:39.685"/>
</kw>
<status status="PASS" starttime="20210731 10:42:39.684" endtime="20210731 10:42:39.685"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:39.686" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:39.686" endtime="20210731 10:42:39.686"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:39.686" endtime="20210731 10:42:39.687"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:39.687" endtime="20210731 10:42:39.687"/>
</kw>
<status status="PASS" starttime="20210731 10:42:39.686" endtime="20210731 10:42:39.687"/>
</iter>
<status status="PASS" starttime="20210731 10:42:39.681" endtime="20210731 10:42:39.687"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:42:39.688" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:42:39.688" endtime="20210731 10:42:39.688"/>
</kw>
<status status="PASS" starttime="20210731 10:42:39.680" endtime="20210731 10:42:39.689"/>
</kw>
<status status="PASS" starttime="20210731 10:42:38.133" endtime="20210731 10:42:39.689"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/abc!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:39.690" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:42:39.690" endtime="20210731 10:42:39.690"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:39.691" level="INFO">${payload} = {'username': '#¤/abc!'}</msg>
<status status="PASS" starttime="20210731 10:42:39.691" endtime="20210731 10:42:39.691"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:39.702" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:39.702" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:39.691" endtime="20210731 10:42:39.702"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:39.703" endtime="20210731 10:42:39.703"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:39.703" endtime="20210731 10:42:39.703"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:39.691" endtime="20210731 10:42:39.703"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:39.691" endtime="20210731 10:42:39.703"/>
</for>
<status status="FAIL" starttime="20210731 10:42:39.689" endtime="20210731 10:42:39.703"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:39.689" endtime="20210731 10:42:39.703"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/abc!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:39.704" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:42:39.704" endtime="20210731 10:42:39.704"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:39.705" level="INFO">${payload} = {'username': '#¤/abc!'}</msg>
<status status="PASS" starttime="20210731 10:42:39.704" endtime="20210731 10:42:39.705"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:39.711" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:39.711" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:39.706" endtime="20210731 10:42:39.711"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:39.712" endtime="20210731 10:42:39.712"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:39.712" endtime="20210731 10:42:39.712"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:39.705" endtime="20210731 10:42:39.712"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:39.705" endtime="20210731 10:42:39.712"/>
</for>
<status status="FAIL" starttime="20210731 10:42:39.703" endtime="20210731 10:42:39.712"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:39.703" endtime="20210731 10:42:39.712"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/abc!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:39.714" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:42:39.713" endtime="20210731 10:42:39.714"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:39.714" level="INFO">${payload} = {'username': '#¤/abc!'}</msg>
<status status="PASS" starttime="20210731 10:42:39.714" endtime="20210731 10:42:39.714"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:39.720" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:39.720" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:39.715" endtime="20210731 10:42:39.720"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:39.720" endtime="20210731 10:42:39.720"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:39.720" endtime="20210731 10:42:39.721"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:39.715" endtime="20210731 10:42:39.721"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:39.715" endtime="20210731 10:42:39.721"/>
</for>
<status status="FAIL" starttime="20210731 10:42:39.712" endtime="20210731 10:42:39.721"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:39.712" endtime="20210731 10:42:39.721"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:39.689" endtime="20210731 10:42:39.721"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:39.727" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:39.737" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:39.737" level="INFO">${pids} = 11452
11459
11464</msg>
<status status="PASS" starttime="20210731 10:42:39.723" endtime="20210731 10:42:39.737"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:39.739" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:39.738" endtime="20210731 10:42:39.739"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:39.740" level="INFO">${pids} = ['11452', '11459', '11464']</msg>
<status status="PASS" starttime="20210731 10:42:39.740" endtime="20210731 10:42:39.740"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11452</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:39.744" level="INFO">Running command 'kill 11452 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:39.741" endtime="20210731 10:42:39.745"/>
</kw>
<status status="PASS" starttime="20210731 10:42:39.741" endtime="20210731 10:42:39.745"/>
</iter>
<iter>
<var name="${pid}">11459</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:39.751" level="INFO">Running command 'kill 11459 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:39.746" endtime="20210731 10:42:39.752"/>
</kw>
<status status="PASS" starttime="20210731 10:42:39.745" endtime="20210731 10:42:39.752"/>
</iter>
<iter>
<var name="${pid}">11464</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:39.757" level="INFO">Running command 'kill 11464 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:39.752" endtime="20210731 10:42:39.757"/>
</kw>
<status status="PASS" starttime="20210731 10:42:39.752" endtime="20210731 10:42:39.757"/>
</iter>
<status status="PASS" starttime="20210731 10:42:39.740" endtime="20210731 10:42:39.757"/>
</for>
<status status="PASS" starttime="20210731 10:42:39.739" endtime="20210731 10:42:39.757"/>
</branch>
<status status="PASS" starttime="20210731 10:42:39.739" endtime="20210731 10:42:39.758"/>
</if>
<status status="PASS" starttime="20210731 10:42:39.722" endtime="20210731 10:42:39.758"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤/abc!'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:42:38.132" endtime="20210731 10:42:39.758">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t21" name="With Each Valid Token, Updating Username Of Each System User With #¤/abc!g Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:39.764" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:39.776" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:39.776" level="INFO">${pids} = 11493</msg>
<status status="PASS" starttime="20210731 10:42:39.760" endtime="20210731 10:42:39.776"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:39.777" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:39.776" endtime="20210731 10:42:39.777"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:39.778" level="INFO">${pids} = ['11493']</msg>
<status status="PASS" starttime="20210731 10:42:39.777" endtime="20210731 10:42:39.778"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11493</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:39.782" level="INFO">Running command 'kill 11493 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:39.778" endtime="20210731 10:42:39.783"/>
</kw>
<status status="PASS" starttime="20210731 10:42:39.778" endtime="20210731 10:42:39.783"/>
</iter>
<status status="PASS" starttime="20210731 10:42:39.778" endtime="20210731 10:42:39.783"/>
</for>
<status status="PASS" starttime="20210731 10:42:39.777" endtime="20210731 10:42:39.783"/>
</branch>
<status status="PASS" starttime="20210731 10:42:39.777" endtime="20210731 10:42:39.783"/>
</if>
<status status="PASS" starttime="20210731 10:42:39.760" endtime="20210731 10:42:39.784"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:39.785" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:39.785" endtime="20210731 10:42:39.785"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:39.786" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:39.786" endtime="20210731 10:42:39.786"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:39.787" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:39.786" endtime="20210731 10:42:39.787"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:39.787" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:39.787" endtime="20210731 10:42:39.787"/>
</kw>
<msg timestamp="20210731 10:42:39.787" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:39.785" endtime="20210731 10:42:39.787"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:39.792" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:39.788" endtime="20210731 10:42:39.794"/>
</kw>
<status status="PASS" starttime="20210731 10:42:39.784" endtime="20210731 10:42:39.794"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:42:39.796" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:42:39.795" endtime="20210731 10:42:39.801"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:42:41.303" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:42:39.801" endtime="20210731 10:42:41.303"/>
</kw>
<status status="PASS" starttime="20210731 10:42:39.795" endtime="20210731 10:42:41.304"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:41.305" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:41.305" endtime="20210731 10:42:41.305"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:41.306" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:41.306" endtime="20210731 10:42:41.306"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:41.307" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:41.306" endtime="20210731 10:42:41.307"/>
</kw>
<msg timestamp="20210731 10:42:41.307" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:41.304" endtime="20210731 10:42:41.307"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:42:41.308" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:42:41.307" endtime="20210731 10:42:41.308"/>
</kw>
<status status="PASS" starttime="20210731 10:42:41.304" endtime="20210731 10:42:41.309"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:42:41.309" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:42:41.309" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:42:41.309" endtime="20210731 10:42:41.310"/>
</kw>
<status status="PASS" starttime="20210731 10:42:41.309" endtime="20210731 10:42:41.310"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:42:41.311" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:42:41.311" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:42:41.310" endtime="20210731 10:42:41.311"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:42:41.311" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:42:41.311" endtime="20210731 10:42:41.311"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:41.312" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:41.312" endtime="20210731 10:42:41.312"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:41.312" endtime="20210731 10:42:41.313"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:41.313" endtime="20210731 10:42:41.314"/>
</kw>
<status status="PASS" starttime="20210731 10:42:41.312" endtime="20210731 10:42:41.314"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:41.314" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:41.314" endtime="20210731 10:42:41.314"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:41.314" endtime="20210731 10:42:41.315"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:41.315" endtime="20210731 10:42:41.316"/>
</kw>
<status status="PASS" starttime="20210731 10:42:41.314" endtime="20210731 10:42:41.316"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:41.316" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:41.316" endtime="20210731 10:42:41.316"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:41.316" endtime="20210731 10:42:41.317"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:41.318" endtime="20210731 10:42:41.319"/>
</kw>
<status status="PASS" starttime="20210731 10:42:41.316" endtime="20210731 10:42:41.319"/>
</iter>
<status status="PASS" starttime="20210731 10:42:41.311" endtime="20210731 10:42:41.319"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:42:41.319" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:42:41.319" endtime="20210731 10:42:41.319"/>
</kw>
<status status="PASS" starttime="20210731 10:42:41.310" endtime="20210731 10:42:41.320"/>
</kw>
<status status="PASS" starttime="20210731 10:42:39.759" endtime="20210731 10:42:41.320"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/abc!g</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:41.321" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:42:41.321" endtime="20210731 10:42:41.321"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:41.322" level="INFO">${payload} = {'username': '#¤/abc!g'}</msg>
<status status="PASS" starttime="20210731 10:42:41.321" endtime="20210731 10:42:41.322"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:41.335" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:41.335" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:41.322" endtime="20210731 10:42:41.335"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:41.335" endtime="20210731 10:42:41.336"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:41.336" endtime="20210731 10:42:41.336"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:41.322" endtime="20210731 10:42:41.336"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:41.322" endtime="20210731 10:42:41.336"/>
</for>
<status status="FAIL" starttime="20210731 10:42:41.320" endtime="20210731 10:42:41.336"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:41.320" endtime="20210731 10:42:41.336"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/abc!g</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:41.338" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:42:41.337" endtime="20210731 10:42:41.338"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:41.339" level="INFO">${payload} = {'username': '#¤/abc!g'}</msg>
<status status="PASS" starttime="20210731 10:42:41.338" endtime="20210731 10:42:41.339"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:41.347" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:41.347" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:41.341" endtime="20210731 10:42:41.347"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:41.347" endtime="20210731 10:42:41.347"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:41.347" endtime="20210731 10:42:41.347"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:41.339" endtime="20210731 10:42:41.347"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:41.339" endtime="20210731 10:42:41.348"/>
</for>
<status status="FAIL" starttime="20210731 10:42:41.336" endtime="20210731 10:42:41.348"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:41.336" endtime="20210731 10:42:41.348"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/abc!g</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:41.349" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:42:41.349" endtime="20210731 10:42:41.349"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:41.350" level="INFO">${payload} = {'username': '#¤/abc!g'}</msg>
<status status="PASS" starttime="20210731 10:42:41.349" endtime="20210731 10:42:41.350"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:41.356" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:41.356" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:41.350" endtime="20210731 10:42:41.356"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:41.356" endtime="20210731 10:42:41.356"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:41.356" endtime="20210731 10:42:41.356"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:41.350" endtime="20210731 10:42:41.357"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:41.350" endtime="20210731 10:42:41.357"/>
</for>
<status status="FAIL" starttime="20210731 10:42:41.348" endtime="20210731 10:42:41.357"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:41.348" endtime="20210731 10:42:41.357"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:41.320" endtime="20210731 10:42:41.357"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:41.362" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:41.373" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:41.374" level="INFO">${pids} = 11516
11523
11528</msg>
<status status="PASS" starttime="20210731 10:42:41.358" endtime="20210731 10:42:41.374"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:41.375" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:41.374" endtime="20210731 10:42:41.375"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:41.376" level="INFO">${pids} = ['11516', '11523', '11528']</msg>
<status status="PASS" starttime="20210731 10:42:41.375" endtime="20210731 10:42:41.376"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11516</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:41.381" level="INFO">Running command 'kill 11516 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:41.377" endtime="20210731 10:42:41.382"/>
</kw>
<status status="PASS" starttime="20210731 10:42:41.376" endtime="20210731 10:42:41.382"/>
</iter>
<iter>
<var name="${pid}">11523</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:41.386" level="INFO">Running command 'kill 11523 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:41.382" endtime="20210731 10:42:41.388"/>
</kw>
<status status="PASS" starttime="20210731 10:42:41.382" endtime="20210731 10:42:41.388"/>
</iter>
<iter>
<var name="${pid}">11528</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:41.396" level="INFO">Running command 'kill 11528 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:41.389" endtime="20210731 10:42:41.397"/>
</kw>
<status status="PASS" starttime="20210731 10:42:41.389" endtime="20210731 10:42:41.397"/>
</iter>
<status status="PASS" starttime="20210731 10:42:41.376" endtime="20210731 10:42:41.397"/>
</for>
<status status="PASS" starttime="20210731 10:42:41.375" endtime="20210731 10:42:41.397"/>
</branch>
<status status="PASS" starttime="20210731 10:42:41.375" endtime="20210731 10:42:41.397"/>
</if>
<status status="PASS" starttime="20210731 10:42:41.358" endtime="20210731 10:42:41.397"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤/abc!g'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:42:39.759" endtime="20210731 10:42:41.398">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t22" name="With Each Valid Token, Updating Username Of Each System User With #¤/abc!g()=&amp;%¤fghjklQWERTY Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:41.409" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:41.421" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:41.421" level="INFO">${pids} = 11558</msg>
<status status="PASS" starttime="20210731 10:42:41.402" endtime="20210731 10:42:41.421"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:41.423" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:41.421" endtime="20210731 10:42:41.423"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:41.424" level="INFO">${pids} = ['11558']</msg>
<status status="PASS" starttime="20210731 10:42:41.423" endtime="20210731 10:42:41.424"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11558</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:41.442" level="INFO">Running command 'kill 11558 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:41.428" endtime="20210731 10:42:41.443"/>
</kw>
<status status="PASS" starttime="20210731 10:42:41.426" endtime="20210731 10:42:41.443"/>
</iter>
<status status="PASS" starttime="20210731 10:42:41.424" endtime="20210731 10:42:41.443"/>
</for>
<status status="PASS" starttime="20210731 10:42:41.423" endtime="20210731 10:42:41.444"/>
</branch>
<status status="PASS" starttime="20210731 10:42:41.423" endtime="20210731 10:42:41.444"/>
</if>
<status status="PASS" starttime="20210731 10:42:41.402" endtime="20210731 10:42:41.444"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:41.447" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:41.446" endtime="20210731 10:42:41.447"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:41.448" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:41.448" endtime="20210731 10:42:41.449"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:41.450" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:41.449" endtime="20210731 10:42:41.450"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:41.450" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:41.450" endtime="20210731 10:42:41.451"/>
</kw>
<msg timestamp="20210731 10:42:41.451" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:41.447" endtime="20210731 10:42:41.451"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:41.456" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:41.451" endtime="20210731 10:42:41.459"/>
</kw>
<status status="PASS" starttime="20210731 10:42:41.445" endtime="20210731 10:42:41.459"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:42:41.462" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:42:41.461" endtime="20210731 10:42:41.467"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:42:42.969" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:42:41.468" endtime="20210731 10:42:42.969"/>
</kw>
<status status="PASS" starttime="20210731 10:42:41.460" endtime="20210731 10:42:42.969"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:42.971" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:42.970" endtime="20210731 10:42:42.971"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:42.971" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:42.971" endtime="20210731 10:42:42.971"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:42.972" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:42.971" endtime="20210731 10:42:42.972"/>
</kw>
<msg timestamp="20210731 10:42:42.973" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:42.970" endtime="20210731 10:42:42.973"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:42:42.975" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:42:42.974" endtime="20210731 10:42:42.975"/>
</kw>
<status status="PASS" starttime="20210731 10:42:42.970" endtime="20210731 10:42:42.976"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:42:42.976" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:42:42.976" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:42:42.976" endtime="20210731 10:42:42.977"/>
</kw>
<status status="PASS" starttime="20210731 10:42:42.976" endtime="20210731 10:42:42.977"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:42:42.978" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:42:42.978" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:42:42.977" endtime="20210731 10:42:42.978"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:42:42.978" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:42:42.978" endtime="20210731 10:42:42.978"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:42.979" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:42.979" endtime="20210731 10:42:42.979"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:42.979" endtime="20210731 10:42:42.980"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:42.980" endtime="20210731 10:42:42.981"/>
</kw>
<status status="PASS" starttime="20210731 10:42:42.979" endtime="20210731 10:42:42.981"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:42.981" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:42.981" endtime="20210731 10:42:42.981"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:42.981" endtime="20210731 10:42:42.982"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:42.982" endtime="20210731 10:42:42.983"/>
</kw>
<status status="PASS" starttime="20210731 10:42:42.981" endtime="20210731 10:42:42.983"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:42.983" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:42.983" endtime="20210731 10:42:42.983"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:42.983" endtime="20210731 10:42:42.984"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:42.984" endtime="20210731 10:42:42.985"/>
</kw>
<status status="PASS" starttime="20210731 10:42:42.983" endtime="20210731 10:42:42.985"/>
</iter>
<status status="PASS" starttime="20210731 10:42:42.979" endtime="20210731 10:42:42.985"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:42:42.985" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:42:42.985" endtime="20210731 10:42:42.985"/>
</kw>
<status status="PASS" starttime="20210731 10:42:42.977" endtime="20210731 10:42:42.986"/>
</kw>
<status status="PASS" starttime="20210731 10:42:41.401" endtime="20210731 10:42:42.986"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/abc!g()=&amp;%¤fghjklQWERTY</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:42.989" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:42:42.989" endtime="20210731 10:42:42.989"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:42.990" level="INFO">${payload} = {'username': '#¤/abc!g()=&amp;%¤fghjklQWERTY'}</msg>
<status status="PASS" starttime="20210731 10:42:42.990" endtime="20210731 10:42:42.990"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:43.001" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:43.002" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:42.990" endtime="20210731 10:42:43.002"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:43.002" endtime="20210731 10:42:43.002"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:43.002" endtime="20210731 10:42:43.002"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:42.990" endtime="20210731 10:42:43.002"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:42.990" endtime="20210731 10:42:43.003"/>
</for>
<status status="FAIL" starttime="20210731 10:42:42.986" endtime="20210731 10:42:43.003"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:42.986" endtime="20210731 10:42:43.003"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/abc!g()=&amp;%¤fghjklQWERTY</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:43.004" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:42:43.004" endtime="20210731 10:42:43.004"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:43.005" level="INFO">${payload} = {'username': '#¤/abc!g()=&amp;%¤fghjklQWERTY'}</msg>
<status status="PASS" starttime="20210731 10:42:43.004" endtime="20210731 10:42:43.005"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:43.011" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:43.011" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:43.005" endtime="20210731 10:42:43.011"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:43.011" endtime="20210731 10:42:43.012"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:43.012" endtime="20210731 10:42:43.012"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:43.005" endtime="20210731 10:42:43.012"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:43.005" endtime="20210731 10:42:43.012"/>
</for>
<status status="FAIL" starttime="20210731 10:42:43.003" endtime="20210731 10:42:43.012"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:43.003" endtime="20210731 10:42:43.012"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/abc!g()=&amp;%¤fghjklQWERTY</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:43.014" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:42:43.013" endtime="20210731 10:42:43.014"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:43.014" level="INFO">${payload} = {'username': '#¤/abc!g()=&amp;%¤fghjklQWERTY'}</msg>
<status status="PASS" starttime="20210731 10:42:43.014" endtime="20210731 10:42:43.014"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:43.020" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:43.020" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:43.015" endtime="20210731 10:42:43.020"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:43.021" endtime="20210731 10:42:43.021"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:43.021" endtime="20210731 10:42:43.021"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:43.015" endtime="20210731 10:42:43.021"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:43.014" endtime="20210731 10:42:43.022"/>
</for>
<status status="FAIL" starttime="20210731 10:42:43.013" endtime="20210731 10:42:43.023"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:43.012" endtime="20210731 10:42:43.023"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:42.986" endtime="20210731 10:42:43.023"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:43.027" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:43.038" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:43.038" level="INFO">${pids} = 11584
11592
11598</msg>
<status status="PASS" starttime="20210731 10:42:43.024" endtime="20210731 10:42:43.038"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:43.040" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:43.038" endtime="20210731 10:42:43.040"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:43.041" level="INFO">${pids} = ['11584', '11592', '11598']</msg>
<status status="PASS" starttime="20210731 10:42:43.041" endtime="20210731 10:42:43.042"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11584</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:43.047" level="INFO">Running command 'kill 11584 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:43.043" endtime="20210731 10:42:43.047"/>
</kw>
<status status="PASS" starttime="20210731 10:42:43.042" endtime="20210731 10:42:43.047"/>
</iter>
<iter>
<var name="${pid}">11592</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:43.055" level="INFO">Running command 'kill 11592 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:43.048" endtime="20210731 10:42:43.055"/>
</kw>
<status status="PASS" starttime="20210731 10:42:43.048" endtime="20210731 10:42:43.056"/>
</iter>
<iter>
<var name="${pid}">11598</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:43.063" level="INFO">Running command 'kill 11598 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:43.056" endtime="20210731 10:42:43.064"/>
</kw>
<status status="PASS" starttime="20210731 10:42:43.056" endtime="20210731 10:42:43.064"/>
</iter>
<status status="PASS" starttime="20210731 10:42:43.042" endtime="20210731 10:42:43.064"/>
</for>
<status status="PASS" starttime="20210731 10:42:43.040" endtime="20210731 10:42:43.064"/>
</branch>
<status status="PASS" starttime="20210731 10:42:43.040" endtime="20210731 10:42:43.064"/>
</if>
<status status="PASS" starttime="20210731 10:42:43.023" endtime="20210731 10:42:43.064"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤/abc!g()=&amp;%¤fghjklQWERTY'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:42:41.399" endtime="20210731 10:42:43.064">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t23" name="With Each Valid Token, Updating Username Of Each System User With !# &amp;/¤% Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:43.070" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:43.084" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:43.084" level="INFO">${pids} = 11627</msg>
<status status="PASS" starttime="20210731 10:42:43.067" endtime="20210731 10:42:43.084"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:43.085" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:43.085" endtime="20210731 10:42:43.085"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:43.086" level="INFO">${pids} = ['11627']</msg>
<status status="PASS" starttime="20210731 10:42:43.086" endtime="20210731 10:42:43.086"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11627</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:43.091" level="INFO">Running command 'kill 11627 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:43.087" endtime="20210731 10:42:43.091"/>
</kw>
<status status="PASS" starttime="20210731 10:42:43.087" endtime="20210731 10:42:43.091"/>
</iter>
<status status="PASS" starttime="20210731 10:42:43.086" endtime="20210731 10:42:43.091"/>
</for>
<status status="PASS" starttime="20210731 10:42:43.086" endtime="20210731 10:42:43.091"/>
</branch>
<status status="PASS" starttime="20210731 10:42:43.085" endtime="20210731 10:42:43.091"/>
</if>
<status status="PASS" starttime="20210731 10:42:43.066" endtime="20210731 10:42:43.092"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:43.093" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:43.093" endtime="20210731 10:42:43.093"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:43.096" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:43.096" endtime="20210731 10:42:43.096"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:43.096" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:43.096" endtime="20210731 10:42:43.096"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:43.097" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:43.096" endtime="20210731 10:42:43.097"/>
</kw>
<msg timestamp="20210731 10:42:43.097" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:43.093" endtime="20210731 10:42:43.097"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:43.102" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:43.097" endtime="20210731 10:42:43.103"/>
</kw>
<status status="PASS" starttime="20210731 10:42:43.092" endtime="20210731 10:42:43.104"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:42:43.106" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:42:43.105" endtime="20210731 10:42:43.111"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:42:44.628" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:42:43.112" endtime="20210731 10:42:44.628"/>
</kw>
<status status="PASS" starttime="20210731 10:42:43.104" endtime="20210731 10:42:44.628"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:44.630" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:44.629" endtime="20210731 10:42:44.630"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:44.630" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:44.630" endtime="20210731 10:42:44.630"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:44.630" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:44.630" endtime="20210731 10:42:44.630"/>
</kw>
<msg timestamp="20210731 10:42:44.631" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:44.629" endtime="20210731 10:42:44.631"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:42:44.631" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:42:44.631" endtime="20210731 10:42:44.632"/>
</kw>
<status status="PASS" starttime="20210731 10:42:44.628" endtime="20210731 10:42:44.632"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:42:44.633" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:42:44.633" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:42:44.633" endtime="20210731 10:42:44.633"/>
</kw>
<status status="PASS" starttime="20210731 10:42:44.632" endtime="20210731 10:42:44.633"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:42:44.634" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:42:44.634" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:42:44.633" endtime="20210731 10:42:44.634"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:42:44.635" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:42:44.634" endtime="20210731 10:42:44.635"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:44.635" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:44.635" endtime="20210731 10:42:44.635"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:44.636" endtime="20210731 10:42:44.637"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:44.637" endtime="20210731 10:42:44.637"/>
</kw>
<status status="PASS" starttime="20210731 10:42:44.635" endtime="20210731 10:42:44.637"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:44.639" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:44.638" endtime="20210731 10:42:44.639"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:44.639" endtime="20210731 10:42:44.641"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:44.641" endtime="20210731 10:42:44.641"/>
</kw>
<status status="PASS" starttime="20210731 10:42:44.637" endtime="20210731 10:42:44.641"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:44.642" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:44.642" endtime="20210731 10:42:44.642"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:44.642" endtime="20210731 10:42:44.643"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:44.643" endtime="20210731 10:42:44.644"/>
</kw>
<status status="PASS" starttime="20210731 10:42:44.642" endtime="20210731 10:42:44.644"/>
</iter>
<status status="PASS" starttime="20210731 10:42:44.635" endtime="20210731 10:42:44.644"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:42:44.644" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:42:44.644" endtime="20210731 10:42:44.645"/>
</kw>
<status status="PASS" starttime="20210731 10:42:44.633" endtime="20210731 10:42:44.645"/>
</kw>
<status status="PASS" starttime="20210731 10:42:43.066" endtime="20210731 10:42:44.645"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!# &amp;/¤%</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:44.646" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:42:44.646" endtime="20210731 10:42:44.646"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:44.647" level="INFO">${payload} = {'username': '!# &amp;/¤%'}</msg>
<status status="PASS" starttime="20210731 10:42:44.646" endtime="20210731 10:42:44.647"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:44.660" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:44.661" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:44.647" endtime="20210731 10:42:44.662"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:44.662" endtime="20210731 10:42:44.663"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:44.663" endtime="20210731 10:42:44.663"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:44.647" endtime="20210731 10:42:44.663"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:44.647" endtime="20210731 10:42:44.663"/>
</for>
<status status="FAIL" starttime="20210731 10:42:44.645" endtime="20210731 10:42:44.663"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:44.645" endtime="20210731 10:42:44.663"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!# &amp;/¤%</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:44.666" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:42:44.665" endtime="20210731 10:42:44.666"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:44.668" level="INFO">${payload} = {'username': '!# &amp;/¤%'}</msg>
<status status="PASS" starttime="20210731 10:42:44.666" endtime="20210731 10:42:44.668"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:44.677" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:44.677" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:44.669" endtime="20210731 10:42:44.677"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:44.677" endtime="20210731 10:42:44.677"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:44.677" endtime="20210731 10:42:44.678"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:44.669" endtime="20210731 10:42:44.678"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:44.668" endtime="20210731 10:42:44.678"/>
</for>
<status status="FAIL" starttime="20210731 10:42:44.664" endtime="20210731 10:42:44.678"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:44.664" endtime="20210731 10:42:44.678"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!# &amp;/¤%</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:44.679" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:42:44.679" endtime="20210731 10:42:44.679"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:44.680" level="INFO">${payload} = {'username': '!# &amp;/¤%'}</msg>
<status status="PASS" starttime="20210731 10:42:44.680" endtime="20210731 10:42:44.680"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:44.686" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:44.686" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:44.680" endtime="20210731 10:42:44.686"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:44.686" endtime="20210731 10:42:44.686"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:44.686" endtime="20210731 10:42:44.686"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:44.680" endtime="20210731 10:42:44.687"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:44.680" endtime="20210731 10:42:44.687"/>
</for>
<status status="FAIL" starttime="20210731 10:42:44.678" endtime="20210731 10:42:44.687"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:44.678" endtime="20210731 10:42:44.687"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:44.645" endtime="20210731 10:42:44.687"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:44.692" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:44.703" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:44.703" level="INFO">${pids} = 11650
11657
11661</msg>
<status status="PASS" starttime="20210731 10:42:44.688" endtime="20210731 10:42:44.703"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:44.704" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:44.704" endtime="20210731 10:42:44.704"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:44.706" level="INFO">${pids} = ['11650', '11657', '11661']</msg>
<status status="PASS" starttime="20210731 10:42:44.705" endtime="20210731 10:42:44.706"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11650</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:44.711" level="INFO">Running command 'kill 11650 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:44.706" endtime="20210731 10:42:44.711"/>
</kw>
<status status="PASS" starttime="20210731 10:42:44.706" endtime="20210731 10:42:44.711"/>
</iter>
<iter>
<var name="${pid}">11657</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:44.719" level="INFO">Running command 'kill 11657 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:44.712" endtime="20210731 10:42:44.719"/>
</kw>
<status status="PASS" starttime="20210731 10:42:44.712" endtime="20210731 10:42:44.720"/>
</iter>
<iter>
<var name="${pid}">11661</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:44.725" level="INFO">Running command 'kill 11661 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:44.720" endtime="20210731 10:42:44.725"/>
</kw>
<status status="PASS" starttime="20210731 10:42:44.720" endtime="20210731 10:42:44.725"/>
</iter>
<status status="PASS" starttime="20210731 10:42:44.706" endtime="20210731 10:42:44.725"/>
</for>
<status status="PASS" starttime="20210731 10:42:44.705" endtime="20210731 10:42:44.726"/>
</branch>
<status status="PASS" starttime="20210731 10:42:44.704" endtime="20210731 10:42:44.726"/>
</if>
<status status="PASS" starttime="20210731 10:42:44.687" endtime="20210731 10:42:44.726"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '!# &amp;/¤%'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:42:43.065" endtime="20210731 10:42:44.727">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t24" name="With Each Valid Token, Updating Username Of Each System User With !#%&amp;/¤ = Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:44.739" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:44.750" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:44.750" level="INFO">${pids} = 11690</msg>
<status status="PASS" starttime="20210731 10:42:44.731" endtime="20210731 10:42:44.750"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:44.751" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:44.751" endtime="20210731 10:42:44.751"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:44.752" level="INFO">${pids} = ['11690']</msg>
<status status="PASS" starttime="20210731 10:42:44.752" endtime="20210731 10:42:44.752"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11690</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:44.756" level="INFO">Running command 'kill 11690 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:44.753" endtime="20210731 10:42:44.757"/>
</kw>
<status status="PASS" starttime="20210731 10:42:44.753" endtime="20210731 10:42:44.757"/>
</iter>
<status status="PASS" starttime="20210731 10:42:44.753" endtime="20210731 10:42:44.757"/>
</for>
<status status="PASS" starttime="20210731 10:42:44.752" endtime="20210731 10:42:44.757"/>
</branch>
<status status="PASS" starttime="20210731 10:42:44.752" endtime="20210731 10:42:44.757"/>
</if>
<status status="PASS" starttime="20210731 10:42:44.731" endtime="20210731 10:42:44.758"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:44.759" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:44.759" endtime="20210731 10:42:44.759"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:44.760" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:44.760" endtime="20210731 10:42:44.760"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:44.761" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:44.760" endtime="20210731 10:42:44.761"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:44.761" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:44.761" endtime="20210731 10:42:44.761"/>
</kw>
<msg timestamp="20210731 10:42:44.762" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:44.759" endtime="20210731 10:42:44.762"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:44.766" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:44.762" endtime="20210731 10:42:44.768"/>
</kw>
<status status="PASS" starttime="20210731 10:42:44.758" endtime="20210731 10:42:44.768"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:42:44.770" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:42:44.769" endtime="20210731 10:42:44.777"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:42:46.285" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:42:44.777" endtime="20210731 10:42:46.285"/>
</kw>
<status status="PASS" starttime="20210731 10:42:44.769" endtime="20210731 10:42:46.286"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:46.287" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:46.287" endtime="20210731 10:42:46.287"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:46.288" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:46.288" endtime="20210731 10:42:46.288"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:46.290" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:46.288" endtime="20210731 10:42:46.290"/>
</kw>
<msg timestamp="20210731 10:42:46.290" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:46.286" endtime="20210731 10:42:46.290"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:42:46.291" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:42:46.290" endtime="20210731 10:42:46.291"/>
</kw>
<status status="PASS" starttime="20210731 10:42:46.286" endtime="20210731 10:42:46.292"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:42:46.293" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:42:46.293" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:42:46.292" endtime="20210731 10:42:46.293"/>
</kw>
<status status="PASS" starttime="20210731 10:42:46.292" endtime="20210731 10:42:46.293"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:42:46.295" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:42:46.295" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:42:46.294" endtime="20210731 10:42:46.295"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:42:46.296" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:42:46.295" endtime="20210731 10:42:46.296"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:46.296" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:46.296" endtime="20210731 10:42:46.296"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:46.297" endtime="20210731 10:42:46.298"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:46.298" endtime="20210731 10:42:46.298"/>
</kw>
<status status="PASS" starttime="20210731 10:42:46.296" endtime="20210731 10:42:46.298"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:46.299" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:46.298" endtime="20210731 10:42:46.299"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:46.299" endtime="20210731 10:42:46.300"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:46.300" endtime="20210731 10:42:46.300"/>
</kw>
<status status="PASS" starttime="20210731 10:42:46.298" endtime="20210731 10:42:46.300"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:46.301" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:46.300" endtime="20210731 10:42:46.301"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:46.301" endtime="20210731 10:42:46.303"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:46.303" endtime="20210731 10:42:46.303"/>
</kw>
<status status="PASS" starttime="20210731 10:42:46.300" endtime="20210731 10:42:46.303"/>
</iter>
<status status="PASS" starttime="20210731 10:42:46.296" endtime="20210731 10:42:46.303"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:42:46.304" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:42:46.304" endtime="20210731 10:42:46.305"/>
</kw>
<status status="PASS" starttime="20210731 10:42:46.293" endtime="20210731 10:42:46.305"/>
</kw>
<status status="PASS" starttime="20210731 10:42:44.730" endtime="20210731 10:42:46.305"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤ =</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:46.308" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:42:46.308" endtime="20210731 10:42:46.308"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:46.309" level="INFO">${payload} = {'username': '!#%&amp;/¤ ='}</msg>
<status status="PASS" starttime="20210731 10:42:46.309" endtime="20210731 10:42:46.309"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:46.324" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:46.324" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:46.310" endtime="20210731 10:42:46.324"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:46.324" endtime="20210731 10:42:46.324"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:46.324" endtime="20210731 10:42:46.324"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:46.309" endtime="20210731 10:42:46.325"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:46.309" endtime="20210731 10:42:46.325"/>
</for>
<status status="FAIL" starttime="20210731 10:42:46.307" endtime="20210731 10:42:46.325"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:46.306" endtime="20210731 10:42:46.325"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤ =</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:46.327" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:42:46.326" endtime="20210731 10:42:46.327"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:46.328" level="INFO">${payload} = {'username': '!#%&amp;/¤ ='}</msg>
<status status="PASS" starttime="20210731 10:42:46.327" endtime="20210731 10:42:46.328"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:46.334" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:46.335" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:46.328" endtime="20210731 10:42:46.335"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:46.335" endtime="20210731 10:42:46.335"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:46.335" endtime="20210731 10:42:46.335"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:46.328" endtime="20210731 10:42:46.335"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:46.328" endtime="20210731 10:42:46.336"/>
</for>
<status status="FAIL" starttime="20210731 10:42:46.325" endtime="20210731 10:42:46.336"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:46.325" endtime="20210731 10:42:46.336"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤ =</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:46.339" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:42:46.338" endtime="20210731 10:42:46.339"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:46.340" level="INFO">${payload} = {'username': '!#%&amp;/¤ ='}</msg>
<status status="PASS" starttime="20210731 10:42:46.339" endtime="20210731 10:42:46.340"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:46.349" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:46.349" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:46.341" endtime="20210731 10:42:46.349"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:46.350" endtime="20210731 10:42:46.350"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:46.350" endtime="20210731 10:42:46.350"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:46.341" endtime="20210731 10:42:46.350"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:46.340" endtime="20210731 10:42:46.350"/>
</for>
<status status="FAIL" starttime="20210731 10:42:46.336" endtime="20210731 10:42:46.351"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:46.336" endtime="20210731 10:42:46.351"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:46.306" endtime="20210731 10:42:46.351"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:46.357" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:46.371" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:46.371" level="INFO">${pids} = 11713
11720
11724</msg>
<status status="PASS" starttime="20210731 10:42:46.353" endtime="20210731 10:42:46.371"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:46.373" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:46.372" endtime="20210731 10:42:46.373"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:46.375" level="INFO">${pids} = ['11713', '11720', '11724']</msg>
<status status="PASS" starttime="20210731 10:42:46.374" endtime="20210731 10:42:46.375"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11713</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:46.379" level="INFO">Running command 'kill 11713 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:46.375" endtime="20210731 10:42:46.381"/>
</kw>
<status status="PASS" starttime="20210731 10:42:46.375" endtime="20210731 10:42:46.381"/>
</iter>
<iter>
<var name="${pid}">11720</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:46.386" level="INFO">Running command 'kill 11720 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:46.382" endtime="20210731 10:42:46.386"/>
</kw>
<status status="PASS" starttime="20210731 10:42:46.381" endtime="20210731 10:42:46.386"/>
</iter>
<iter>
<var name="${pid}">11724</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:46.391" level="INFO">Running command 'kill 11724 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:46.387" endtime="20210731 10:42:46.392"/>
</kw>
<status status="PASS" starttime="20210731 10:42:46.387" endtime="20210731 10:42:46.392"/>
</iter>
<status status="PASS" starttime="20210731 10:42:46.375" endtime="20210731 10:42:46.392"/>
</for>
<status status="PASS" starttime="20210731 10:42:46.374" endtime="20210731 10:42:46.392"/>
</branch>
<status status="PASS" starttime="20210731 10:42:46.373" endtime="20210731 10:42:46.392"/>
</if>
<status status="PASS" starttime="20210731 10:42:46.352" endtime="20210731 10:42:46.393"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '!#%&amp;/¤ ='
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:42:44.729" endtime="20210731 10:42:46.393">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t25" name="With Each Valid Token, Updating Username Of Each System User With !#%&amp;/¤%= ()=? Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:46.403" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:46.419" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:46.420" level="INFO">${pids} = 11753</msg>
<status status="PASS" starttime="20210731 10:42:46.396" endtime="20210731 10:42:46.420"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:46.421" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:46.420" endtime="20210731 10:42:46.421"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:46.422" level="INFO">${pids} = ['11753']</msg>
<status status="PASS" starttime="20210731 10:42:46.421" endtime="20210731 10:42:46.422"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11753</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:46.427" level="INFO">Running command 'kill 11753 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:46.423" endtime="20210731 10:42:46.428"/>
</kw>
<status status="PASS" starttime="20210731 10:42:46.423" endtime="20210731 10:42:46.428"/>
</iter>
<status status="PASS" starttime="20210731 10:42:46.422" endtime="20210731 10:42:46.428"/>
</for>
<status status="PASS" starttime="20210731 10:42:46.421" endtime="20210731 10:42:46.428"/>
</branch>
<status status="PASS" starttime="20210731 10:42:46.421" endtime="20210731 10:42:46.428"/>
</if>
<status status="PASS" starttime="20210731 10:42:46.396" endtime="20210731 10:42:46.428"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:46.430" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:46.429" endtime="20210731 10:42:46.430"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:46.431" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:46.431" endtime="20210731 10:42:46.431"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:46.432" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:46.431" endtime="20210731 10:42:46.432"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:46.433" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:46.432" endtime="20210731 10:42:46.433"/>
</kw>
<msg timestamp="20210731 10:42:46.433" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:46.430" endtime="20210731 10:42:46.433"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:46.437" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:46.434" endtime="20210731 10:42:46.440"/>
</kw>
<status status="PASS" starttime="20210731 10:42:46.429" endtime="20210731 10:42:46.440"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:42:46.443" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:42:46.442" endtime="20210731 10:42:46.448"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:42:47.949" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:42:46.448" endtime="20210731 10:42:47.949"/>
</kw>
<status status="PASS" starttime="20210731 10:42:46.441" endtime="20210731 10:42:47.950"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:47.951" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:47.951" endtime="20210731 10:42:47.951"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:47.952" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:47.951" endtime="20210731 10:42:47.952"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:47.952" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:47.952" endtime="20210731 10:42:47.952"/>
</kw>
<msg timestamp="20210731 10:42:47.953" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:47.950" endtime="20210731 10:42:47.953"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:42:47.953" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:42:47.953" endtime="20210731 10:42:47.954"/>
</kw>
<status status="PASS" starttime="20210731 10:42:47.950" endtime="20210731 10:42:47.954"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:42:47.955" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:42:47.955" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:42:47.955" endtime="20210731 10:42:47.956"/>
</kw>
<status status="PASS" starttime="20210731 10:42:47.954" endtime="20210731 10:42:47.956"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:42:47.957" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:42:47.957" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:42:47.956" endtime="20210731 10:42:47.957"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:42:47.958" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:42:47.957" endtime="20210731 10:42:47.958"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:47.959" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:47.958" endtime="20210731 10:42:47.960"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:47.960" endtime="20210731 10:42:47.962"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:47.962" endtime="20210731 10:42:47.962"/>
</kw>
<status status="PASS" starttime="20210731 10:42:47.958" endtime="20210731 10:42:47.962"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:47.963" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:47.963" endtime="20210731 10:42:47.963"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:47.963" endtime="20210731 10:42:47.964"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:47.964" endtime="20210731 10:42:47.965"/>
</kw>
<status status="PASS" starttime="20210731 10:42:47.962" endtime="20210731 10:42:47.965"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:47.965" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:47.965" endtime="20210731 10:42:47.965"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:47.965" endtime="20210731 10:42:47.966"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:47.966" endtime="20210731 10:42:47.967"/>
</kw>
<status status="PASS" starttime="20210731 10:42:47.965" endtime="20210731 10:42:47.967"/>
</iter>
<status status="PASS" starttime="20210731 10:42:47.958" endtime="20210731 10:42:47.967"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:42:47.968" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:42:47.967" endtime="20210731 10:42:47.968"/>
</kw>
<status status="PASS" starttime="20210731 10:42:47.956" endtime="20210731 10:42:47.968"/>
</kw>
<status status="PASS" starttime="20210731 10:42:46.395" endtime="20210731 10:42:47.968"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤%= ()=?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:47.970" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:42:47.969" endtime="20210731 10:42:47.970"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:47.970" level="INFO">${payload} = {'username': '!#%&amp;/¤%= ()=?'}</msg>
<status status="PASS" starttime="20210731 10:42:47.970" endtime="20210731 10:42:47.970"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:47.990" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:47.990" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:47.971" endtime="20210731 10:42:47.990"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:47.991" endtime="20210731 10:42:47.991"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:47.991" endtime="20210731 10:42:47.991"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:47.971" endtime="20210731 10:42:47.991"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:47.971" endtime="20210731 10:42:47.991"/>
</for>
<status status="FAIL" starttime="20210731 10:42:47.969" endtime="20210731 10:42:47.992"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:47.969" endtime="20210731 10:42:47.992"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤%= ()=?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:47.994" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:42:47.993" endtime="20210731 10:42:47.994"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:47.997" level="INFO">${payload} = {'username': '!#%&amp;/¤%= ()=?'}</msg>
<status status="PASS" starttime="20210731 10:42:47.996" endtime="20210731 10:42:47.997"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:48.005" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:48.005" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:47.997" endtime="20210731 10:42:48.005"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:48.006" endtime="20210731 10:42:48.006"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:48.006" endtime="20210731 10:42:48.006"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:47.997" endtime="20210731 10:42:48.006"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:47.997" endtime="20210731 10:42:48.006"/>
</for>
<status status="FAIL" starttime="20210731 10:42:47.992" endtime="20210731 10:42:48.007"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:47.992" endtime="20210731 10:42:48.007"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤%= ()=?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:48.009" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:42:48.008" endtime="20210731 10:42:48.009"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:48.010" level="INFO">${payload} = {'username': '!#%&amp;/¤%= ()=?'}</msg>
<status status="PASS" starttime="20210731 10:42:48.010" endtime="20210731 10:42:48.010"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:48.018" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:48.019" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:48.011" endtime="20210731 10:42:48.019"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:48.019" endtime="20210731 10:42:48.019"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:48.019" endtime="20210731 10:42:48.020"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:48.011" endtime="20210731 10:42:48.020"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:48.010" endtime="20210731 10:42:48.020"/>
</for>
<status status="FAIL" starttime="20210731 10:42:48.007" endtime="20210731 10:42:48.020"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:48.007" endtime="20210731 10:42:48.020"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:47.968" endtime="20210731 10:42:48.020"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:48.026" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:48.036" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:48.036" level="INFO">${pids} = 11776
11783
11796</msg>
<status status="PASS" starttime="20210731 10:42:48.022" endtime="20210731 10:42:48.036"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:48.037" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:48.037" endtime="20210731 10:42:48.037"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:48.039" level="INFO">${pids} = ['11776', '11783', '11796']</msg>
<status status="PASS" starttime="20210731 10:42:48.038" endtime="20210731 10:42:48.039"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11776</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:48.043" level="INFO">Running command 'kill 11776 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:48.039" endtime="20210731 10:42:48.044"/>
</kw>
<status status="PASS" starttime="20210731 10:42:48.039" endtime="20210731 10:42:48.044"/>
</iter>
<iter>
<var name="${pid}">11783</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:48.048" level="INFO">Running command 'kill 11783 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:48.044" endtime="20210731 10:42:48.048"/>
</kw>
<status status="PASS" starttime="20210731 10:42:48.044" endtime="20210731 10:42:48.048"/>
</iter>
<iter>
<var name="${pid}">11796</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:48.052" level="INFO">Running command 'kill 11796 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:48.049" endtime="20210731 10:42:48.053"/>
</kw>
<status status="PASS" starttime="20210731 10:42:48.048" endtime="20210731 10:42:48.053"/>
</iter>
<status status="PASS" starttime="20210731 10:42:48.039" endtime="20210731 10:42:48.053"/>
</for>
<status status="PASS" starttime="20210731 10:42:48.038" endtime="20210731 10:42:48.053"/>
</branch>
<status status="PASS" starttime="20210731 10:42:48.038" endtime="20210731 10:42:48.053"/>
</if>
<status status="PASS" starttime="20210731 10:42:48.021" endtime="20210731 10:42:48.054"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '!#%&amp;/¤%= ()=?'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:42:46.394" endtime="20210731 10:42:48.054">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t26" name="With Each Valid Token, Updating Username Of Each System User With 1234 67 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:48.062" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:48.073" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:48.073" level="INFO">${pids} = 11825</msg>
<status status="PASS" starttime="20210731 10:42:48.058" endtime="20210731 10:42:48.073"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:48.075" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:48.074" endtime="20210731 10:42:48.075"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:48.076" level="INFO">${pids} = ['11825']</msg>
<status status="PASS" starttime="20210731 10:42:48.075" endtime="20210731 10:42:48.076"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11825</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:48.080" level="INFO">Running command 'kill 11825 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:48.076" endtime="20210731 10:42:48.080"/>
</kw>
<status status="PASS" starttime="20210731 10:42:48.076" endtime="20210731 10:42:48.080"/>
</iter>
<status status="PASS" starttime="20210731 10:42:48.076" endtime="20210731 10:42:48.080"/>
</for>
<status status="PASS" starttime="20210731 10:42:48.075" endtime="20210731 10:42:48.081"/>
</branch>
<status status="PASS" starttime="20210731 10:42:48.075" endtime="20210731 10:42:48.081"/>
</if>
<status status="PASS" starttime="20210731 10:42:48.057" endtime="20210731 10:42:48.081"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:48.082" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:48.082" endtime="20210731 10:42:48.082"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:48.083" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:48.083" endtime="20210731 10:42:48.083"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:48.084" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:48.083" endtime="20210731 10:42:48.084"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:48.084" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:48.084" endtime="20210731 10:42:48.084"/>
</kw>
<msg timestamp="20210731 10:42:48.085" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:48.083" endtime="20210731 10:42:48.085"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:48.088" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:48.085" endtime="20210731 10:42:48.090"/>
</kw>
<status status="PASS" starttime="20210731 10:42:48.081" endtime="20210731 10:42:48.091"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:42:48.092" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:42:48.092" endtime="20210731 10:42:48.100"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:42:49.601" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:42:48.100" endtime="20210731 10:42:49.602"/>
</kw>
<status status="PASS" starttime="20210731 10:42:48.091" endtime="20210731 10:42:49.602"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:49.603" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:49.603" endtime="20210731 10:42:49.604"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:49.604" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:49.604" endtime="20210731 10:42:49.604"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:49.605" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:49.604" endtime="20210731 10:42:49.605"/>
</kw>
<msg timestamp="20210731 10:42:49.605" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:49.603" endtime="20210731 10:42:49.605"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:42:49.606" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:42:49.606" endtime="20210731 10:42:49.607"/>
</kw>
<status status="PASS" starttime="20210731 10:42:49.602" endtime="20210731 10:42:49.607"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:42:49.609" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:42:49.609" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:42:49.608" endtime="20210731 10:42:49.609"/>
</kw>
<status status="PASS" starttime="20210731 10:42:49.608" endtime="20210731 10:42:49.610"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:42:49.611" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:42:49.612" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:42:49.610" endtime="20210731 10:42:49.612"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:42:49.612" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:42:49.612" endtime="20210731 10:42:49.612"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:49.614" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:49.613" endtime="20210731 10:42:49.614"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:49.614" endtime="20210731 10:42:49.616"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:49.616" endtime="20210731 10:42:49.616"/>
</kw>
<status status="PASS" starttime="20210731 10:42:49.613" endtime="20210731 10:42:49.616"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:49.617" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:49.617" endtime="20210731 10:42:49.617"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:49.618" endtime="20210731 10:42:49.619"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:49.620" endtime="20210731 10:42:49.620"/>
</kw>
<status status="PASS" starttime="20210731 10:42:49.617" endtime="20210731 10:42:49.620"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:49.621" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:49.621" endtime="20210731 10:42:49.621"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:49.621" endtime="20210731 10:42:49.623"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:49.623" endtime="20210731 10:42:49.623"/>
</kw>
<status status="PASS" starttime="20210731 10:42:49.620" endtime="20210731 10:42:49.623"/>
</iter>
<status status="PASS" starttime="20210731 10:42:49.612" endtime="20210731 10:42:49.623"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:42:49.624" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:42:49.624" endtime="20210731 10:42:49.625"/>
</kw>
<status status="PASS" starttime="20210731 10:42:49.610" endtime="20210731 10:42:49.625"/>
</kw>
<status status="PASS" starttime="20210731 10:42:48.057" endtime="20210731 10:42:49.625"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=1234 67</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:49.627" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:42:49.626" endtime="20210731 10:42:49.627"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:49.627" level="INFO">${payload} = {'username': '1234 67'}</msg>
<status status="PASS" starttime="20210731 10:42:49.627" endtime="20210731 10:42:49.627"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:49.640" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:49.640" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:49.628" endtime="20210731 10:42:49.641"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:49.641" endtime="20210731 10:42:49.641"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:49.641" endtime="20210731 10:42:49.641"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:49.628" endtime="20210731 10:42:49.641"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:49.627" endtime="20210731 10:42:49.641"/>
</for>
<status status="FAIL" starttime="20210731 10:42:49.626" endtime="20210731 10:42:49.641"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:49.626" endtime="20210731 10:42:49.641"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=1234 67</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:49.643" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:42:49.642" endtime="20210731 10:42:49.643"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:49.644" level="INFO">${payload} = {'username': '1234 67'}</msg>
<status status="PASS" starttime="20210731 10:42:49.643" endtime="20210731 10:42:49.644"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:49.649" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:49.650" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:49.644" endtime="20210731 10:42:49.650"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:49.650" endtime="20210731 10:42:49.650"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:49.650" endtime="20210731 10:42:49.650"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:49.644" endtime="20210731 10:42:49.650"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:49.644" endtime="20210731 10:42:49.650"/>
</for>
<status status="FAIL" starttime="20210731 10:42:49.642" endtime="20210731 10:42:49.650"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:49.642" endtime="20210731 10:42:49.651"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=1234 67</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:49.653" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:42:49.653" endtime="20210731 10:42:49.653"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:49.654" level="INFO">${payload} = {'username': '1234 67'}</msg>
<status status="PASS" starttime="20210731 10:42:49.653" endtime="20210731 10:42:49.654"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:49.660" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:49.660" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:49.654" endtime="20210731 10:42:49.660"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:49.660" endtime="20210731 10:42:49.661"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:49.661" endtime="20210731 10:42:49.661"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:49.654" endtime="20210731 10:42:49.661"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:49.654" endtime="20210731 10:42:49.661"/>
</for>
<status status="FAIL" starttime="20210731 10:42:49.652" endtime="20210731 10:42:49.661"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:49.651" endtime="20210731 10:42:49.661"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:49.625" endtime="20210731 10:42:49.661"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:49.666" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:49.679" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:49.679" level="INFO">${pids} = 11848
11855
11859</msg>
<status status="PASS" starttime="20210731 10:42:49.663" endtime="20210731 10:42:49.679"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:49.680" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:49.680" endtime="20210731 10:42:49.681"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:49.682" level="INFO">${pids} = ['11848', '11855', '11859']</msg>
<status status="PASS" starttime="20210731 10:42:49.681" endtime="20210731 10:42:49.682"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11848</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:49.687" level="INFO">Running command 'kill 11848 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:49.682" endtime="20210731 10:42:49.687"/>
</kw>
<status status="PASS" starttime="20210731 10:42:49.682" endtime="20210731 10:42:49.687"/>
</iter>
<iter>
<var name="${pid}">11855</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:49.692" level="INFO">Running command 'kill 11855 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:49.688" endtime="20210731 10:42:49.693"/>
</kw>
<status status="PASS" starttime="20210731 10:42:49.688" endtime="20210731 10:42:49.693"/>
</iter>
<iter>
<var name="${pid}">11859</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:49.698" level="INFO">Running command 'kill 11859 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:49.693" endtime="20210731 10:42:49.699"/>
</kw>
<status status="PASS" starttime="20210731 10:42:49.693" endtime="20210731 10:42:49.699"/>
</iter>
<status status="PASS" starttime="20210731 10:42:49.682" endtime="20210731 10:42:49.699"/>
</for>
<status status="PASS" starttime="20210731 10:42:49.681" endtime="20210731 10:42:49.699"/>
</branch>
<status status="PASS" starttime="20210731 10:42:49.681" endtime="20210731 10:42:49.699"/>
</if>
<status status="PASS" starttime="20210731 10:42:49.662" endtime="20210731 10:42:49.699"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '1234 67'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:42:48.055" endtime="20210731 10:42:49.700">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t27" name="With Each Valid Token, Updating Username Of Each System User With 123456 8 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:49.713" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:49.742" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:49.742" level="INFO">${pids} = 11888</msg>
<status status="PASS" starttime="20210731 10:42:49.703" endtime="20210731 10:42:49.742"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:49.744" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:49.743" endtime="20210731 10:42:49.744"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:49.745" level="INFO">${pids} = ['11888']</msg>
<status status="PASS" starttime="20210731 10:42:49.744" endtime="20210731 10:42:49.745"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11888</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:49.761" level="INFO">Running command 'kill 11888 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:49.746" endtime="20210731 10:42:49.762"/>
</kw>
<status status="PASS" starttime="20210731 10:42:49.746" endtime="20210731 10:42:49.762"/>
</iter>
<status status="PASS" starttime="20210731 10:42:49.745" endtime="20210731 10:42:49.762"/>
</for>
<status status="PASS" starttime="20210731 10:42:49.744" endtime="20210731 10:42:49.762"/>
</branch>
<status status="PASS" starttime="20210731 10:42:49.744" endtime="20210731 10:42:49.762"/>
</if>
<status status="PASS" starttime="20210731 10:42:49.702" endtime="20210731 10:42:49.763"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:49.767" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:49.765" endtime="20210731 10:42:49.767"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:49.768" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:49.768" endtime="20210731 10:42:49.768"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:49.769" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:49.768" endtime="20210731 10:42:49.769"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:49.769" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:49.769" endtime="20210731 10:42:49.769"/>
</kw>
<msg timestamp="20210731 10:42:49.770" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:49.767" endtime="20210731 10:42:49.770"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:49.776" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:49.770" endtime="20210731 10:42:49.796"/>
</kw>
<status status="PASS" starttime="20210731 10:42:49.763" endtime="20210731 10:42:49.797"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:42:49.799" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:42:49.798" endtime="20210731 10:42:49.826"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:42:51.328" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:42:49.827" endtime="20210731 10:42:51.328"/>
</kw>
<status status="PASS" starttime="20210731 10:42:49.797" endtime="20210731 10:42:51.329"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:51.331" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:51.331" endtime="20210731 10:42:51.331"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:51.332" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:51.331" endtime="20210731 10:42:51.332"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:51.332" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:51.332" endtime="20210731 10:42:51.332"/>
</kw>
<msg timestamp="20210731 10:42:51.333" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:51.330" endtime="20210731 10:42:51.333"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:42:51.346" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:42:51.333" endtime="20210731 10:42:51.347"/>
</kw>
<status status="PASS" starttime="20210731 10:42:51.329" endtime="20210731 10:42:51.347"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:42:51.348" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:42:51.348" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:42:51.348" endtime="20210731 10:42:51.349"/>
</kw>
<status status="PASS" starttime="20210731 10:42:51.348" endtime="20210731 10:42:51.349"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:42:51.350" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:42:51.350" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:42:51.350" endtime="20210731 10:42:51.350"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:42:51.351" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:42:51.351" endtime="20210731 10:42:51.351"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:51.354" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:51.353" endtime="20210731 10:42:51.354"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:51.354" endtime="20210731 10:42:51.357"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:51.357" endtime="20210731 10:42:51.358"/>
</kw>
<status status="PASS" starttime="20210731 10:42:51.352" endtime="20210731 10:42:51.358"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:51.359" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:51.359" endtime="20210731 10:42:51.360"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:51.360" endtime="20210731 10:42:51.362"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:51.362" endtime="20210731 10:42:51.363"/>
</kw>
<status status="PASS" starttime="20210731 10:42:51.358" endtime="20210731 10:42:51.363"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:51.364" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:51.364" endtime="20210731 10:42:51.364"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:51.364" endtime="20210731 10:42:51.367"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:51.367" endtime="20210731 10:42:51.368"/>
</kw>
<status status="PASS" starttime="20210731 10:42:51.363" endtime="20210731 10:42:51.368"/>
</iter>
<status status="PASS" starttime="20210731 10:42:51.351" endtime="20210731 10:42:51.368"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:42:51.369" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:42:51.369" endtime="20210731 10:42:51.369"/>
</kw>
<status status="PASS" starttime="20210731 10:42:51.349" endtime="20210731 10:42:51.370"/>
</kw>
<status status="PASS" starttime="20210731 10:42:49.702" endtime="20210731 10:42:51.370"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=123456 8</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:51.372" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:42:51.371" endtime="20210731 10:42:51.372"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:51.373" level="INFO">${payload} = {'username': '123456 8'}</msg>
<status status="PASS" starttime="20210731 10:42:51.372" endtime="20210731 10:42:51.373"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:51.389" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:51.390" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:51.373" endtime="20210731 10:42:51.390"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:51.390" endtime="20210731 10:42:51.390"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:51.390" endtime="20210731 10:42:51.390"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:51.373" endtime="20210731 10:42:51.390"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:51.373" endtime="20210731 10:42:51.390"/>
</for>
<status status="FAIL" starttime="20210731 10:42:51.370" endtime="20210731 10:42:51.390"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:51.370" endtime="20210731 10:42:51.391"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=123456 8</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:51.393" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:42:51.392" endtime="20210731 10:42:51.393"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:51.394" level="INFO">${payload} = {'username': '123456 8'}</msg>
<status status="PASS" starttime="20210731 10:42:51.393" endtime="20210731 10:42:51.394"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:51.400" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:51.400" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:51.394" endtime="20210731 10:42:51.400"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:51.400" endtime="20210731 10:42:51.400"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:51.400" endtime="20210731 10:42:51.401"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:51.394" endtime="20210731 10:42:51.401"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:51.394" endtime="20210731 10:42:51.401"/>
</for>
<status status="FAIL" starttime="20210731 10:42:51.391" endtime="20210731 10:42:51.401"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:51.391" endtime="20210731 10:42:51.401"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=123456 8</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:51.403" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:42:51.402" endtime="20210731 10:42:51.403"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:51.404" level="INFO">${payload} = {'username': '123456 8'}</msg>
<status status="PASS" starttime="20210731 10:42:51.403" endtime="20210731 10:42:51.404"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:51.413" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:51.413" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:51.405" endtime="20210731 10:42:51.413"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:51.414" endtime="20210731 10:42:51.414"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:51.414" endtime="20210731 10:42:51.414"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:51.404" endtime="20210731 10:42:51.414"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:51.404" endtime="20210731 10:42:51.414"/>
</for>
<status status="FAIL" starttime="20210731 10:42:51.401" endtime="20210731 10:42:51.414"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:51.401" endtime="20210731 10:42:51.414"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:51.370" endtime="20210731 10:42:51.414"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:51.419" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:51.433" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:51.433" level="INFO">${pids} = 11911
11918
11929</msg>
<status status="PASS" starttime="20210731 10:42:51.416" endtime="20210731 10:42:51.433"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:51.435" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:51.434" endtime="20210731 10:42:51.435"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:51.436" level="INFO">${pids} = ['11911', '11918', '11929']</msg>
<status status="PASS" starttime="20210731 10:42:51.436" endtime="20210731 10:42:51.437"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11911</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:51.443" level="INFO">Running command 'kill 11911 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:51.438" endtime="20210731 10:42:51.443"/>
</kw>
<status status="PASS" starttime="20210731 10:42:51.437" endtime="20210731 10:42:51.443"/>
</iter>
<iter>
<var name="${pid}">11918</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:51.447" level="INFO">Running command 'kill 11918 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:51.444" endtime="20210731 10:42:51.448"/>
</kw>
<status status="PASS" starttime="20210731 10:42:51.444" endtime="20210731 10:42:51.448"/>
</iter>
<iter>
<var name="${pid}">11929</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:51.453" level="INFO">Running command 'kill 11929 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:51.448" endtime="20210731 10:42:51.453"/>
</kw>
<status status="PASS" starttime="20210731 10:42:51.448" endtime="20210731 10:42:51.453"/>
</iter>
<status status="PASS" starttime="20210731 10:42:51.437" endtime="20210731 10:42:51.454"/>
</for>
<status status="PASS" starttime="20210731 10:42:51.435" endtime="20210731 10:42:51.454"/>
</branch>
<status status="PASS" starttime="20210731 10:42:51.435" endtime="20210731 10:42:51.454"/>
</if>
<status status="PASS" starttime="20210731 10:42:51.415" endtime="20210731 10:42:51.454"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '123456 8'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:42:49.700" endtime="20210731 10:42:51.454">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t28" name="With Each Valid Token, Updating Username Of Each System User With 12345678 12345 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:51.467" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:51.479" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:51.479" level="INFO">${pids} = 11958</msg>
<status status="PASS" starttime="20210731 10:42:51.458" endtime="20210731 10:42:51.479"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:51.481" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:51.480" endtime="20210731 10:42:51.481"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:51.483" level="INFO">${pids} = ['11958']</msg>
<status status="PASS" starttime="20210731 10:42:51.481" endtime="20210731 10:42:51.483"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11958</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:51.487" level="INFO">Running command 'kill 11958 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:51.483" endtime="20210731 10:42:51.487"/>
</kw>
<status status="PASS" starttime="20210731 10:42:51.483" endtime="20210731 10:42:51.488"/>
</iter>
<status status="PASS" starttime="20210731 10:42:51.483" endtime="20210731 10:42:51.488"/>
</for>
<status status="PASS" starttime="20210731 10:42:51.481" endtime="20210731 10:42:51.488"/>
</branch>
<status status="PASS" starttime="20210731 10:42:51.481" endtime="20210731 10:42:51.488"/>
</if>
<status status="PASS" starttime="20210731 10:42:51.457" endtime="20210731 10:42:51.488"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:51.490" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:51.489" endtime="20210731 10:42:51.490"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:51.492" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:51.491" endtime="20210731 10:42:51.492"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:51.492" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:51.492" endtime="20210731 10:42:51.492"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:51.493" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:51.493" endtime="20210731 10:42:51.493"/>
</kw>
<msg timestamp="20210731 10:42:51.493" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:51.491" endtime="20210731 10:42:51.493"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:51.497" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:51.494" endtime="20210731 10:42:51.503"/>
</kw>
<status status="PASS" starttime="20210731 10:42:51.488" endtime="20210731 10:42:51.504"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:42:51.507" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:42:51.506" endtime="20210731 10:42:51.514"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:42:53.016" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:42:51.514" endtime="20210731 10:42:53.016"/>
</kw>
<status status="PASS" starttime="20210731 10:42:51.505" endtime="20210731 10:42:53.016"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:53.018" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:53.017" endtime="20210731 10:42:53.018"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:53.018" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:53.018" endtime="20210731 10:42:53.018"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:53.019" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:53.019" endtime="20210731 10:42:53.019"/>
</kw>
<msg timestamp="20210731 10:42:53.019" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:53.017" endtime="20210731 10:42:53.019"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:42:53.020" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:42:53.019" endtime="20210731 10:42:53.020"/>
</kw>
<status status="PASS" starttime="20210731 10:42:53.016" endtime="20210731 10:42:53.021"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:42:53.022" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:42:53.022" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:42:53.021" endtime="20210731 10:42:53.022"/>
</kw>
<status status="PASS" starttime="20210731 10:42:53.021" endtime="20210731 10:42:53.022"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:42:53.023" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:42:53.024" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:42:53.023" endtime="20210731 10:42:53.024"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:42:53.024" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:42:53.024" endtime="20210731 10:42:53.024"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:53.025" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:53.025" endtime="20210731 10:42:53.025"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:53.025" endtime="20210731 10:42:53.026"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:53.026" endtime="20210731 10:42:53.026"/>
</kw>
<status status="PASS" starttime="20210731 10:42:53.024" endtime="20210731 10:42:53.026"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:53.027" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:53.027" endtime="20210731 10:42:53.027"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:53.027" endtime="20210731 10:42:53.028"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:53.028" endtime="20210731 10:42:53.028"/>
</kw>
<status status="PASS" starttime="20210731 10:42:53.027" endtime="20210731 10:42:53.029"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:53.029" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:53.029" endtime="20210731 10:42:53.029"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:53.029" endtime="20210731 10:42:53.030"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:53.030" endtime="20210731 10:42:53.031"/>
</kw>
<status status="PASS" starttime="20210731 10:42:53.029" endtime="20210731 10:42:53.031"/>
</iter>
<status status="PASS" starttime="20210731 10:42:53.024" endtime="20210731 10:42:53.031"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:42:53.031" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:42:53.031" endtime="20210731 10:42:53.031"/>
</kw>
<status status="PASS" starttime="20210731 10:42:53.022" endtime="20210731 10:42:53.032"/>
</kw>
<status status="PASS" starttime="20210731 10:42:51.457" endtime="20210731 10:42:53.032"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=12345678 12345</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:53.034" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:42:53.033" endtime="20210731 10:42:53.034"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:53.034" level="INFO">${payload} = {'username': '12345678 12345'}</msg>
<status status="PASS" starttime="20210731 10:42:53.034" endtime="20210731 10:42:53.034"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:53.048" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:53.048" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:53.035" endtime="20210731 10:42:53.048"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:53.048" endtime="20210731 10:42:53.049"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:53.049" endtime="20210731 10:42:53.049"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:53.034" endtime="20210731 10:42:53.049"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:53.034" endtime="20210731 10:42:53.049"/>
</for>
<status status="FAIL" starttime="20210731 10:42:53.032" endtime="20210731 10:42:53.049"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:53.032" endtime="20210731 10:42:53.049"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=12345678 12345</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:53.051" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:42:53.050" endtime="20210731 10:42:53.051"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:53.051" level="INFO">${payload} = {'username': '12345678 12345'}</msg>
<status status="PASS" starttime="20210731 10:42:53.051" endtime="20210731 10:42:53.051"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:53.058" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:53.058" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:53.052" endtime="20210731 10:42:53.058"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:53.059" endtime="20210731 10:42:53.059"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:53.059" endtime="20210731 10:42:53.059"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:53.052" endtime="20210731 10:42:53.059"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:53.051" endtime="20210731 10:42:53.059"/>
</for>
<status status="FAIL" starttime="20210731 10:42:53.049" endtime="20210731 10:42:53.059"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:53.049" endtime="20210731 10:42:53.059"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=12345678 12345</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:53.061" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:42:53.060" endtime="20210731 10:42:53.061"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:53.062" level="INFO">${payload} = {'username': '12345678 12345'}</msg>
<status status="PASS" starttime="20210731 10:42:53.061" endtime="20210731 10:42:53.062"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:53.067" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:53.068" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:53.062" endtime="20210731 10:42:53.068"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:53.068" endtime="20210731 10:42:53.068"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:53.068" endtime="20210731 10:42:53.068"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:53.062" endtime="20210731 10:42:53.068"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:53.062" endtime="20210731 10:42:53.068"/>
</for>
<status status="FAIL" starttime="20210731 10:42:53.060" endtime="20210731 10:42:53.069"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:53.059" endtime="20210731 10:42:53.069"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:53.032" endtime="20210731 10:42:53.069"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:53.075" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:53.085" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:53.085" level="INFO">${pids} = 11981
11988
11999</msg>
<status status="PASS" starttime="20210731 10:42:53.070" endtime="20210731 10:42:53.085"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:53.086" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:53.086" endtime="20210731 10:42:53.086"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:53.087" level="INFO">${pids} = ['11981', '11988', '11999']</msg>
<status status="PASS" starttime="20210731 10:42:53.087" endtime="20210731 10:42:53.087"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11981</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:53.092" level="INFO">Running command 'kill 11981 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:53.088" endtime="20210731 10:42:53.092"/>
</kw>
<status status="PASS" starttime="20210731 10:42:53.087" endtime="20210731 10:42:53.092"/>
</iter>
<iter>
<var name="${pid}">11988</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:53.096" level="INFO">Running command 'kill 11988 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:53.093" endtime="20210731 10:42:53.098"/>
</kw>
<status status="PASS" starttime="20210731 10:42:53.093" endtime="20210731 10:42:53.098"/>
</iter>
<iter>
<var name="${pid}">11999</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:53.103" level="INFO">Running command 'kill 11999 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:53.099" endtime="20210731 10:42:53.103"/>
</kw>
<status status="PASS" starttime="20210731 10:42:53.098" endtime="20210731 10:42:53.103"/>
</iter>
<status status="PASS" starttime="20210731 10:42:53.087" endtime="20210731 10:42:53.104"/>
</for>
<status status="PASS" starttime="20210731 10:42:53.087" endtime="20210731 10:42:53.104"/>
</branch>
<status status="PASS" starttime="20210731 10:42:53.086" endtime="20210731 10:42:53.104"/>
</if>
<status status="PASS" starttime="20210731 10:42:53.069" endtime="20210731 10:42:53.104"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '12345678 12345'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:42:51.455" endtime="20210731 10:42:53.104">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t29" name="With Each Valid Token, Updating Username Of Each System User With abcd fg Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:53.113" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:53.124" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:53.124" level="INFO">${pids} = 12028</msg>
<status status="PASS" starttime="20210731 10:42:53.108" endtime="20210731 10:42:53.124"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:53.125" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:53.124" endtime="20210731 10:42:53.125"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:53.126" level="INFO">${pids} = ['12028']</msg>
<status status="PASS" starttime="20210731 10:42:53.126" endtime="20210731 10:42:53.126"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12028</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:53.130" level="INFO">Running command 'kill 12028 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:53.127" endtime="20210731 10:42:53.131"/>
</kw>
<status status="PASS" starttime="20210731 10:42:53.127" endtime="20210731 10:42:53.131"/>
</iter>
<status status="PASS" starttime="20210731 10:42:53.126" endtime="20210731 10:42:53.131"/>
</for>
<status status="PASS" starttime="20210731 10:42:53.126" endtime="20210731 10:42:53.131"/>
</branch>
<status status="PASS" starttime="20210731 10:42:53.125" endtime="20210731 10:42:53.131"/>
</if>
<status status="PASS" starttime="20210731 10:42:53.107" endtime="20210731 10:42:53.131"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:53.133" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:53.132" endtime="20210731 10:42:53.133"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:53.134" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:53.134" endtime="20210731 10:42:53.134"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:53.134" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:53.134" endtime="20210731 10:42:53.134"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:53.135" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:53.135" endtime="20210731 10:42:53.135"/>
</kw>
<msg timestamp="20210731 10:42:53.135" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:53.133" endtime="20210731 10:42:53.135"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:53.139" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:53.136" endtime="20210731 10:42:53.142"/>
</kw>
<status status="PASS" starttime="20210731 10:42:53.132" endtime="20210731 10:42:53.143"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:42:53.144" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:42:53.144" endtime="20210731 10:42:53.149"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:42:54.651" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:42:53.150" endtime="20210731 10:42:54.655"/>
</kw>
<status status="PASS" starttime="20210731 10:42:53.143" endtime="20210731 10:42:54.656"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:54.658" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:54.657" endtime="20210731 10:42:54.658"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:54.658" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:54.658" endtime="20210731 10:42:54.658"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:54.659" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:54.658" endtime="20210731 10:42:54.659"/>
</kw>
<msg timestamp="20210731 10:42:54.659" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:54.657" endtime="20210731 10:42:54.659"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:42:54.660" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:42:54.659" endtime="20210731 10:42:54.661"/>
</kw>
<status status="PASS" starttime="20210731 10:42:54.656" endtime="20210731 10:42:54.661"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:42:54.662" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:42:54.662" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:42:54.662" endtime="20210731 10:42:54.662"/>
</kw>
<status status="PASS" starttime="20210731 10:42:54.661" endtime="20210731 10:42:54.662"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:42:54.664" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:42:54.664" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:42:54.663" endtime="20210731 10:42:54.664"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:42:54.664" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:42:54.664" endtime="20210731 10:42:54.664"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:54.666" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:54.665" endtime="20210731 10:42:54.666"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:54.666" endtime="20210731 10:42:54.671"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:54.672" endtime="20210731 10:42:54.672"/>
</kw>
<status status="PASS" starttime="20210731 10:42:54.665" endtime="20210731 10:42:54.672"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:54.673" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:54.673" endtime="20210731 10:42:54.673"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:54.674" endtime="20210731 10:42:54.675"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:54.675" endtime="20210731 10:42:54.675"/>
</kw>
<status status="PASS" starttime="20210731 10:42:54.673" endtime="20210731 10:42:54.675"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:54.676" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:54.676" endtime="20210731 10:42:54.676"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:54.676" endtime="20210731 10:42:54.677"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:54.677" endtime="20210731 10:42:54.678"/>
</kw>
<status status="PASS" starttime="20210731 10:42:54.676" endtime="20210731 10:42:54.678"/>
</iter>
<status status="PASS" starttime="20210731 10:42:54.664" endtime="20210731 10:42:54.678"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:42:54.678" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:42:54.678" endtime="20210731 10:42:54.679"/>
</kw>
<status status="PASS" starttime="20210731 10:42:54.663" endtime="20210731 10:42:54.679"/>
</kw>
<status status="PASS" starttime="20210731 10:42:53.106" endtime="20210731 10:42:54.679"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcd fg</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:54.680" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:42:54.680" endtime="20210731 10:42:54.680"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:54.681" level="INFO">${payload} = {'username': 'abcd fg'}</msg>
<status status="PASS" starttime="20210731 10:42:54.681" endtime="20210731 10:42:54.681"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:54.694" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:54.694" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:54.681" endtime="20210731 10:42:54.695"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:54.695" endtime="20210731 10:42:54.695"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:54.695" endtime="20210731 10:42:54.695"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:54.681" endtime="20210731 10:42:54.695"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:54.681" endtime="20210731 10:42:54.695"/>
</for>
<status status="FAIL" starttime="20210731 10:42:54.679" endtime="20210731 10:42:54.695"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:54.679" endtime="20210731 10:42:54.695"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcd fg</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:54.697" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:42:54.697" endtime="20210731 10:42:54.697"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:54.698" level="INFO">${payload} = {'username': 'abcd fg'}</msg>
<status status="PASS" starttime="20210731 10:42:54.697" endtime="20210731 10:42:54.698"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:54.703" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:54.704" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:54.698" endtime="20210731 10:42:54.704"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:54.704" endtime="20210731 10:42:54.704"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:54.704" endtime="20210731 10:42:54.704"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:54.698" endtime="20210731 10:42:54.704"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:54.698" endtime="20210731 10:42:54.704"/>
</for>
<status status="FAIL" starttime="20210731 10:42:54.696" endtime="20210731 10:42:54.704"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:54.696" endtime="20210731 10:42:54.705"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcd fg</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:54.706" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:42:54.706" endtime="20210731 10:42:54.706"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:54.707" level="INFO">${payload} = {'username': 'abcd fg'}</msg>
<status status="PASS" starttime="20210731 10:42:54.707" endtime="20210731 10:42:54.707"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:54.714" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:54.715" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:54.708" endtime="20210731 10:42:54.715"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:54.715" endtime="20210731 10:42:54.715"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:54.715" endtime="20210731 10:42:54.715"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:54.708" endtime="20210731 10:42:54.715"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:54.707" endtime="20210731 10:42:54.715"/>
</for>
<status status="FAIL" starttime="20210731 10:42:54.705" endtime="20210731 10:42:54.715"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:54.705" endtime="20210731 10:42:54.716"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:54.679" endtime="20210731 10:42:54.716"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:54.721" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:54.732" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:54.732" level="INFO">${pids} = 12051
12058
12062</msg>
<status status="PASS" starttime="20210731 10:42:54.717" endtime="20210731 10:42:54.732"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:54.733" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:54.732" endtime="20210731 10:42:54.733"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:54.734" level="INFO">${pids} = ['12051', '12058', '12062']</msg>
<status status="PASS" starttime="20210731 10:42:54.734" endtime="20210731 10:42:54.734"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12051</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:54.739" level="INFO">Running command 'kill 12051 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:54.735" endtime="20210731 10:42:54.740"/>
</kw>
<status status="PASS" starttime="20210731 10:42:54.735" endtime="20210731 10:42:54.740"/>
</iter>
<iter>
<var name="${pid}">12058</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:54.746" level="INFO">Running command 'kill 12058 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:54.741" endtime="20210731 10:42:54.746"/>
</kw>
<status status="PASS" starttime="20210731 10:42:54.741" endtime="20210731 10:42:54.746"/>
</iter>
<iter>
<var name="${pid}">12062</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:54.755" level="INFO">Running command 'kill 12062 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:54.747" endtime="20210731 10:42:54.756"/>
</kw>
<status status="PASS" starttime="20210731 10:42:54.746" endtime="20210731 10:42:54.756"/>
</iter>
<status status="PASS" starttime="20210731 10:42:54.735" endtime="20210731 10:42:54.756"/>
</for>
<status status="PASS" starttime="20210731 10:42:54.734" endtime="20210731 10:42:54.756"/>
</branch>
<status status="PASS" starttime="20210731 10:42:54.733" endtime="20210731 10:42:54.756"/>
</if>
<status status="PASS" starttime="20210731 10:42:54.716" endtime="20210731 10:42:54.756"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": 'abcd fg'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:42:53.105" endtime="20210731 10:42:54.757">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t30" name="With Each Valid Token, Updating Username Of Each System User With ab defgh Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:54.763" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:54.775" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:54.775" level="INFO">${pids} = 12091</msg>
<status status="PASS" starttime="20210731 10:42:54.759" endtime="20210731 10:42:54.775"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:54.777" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:54.776" endtime="20210731 10:42:54.777"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:54.778" level="INFO">${pids} = ['12091']</msg>
<status status="PASS" starttime="20210731 10:42:54.777" endtime="20210731 10:42:54.778"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12091</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:54.782" level="INFO">Running command 'kill 12091 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:54.778" endtime="20210731 10:42:54.783"/>
</kw>
<status status="PASS" starttime="20210731 10:42:54.778" endtime="20210731 10:42:54.783"/>
</iter>
<status status="PASS" starttime="20210731 10:42:54.778" endtime="20210731 10:42:54.783"/>
</for>
<status status="PASS" starttime="20210731 10:42:54.777" endtime="20210731 10:42:54.783"/>
</branch>
<status status="PASS" starttime="20210731 10:42:54.777" endtime="20210731 10:42:54.783"/>
</if>
<status status="PASS" starttime="20210731 10:42:54.759" endtime="20210731 10:42:54.784"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:54.786" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:54.785" endtime="20210731 10:42:54.786"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:54.787" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:54.787" endtime="20210731 10:42:54.787"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:54.788" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:54.787" endtime="20210731 10:42:54.788"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:54.789" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:54.788" endtime="20210731 10:42:54.789"/>
</kw>
<msg timestamp="20210731 10:42:54.789" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:54.786" endtime="20210731 10:42:54.789"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:54.793" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:54.789" endtime="20210731 10:42:54.796"/>
</kw>
<status status="PASS" starttime="20210731 10:42:54.784" endtime="20210731 10:42:54.796"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:42:54.798" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:42:54.797" endtime="20210731 10:42:54.805"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:42:56.306" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:42:54.805" endtime="20210731 10:42:56.307"/>
</kw>
<status status="PASS" starttime="20210731 10:42:54.797" endtime="20210731 10:42:56.307"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:56.309" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:56.309" endtime="20210731 10:42:56.309"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:56.310" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:56.310" endtime="20210731 10:42:56.310"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:56.310" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:56.310" endtime="20210731 10:42:56.311"/>
</kw>
<msg timestamp="20210731 10:42:56.311" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:56.308" endtime="20210731 10:42:56.311"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:42:56.311" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:42:56.311" endtime="20210731 10:42:56.312"/>
</kw>
<status status="PASS" starttime="20210731 10:42:56.308" endtime="20210731 10:42:56.312"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:42:56.313" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:42:56.313" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:42:56.313" endtime="20210731 10:42:56.316"/>
</kw>
<status status="PASS" starttime="20210731 10:42:56.312" endtime="20210731 10:42:56.316"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:42:56.318" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:42:56.318" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:42:56.317" endtime="20210731 10:42:56.318"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:42:56.318" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:42:56.318" endtime="20210731 10:42:56.319"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:56.319" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:56.319" endtime="20210731 10:42:56.319"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:56.320" endtime="20210731 10:42:56.321"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:56.321" endtime="20210731 10:42:56.322"/>
</kw>
<status status="PASS" starttime="20210731 10:42:56.319" endtime="20210731 10:42:56.322"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:56.324" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:56.323" endtime="20210731 10:42:56.324"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:56.324" endtime="20210731 10:42:56.325"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:56.325" endtime="20210731 10:42:56.325"/>
</kw>
<status status="PASS" starttime="20210731 10:42:56.322" endtime="20210731 10:42:56.326"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:56.326" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:56.326" endtime="20210731 10:42:56.326"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:56.326" endtime="20210731 10:42:56.327"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:56.328" endtime="20210731 10:42:56.331"/>
</kw>
<status status="PASS" starttime="20210731 10:42:56.326" endtime="20210731 10:42:56.331"/>
</iter>
<status status="PASS" starttime="20210731 10:42:56.319" endtime="20210731 10:42:56.331"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:42:56.332" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:42:56.331" endtime="20210731 10:42:56.332"/>
</kw>
<status status="PASS" starttime="20210731 10:42:56.316" endtime="20210731 10:42:56.332"/>
</kw>
<status status="PASS" starttime="20210731 10:42:54.758" endtime="20210731 10:42:56.332"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=ab defgh</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:56.334" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:42:56.333" endtime="20210731 10:42:56.334"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:56.334" level="INFO">${payload} = {'username': 'ab defgh'}</msg>
<status status="PASS" starttime="20210731 10:42:56.334" endtime="20210731 10:42:56.334"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:56.351" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:56.352" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:56.335" endtime="20210731 10:42:56.352"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:56.352" endtime="20210731 10:42:56.352"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:56.352" endtime="20210731 10:42:56.352"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:56.335" endtime="20210731 10:42:56.353"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:56.334" endtime="20210731 10:42:56.353"/>
</for>
<status status="FAIL" starttime="20210731 10:42:56.333" endtime="20210731 10:42:56.353"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:56.332" endtime="20210731 10:42:56.353"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=ab defgh</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:56.355" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:42:56.354" endtime="20210731 10:42:56.355"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:56.356" level="INFO">${payload} = {'username': 'ab defgh'}</msg>
<status status="PASS" starttime="20210731 10:42:56.355" endtime="20210731 10:42:56.356"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:56.362" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:56.363" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:56.357" endtime="20210731 10:42:56.363"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:56.363" endtime="20210731 10:42:56.363"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:56.363" endtime="20210731 10:42:56.363"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:56.356" endtime="20210731 10:42:56.363"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:56.356" endtime="20210731 10:42:56.363"/>
</for>
<status status="FAIL" starttime="20210731 10:42:56.353" endtime="20210731 10:42:56.364"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:56.353" endtime="20210731 10:42:56.364"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=ab defgh</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:56.367" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:42:56.366" endtime="20210731 10:42:56.367"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:56.368" level="INFO">${payload} = {'username': 'ab defgh'}</msg>
<status status="PASS" starttime="20210731 10:42:56.367" endtime="20210731 10:42:56.368"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:56.378" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:56.378" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:56.371" endtime="20210731 10:42:56.378"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:56.379" endtime="20210731 10:42:56.379"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:56.379" endtime="20210731 10:42:56.379"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:56.368" endtime="20210731 10:42:56.379"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:56.368" endtime="20210731 10:42:56.379"/>
</for>
<status status="FAIL" starttime="20210731 10:42:56.364" endtime="20210731 10:42:56.379"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:56.364" endtime="20210731 10:42:56.379"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:56.332" endtime="20210731 10:42:56.380"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:56.385" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:56.396" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:56.396" level="INFO">${pids} = 12114
12121
12125</msg>
<status status="PASS" starttime="20210731 10:42:56.381" endtime="20210731 10:42:56.396"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:56.397" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:56.397" endtime="20210731 10:42:56.397"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:56.398" level="INFO">${pids} = ['12114', '12121', '12125']</msg>
<status status="PASS" starttime="20210731 10:42:56.398" endtime="20210731 10:42:56.398"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12114</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:56.403" level="INFO">Running command 'kill 12114 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:56.399" endtime="20210731 10:42:56.403"/>
</kw>
<status status="PASS" starttime="20210731 10:42:56.399" endtime="20210731 10:42:56.403"/>
</iter>
<iter>
<var name="${pid}">12121</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:56.409" level="INFO">Running command 'kill 12121 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:56.404" endtime="20210731 10:42:56.410"/>
</kw>
<status status="PASS" starttime="20210731 10:42:56.404" endtime="20210731 10:42:56.410"/>
</iter>
<iter>
<var name="${pid}">12125</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:56.416" level="INFO">Running command 'kill 12125 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:56.410" endtime="20210731 10:42:56.416"/>
</kw>
<status status="PASS" starttime="20210731 10:42:56.410" endtime="20210731 10:42:56.416"/>
</iter>
<status status="PASS" starttime="20210731 10:42:56.398" endtime="20210731 10:42:56.416"/>
</for>
<status status="PASS" starttime="20210731 10:42:56.398" endtime="20210731 10:42:56.416"/>
</branch>
<status status="PASS" starttime="20210731 10:42:56.398" endtime="20210731 10:42:56.416"/>
</if>
<status status="PASS" starttime="20210731 10:42:56.380" endtime="20210731 10:42:56.417"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": 'ab defgh'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:42:54.757" endtime="20210731 10:42:56.417">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t31" name="With Each Valid Token, Updating Username Of Each System User With abcdefghijklmnp stop Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:56.424" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:56.444" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:56.444" level="INFO">${pids} = 12154</msg>
<status status="PASS" starttime="20210731 10:42:56.420" endtime="20210731 10:42:56.445"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:56.446" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:56.445" endtime="20210731 10:42:56.446"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:56.447" level="INFO">${pids} = ['12154']</msg>
<status status="PASS" starttime="20210731 10:42:56.446" endtime="20210731 10:42:56.447"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12154</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:56.455" level="INFO">Running command 'kill 12154 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:56.448" endtime="20210731 10:42:56.456"/>
</kw>
<status status="PASS" starttime="20210731 10:42:56.447" endtime="20210731 10:42:56.456"/>
</iter>
<status status="PASS" starttime="20210731 10:42:56.447" endtime="20210731 10:42:56.456"/>
</for>
<status status="PASS" starttime="20210731 10:42:56.446" endtime="20210731 10:42:56.456"/>
</branch>
<status status="PASS" starttime="20210731 10:42:56.446" endtime="20210731 10:42:56.456"/>
</if>
<status status="PASS" starttime="20210731 10:42:56.419" endtime="20210731 10:42:56.458"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:56.460" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:56.459" endtime="20210731 10:42:56.460"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:56.461" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:56.461" endtime="20210731 10:42:56.462"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:56.462" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:56.462" endtime="20210731 10:42:56.462"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:56.463" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:56.462" endtime="20210731 10:42:56.463"/>
</kw>
<msg timestamp="20210731 10:42:56.463" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:56.460" endtime="20210731 10:42:56.463"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:56.471" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:56.463" endtime="20210731 10:42:56.474"/>
</kw>
<status status="PASS" starttime="20210731 10:42:56.459" endtime="20210731 10:42:56.475"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:42:56.476" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:42:56.476" endtime="20210731 10:42:56.481"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:42:57.983" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:42:56.482" endtime="20210731 10:42:57.983"/>
</kw>
<status status="PASS" starttime="20210731 10:42:56.475" endtime="20210731 10:42:57.984"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:57.986" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:57.986" endtime="20210731 10:42:57.986"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:57.987" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:57.987" endtime="20210731 10:42:57.987"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:57.988" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:57.987" endtime="20210731 10:42:57.988"/>
</kw>
<msg timestamp="20210731 10:42:57.988" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:57.985" endtime="20210731 10:42:57.988"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:42:57.989" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:42:57.988" endtime="20210731 10:42:57.990"/>
</kw>
<status status="PASS" starttime="20210731 10:42:57.984" endtime="20210731 10:42:57.990"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:42:57.991" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:42:57.991" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:42:57.991" endtime="20210731 10:42:57.991"/>
</kw>
<status status="PASS" starttime="20210731 10:42:57.990" endtime="20210731 10:42:57.991"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:42:57.992" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:42:57.993" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:42:57.992" endtime="20210731 10:42:57.993"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:42:57.994" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:42:57.993" endtime="20210731 10:42:57.995"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:57.996" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:57.995" endtime="20210731 10:42:57.996"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:57.996" endtime="20210731 10:42:57.997"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:57.997" endtime="20210731 10:42:57.998"/>
</kw>
<status status="PASS" starttime="20210731 10:42:57.995" endtime="20210731 10:42:57.998"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:57.998" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:57.998" endtime="20210731 10:42:57.998"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:57.998" endtime="20210731 10:42:57.999"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:58.000" endtime="20210731 10:42:58.000"/>
</kw>
<status status="PASS" starttime="20210731 10:42:57.998" endtime="20210731 10:42:58.000"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:58.000" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:58.000" endtime="20210731 10:42:58.000"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:58.001" endtime="20210731 10:42:58.002"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:58.002" endtime="20210731 10:42:58.002"/>
</kw>
<status status="PASS" starttime="20210731 10:42:58.000" endtime="20210731 10:42:58.002"/>
</iter>
<status status="PASS" starttime="20210731 10:42:57.995" endtime="20210731 10:42:58.002"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:42:58.003" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:42:58.002" endtime="20210731 10:42:58.003"/>
</kw>
<status status="PASS" starttime="20210731 10:42:57.991" endtime="20210731 10:42:58.003"/>
</kw>
<status status="PASS" starttime="20210731 10:42:56.419" endtime="20210731 10:42:58.003"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcdefghijklmnp stop</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:58.005" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:42:58.005" endtime="20210731 10:42:58.005"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:58.006" level="INFO">${payload} = {'username': 'abcdefghijklmnp stop'}</msg>
<status status="PASS" starttime="20210731 10:42:58.005" endtime="20210731 10:42:58.006"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:58.019" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:58.019" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:58.006" endtime="20210731 10:42:58.019"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:58.020" endtime="20210731 10:42:58.020"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:58.020" endtime="20210731 10:42:58.020"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:58.006" endtime="20210731 10:42:58.020"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:58.006" endtime="20210731 10:42:58.020"/>
</for>
<status status="FAIL" starttime="20210731 10:42:58.004" endtime="20210731 10:42:58.020"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:58.004" endtime="20210731 10:42:58.020"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcdefghijklmnp stop</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:58.024" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:42:58.024" endtime="20210731 10:42:58.024"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:58.025" level="INFO">${payload} = {'username': 'abcdefghijklmnp stop'}</msg>
<status status="PASS" starttime="20210731 10:42:58.025" endtime="20210731 10:42:58.025"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:58.033" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:58.033" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:58.026" endtime="20210731 10:42:58.033"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:58.034" endtime="20210731 10:42:58.034"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:58.034" endtime="20210731 10:42:58.034"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:58.025" endtime="20210731 10:42:58.034"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:58.025" endtime="20210731 10:42:58.034"/>
</for>
<status status="FAIL" starttime="20210731 10:42:58.022" endtime="20210731 10:42:58.034"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:58.020" endtime="20210731 10:42:58.034"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcdefghijklmnp stop</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:58.036" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:42:58.035" endtime="20210731 10:42:58.036"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:58.036" level="INFO">${payload} = {'username': 'abcdefghijklmnp stop'}</msg>
<status status="PASS" starttime="20210731 10:42:58.036" endtime="20210731 10:42:58.036"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:58.043" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:58.043" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:58.037" endtime="20210731 10:42:58.043"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:58.043" endtime="20210731 10:42:58.043"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:58.043" endtime="20210731 10:42:58.044"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:58.037" endtime="20210731 10:42:58.044"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:58.036" endtime="20210731 10:42:58.044"/>
</for>
<status status="FAIL" starttime="20210731 10:42:58.035" endtime="20210731 10:42:58.044"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:58.034" endtime="20210731 10:42:58.044"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:58.003" endtime="20210731 10:42:58.044"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:58.049" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:58.061" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:58.062" level="INFO">${pids} = 12177
12184
12195</msg>
<status status="PASS" starttime="20210731 10:42:58.045" endtime="20210731 10:42:58.062"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:58.064" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:58.063" endtime="20210731 10:42:58.064"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:58.065" level="INFO">${pids} = ['12177', '12184', '12195']</msg>
<status status="PASS" starttime="20210731 10:42:58.064" endtime="20210731 10:42:58.066"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12177</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:58.071" level="INFO">Running command 'kill 12177 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:58.066" endtime="20210731 10:42:58.072"/>
</kw>
<status status="PASS" starttime="20210731 10:42:58.066" endtime="20210731 10:42:58.072"/>
</iter>
<iter>
<var name="${pid}">12184</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:58.078" level="INFO">Running command 'kill 12184 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:58.073" endtime="20210731 10:42:58.081"/>
</kw>
<status status="PASS" starttime="20210731 10:42:58.072" endtime="20210731 10:42:58.081"/>
</iter>
<iter>
<var name="${pid}">12195</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:58.087" level="INFO">Running command 'kill 12195 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:58.081" endtime="20210731 10:42:58.088"/>
</kw>
<status status="PASS" starttime="20210731 10:42:58.081" endtime="20210731 10:42:58.088"/>
</iter>
<status status="PASS" starttime="20210731 10:42:58.066" endtime="20210731 10:42:58.088"/>
</for>
<status status="PASS" starttime="20210731 10:42:58.064" endtime="20210731 10:42:58.088"/>
</branch>
<status status="PASS" starttime="20210731 10:42:58.064" endtime="20210731 10:42:58.088"/>
</if>
<status status="PASS" starttime="20210731 10:42:58.044" endtime="20210731 10:42:58.088"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": 'abcdefghijklmnp stop'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:42:56.418" endtime="20210731 10:42:58.089">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t32" name="With Each Valid Token, Updating Username Of Each System User With haka 12 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:58.096" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:58.108" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:58.108" level="INFO">${pids} = 12224</msg>
<status status="PASS" starttime="20210731 10:42:58.093" endtime="20210731 10:42:58.108"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:58.109" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:58.108" endtime="20210731 10:42:58.109"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:58.111" level="INFO">${pids} = ['12224']</msg>
<status status="PASS" starttime="20210731 10:42:58.110" endtime="20210731 10:42:58.111"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12224</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:58.115" level="INFO">Running command 'kill 12224 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:58.111" endtime="20210731 10:42:58.115"/>
</kw>
<status status="PASS" starttime="20210731 10:42:58.111" endtime="20210731 10:42:58.115"/>
</iter>
<status status="PASS" starttime="20210731 10:42:58.111" endtime="20210731 10:42:58.115"/>
</for>
<status status="PASS" starttime="20210731 10:42:58.110" endtime="20210731 10:42:58.115"/>
</branch>
<status status="PASS" starttime="20210731 10:42:58.109" endtime="20210731 10:42:58.115"/>
</if>
<status status="PASS" starttime="20210731 10:42:58.091" endtime="20210731 10:42:58.116"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:58.117" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:58.117" endtime="20210731 10:42:58.117"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:58.118" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:58.118" endtime="20210731 10:42:58.118"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:58.119" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:58.118" endtime="20210731 10:42:58.119"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:58.119" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:58.119" endtime="20210731 10:42:58.119"/>
</kw>
<msg timestamp="20210731 10:42:58.120" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:58.118" endtime="20210731 10:42:58.120"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:58.124" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:58.120" endtime="20210731 10:42:58.127"/>
</kw>
<status status="PASS" starttime="20210731 10:42:58.116" endtime="20210731 10:42:58.128"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:42:58.132" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:42:58.130" endtime="20210731 10:42:58.143"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:42:59.645" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:42:58.143" endtime="20210731 10:42:59.645"/>
</kw>
<status status="PASS" starttime="20210731 10:42:58.129" endtime="20210731 10:42:59.645"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:59.647" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:59.647" endtime="20210731 10:42:59.647"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:59.648" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:59.647" endtime="20210731 10:42:59.648"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:59.648" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:59.648" endtime="20210731 10:42:59.648"/>
</kw>
<msg timestamp="20210731 10:42:59.649" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:59.646" endtime="20210731 10:42:59.649"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:42:59.649" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:42:59.649" endtime="20210731 10:42:59.650"/>
</kw>
<status status="PASS" starttime="20210731 10:42:59.646" endtime="20210731 10:42:59.650"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:42:59.650" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:42:59.650" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:42:59.650" endtime="20210731 10:42:59.651"/>
</kw>
<status status="PASS" starttime="20210731 10:42:59.650" endtime="20210731 10:42:59.651"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:42:59.652" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:42:59.652" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:42:59.651" endtime="20210731 10:42:59.652"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:42:59.652" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:42:59.652" endtime="20210731 10:42:59.652"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:59.653" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:59.653" endtime="20210731 10:42:59.653"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:59.653" endtime="20210731 10:42:59.654"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:59.654" endtime="20210731 10:42:59.655"/>
</kw>
<status status="PASS" starttime="20210731 10:42:59.653" endtime="20210731 10:42:59.655"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:59.655" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:59.655" endtime="20210731 10:42:59.655"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:59.656" endtime="20210731 10:42:59.657"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:59.657" endtime="20210731 10:42:59.657"/>
</kw>
<status status="PASS" starttime="20210731 10:42:59.655" endtime="20210731 10:42:59.657"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:59.658" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:42:59.658" endtime="20210731 10:42:59.658"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:42:59.658" endtime="20210731 10:42:59.659"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:42:59.659" endtime="20210731 10:42:59.659"/>
</kw>
<status status="PASS" starttime="20210731 10:42:59.657" endtime="20210731 10:42:59.660"/>
</iter>
<status status="PASS" starttime="20210731 10:42:59.652" endtime="20210731 10:42:59.660"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:42:59.661" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:42:59.660" endtime="20210731 10:42:59.661"/>
</kw>
<status status="PASS" starttime="20210731 10:42:59.651" endtime="20210731 10:42:59.661"/>
</kw>
<status status="PASS" starttime="20210731 10:42:58.091" endtime="20210731 10:42:59.661"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=haka 12</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:59.663" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:42:59.662" endtime="20210731 10:42:59.663"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:59.663" level="INFO">${payload} = {'username': 'haka 12'}</msg>
<status status="PASS" starttime="20210731 10:42:59.663" endtime="20210731 10:42:59.663"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:59.676" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:59.676" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:59.664" endtime="20210731 10:42:59.676"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:59.677" endtime="20210731 10:42:59.677"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:59.677" endtime="20210731 10:42:59.677"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:59.664" endtime="20210731 10:42:59.677"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:59.663" endtime="20210731 10:42:59.677"/>
</for>
<status status="FAIL" starttime="20210731 10:42:59.662" endtime="20210731 10:42:59.677"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:59.661" endtime="20210731 10:42:59.677"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=haka 12</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:59.679" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:42:59.678" endtime="20210731 10:42:59.679"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:59.679" level="INFO">${payload} = {'username': 'haka 12'}</msg>
<status status="PASS" starttime="20210731 10:42:59.679" endtime="20210731 10:42:59.679"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:59.684" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:59.685" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:59.680" endtime="20210731 10:42:59.685"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:59.685" endtime="20210731 10:42:59.685"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:59.685" endtime="20210731 10:42:59.685"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:59.680" endtime="20210731 10:42:59.686"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:59.679" endtime="20210731 10:42:59.686"/>
</for>
<status status="FAIL" starttime="20210731 10:42:59.678" endtime="20210731 10:42:59.686"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:59.677" endtime="20210731 10:42:59.686"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=haka 12</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:59.688" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:42:59.687" endtime="20210731 10:42:59.688"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:42:59.689" level="INFO">${payload} = {'username': 'haka 12'}</msg>
<status status="PASS" starttime="20210731 10:42:59.688" endtime="20210731 10:42:59.689"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:42:59.695" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:42:59.695" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:42:59.689" endtime="20210731 10:42:59.695"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:42:59.696" endtime="20210731 10:42:59.696"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:42:59.696" endtime="20210731 10:42:59.696"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:59.689" endtime="20210731 10:42:59.696"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:59.689" endtime="20210731 10:42:59.696"/>
</for>
<status status="FAIL" starttime="20210731 10:42:59.686" endtime="20210731 10:42:59.696"/>
</kw>
<status status="FAIL" starttime="20210731 10:42:59.686" endtime="20210731 10:42:59.696"/>
</iter>
<status status="FAIL" starttime="20210731 10:42:59.661" endtime="20210731 10:42:59.696"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:59.702" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:59.713" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:59.714" level="INFO">${pids} = 12247
12254
12258</msg>
<status status="PASS" starttime="20210731 10:42:59.698" endtime="20210731 10:42:59.714"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:59.715" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:59.714" endtime="20210731 10:42:59.715"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:59.716" level="INFO">${pids} = ['12247', '12254', '12258']</msg>
<status status="PASS" starttime="20210731 10:42:59.715" endtime="20210731 10:42:59.716"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12247</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:59.720" level="INFO">Running command 'kill 12247 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:59.716" endtime="20210731 10:42:59.721"/>
</kw>
<status status="PASS" starttime="20210731 10:42:59.716" endtime="20210731 10:42:59.721"/>
</iter>
<iter>
<var name="${pid}">12254</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:59.725" level="INFO">Running command 'kill 12254 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:59.722" endtime="20210731 10:42:59.726"/>
</kw>
<status status="PASS" starttime="20210731 10:42:59.721" endtime="20210731 10:42:59.726"/>
</iter>
<iter>
<var name="${pid}">12258</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:59.733" level="INFO">Running command 'kill 12258 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:59.727" endtime="20210731 10:42:59.733"/>
</kw>
<status status="PASS" starttime="20210731 10:42:59.726" endtime="20210731 10:42:59.733"/>
</iter>
<status status="PASS" starttime="20210731 10:42:59.716" endtime="20210731 10:42:59.733"/>
</for>
<status status="PASS" starttime="20210731 10:42:59.715" endtime="20210731 10:42:59.733"/>
</branch>
<status status="PASS" starttime="20210731 10:42:59.715" endtime="20210731 10:42:59.734"/>
</if>
<status status="PASS" starttime="20210731 10:42:59.697" endtime="20210731 10:42:59.734"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": 'haka 12'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:42:58.090" endtime="20210731 10:42:59.734">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t33" name="With Each Valid Token, Updating Username Of Each System User With haka 123 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:42:59.741" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:42:59.752" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:42:59.752" level="INFO">${pids} = 12287</msg>
<status status="PASS" starttime="20210731 10:42:59.737" endtime="20210731 10:42:59.752"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:59.754" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:42:59.753" endtime="20210731 10:42:59.754"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:42:59.755" level="INFO">${pids} = ['12287']</msg>
<status status="PASS" starttime="20210731 10:42:59.754" endtime="20210731 10:42:59.755"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12287</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:59.758" level="INFO">Running command 'kill 12287 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:59.755" endtime="20210731 10:42:59.759"/>
</kw>
<status status="PASS" starttime="20210731 10:42:59.755" endtime="20210731 10:42:59.759"/>
</iter>
<status status="PASS" starttime="20210731 10:42:59.755" endtime="20210731 10:42:59.759"/>
</for>
<status status="PASS" starttime="20210731 10:42:59.754" endtime="20210731 10:42:59.759"/>
</branch>
<status status="PASS" starttime="20210731 10:42:59.754" endtime="20210731 10:42:59.759"/>
</if>
<status status="PASS" starttime="20210731 10:42:59.736" endtime="20210731 10:42:59.760"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:59.762" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:59.761" endtime="20210731 10:42:59.762"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:59.763" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:42:59.762" endtime="20210731 10:42:59.763"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:42:59.763" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:42:59.763" endtime="20210731 10:42:59.763"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:42:59.764" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:59.763" endtime="20210731 10:42:59.764"/>
</kw>
<msg timestamp="20210731 10:42:59.764" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:42:59.762" endtime="20210731 10:42:59.764"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:42:59.768" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:42:59.764" endtime="20210731 10:42:59.770"/>
</kw>
<status status="PASS" starttime="20210731 10:42:59.760" endtime="20210731 10:42:59.771"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:42:59.772" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:42:59.772" endtime="20210731 10:42:59.778"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:43:01.279" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:42:59.778" endtime="20210731 10:43:01.279"/>
</kw>
<status status="PASS" starttime="20210731 10:42:59.771" endtime="20210731 10:43:01.280"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:01.282" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:01.282" endtime="20210731 10:43:01.282"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:01.283" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:01.282" endtime="20210731 10:43:01.283"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:01.283" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:01.283" endtime="20210731 10:43:01.283"/>
</kw>
<msg timestamp="20210731 10:43:01.284" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:01.281" endtime="20210731 10:43:01.284"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:43:01.284" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:43:01.284" endtime="20210731 10:43:01.285"/>
</kw>
<status status="PASS" starttime="20210731 10:43:01.280" endtime="20210731 10:43:01.285"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:43:01.286" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:43:01.286" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:43:01.286" endtime="20210731 10:43:01.286"/>
</kw>
<status status="PASS" starttime="20210731 10:43:01.285" endtime="20210731 10:43:01.286"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:43:01.287" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:43:01.287" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:43:01.287" endtime="20210731 10:43:01.288"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:43:01.288" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:43:01.288" endtime="20210731 10:43:01.288"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:01.290" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:01.289" endtime="20210731 10:43:01.290"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:01.290" endtime="20210731 10:43:01.291"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:01.291" endtime="20210731 10:43:01.292"/>
</kw>
<status status="PASS" starttime="20210731 10:43:01.289" endtime="20210731 10:43:01.292"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:01.293" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:01.292" endtime="20210731 10:43:01.293"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:01.293" endtime="20210731 10:43:01.294"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:01.294" endtime="20210731 10:43:01.294"/>
</kw>
<status status="PASS" starttime="20210731 10:43:01.292" endtime="20210731 10:43:01.294"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:01.295" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:01.295" endtime="20210731 10:43:01.295"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:01.295" endtime="20210731 10:43:01.296"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:01.296" endtime="20210731 10:43:01.297"/>
</kw>
<status status="PASS" starttime="20210731 10:43:01.295" endtime="20210731 10:43:01.297"/>
</iter>
<status status="PASS" starttime="20210731 10:43:01.288" endtime="20210731 10:43:01.297"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:43:01.297" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:43:01.297" endtime="20210731 10:43:01.297"/>
</kw>
<status status="PASS" starttime="20210731 10:43:01.286" endtime="20210731 10:43:01.298"/>
</kw>
<status status="PASS" starttime="20210731 10:42:59.736" endtime="20210731 10:43:01.298"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=haka 123</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:01.299" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:43:01.299" endtime="20210731 10:43:01.299"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:01.300" level="INFO">${payload} = {'username': 'haka 123'}</msg>
<status status="PASS" starttime="20210731 10:43:01.300" endtime="20210731 10:43:01.300"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:01.313" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:01.314" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:01.300" endtime="20210731 10:43:01.314"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:01.315" endtime="20210731 10:43:01.315"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:01.315" endtime="20210731 10:43:01.315"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:01.300" endtime="20210731 10:43:01.315"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:01.300" endtime="20210731 10:43:01.315"/>
</for>
<status status="FAIL" starttime="20210731 10:43:01.298" endtime="20210731 10:43:01.315"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:01.298" endtime="20210731 10:43:01.315"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=haka 123</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:01.318" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:43:01.317" endtime="20210731 10:43:01.318"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:01.319" level="INFO">${payload} = {'username': 'haka 123'}</msg>
<status status="PASS" starttime="20210731 10:43:01.318" endtime="20210731 10:43:01.319"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:01.325" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:01.325" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:01.319" endtime="20210731 10:43:01.325"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:01.325" endtime="20210731 10:43:01.325"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:01.325" endtime="20210731 10:43:01.325"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:01.319" endtime="20210731 10:43:01.326"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:01.319" endtime="20210731 10:43:01.326"/>
</for>
<status status="FAIL" starttime="20210731 10:43:01.316" endtime="20210731 10:43:01.326"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:01.316" endtime="20210731 10:43:01.326"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=haka 123</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:01.327" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:43:01.327" endtime="20210731 10:43:01.327"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:01.328" level="INFO">${payload} = {'username': 'haka 123'}</msg>
<status status="PASS" starttime="20210731 10:43:01.327" endtime="20210731 10:43:01.328"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:01.333" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:01.333" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:01.328" endtime="20210731 10:43:01.334"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:01.334" endtime="20210731 10:43:01.334"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:01.334" endtime="20210731 10:43:01.334"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:01.328" endtime="20210731 10:43:01.334"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:01.328" endtime="20210731 10:43:01.334"/>
</for>
<status status="FAIL" starttime="20210731 10:43:01.326" endtime="20210731 10:43:01.334"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:01.326" endtime="20210731 10:43:01.334"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:01.298" endtime="20210731 10:43:01.334"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:01.340" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:01.350" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:01.350" level="INFO">${pids} = 12310
12317
12321</msg>
<status status="PASS" starttime="20210731 10:43:01.336" endtime="20210731 10:43:01.350"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:01.351" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:01.351" endtime="20210731 10:43:01.351"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:01.352" level="INFO">${pids} = ['12310', '12317', '12321']</msg>
<status status="PASS" starttime="20210731 10:43:01.352" endtime="20210731 10:43:01.352"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12310</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:01.357" level="INFO">Running command 'kill 12310 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:01.353" endtime="20210731 10:43:01.357"/>
</kw>
<status status="PASS" starttime="20210731 10:43:01.352" endtime="20210731 10:43:01.357"/>
</iter>
<iter>
<var name="${pid}">12317</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:01.361" level="INFO">Running command 'kill 12317 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:01.358" endtime="20210731 10:43:01.364"/>
</kw>
<status status="PASS" starttime="20210731 10:43:01.358" endtime="20210731 10:43:01.364"/>
</iter>
<iter>
<var name="${pid}">12321</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:01.368" level="INFO">Running command 'kill 12321 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:01.365" endtime="20210731 10:43:01.369"/>
</kw>
<status status="PASS" starttime="20210731 10:43:01.364" endtime="20210731 10:43:01.369"/>
</iter>
<status status="PASS" starttime="20210731 10:43:01.352" endtime="20210731 10:43:01.369"/>
</for>
<status status="PASS" starttime="20210731 10:43:01.352" endtime="20210731 10:43:01.369"/>
</branch>
<status status="PASS" starttime="20210731 10:43:01.351" endtime="20210731 10:43:01.369"/>
</if>
<status status="PASS" starttime="20210731 10:43:01.335" endtime="20210731 10:43:01.369"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": 'haka 123'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:42:59.735" endtime="20210731 10:43:01.370">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t34" name="With Each Valid Token, Updating Username Of Each System User With haka 123456789123456789 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:01.376" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:01.388" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:01.388" level="INFO">${pids} = 12350</msg>
<status status="PASS" starttime="20210731 10:43:01.372" endtime="20210731 10:43:01.388"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:01.390" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:01.389" endtime="20210731 10:43:01.390"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:01.391" level="INFO">${pids} = ['12350']</msg>
<status status="PASS" starttime="20210731 10:43:01.390" endtime="20210731 10:43:01.391"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12350</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:01.396" level="INFO">Running command 'kill 12350 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:01.391" endtime="20210731 10:43:01.396"/>
</kw>
<status status="PASS" starttime="20210731 10:43:01.391" endtime="20210731 10:43:01.396"/>
</iter>
<status status="PASS" starttime="20210731 10:43:01.391" endtime="20210731 10:43:01.397"/>
</for>
<status status="PASS" starttime="20210731 10:43:01.390" endtime="20210731 10:43:01.397"/>
</branch>
<status status="PASS" starttime="20210731 10:43:01.390" endtime="20210731 10:43:01.397"/>
</if>
<status status="PASS" starttime="20210731 10:43:01.372" endtime="20210731 10:43:01.397"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:01.399" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:01.398" endtime="20210731 10:43:01.399"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:01.399" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:01.399" endtime="20210731 10:43:01.399"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:01.400" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:01.400" endtime="20210731 10:43:01.400"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:01.400" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:01.400" endtime="20210731 10:43:01.400"/>
</kw>
<msg timestamp="20210731 10:43:01.401" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:01.399" endtime="20210731 10:43:01.401"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:01.404" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:01.401" endtime="20210731 10:43:01.407"/>
</kw>
<status status="PASS" starttime="20210731 10:43:01.397" endtime="20210731 10:43:01.407"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:43:01.409" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:43:01.409" endtime="20210731 10:43:01.414"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:43:02.916" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:43:01.415" endtime="20210731 10:43:02.916"/>
</kw>
<status status="PASS" starttime="20210731 10:43:01.408" endtime="20210731 10:43:02.916"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:02.918" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:02.917" endtime="20210731 10:43:02.918"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:02.918" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:02.918" endtime="20210731 10:43:02.918"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:02.918" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:02.918" endtime="20210731 10:43:02.918"/>
</kw>
<msg timestamp="20210731 10:43:02.919" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:02.917" endtime="20210731 10:43:02.919"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:43:02.920" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:43:02.919" endtime="20210731 10:43:02.920"/>
</kw>
<status status="PASS" starttime="20210731 10:43:02.916" endtime="20210731 10:43:02.921"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:43:02.922" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:43:02.922" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:43:02.921" endtime="20210731 10:43:02.922"/>
</kw>
<status status="PASS" starttime="20210731 10:43:02.921" endtime="20210731 10:43:02.922"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:43:02.924" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:43:02.925" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:43:02.923" endtime="20210731 10:43:02.925"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:43:02.925" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:43:02.925" endtime="20210731 10:43:02.925"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:02.927" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:02.926" endtime="20210731 10:43:02.927"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:02.927" endtime="20210731 10:43:02.928"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:02.929" endtime="20210731 10:43:02.929"/>
</kw>
<status status="PASS" starttime="20210731 10:43:02.926" endtime="20210731 10:43:02.929"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:02.930" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:02.929" endtime="20210731 10:43:02.930"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:02.930" endtime="20210731 10:43:02.932"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:02.932" endtime="20210731 10:43:02.932"/>
</kw>
<status status="PASS" starttime="20210731 10:43:02.929" endtime="20210731 10:43:02.932"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:02.933" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:02.933" endtime="20210731 10:43:02.933"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:02.935" endtime="20210731 10:43:02.937"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:02.938" endtime="20210731 10:43:02.939"/>
</kw>
<status status="PASS" starttime="20210731 10:43:02.933" endtime="20210731 10:43:02.939"/>
</iter>
<status status="PASS" starttime="20210731 10:43:02.925" endtime="20210731 10:43:02.939"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:43:02.943" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:43:02.939" endtime="20210731 10:43:02.943"/>
</kw>
<status status="PASS" starttime="20210731 10:43:02.923" endtime="20210731 10:43:02.943"/>
</kw>
<status status="PASS" starttime="20210731 10:43:01.371" endtime="20210731 10:43:02.943"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=haka 123456789123456789</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:02.945" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:43:02.944" endtime="20210731 10:43:02.945"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:02.945" level="INFO">${payload} = {'username': 'haka 123456789123456789'}</msg>
<status status="PASS" starttime="20210731 10:43:02.945" endtime="20210731 10:43:02.945"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:02.957" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:02.957" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:02.946" endtime="20210731 10:43:02.957"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:02.958" endtime="20210731 10:43:02.958"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:02.958" endtime="20210731 10:43:02.958"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:02.946" endtime="20210731 10:43:02.958"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:02.946" endtime="20210731 10:43:02.958"/>
</for>
<status status="FAIL" starttime="20210731 10:43:02.944" endtime="20210731 10:43:02.958"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:02.943" endtime="20210731 10:43:02.958"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=haka 123456789123456789</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:02.960" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:43:02.959" endtime="20210731 10:43:02.960"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:02.960" level="INFO">${payload} = {'username': 'haka 123456789123456789'}</msg>
<status status="PASS" starttime="20210731 10:43:02.960" endtime="20210731 10:43:02.960"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:02.967" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:02.967" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:02.961" endtime="20210731 10:43:02.967"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:02.967" endtime="20210731 10:43:02.968"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:02.968" endtime="20210731 10:43:02.968"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:02.960" endtime="20210731 10:43:02.968"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:02.960" endtime="20210731 10:43:02.968"/>
</for>
<status status="FAIL" starttime="20210731 10:43:02.958" endtime="20210731 10:43:02.968"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:02.958" endtime="20210731 10:43:02.968"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=haka 123456789123456789</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:02.970" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:43:02.969" endtime="20210731 10:43:02.970"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:02.970" level="INFO">${payload} = {'username': 'haka 123456789123456789'}</msg>
<status status="PASS" starttime="20210731 10:43:02.970" endtime="20210731 10:43:02.971"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:02.977" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:02.977" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:02.971" endtime="20210731 10:43:02.977"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:02.978" endtime="20210731 10:43:02.978"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:02.978" endtime="20210731 10:43:02.978"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:02.971" endtime="20210731 10:43:02.978"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:02.971" endtime="20210731 10:43:02.978"/>
</for>
<status status="FAIL" starttime="20210731 10:43:02.968" endtime="20210731 10:43:02.978"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:02.968" endtime="20210731 10:43:02.978"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:02.943" endtime="20210731 10:43:02.978"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:02.983" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:02.994" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:02.994" level="INFO">${pids} = 12373
12380
12391</msg>
<status status="PASS" starttime="20210731 10:43:02.980" endtime="20210731 10:43:02.994"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:02.995" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:02.994" endtime="20210731 10:43:02.995"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:02.996" level="INFO">${pids} = ['12373', '12380', '12391']</msg>
<status status="PASS" starttime="20210731 10:43:02.995" endtime="20210731 10:43:02.996"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12373</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:02.999" level="INFO">Running command 'kill 12373 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:02.996" endtime="20210731 10:43:03.000"/>
</kw>
<status status="PASS" starttime="20210731 10:43:02.996" endtime="20210731 10:43:03.000"/>
</iter>
<iter>
<var name="${pid}">12380</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:03.006" level="INFO">Running command 'kill 12380 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:03.001" endtime="20210731 10:43:03.007"/>
</kw>
<status status="PASS" starttime="20210731 10:43:03.000" endtime="20210731 10:43:03.007"/>
</iter>
<iter>
<var name="${pid}">12391</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:03.012" level="INFO">Running command 'kill 12391 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:03.008" endtime="20210731 10:43:03.012"/>
</kw>
<status status="PASS" starttime="20210731 10:43:03.007" endtime="20210731 10:43:03.012"/>
</iter>
<status status="PASS" starttime="20210731 10:43:02.996" endtime="20210731 10:43:03.013"/>
</for>
<status status="PASS" starttime="20210731 10:43:02.995" endtime="20210731 10:43:03.013"/>
</branch>
<status status="PASS" starttime="20210731 10:43:02.995" endtime="20210731 10:43:03.013"/>
</if>
<status status="PASS" starttime="20210731 10:43:02.979" endtime="20210731 10:43:03.013"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": 'haka 123456789123456789'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:43:01.370" endtime="20210731 10:43:03.013">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t35" name="With Each Valid Token, Updating Username Of Each System User With #¤% 23! Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:03.019" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:03.030" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:03.030" level="INFO">${pids} = 12420</msg>
<status status="PASS" starttime="20210731 10:43:03.016" endtime="20210731 10:43:03.030"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:03.031" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:03.031" endtime="20210731 10:43:03.031"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:03.032" level="INFO">${pids} = ['12420']</msg>
<status status="PASS" starttime="20210731 10:43:03.032" endtime="20210731 10:43:03.032"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12420</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:03.037" level="INFO">Running command 'kill 12420 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:03.033" endtime="20210731 10:43:03.037"/>
</kw>
<status status="PASS" starttime="20210731 10:43:03.033" endtime="20210731 10:43:03.037"/>
</iter>
<status status="PASS" starttime="20210731 10:43:03.033" endtime="20210731 10:43:03.037"/>
</for>
<status status="PASS" starttime="20210731 10:43:03.032" endtime="20210731 10:43:03.037"/>
</branch>
<status status="PASS" starttime="20210731 10:43:03.032" endtime="20210731 10:43:03.037"/>
</if>
<status status="PASS" starttime="20210731 10:43:03.015" endtime="20210731 10:43:03.038"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:03.039" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:03.039" endtime="20210731 10:43:03.039"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:03.041" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:03.040" endtime="20210731 10:43:03.041"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:03.041" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:03.041" endtime="20210731 10:43:03.041"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:03.042" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:03.042" endtime="20210731 10:43:03.042"/>
</kw>
<msg timestamp="20210731 10:43:03.043" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:03.040" endtime="20210731 10:43:03.043"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:03.046" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:03.043" endtime="20210731 10:43:03.048"/>
</kw>
<status status="PASS" starttime="20210731 10:43:03.038" endtime="20210731 10:43:03.049"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:43:03.051" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:43:03.050" endtime="20210731 10:43:03.056"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:43:04.557" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:43:03.056" endtime="20210731 10:43:04.558"/>
</kw>
<status status="PASS" starttime="20210731 10:43:03.049" endtime="20210731 10:43:04.558"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:04.559" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:04.559" endtime="20210731 10:43:04.559"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:04.560" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:04.560" endtime="20210731 10:43:04.560"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:04.560" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:04.560" endtime="20210731 10:43:04.560"/>
</kw>
<msg timestamp="20210731 10:43:04.561" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:04.559" endtime="20210731 10:43:04.561"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:43:04.561" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:43:04.561" endtime="20210731 10:43:04.562"/>
</kw>
<status status="PASS" starttime="20210731 10:43:04.558" endtime="20210731 10:43:04.562"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:43:04.563" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:43:04.563" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:43:04.563" endtime="20210731 10:43:04.563"/>
</kw>
<status status="PASS" starttime="20210731 10:43:04.562" endtime="20210731 10:43:04.563"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:43:04.564" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:43:04.565" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:43:04.564" endtime="20210731 10:43:04.565"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:43:04.565" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:43:04.565" endtime="20210731 10:43:04.565"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:04.566" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:04.566" endtime="20210731 10:43:04.566"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:04.566" endtime="20210731 10:43:04.567"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:04.567" endtime="20210731 10:43:04.568"/>
</kw>
<status status="PASS" starttime="20210731 10:43:04.565" endtime="20210731 10:43:04.568"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:04.568" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:04.568" endtime="20210731 10:43:04.568"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:04.568" endtime="20210731 10:43:04.569"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:04.570" endtime="20210731 10:43:04.570"/>
</kw>
<status status="PASS" starttime="20210731 10:43:04.568" endtime="20210731 10:43:04.570"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:04.570" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:04.570" endtime="20210731 10:43:04.570"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:04.571" endtime="20210731 10:43:04.572"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:04.572" endtime="20210731 10:43:04.572"/>
</kw>
<status status="PASS" starttime="20210731 10:43:04.570" endtime="20210731 10:43:04.572"/>
</iter>
<status status="PASS" starttime="20210731 10:43:04.565" endtime="20210731 10:43:04.572"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:43:04.573" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:43:04.572" endtime="20210731 10:43:04.573"/>
</kw>
<status status="PASS" starttime="20210731 10:43:04.563" endtime="20210731 10:43:04.573"/>
</kw>
<status status="PASS" starttime="20210731 10:43:03.015" endtime="20210731 10:43:04.573"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤% 23!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:04.575" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:43:04.575" endtime="20210731 10:43:04.575"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:04.576" level="INFO">${payload} = {'username': '#¤% 23!'}</msg>
<status status="PASS" starttime="20210731 10:43:04.576" endtime="20210731 10:43:04.576"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:04.588" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:04.589" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:04.576" endtime="20210731 10:43:04.589"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:04.589" endtime="20210731 10:43:04.589"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:04.589" endtime="20210731 10:43:04.589"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:04.576" endtime="20210731 10:43:04.589"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:04.576" endtime="20210731 10:43:04.590"/>
</for>
<status status="FAIL" starttime="20210731 10:43:04.574" endtime="20210731 10:43:04.590"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:04.574" endtime="20210731 10:43:04.590"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤% 23!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:04.591" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:43:04.591" endtime="20210731 10:43:04.592"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:04.592" level="INFO">${payload} = {'username': '#¤% 23!'}</msg>
<status status="PASS" starttime="20210731 10:43:04.592" endtime="20210731 10:43:04.592"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:04.598" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:04.598" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:04.593" endtime="20210731 10:43:04.598"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:04.598" endtime="20210731 10:43:04.598"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:04.598" endtime="20210731 10:43:04.598"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:04.592" endtime="20210731 10:43:04.598"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:04.592" endtime="20210731 10:43:04.598"/>
</for>
<status status="FAIL" starttime="20210731 10:43:04.590" endtime="20210731 10:43:04.599"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:04.590" endtime="20210731 10:43:04.599"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤% 23!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:04.600" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:43:04.600" endtime="20210731 10:43:04.600"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:04.601" level="INFO">${payload} = {'username': '#¤% 23!'}</msg>
<status status="PASS" starttime="20210731 10:43:04.600" endtime="20210731 10:43:04.601"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:04.607" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:04.607" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:04.601" endtime="20210731 10:43:04.607"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:04.608" endtime="20210731 10:43:04.608"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:04.608" endtime="20210731 10:43:04.608"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:04.601" endtime="20210731 10:43:04.608"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:04.601" endtime="20210731 10:43:04.608"/>
</for>
<status status="FAIL" starttime="20210731 10:43:04.599" endtime="20210731 10:43:04.608"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:04.599" endtime="20210731 10:43:04.608"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:04.574" endtime="20210731 10:43:04.608"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:04.613" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:04.625" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:04.625" level="INFO">${pids} = 12443
12450
12461</msg>
<status status="PASS" starttime="20210731 10:43:04.610" endtime="20210731 10:43:04.625"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:04.626" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:04.625" endtime="20210731 10:43:04.626"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:04.627" level="INFO">${pids} = ['12443', '12450', '12461']</msg>
<status status="PASS" starttime="20210731 10:43:04.626" endtime="20210731 10:43:04.627"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12443</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:04.632" level="INFO">Running command 'kill 12443 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:04.627" endtime="20210731 10:43:04.632"/>
</kw>
<status status="PASS" starttime="20210731 10:43:04.627" endtime="20210731 10:43:04.633"/>
</iter>
<iter>
<var name="${pid}">12450</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:04.637" level="INFO">Running command 'kill 12450 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:04.633" endtime="20210731 10:43:04.639"/>
</kw>
<status status="PASS" starttime="20210731 10:43:04.633" endtime="20210731 10:43:04.640"/>
</iter>
<iter>
<var name="${pid}">12461</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:04.646" level="INFO">Running command 'kill 12461 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:04.640" endtime="20210731 10:43:04.647"/>
</kw>
<status status="PASS" starttime="20210731 10:43:04.640" endtime="20210731 10:43:04.647"/>
</iter>
<status status="PASS" starttime="20210731 10:43:04.627" endtime="20210731 10:43:04.647"/>
</for>
<status status="PASS" starttime="20210731 10:43:04.626" endtime="20210731 10:43:04.647"/>
</branch>
<status status="PASS" starttime="20210731 10:43:04.626" endtime="20210731 10:43:04.647"/>
</if>
<status status="PASS" starttime="20210731 10:43:04.609" endtime="20210731 10:43:04.647"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤% 23!'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:43:03.014" endtime="20210731 10:43:04.647">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t36" name="With Each Valid Token, Updating Username Of Each System User With # %123!&amp; Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:04.656" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:04.668" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:04.668" level="INFO">${pids} = 12490</msg>
<status status="PASS" starttime="20210731 10:43:04.650" endtime="20210731 10:43:04.669"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:04.670" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:04.669" endtime="20210731 10:43:04.670"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:04.671" level="INFO">${pids} = ['12490']</msg>
<status status="PASS" starttime="20210731 10:43:04.670" endtime="20210731 10:43:04.671"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12490</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:04.675" level="INFO">Running command 'kill 12490 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:04.671" endtime="20210731 10:43:04.676"/>
</kw>
<status status="PASS" starttime="20210731 10:43:04.671" endtime="20210731 10:43:04.676"/>
</iter>
<status status="PASS" starttime="20210731 10:43:04.671" endtime="20210731 10:43:04.676"/>
</for>
<status status="PASS" starttime="20210731 10:43:04.670" endtime="20210731 10:43:04.676"/>
</branch>
<status status="PASS" starttime="20210731 10:43:04.670" endtime="20210731 10:43:04.676"/>
</if>
<status status="PASS" starttime="20210731 10:43:04.649" endtime="20210731 10:43:04.677"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:04.678" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:04.678" endtime="20210731 10:43:04.678"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:04.679" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:04.679" endtime="20210731 10:43:04.679"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:04.679" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:04.679" endtime="20210731 10:43:04.679"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:04.680" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:04.679" endtime="20210731 10:43:04.680"/>
</kw>
<msg timestamp="20210731 10:43:04.680" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:04.678" endtime="20210731 10:43:04.680"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:04.684" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:04.680" endtime="20210731 10:43:04.686"/>
</kw>
<status status="PASS" starttime="20210731 10:43:04.677" endtime="20210731 10:43:04.686"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:43:04.688" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:43:04.687" endtime="20210731 10:43:04.693"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:43:06.195" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:43:04.693" endtime="20210731 10:43:06.195"/>
</kw>
<status status="PASS" starttime="20210731 10:43:04.686" endtime="20210731 10:43:06.196"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:06.197" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:06.197" endtime="20210731 10:43:06.197"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:06.198" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:06.197" endtime="20210731 10:43:06.198"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:06.199" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:06.198" endtime="20210731 10:43:06.199"/>
</kw>
<msg timestamp="20210731 10:43:06.199" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:06.196" endtime="20210731 10:43:06.199"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:43:06.200" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:43:06.199" endtime="20210731 10:43:06.200"/>
</kw>
<status status="PASS" starttime="20210731 10:43:06.196" endtime="20210731 10:43:06.201"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:43:06.202" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:43:06.202" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:43:06.202" endtime="20210731 10:43:06.202"/>
</kw>
<status status="PASS" starttime="20210731 10:43:06.201" endtime="20210731 10:43:06.202"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:43:06.205" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:43:06.205" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:43:06.203" endtime="20210731 10:43:06.205"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:43:06.206" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:43:06.206" endtime="20210731 10:43:06.206"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:06.209" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:06.207" endtime="20210731 10:43:06.209"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:06.209" endtime="20210731 10:43:06.210"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:06.210" endtime="20210731 10:43:06.210"/>
</kw>
<status status="PASS" starttime="20210731 10:43:06.207" endtime="20210731 10:43:06.210"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:06.211" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:06.211" endtime="20210731 10:43:06.211"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:06.211" endtime="20210731 10:43:06.213"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:06.213" endtime="20210731 10:43:06.214"/>
</kw>
<status status="PASS" starttime="20210731 10:43:06.210" endtime="20210731 10:43:06.214"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:06.214" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:06.214" endtime="20210731 10:43:06.214"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:06.214" endtime="20210731 10:43:06.215"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:06.215" endtime="20210731 10:43:06.216"/>
</kw>
<status status="PASS" starttime="20210731 10:43:06.214" endtime="20210731 10:43:06.216"/>
</iter>
<status status="PASS" starttime="20210731 10:43:06.206" endtime="20210731 10:43:06.216"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:43:06.216" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:43:06.216" endtime="20210731 10:43:06.216"/>
</kw>
<status status="PASS" starttime="20210731 10:43:06.203" endtime="20210731 10:43:06.217"/>
</kw>
<status status="PASS" starttime="20210731 10:43:04.649" endtime="20210731 10:43:06.217"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=# %123!&amp;</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:06.218" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:43:06.218" endtime="20210731 10:43:06.218"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:06.219" level="INFO">${payload} = {'username': '# %123!&amp;'}</msg>
<status status="PASS" starttime="20210731 10:43:06.218" endtime="20210731 10:43:06.219"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:06.230" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:06.231" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:06.219" endtime="20210731 10:43:06.231"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:06.231" endtime="20210731 10:43:06.231"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:06.231" endtime="20210731 10:43:06.231"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:06.219" endtime="20210731 10:43:06.231"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:06.219" endtime="20210731 10:43:06.231"/>
</for>
<status status="FAIL" starttime="20210731 10:43:06.217" endtime="20210731 10:43:06.231"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:06.217" endtime="20210731 10:43:06.231"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=# %123!&amp;</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:06.233" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:43:06.232" endtime="20210731 10:43:06.233"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:06.233" level="INFO">${payload} = {'username': '# %123!&amp;'}</msg>
<status status="PASS" starttime="20210731 10:43:06.233" endtime="20210731 10:43:06.233"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:06.239" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:06.239" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:06.234" endtime="20210731 10:43:06.239"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:06.239" endtime="20210731 10:43:06.239"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:06.239" endtime="20210731 10:43:06.240"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:06.234" endtime="20210731 10:43:06.240"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:06.233" endtime="20210731 10:43:06.240"/>
</for>
<status status="FAIL" starttime="20210731 10:43:06.232" endtime="20210731 10:43:06.240"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:06.232" endtime="20210731 10:43:06.240"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=# %123!&amp;</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:06.242" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:43:06.241" endtime="20210731 10:43:06.242"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:06.243" level="INFO">${payload} = {'username': '# %123!&amp;'}</msg>
<status status="PASS" starttime="20210731 10:43:06.242" endtime="20210731 10:43:06.243"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:06.248" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:06.248" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:06.243" endtime="20210731 10:43:06.248"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:06.249" endtime="20210731 10:43:06.249"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:06.249" endtime="20210731 10:43:06.249"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:06.243" endtime="20210731 10:43:06.249"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:06.243" endtime="20210731 10:43:06.249"/>
</for>
<status status="FAIL" starttime="20210731 10:43:06.240" endtime="20210731 10:43:06.249"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:06.240" endtime="20210731 10:43:06.249"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:06.217" endtime="20210731 10:43:06.249"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:06.254" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:06.267" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:06.267" level="INFO">${pids} = 12513
12520
12524</msg>
<status status="PASS" starttime="20210731 10:43:06.251" endtime="20210731 10:43:06.267"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:06.268" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:06.267" endtime="20210731 10:43:06.268"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:06.269" level="INFO">${pids} = ['12513', '12520', '12524']</msg>
<status status="PASS" starttime="20210731 10:43:06.268" endtime="20210731 10:43:06.269"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12513</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:06.274" level="INFO">Running command 'kill 12513 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:06.269" endtime="20210731 10:43:06.275"/>
</kw>
<status status="PASS" starttime="20210731 10:43:06.269" endtime="20210731 10:43:06.275"/>
</iter>
<iter>
<var name="${pid}">12520</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:06.283" level="INFO">Running command 'kill 12520 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:06.276" endtime="20210731 10:43:06.286"/>
</kw>
<status status="PASS" starttime="20210731 10:43:06.276" endtime="20210731 10:43:06.286"/>
</iter>
<iter>
<var name="${pid}">12524</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:06.292" level="INFO">Running command 'kill 12524 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:06.287" endtime="20210731 10:43:06.293"/>
</kw>
<status status="PASS" starttime="20210731 10:43:06.287" endtime="20210731 10:43:06.293"/>
</iter>
<status status="PASS" starttime="20210731 10:43:06.269" endtime="20210731 10:43:06.293"/>
</for>
<status status="PASS" starttime="20210731 10:43:06.268" endtime="20210731 10:43:06.293"/>
</branch>
<status status="PASS" starttime="20210731 10:43:06.268" endtime="20210731 10:43:06.293"/>
</if>
<status status="PASS" starttime="20210731 10:43:06.250" endtime="20210731 10:43:06.294"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '# %123!&amp;'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:43:04.648" endtime="20210731 10:43:06.294">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t37" name="With Each Valid Token, Updating Username Of Each System User With #¤%123!&amp;7683##() ?@#¤%&amp;34567 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:06.301" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:06.311" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:06.311" level="INFO">${pids} = 12553</msg>
<status status="PASS" starttime="20210731 10:43:06.296" endtime="20210731 10:43:06.311"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:06.312" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:06.312" endtime="20210731 10:43:06.313"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:06.313" level="INFO">${pids} = ['12553']</msg>
<status status="PASS" starttime="20210731 10:43:06.313" endtime="20210731 10:43:06.313"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12553</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:06.319" level="INFO">Running command 'kill 12553 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:06.316" endtime="20210731 10:43:06.320"/>
</kw>
<status status="PASS" starttime="20210731 10:43:06.316" endtime="20210731 10:43:06.320"/>
</iter>
<status status="PASS" starttime="20210731 10:43:06.314" endtime="20210731 10:43:06.320"/>
</for>
<status status="PASS" starttime="20210731 10:43:06.313" endtime="20210731 10:43:06.320"/>
</branch>
<status status="PASS" starttime="20210731 10:43:06.313" endtime="20210731 10:43:06.320"/>
</if>
<status status="PASS" starttime="20210731 10:43:06.296" endtime="20210731 10:43:06.320"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:06.322" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:06.321" endtime="20210731 10:43:06.322"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:06.323" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:06.322" endtime="20210731 10:43:06.323"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:06.323" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:06.323" endtime="20210731 10:43:06.323"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:06.324" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:06.323" endtime="20210731 10:43:06.324"/>
</kw>
<msg timestamp="20210731 10:43:06.324" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:06.322" endtime="20210731 10:43:06.324"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:06.328" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:06.324" endtime="20210731 10:43:06.330"/>
</kw>
<status status="PASS" starttime="20210731 10:43:06.321" endtime="20210731 10:43:06.330"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:43:06.332" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:43:06.331" endtime="20210731 10:43:06.336"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:43:07.838" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:43:06.337" endtime="20210731 10:43:07.838"/>
</kw>
<status status="PASS" starttime="20210731 10:43:06.331" endtime="20210731 10:43:07.838"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:07.841" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:07.840" endtime="20210731 10:43:07.841"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:07.841" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:07.841" endtime="20210731 10:43:07.841"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:07.842" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:07.842" endtime="20210731 10:43:07.842"/>
</kw>
<msg timestamp="20210731 10:43:07.842" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:07.839" endtime="20210731 10:43:07.842"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:43:07.843" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:43:07.843" endtime="20210731 10:43:07.843"/>
</kw>
<status status="PASS" starttime="20210731 10:43:07.839" endtime="20210731 10:43:07.844"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:43:07.844" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:43:07.845" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:43:07.844" endtime="20210731 10:43:07.845"/>
</kw>
<status status="PASS" starttime="20210731 10:43:07.844" endtime="20210731 10:43:07.845"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:43:07.848" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:43:07.848" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:43:07.846" endtime="20210731 10:43:07.848"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:43:07.848" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:43:07.848" endtime="20210731 10:43:07.848"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:07.849" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:07.849" endtime="20210731 10:43:07.849"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:07.849" endtime="20210731 10:43:07.850"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:07.850" endtime="20210731 10:43:07.851"/>
</kw>
<status status="PASS" starttime="20210731 10:43:07.849" endtime="20210731 10:43:07.851"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:07.851" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:07.851" endtime="20210731 10:43:07.851"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:07.851" endtime="20210731 10:43:07.852"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:07.852" endtime="20210731 10:43:07.853"/>
</kw>
<status status="PASS" starttime="20210731 10:43:07.851" endtime="20210731 10:43:07.853"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:07.853" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:07.853" endtime="20210731 10:43:07.853"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:07.853" endtime="20210731 10:43:07.854"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:07.855" endtime="20210731 10:43:07.855"/>
</kw>
<status status="PASS" starttime="20210731 10:43:07.853" endtime="20210731 10:43:07.855"/>
</iter>
<status status="PASS" starttime="20210731 10:43:07.848" endtime="20210731 10:43:07.855"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:43:07.855" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:43:07.855" endtime="20210731 10:43:07.856"/>
</kw>
<status status="PASS" starttime="20210731 10:43:07.845" endtime="20210731 10:43:07.856"/>
</kw>
<status status="PASS" starttime="20210731 10:43:06.295" endtime="20210731 10:43:07.856"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤%123!&amp;7683##() ?@#¤%&amp;34567</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:07.858" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:43:07.857" endtime="20210731 10:43:07.858"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:07.858" level="INFO">${payload} = {'username': '#¤%123!&amp;7683##() ?@#¤%&amp;34567'}</msg>
<status status="PASS" starttime="20210731 10:43:07.858" endtime="20210731 10:43:07.858"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:07.869" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:07.870" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:07.859" endtime="20210731 10:43:07.870"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:07.870" endtime="20210731 10:43:07.870"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:07.870" endtime="20210731 10:43:07.871"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:07.858" endtime="20210731 10:43:07.871"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:07.858" endtime="20210731 10:43:07.872"/>
</for>
<status status="FAIL" starttime="20210731 10:43:07.857" endtime="20210731 10:43:07.872"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:07.856" endtime="20210731 10:43:07.872"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤%123!&amp;7683##() ?@#¤%&amp;34567</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:07.874" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:43:07.873" endtime="20210731 10:43:07.874"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:07.875" level="INFO">${payload} = {'username': '#¤%123!&amp;7683##() ?@#¤%&amp;34567'}</msg>
<status status="PASS" starttime="20210731 10:43:07.874" endtime="20210731 10:43:07.875"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:07.880" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:07.880" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:07.875" endtime="20210731 10:43:07.880"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:07.881" endtime="20210731 10:43:07.881"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:07.881" endtime="20210731 10:43:07.881"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:07.875" endtime="20210731 10:43:07.881"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:07.875" endtime="20210731 10:43:07.881"/>
</for>
<status status="FAIL" starttime="20210731 10:43:07.872" endtime="20210731 10:43:07.881"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:07.872" endtime="20210731 10:43:07.881"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤%123!&amp;7683##() ?@#¤%&amp;34567</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:07.883" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:43:07.883" endtime="20210731 10:43:07.883"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:07.884" level="INFO">${payload} = {'username': '#¤%123!&amp;7683##() ?@#¤%&amp;34567'}</msg>
<status status="PASS" starttime="20210731 10:43:07.884" endtime="20210731 10:43:07.884"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:07.890" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:07.890" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:07.884" endtime="20210731 10:43:07.890"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:07.890" endtime="20210731 10:43:07.890"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:07.890" endtime="20210731 10:43:07.890"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:07.884" endtime="20210731 10:43:07.890"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:07.884" endtime="20210731 10:43:07.890"/>
</for>
<status status="FAIL" starttime="20210731 10:43:07.882" endtime="20210731 10:43:07.891"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:07.881" endtime="20210731 10:43:07.891"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:07.856" endtime="20210731 10:43:07.891"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:07.896" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:07.907" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:07.907" level="INFO">${pids} = 12576
12583
12594</msg>
<status status="PASS" starttime="20210731 10:43:07.892" endtime="20210731 10:43:07.907"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:07.909" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:07.908" endtime="20210731 10:43:07.909"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:07.910" level="INFO">${pids} = ['12576', '12583', '12594']</msg>
<status status="PASS" starttime="20210731 10:43:07.909" endtime="20210731 10:43:07.910"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12576</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:07.914" level="INFO">Running command 'kill 12576 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:07.910" endtime="20210731 10:43:07.915"/>
</kw>
<status status="PASS" starttime="20210731 10:43:07.910" endtime="20210731 10:43:07.915"/>
</iter>
<iter>
<var name="${pid}">12583</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:07.920" level="INFO">Running command 'kill 12583 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:07.916" endtime="20210731 10:43:07.921"/>
</kw>
<status status="PASS" starttime="20210731 10:43:07.915" endtime="20210731 10:43:07.921"/>
</iter>
<iter>
<var name="${pid}">12594</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:07.925" level="INFO">Running command 'kill 12594 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:07.922" endtime="20210731 10:43:07.926"/>
</kw>
<status status="PASS" starttime="20210731 10:43:07.921" endtime="20210731 10:43:07.926"/>
</iter>
<status status="PASS" starttime="20210731 10:43:07.910" endtime="20210731 10:43:07.926"/>
</for>
<status status="PASS" starttime="20210731 10:43:07.909" endtime="20210731 10:43:07.926"/>
</branch>
<status status="PASS" starttime="20210731 10:43:07.909" endtime="20210731 10:43:07.926"/>
</if>
<status status="PASS" starttime="20210731 10:43:07.891" endtime="20210731 10:43:07.927"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤%123!&amp;7683##() ?@#¤%&amp;34567'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:43:06.294" endtime="20210731 10:43:07.929">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t38" name="With Each Valid Token, Updating Username Of Each System User With #¤12 ab Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:07.940" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:07.952" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:07.952" level="INFO">${pids} = 12623</msg>
<status status="PASS" starttime="20210731 10:43:07.933" endtime="20210731 10:43:07.952"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:07.953" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:07.952" endtime="20210731 10:43:07.953"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:07.954" level="INFO">${pids} = ['12623']</msg>
<status status="PASS" starttime="20210731 10:43:07.954" endtime="20210731 10:43:07.954"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12623</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:07.958" level="INFO">Running command 'kill 12623 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:07.955" endtime="20210731 10:43:07.959"/>
</kw>
<status status="PASS" starttime="20210731 10:43:07.955" endtime="20210731 10:43:07.959"/>
</iter>
<status status="PASS" starttime="20210731 10:43:07.954" endtime="20210731 10:43:07.959"/>
</for>
<status status="PASS" starttime="20210731 10:43:07.954" endtime="20210731 10:43:07.959"/>
</branch>
<status status="PASS" starttime="20210731 10:43:07.953" endtime="20210731 10:43:07.959"/>
</if>
<status status="PASS" starttime="20210731 10:43:07.932" endtime="20210731 10:43:07.959"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:07.961" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:07.960" endtime="20210731 10:43:07.961"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:07.962" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:07.961" endtime="20210731 10:43:07.962"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:07.962" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:07.962" endtime="20210731 10:43:07.962"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:07.963" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:07.962" endtime="20210731 10:43:07.963"/>
</kw>
<msg timestamp="20210731 10:43:07.963" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:07.961" endtime="20210731 10:43:07.963"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:07.966" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:07.963" endtime="20210731 10:43:07.968"/>
</kw>
<status status="PASS" starttime="20210731 10:43:07.960" endtime="20210731 10:43:07.969"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:43:07.972" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:43:07.970" endtime="20210731 10:43:07.978"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:43:09.487" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:43:07.979" endtime="20210731 10:43:09.487"/>
</kw>
<status status="PASS" starttime="20210731 10:43:07.969" endtime="20210731 10:43:09.487"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:09.488" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:09.488" endtime="20210731 10:43:09.489"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:09.489" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:09.489" endtime="20210731 10:43:09.489"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:09.490" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:09.489" endtime="20210731 10:43:09.490"/>
</kw>
<msg timestamp="20210731 10:43:09.490" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:09.488" endtime="20210731 10:43:09.490"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:43:09.490" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:43:09.490" endtime="20210731 10:43:09.491"/>
</kw>
<status status="PASS" starttime="20210731 10:43:09.488" endtime="20210731 10:43:09.491"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:43:09.491" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:43:09.492" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:43:09.491" endtime="20210731 10:43:09.492"/>
</kw>
<status status="PASS" starttime="20210731 10:43:09.491" endtime="20210731 10:43:09.492"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:43:09.493" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:43:09.493" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:43:09.492" endtime="20210731 10:43:09.493"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:43:09.493" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:43:09.493" endtime="20210731 10:43:09.493"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:09.494" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:09.494" endtime="20210731 10:43:09.494"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:09.494" endtime="20210731 10:43:09.495"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:09.495" endtime="20210731 10:43:09.495"/>
</kw>
<status status="PASS" starttime="20210731 10:43:09.493" endtime="20210731 10:43:09.495"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:09.495" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:09.495" endtime="20210731 10:43:09.495"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:09.495" endtime="20210731 10:43:09.496"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:09.496" endtime="20210731 10:43:09.496"/>
</kw>
<status status="PASS" starttime="20210731 10:43:09.495" endtime="20210731 10:43:09.496"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:09.497" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:09.497" endtime="20210731 10:43:09.497"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:09.497" endtime="20210731 10:43:09.498"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:09.498" endtime="20210731 10:43:09.498"/>
</kw>
<status status="PASS" starttime="20210731 10:43:09.496" endtime="20210731 10:43:09.499"/>
</iter>
<status status="PASS" starttime="20210731 10:43:09.493" endtime="20210731 10:43:09.499"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:43:09.499" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:43:09.499" endtime="20210731 10:43:09.499"/>
</kw>
<status status="PASS" starttime="20210731 10:43:09.492" endtime="20210731 10:43:09.499"/>
</kw>
<status status="PASS" starttime="20210731 10:43:07.932" endtime="20210731 10:43:09.499"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤12 ab</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:09.500" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:43:09.500" endtime="20210731 10:43:09.501"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:09.501" level="INFO">${payload} = {'username': '#¤12 ab'}</msg>
<status status="PASS" starttime="20210731 10:43:09.501" endtime="20210731 10:43:09.501"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:09.512" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:09.512" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:09.501" endtime="20210731 10:43:09.512"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:09.512" endtime="20210731 10:43:09.513"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:09.513" endtime="20210731 10:43:09.513"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:09.501" endtime="20210731 10:43:09.513"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:09.501" endtime="20210731 10:43:09.513"/>
</for>
<status status="FAIL" starttime="20210731 10:43:09.500" endtime="20210731 10:43:09.513"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:09.500" endtime="20210731 10:43:09.513"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤12 ab</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:09.514" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:43:09.514" endtime="20210731 10:43:09.514"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:09.514" level="INFO">${payload} = {'username': '#¤12 ab'}</msg>
<status status="PASS" starttime="20210731 10:43:09.514" endtime="20210731 10:43:09.514"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:09.519" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:09.519" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:09.515" endtime="20210731 10:43:09.519"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:09.520" endtime="20210731 10:43:09.520"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:09.520" endtime="20210731 10:43:09.520"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:09.515" endtime="20210731 10:43:09.520"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:09.515" endtime="20210731 10:43:09.520"/>
</for>
<status status="FAIL" starttime="20210731 10:43:09.513" endtime="20210731 10:43:09.520"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:09.513" endtime="20210731 10:43:09.520"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤12 ab</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:09.521" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:43:09.521" endtime="20210731 10:43:09.521"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:09.522" level="INFO">${payload} = {'username': '#¤12 ab'}</msg>
<status status="PASS" starttime="20210731 10:43:09.522" endtime="20210731 10:43:09.522"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:09.527" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:09.527" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:09.523" endtime="20210731 10:43:09.527"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:09.528" endtime="20210731 10:43:09.528"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:09.528" endtime="20210731 10:43:09.528"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:09.523" endtime="20210731 10:43:09.528"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:09.522" endtime="20210731 10:43:09.528"/>
</for>
<status status="FAIL" starttime="20210731 10:43:09.520" endtime="20210731 10:43:09.528"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:09.520" endtime="20210731 10:43:09.528"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:09.499" endtime="20210731 10:43:09.528"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:09.533" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:09.542" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:09.542" level="INFO">${pids} = 12646
12653
12657</msg>
<status status="PASS" starttime="20210731 10:43:09.530" endtime="20210731 10:43:09.542"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:09.543" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:09.543" endtime="20210731 10:43:09.543"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:09.544" level="INFO">${pids} = ['12646', '12653', '12657']</msg>
<status status="PASS" starttime="20210731 10:43:09.544" endtime="20210731 10:43:09.544"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12646</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:09.547" level="INFO">Running command 'kill 12646 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:09.544" endtime="20210731 10:43:09.548"/>
</kw>
<status status="PASS" starttime="20210731 10:43:09.544" endtime="20210731 10:43:09.548"/>
</iter>
<iter>
<var name="${pid}">12653</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:09.551" level="INFO">Running command 'kill 12653 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:09.548" endtime="20210731 10:43:09.551"/>
</kw>
<status status="PASS" starttime="20210731 10:43:09.548" endtime="20210731 10:43:09.551"/>
</iter>
<iter>
<var name="${pid}">12657</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:09.556" level="INFO">Running command 'kill 12657 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:09.551" endtime="20210731 10:43:09.556"/>
</kw>
<status status="PASS" starttime="20210731 10:43:09.551" endtime="20210731 10:43:09.556"/>
</iter>
<status status="PASS" starttime="20210731 10:43:09.544" endtime="20210731 10:43:09.556"/>
</for>
<status status="PASS" starttime="20210731 10:43:09.543" endtime="20210731 10:43:09.556"/>
</branch>
<status status="PASS" starttime="20210731 10:43:09.543" endtime="20210731 10:43:09.556"/>
</if>
<status status="PASS" starttime="20210731 10:43:09.528" endtime="20210731 10:43:09.557"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤12 ab'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:43:07.930" endtime="20210731 10:43:09.557">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t39" name="With Each Valid Token, Updating Username Of Each System User With # 123abc Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:09.562" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:09.571" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:09.571" level="INFO">${pids} = 12686</msg>
<status status="PASS" starttime="20210731 10:43:09.559" endtime="20210731 10:43:09.571"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:09.572" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:09.571" endtime="20210731 10:43:09.572"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:09.573" level="INFO">${pids} = ['12686']</msg>
<status status="PASS" starttime="20210731 10:43:09.572" endtime="20210731 10:43:09.573"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12686</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:09.577" level="INFO">Running command 'kill 12686 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:09.574" endtime="20210731 10:43:09.578"/>
</kw>
<status status="PASS" starttime="20210731 10:43:09.574" endtime="20210731 10:43:09.578"/>
</iter>
<status status="PASS" starttime="20210731 10:43:09.573" endtime="20210731 10:43:09.578"/>
</for>
<status status="PASS" starttime="20210731 10:43:09.572" endtime="20210731 10:43:09.578"/>
</branch>
<status status="PASS" starttime="20210731 10:43:09.572" endtime="20210731 10:43:09.578"/>
</if>
<status status="PASS" starttime="20210731 10:43:09.559" endtime="20210731 10:43:09.578"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:09.579" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:09.579" endtime="20210731 10:43:09.579"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:09.580" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:09.580" endtime="20210731 10:43:09.580"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:09.580" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:09.580" endtime="20210731 10:43:09.580"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:09.581" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:09.580" endtime="20210731 10:43:09.581"/>
</kw>
<msg timestamp="20210731 10:43:09.581" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:09.579" endtime="20210731 10:43:09.581"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:09.584" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:09.581" endtime="20210731 10:43:09.585"/>
</kw>
<status status="PASS" starttime="20210731 10:43:09.578" endtime="20210731 10:43:09.586"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:43:09.587" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:43:09.587" endtime="20210731 10:43:09.596"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:43:11.098" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:43:09.596" endtime="20210731 10:43:11.098"/>
</kw>
<status status="PASS" starttime="20210731 10:43:09.586" endtime="20210731 10:43:11.099"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:11.100" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:11.100" endtime="20210731 10:43:11.100"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:11.100" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:11.100" endtime="20210731 10:43:11.100"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:11.101" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:11.100" endtime="20210731 10:43:11.101"/>
</kw>
<msg timestamp="20210731 10:43:11.101" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:11.099" endtime="20210731 10:43:11.101"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:43:11.101" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:43:11.101" endtime="20210731 10:43:11.102"/>
</kw>
<status status="PASS" starttime="20210731 10:43:11.099" endtime="20210731 10:43:11.102"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:43:11.103" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:43:11.103" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:43:11.103" endtime="20210731 10:43:11.103"/>
</kw>
<status status="PASS" starttime="20210731 10:43:11.102" endtime="20210731 10:43:11.103"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:43:11.105" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:43:11.105" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:43:11.105" endtime="20210731 10:43:11.106"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:43:11.106" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:43:11.106" endtime="20210731 10:43:11.106"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:11.107" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:11.107" endtime="20210731 10:43:11.107"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:11.107" endtime="20210731 10:43:11.108"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:11.108" endtime="20210731 10:43:11.109"/>
</kw>
<status status="PASS" starttime="20210731 10:43:11.106" endtime="20210731 10:43:11.109"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:11.110" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:11.109" endtime="20210731 10:43:11.110"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:11.110" endtime="20210731 10:43:11.111"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:11.111" endtime="20210731 10:43:11.111"/>
</kw>
<status status="PASS" starttime="20210731 10:43:11.109" endtime="20210731 10:43:11.111"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:11.112" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:11.111" endtime="20210731 10:43:11.112"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:11.112" endtime="20210731 10:43:11.113"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:11.113" endtime="20210731 10:43:11.113"/>
</kw>
<status status="PASS" starttime="20210731 10:43:11.111" endtime="20210731 10:43:11.113"/>
</iter>
<status status="PASS" starttime="20210731 10:43:11.106" endtime="20210731 10:43:11.113"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:43:11.114" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:43:11.113" endtime="20210731 10:43:11.114"/>
</kw>
<status status="PASS" starttime="20210731 10:43:11.104" endtime="20210731 10:43:11.114"/>
</kw>
<status status="PASS" starttime="20210731 10:43:09.558" endtime="20210731 10:43:11.114"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=# 123abc</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:11.115" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:43:11.115" endtime="20210731 10:43:11.115"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:11.116" level="INFO">${payload} = {'username': '# 123abc'}</msg>
<status status="PASS" starttime="20210731 10:43:11.116" endtime="20210731 10:43:11.116"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:11.126" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:11.127" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:11.116" endtime="20210731 10:43:11.127"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:11.128" endtime="20210731 10:43:11.128"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:11.128" endtime="20210731 10:43:11.128"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:11.116" endtime="20210731 10:43:11.128"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:11.116" endtime="20210731 10:43:11.128"/>
</for>
<status status="FAIL" starttime="20210731 10:43:11.115" endtime="20210731 10:43:11.129"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:11.114" endtime="20210731 10:43:11.129"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=# 123abc</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:11.130" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:43:11.129" endtime="20210731 10:43:11.130"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:11.130" level="INFO">${payload} = {'username': '# 123abc'}</msg>
<status status="PASS" starttime="20210731 10:43:11.130" endtime="20210731 10:43:11.130"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:11.135" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:11.135" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:11.131" endtime="20210731 10:43:11.135"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:11.135" endtime="20210731 10:43:11.135"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:11.135" endtime="20210731 10:43:11.135"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:11.131" endtime="20210731 10:43:11.135"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:11.130" endtime="20210731 10:43:11.135"/>
</for>
<status status="FAIL" starttime="20210731 10:43:11.129" endtime="20210731 10:43:11.136"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:11.129" endtime="20210731 10:43:11.136"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=# 123abc</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:11.137" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:43:11.137" endtime="20210731 10:43:11.137"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:11.138" level="INFO">${payload} = {'username': '# 123abc'}</msg>
<status status="PASS" starttime="20210731 10:43:11.137" endtime="20210731 10:43:11.138"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:11.144" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:11.144" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:11.138" endtime="20210731 10:43:11.144"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:11.144" endtime="20210731 10:43:11.144"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:11.144" endtime="20210731 10:43:11.144"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:11.138" endtime="20210731 10:43:11.144"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:11.138" endtime="20210731 10:43:11.145"/>
</for>
<status status="FAIL" starttime="20210731 10:43:11.136" endtime="20210731 10:43:11.145"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:11.136" endtime="20210731 10:43:11.145"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:11.114" endtime="20210731 10:43:11.145"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:11.149" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:11.158" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:11.158" level="INFO">${pids} = 12709
12716
12721</msg>
<status status="PASS" starttime="20210731 10:43:11.146" endtime="20210731 10:43:11.158"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:11.159" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:11.158" endtime="20210731 10:43:11.159"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:11.160" level="INFO">${pids} = ['12709', '12716', '12721']</msg>
<status status="PASS" starttime="20210731 10:43:11.159" endtime="20210731 10:43:11.160"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12709</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:11.164" level="INFO">Running command 'kill 12709 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:11.160" endtime="20210731 10:43:11.165"/>
</kw>
<status status="PASS" starttime="20210731 10:43:11.160" endtime="20210731 10:43:11.165"/>
</iter>
<iter>
<var name="${pid}">12716</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:11.169" level="INFO">Running command 'kill 12716 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:11.166" endtime="20210731 10:43:11.171"/>
</kw>
<status status="PASS" starttime="20210731 10:43:11.165" endtime="20210731 10:43:11.171"/>
</iter>
<iter>
<var name="${pid}">12721</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:11.176" level="INFO">Running command 'kill 12721 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:11.171" endtime="20210731 10:43:11.176"/>
</kw>
<status status="PASS" starttime="20210731 10:43:11.171" endtime="20210731 10:43:11.176"/>
</iter>
<status status="PASS" starttime="20210731 10:43:11.160" endtime="20210731 10:43:11.176"/>
</for>
<status status="PASS" starttime="20210731 10:43:11.159" endtime="20210731 10:43:11.176"/>
</branch>
<status status="PASS" starttime="20210731 10:43:11.159" endtime="20210731 10:43:11.176"/>
</if>
<status status="PASS" starttime="20210731 10:43:11.145" endtime="20210731 10:43:11.177"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '# 123abc'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:43:09.557" endtime="20210731 10:43:11.177">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t40" name="With Each Valid Token, Updating Username Of Each System User With #¤/&amp;  !123abc456hjk Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:11.182" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:11.191" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:11.191" level="INFO">${pids} = 12750</msg>
<status status="PASS" starttime="20210731 10:43:11.179" endtime="20210731 10:43:11.191"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:11.192" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:11.192" endtime="20210731 10:43:11.192"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:11.193" level="INFO">${pids} = ['12750']</msg>
<status status="PASS" starttime="20210731 10:43:11.193" endtime="20210731 10:43:11.193"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12750</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:11.197" level="INFO">Running command 'kill 12750 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:11.194" endtime="20210731 10:43:11.197"/>
</kw>
<status status="PASS" starttime="20210731 10:43:11.193" endtime="20210731 10:43:11.197"/>
</iter>
<status status="PASS" starttime="20210731 10:43:11.193" endtime="20210731 10:43:11.197"/>
</for>
<status status="PASS" starttime="20210731 10:43:11.193" endtime="20210731 10:43:11.197"/>
</branch>
<status status="PASS" starttime="20210731 10:43:11.193" endtime="20210731 10:43:11.197"/>
</if>
<status status="PASS" starttime="20210731 10:43:11.179" endtime="20210731 10:43:11.197"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:11.198" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:11.198" endtime="20210731 10:43:11.198"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:11.199" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:11.199" endtime="20210731 10:43:11.199"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:11.199" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:11.199" endtime="20210731 10:43:11.199"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:11.200" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:11.200" endtime="20210731 10:43:11.200"/>
</kw>
<msg timestamp="20210731 10:43:11.200" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:11.199" endtime="20210731 10:43:11.200"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:11.204" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:11.200" endtime="20210731 10:43:11.206"/>
</kw>
<status status="PASS" starttime="20210731 10:43:11.198" endtime="20210731 10:43:11.206"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:43:11.209" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:43:11.208" endtime="20210731 10:43:11.219"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:43:12.720" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:43:11.219" endtime="20210731 10:43:12.721"/>
</kw>
<status status="PASS" starttime="20210731 10:43:11.207" endtime="20210731 10:43:12.722"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:12.726" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:12.725" endtime="20210731 10:43:12.726"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:12.726" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:12.726" endtime="20210731 10:43:12.726"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:12.726" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:12.726" endtime="20210731 10:43:12.726"/>
</kw>
<msg timestamp="20210731 10:43:12.727" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:12.724" endtime="20210731 10:43:12.727"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:43:12.727" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:43:12.727" endtime="20210731 10:43:12.727"/>
</kw>
<status status="PASS" starttime="20210731 10:43:12.723" endtime="20210731 10:43:12.728"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:43:12.728" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:43:12.728" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:43:12.728" endtime="20210731 10:43:12.728"/>
</kw>
<status status="PASS" starttime="20210731 10:43:12.728" endtime="20210731 10:43:12.728"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:43:12.729" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:43:12.729" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:43:12.729" endtime="20210731 10:43:12.729"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:43:12.729" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:43:12.729" endtime="20210731 10:43:12.729"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:12.730" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:12.730" endtime="20210731 10:43:12.730"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:12.730" endtime="20210731 10:43:12.731"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:12.731" endtime="20210731 10:43:12.731"/>
</kw>
<status status="PASS" starttime="20210731 10:43:12.730" endtime="20210731 10:43:12.731"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:12.731" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:12.731" endtime="20210731 10:43:12.731"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:12.732" endtime="20210731 10:43:12.732"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:12.733" endtime="20210731 10:43:12.733"/>
</kw>
<status status="PASS" starttime="20210731 10:43:12.731" endtime="20210731 10:43:12.733"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:12.734" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:12.734" endtime="20210731 10:43:12.734"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:12.735" endtime="20210731 10:43:12.735"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:12.735" endtime="20210731 10:43:12.736"/>
</kw>
<status status="PASS" starttime="20210731 10:43:12.733" endtime="20210731 10:43:12.736"/>
</iter>
<status status="PASS" starttime="20210731 10:43:12.730" endtime="20210731 10:43:12.736"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:43:12.736" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:43:12.736" endtime="20210731 10:43:12.736"/>
</kw>
<status status="PASS" starttime="20210731 10:43:12.728" endtime="20210731 10:43:12.736"/>
</kw>
<status status="PASS" starttime="20210731 10:43:11.178" endtime="20210731 10:43:12.736"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/&amp;\ \ !123abc456hjk</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:12.737" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:43:12.737" endtime="20210731 10:43:12.737"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:12.738" level="INFO">${payload} = {'username': '#¤/&amp;  !123abc456hjk'}</msg>
<status status="PASS" starttime="20210731 10:43:12.738" endtime="20210731 10:43:12.738"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:12.747" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:12.748" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:12.738" endtime="20210731 10:43:12.748"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:12.748" endtime="20210731 10:43:12.748"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:12.748" endtime="20210731 10:43:12.748"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:12.738" endtime="20210731 10:43:12.748"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:12.738" endtime="20210731 10:43:12.748"/>
</for>
<status status="FAIL" starttime="20210731 10:43:12.737" endtime="20210731 10:43:12.748"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:12.737" endtime="20210731 10:43:12.748"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/&amp;\ \ !123abc456hjk</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:12.749" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:43:12.749" endtime="20210731 10:43:12.749"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:12.750" level="INFO">${payload} = {'username': '#¤/&amp;  !123abc456hjk'}</msg>
<status status="PASS" starttime="20210731 10:43:12.749" endtime="20210731 10:43:12.750"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:12.754" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:12.754" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:12.750" endtime="20210731 10:43:12.755"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:12.755" endtime="20210731 10:43:12.755"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:12.755" endtime="20210731 10:43:12.755"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:12.750" endtime="20210731 10:43:12.755"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:12.750" endtime="20210731 10:43:12.755"/>
</for>
<status status="FAIL" starttime="20210731 10:43:12.748" endtime="20210731 10:43:12.755"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:12.748" endtime="20210731 10:43:12.755"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/&amp;\ \ !123abc456hjk</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:12.757" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:43:12.757" endtime="20210731 10:43:12.757"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:12.758" level="INFO">${payload} = {'username': '#¤/&amp;  !123abc456hjk'}</msg>
<status status="PASS" starttime="20210731 10:43:12.757" endtime="20210731 10:43:12.758"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:12.763" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:12.763" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:12.758" endtime="20210731 10:43:12.763"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:12.763" endtime="20210731 10:43:12.763"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:12.763" endtime="20210731 10:43:12.763"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:12.758" endtime="20210731 10:43:12.763"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:12.758" endtime="20210731 10:43:12.763"/>
</for>
<status status="FAIL" starttime="20210731 10:43:12.755" endtime="20210731 10:43:12.764"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:12.755" endtime="20210731 10:43:12.764"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:12.736" endtime="20210731 10:43:12.764"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:12.767" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:12.777" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:12.777" level="INFO">${pids} = 12773
12780
12791</msg>
<status status="PASS" starttime="20210731 10:43:12.765" endtime="20210731 10:43:12.777"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:12.778" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:12.777" endtime="20210731 10:43:12.778"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:12.778" level="INFO">${pids} = ['12773', '12780', '12791']</msg>
<status status="PASS" starttime="20210731 10:43:12.778" endtime="20210731 10:43:12.778"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12773</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:12.782" level="INFO">Running command 'kill 12773 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:12.779" endtime="20210731 10:43:12.782"/>
</kw>
<status status="PASS" starttime="20210731 10:43:12.779" endtime="20210731 10:43:12.782"/>
</iter>
<iter>
<var name="${pid}">12780</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:12.785" level="INFO">Running command 'kill 12780 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:12.782" endtime="20210731 10:43:12.787"/>
</kw>
<status status="PASS" starttime="20210731 10:43:12.782" endtime="20210731 10:43:12.787"/>
</iter>
<iter>
<var name="${pid}">12791</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:12.790" level="INFO">Running command 'kill 12791 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:12.787" endtime="20210731 10:43:12.791"/>
</kw>
<status status="PASS" starttime="20210731 10:43:12.787" endtime="20210731 10:43:12.791"/>
</iter>
<status status="PASS" starttime="20210731 10:43:12.779" endtime="20210731 10:43:12.791"/>
</for>
<status status="PASS" starttime="20210731 10:43:12.778" endtime="20210731 10:43:12.791"/>
</branch>
<status status="PASS" starttime="20210731 10:43:12.778" endtime="20210731 10:43:12.791"/>
</if>
<status status="PASS" starttime="20210731 10:43:12.764" endtime="20210731 10:43:12.791"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤/&amp; !123abc456hjk'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:43:11.178" endtime="20210731 10:43:12.791">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t41" name="With Each Valid Token, Updating Username Of Each System User With #¤ abc! Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:12.800" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:12.810" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:12.810" level="INFO">${pids} = 12820</msg>
<status status="PASS" starttime="20210731 10:43:12.793" endtime="20210731 10:43:12.810"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:12.811" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:12.810" endtime="20210731 10:43:12.811"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:12.812" level="INFO">${pids} = ['12820']</msg>
<status status="PASS" starttime="20210731 10:43:12.811" endtime="20210731 10:43:12.812"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12820</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:12.815" level="INFO">Running command 'kill 12820 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:12.812" endtime="20210731 10:43:12.815"/>
</kw>
<status status="PASS" starttime="20210731 10:43:12.812" endtime="20210731 10:43:12.816"/>
</iter>
<status status="PASS" starttime="20210731 10:43:12.812" endtime="20210731 10:43:12.816"/>
</for>
<status status="PASS" starttime="20210731 10:43:12.811" endtime="20210731 10:43:12.816"/>
</branch>
<status status="PASS" starttime="20210731 10:43:12.811" endtime="20210731 10:43:12.816"/>
</if>
<status status="PASS" starttime="20210731 10:43:12.793" endtime="20210731 10:43:12.816"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:12.817" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:12.817" endtime="20210731 10:43:12.817"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:12.818" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:12.817" endtime="20210731 10:43:12.818"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:12.818" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:12.818" endtime="20210731 10:43:12.818"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:12.818" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:12.818" endtime="20210731 10:43:12.818"/>
</kw>
<msg timestamp="20210731 10:43:12.819" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:12.817" endtime="20210731 10:43:12.819"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:12.821" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:12.819" endtime="20210731 10:43:12.823"/>
</kw>
<status status="PASS" starttime="20210731 10:43:12.816" endtime="20210731 10:43:12.824"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:43:12.825" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:43:12.825" endtime="20210731 10:43:12.829"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:43:14.343" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:43:12.829" endtime="20210731 10:43:14.343"/>
</kw>
<status status="PASS" starttime="20210731 10:43:12.824" endtime="20210731 10:43:14.343"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:14.344" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:14.344" endtime="20210731 10:43:14.345"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:14.345" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:14.345" endtime="20210731 10:43:14.345"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:14.345" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:14.345" endtime="20210731 10:43:14.345"/>
</kw>
<msg timestamp="20210731 10:43:14.345" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:14.344" endtime="20210731 10:43:14.345"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:43:14.346" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:43:14.346" endtime="20210731 10:43:14.346"/>
</kw>
<status status="PASS" starttime="20210731 10:43:14.344" endtime="20210731 10:43:14.347"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:43:14.347" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:43:14.347" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:43:14.347" endtime="20210731 10:43:14.348"/>
</kw>
<status status="PASS" starttime="20210731 10:43:14.347" endtime="20210731 10:43:14.348"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:43:14.349" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:43:14.349" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:43:14.349" endtime="20210731 10:43:14.349"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:43:14.350" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:43:14.349" endtime="20210731 10:43:14.350"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:14.350" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:14.350" endtime="20210731 10:43:14.350"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:14.350" endtime="20210731 10:43:14.351"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:14.351" endtime="20210731 10:43:14.351"/>
</kw>
<status status="PASS" starttime="20210731 10:43:14.350" endtime="20210731 10:43:14.351"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:14.352" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:14.351" endtime="20210731 10:43:14.352"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:14.352" endtime="20210731 10:43:14.352"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:14.352" endtime="20210731 10:43:14.353"/>
</kw>
<status status="PASS" starttime="20210731 10:43:14.351" endtime="20210731 10:43:14.353"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:14.353" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:14.353" endtime="20210731 10:43:14.353"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:14.353" endtime="20210731 10:43:14.354"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:14.354" endtime="20210731 10:43:14.354"/>
</kw>
<status status="PASS" starttime="20210731 10:43:14.353" endtime="20210731 10:43:14.354"/>
</iter>
<status status="PASS" starttime="20210731 10:43:14.350" endtime="20210731 10:43:14.354"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:43:14.355" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:43:14.354" endtime="20210731 10:43:14.355"/>
</kw>
<status status="PASS" starttime="20210731 10:43:14.348" endtime="20210731 10:43:14.355"/>
</kw>
<status status="PASS" starttime="20210731 10:43:12.792" endtime="20210731 10:43:14.355"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤ abc!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:14.356" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:43:14.356" endtime="20210731 10:43:14.356"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:14.357" level="INFO">${payload} = {'username': '#¤ abc!'}</msg>
<status status="PASS" starttime="20210731 10:43:14.356" endtime="20210731 10:43:14.357"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:14.367" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:14.367" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:14.357" endtime="20210731 10:43:14.367"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:14.367" endtime="20210731 10:43:14.367"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:14.368" endtime="20210731 10:43:14.368"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:14.357" endtime="20210731 10:43:14.368"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:14.357" endtime="20210731 10:43:14.368"/>
</for>
<status status="FAIL" starttime="20210731 10:43:14.355" endtime="20210731 10:43:14.368"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:14.355" endtime="20210731 10:43:14.368"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤ abc!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:14.369" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:43:14.369" endtime="20210731 10:43:14.369"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:14.369" level="INFO">${payload} = {'username': '#¤ abc!'}</msg>
<status status="PASS" starttime="20210731 10:43:14.369" endtime="20210731 10:43:14.369"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:14.375" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:14.375" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:14.370" endtime="20210731 10:43:14.375"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:14.375" endtime="20210731 10:43:14.375"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:14.375" endtime="20210731 10:43:14.375"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:14.370" endtime="20210731 10:43:14.375"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:14.369" endtime="20210731 10:43:14.376"/>
</for>
<status status="FAIL" starttime="20210731 10:43:14.368" endtime="20210731 10:43:14.376"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:14.368" endtime="20210731 10:43:14.376"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤ abc!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:14.377" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:43:14.377" endtime="20210731 10:43:14.377"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:14.378" level="INFO">${payload} = {'username': '#¤ abc!'}</msg>
<status status="PASS" starttime="20210731 10:43:14.377" endtime="20210731 10:43:14.378"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:14.382" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:14.383" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:14.378" endtime="20210731 10:43:14.383"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:14.383" endtime="20210731 10:43:14.383"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:14.383" endtime="20210731 10:43:14.383"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:14.378" endtime="20210731 10:43:14.383"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:14.378" endtime="20210731 10:43:14.383"/>
</for>
<status status="FAIL" starttime="20210731 10:43:14.376" endtime="20210731 10:43:14.383"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:14.376" endtime="20210731 10:43:14.383"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:14.355" endtime="20210731 10:43:14.383"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:14.387" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:14.396" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:14.396" level="INFO">${pids} = 12843
12850
12854</msg>
<status status="PASS" starttime="20210731 10:43:14.384" endtime="20210731 10:43:14.396"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:14.397" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:14.396" endtime="20210731 10:43:14.397"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:14.398" level="INFO">${pids} = ['12843', '12850', '12854']</msg>
<status status="PASS" starttime="20210731 10:43:14.397" endtime="20210731 10:43:14.398"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12843</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:14.401" level="INFO">Running command 'kill 12843 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:14.398" endtime="20210731 10:43:14.401"/>
</kw>
<status status="PASS" starttime="20210731 10:43:14.398" endtime="20210731 10:43:14.401"/>
</iter>
<iter>
<var name="${pid}">12850</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:14.405" level="INFO">Running command 'kill 12850 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:14.402" endtime="20210731 10:43:14.409"/>
</kw>
<status status="PASS" starttime="20210731 10:43:14.402" endtime="20210731 10:43:14.409"/>
</iter>
<iter>
<var name="${pid}">12854</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:14.414" level="INFO">Running command 'kill 12854 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:14.410" endtime="20210731 10:43:14.414"/>
</kw>
<status status="PASS" starttime="20210731 10:43:14.409" endtime="20210731 10:43:14.414"/>
</iter>
<status status="PASS" starttime="20210731 10:43:14.398" endtime="20210731 10:43:14.415"/>
</for>
<status status="PASS" starttime="20210731 10:43:14.397" endtime="20210731 10:43:14.415"/>
</branch>
<status status="PASS" starttime="20210731 10:43:14.397" endtime="20210731 10:43:14.415"/>
</if>
<status status="PASS" starttime="20210731 10:43:14.384" endtime="20210731 10:43:14.415"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤ abc!'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:43:12.792" endtime="20210731 10:43:14.415">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t42" name="With Each Valid Token, Updating Username Of Each System User With #¤ abc!g Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:14.419" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:14.430" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:14.430" level="INFO">${pids} = 12883</msg>
<status status="PASS" starttime="20210731 10:43:14.417" endtime="20210731 10:43:14.430"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:14.431" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:14.431" endtime="20210731 10:43:14.431"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:14.432" level="INFO">${pids} = ['12883']</msg>
<status status="PASS" starttime="20210731 10:43:14.432" endtime="20210731 10:43:14.432"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12883</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:14.435" level="INFO">Running command 'kill 12883 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:14.432" endtime="20210731 10:43:14.436"/>
</kw>
<status status="PASS" starttime="20210731 10:43:14.432" endtime="20210731 10:43:14.436"/>
</iter>
<status status="PASS" starttime="20210731 10:43:14.432" endtime="20210731 10:43:14.436"/>
</for>
<status status="PASS" starttime="20210731 10:43:14.431" endtime="20210731 10:43:14.436"/>
</branch>
<status status="PASS" starttime="20210731 10:43:14.431" endtime="20210731 10:43:14.436"/>
</if>
<status status="PASS" starttime="20210731 10:43:14.416" endtime="20210731 10:43:14.436"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:14.438" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:14.437" endtime="20210731 10:43:14.438"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:14.438" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:14.438" endtime="20210731 10:43:14.438"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:14.438" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:14.438" endtime="20210731 10:43:14.438"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:14.439" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:14.439" endtime="20210731 10:43:14.439"/>
</kw>
<msg timestamp="20210731 10:43:14.439" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:14.438" endtime="20210731 10:43:14.439"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:14.445" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:14.439" endtime="20210731 10:43:14.448"/>
</kw>
<status status="PASS" starttime="20210731 10:43:14.437" endtime="20210731 10:43:14.448"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:43:14.450" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:43:14.449" endtime="20210731 10:43:14.454"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:43:15.955" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:43:14.454" endtime="20210731 10:43:15.955"/>
</kw>
<status status="PASS" starttime="20210731 10:43:14.448" endtime="20210731 10:43:15.955"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:15.957" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:15.956" endtime="20210731 10:43:15.957"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:15.957" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:15.957" endtime="20210731 10:43:15.957"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:15.958" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:15.957" endtime="20210731 10:43:15.958"/>
</kw>
<msg timestamp="20210731 10:43:15.958" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:15.956" endtime="20210731 10:43:15.958"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:43:15.958" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:43:15.958" endtime="20210731 10:43:15.959"/>
</kw>
<status status="PASS" starttime="20210731 10:43:15.955" endtime="20210731 10:43:15.959"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:43:15.959" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:43:15.959" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:43:15.959" endtime="20210731 10:43:15.960"/>
</kw>
<status status="PASS" starttime="20210731 10:43:15.959" endtime="20210731 10:43:15.960"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:43:15.961" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:43:15.961" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:43:15.960" endtime="20210731 10:43:15.961"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:43:15.961" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:43:15.961" endtime="20210731 10:43:15.961"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:15.962" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:15.961" endtime="20210731 10:43:15.962"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:15.962" endtime="20210731 10:43:15.963"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:15.963" endtime="20210731 10:43:15.963"/>
</kw>
<status status="PASS" starttime="20210731 10:43:15.961" endtime="20210731 10:43:15.963"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:15.964" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:15.963" endtime="20210731 10:43:15.964"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:15.964" endtime="20210731 10:43:15.965"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:15.965" endtime="20210731 10:43:15.966"/>
</kw>
<status status="PASS" starttime="20210731 10:43:15.963" endtime="20210731 10:43:15.966"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:15.967" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:15.967" endtime="20210731 10:43:15.967"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:15.967" endtime="20210731 10:43:15.968"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:15.968" endtime="20210731 10:43:15.968"/>
</kw>
<status status="PASS" starttime="20210731 10:43:15.966" endtime="20210731 10:43:15.968"/>
</iter>
<status status="PASS" starttime="20210731 10:43:15.961" endtime="20210731 10:43:15.968"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:43:15.969" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:43:15.969" endtime="20210731 10:43:15.969"/>
</kw>
<status status="PASS" starttime="20210731 10:43:15.960" endtime="20210731 10:43:15.969"/>
</kw>
<status status="PASS" starttime="20210731 10:43:14.416" endtime="20210731 10:43:15.969"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤ abc!g</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:15.971" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:43:15.970" endtime="20210731 10:43:15.971"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:15.971" level="INFO">${payload} = {'username': '#¤ abc!g'}</msg>
<status status="PASS" starttime="20210731 10:43:15.971" endtime="20210731 10:43:15.971"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:15.981" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:15.981" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:15.971" endtime="20210731 10:43:15.981"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:15.982" endtime="20210731 10:43:15.982"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:15.982" endtime="20210731 10:43:15.982"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:15.971" endtime="20210731 10:43:15.982"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:15.971" endtime="20210731 10:43:15.982"/>
</for>
<status status="FAIL" starttime="20210731 10:43:15.970" endtime="20210731 10:43:15.982"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:15.970" endtime="20210731 10:43:15.982"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤ abc!g</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:15.983" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:43:15.983" endtime="20210731 10:43:15.983"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:15.984" level="INFO">${payload} = {'username': '#¤ abc!g'}</msg>
<status status="PASS" starttime="20210731 10:43:15.983" endtime="20210731 10:43:15.984"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:15.987" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:15.988" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:15.984" endtime="20210731 10:43:15.988"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:15.988" endtime="20210731 10:43:15.988"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:15.988" endtime="20210731 10:43:15.988"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:15.984" endtime="20210731 10:43:15.988"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:15.984" endtime="20210731 10:43:15.988"/>
</for>
<status status="FAIL" starttime="20210731 10:43:15.982" endtime="20210731 10:43:15.988"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:15.982" endtime="20210731 10:43:15.988"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤ abc!g</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:15.991" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:43:15.990" endtime="20210731 10:43:15.991"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:15.991" level="INFO">${payload} = {'username': '#¤ abc!g'}</msg>
<status status="PASS" starttime="20210731 10:43:15.991" endtime="20210731 10:43:15.991"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:15.996" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:15.996" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:15.991" endtime="20210731 10:43:15.996"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:15.996" endtime="20210731 10:43:15.996"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:15.996" endtime="20210731 10:43:15.996"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:15.991" endtime="20210731 10:43:15.996"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:15.991" endtime="20210731 10:43:15.996"/>
</for>
<status status="FAIL" starttime="20210731 10:43:15.989" endtime="20210731 10:43:15.997"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:15.988" endtime="20210731 10:43:15.997"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:15.969" endtime="20210731 10:43:15.997"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:16.001" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:16.010" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:16.010" level="INFO">${pids} = 12906
12913
12918</msg>
<status status="PASS" starttime="20210731 10:43:15.998" endtime="20210731 10:43:16.010"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:16.011" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:16.011" endtime="20210731 10:43:16.011"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:16.012" level="INFO">${pids} = ['12906', '12913', '12918']</msg>
<status status="PASS" starttime="20210731 10:43:16.012" endtime="20210731 10:43:16.012"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12906</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:16.015" level="INFO">Running command 'kill 12906 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:16.012" endtime="20210731 10:43:16.015"/>
</kw>
<status status="PASS" starttime="20210731 10:43:16.012" endtime="20210731 10:43:16.016"/>
</iter>
<iter>
<var name="${pid}">12913</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:16.018" level="INFO">Running command 'kill 12913 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:16.016" endtime="20210731 10:43:16.019"/>
</kw>
<status status="PASS" starttime="20210731 10:43:16.016" endtime="20210731 10:43:16.019"/>
</iter>
<iter>
<var name="${pid}">12918</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:16.022" level="INFO">Running command 'kill 12918 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:16.019" endtime="20210731 10:43:16.022"/>
</kw>
<status status="PASS" starttime="20210731 10:43:16.019" endtime="20210731 10:43:16.022"/>
</iter>
<status status="PASS" starttime="20210731 10:43:16.012" endtime="20210731 10:43:16.022"/>
</for>
<status status="PASS" starttime="20210731 10:43:16.012" endtime="20210731 10:43:16.022"/>
</branch>
<status status="PASS" starttime="20210731 10:43:16.011" endtime="20210731 10:43:16.022"/>
</if>
<status status="PASS" starttime="20210731 10:43:15.997" endtime="20210731 10:43:16.022"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤ abc!g'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:43:14.415" endtime="20210731 10:43:16.023">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t43" name="With Each Valid Token, Updating Username Of Each System User With #¤/abc!g() &amp;%¤fghjklQWERTY Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:16.029" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:16.037" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:16.038" level="INFO">${pids} = 12947</msg>
<status status="PASS" starttime="20210731 10:43:16.024" endtime="20210731 10:43:16.038"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:16.039" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:16.038" endtime="20210731 10:43:16.039"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:16.040" level="INFO">${pids} = ['12947']</msg>
<status status="PASS" starttime="20210731 10:43:16.039" endtime="20210731 10:43:16.040"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12947</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:16.044" level="INFO">Running command 'kill 12947 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:16.040" endtime="20210731 10:43:16.044"/>
</kw>
<status status="PASS" starttime="20210731 10:43:16.040" endtime="20210731 10:43:16.044"/>
</iter>
<status status="PASS" starttime="20210731 10:43:16.040" endtime="20210731 10:43:16.044"/>
</for>
<status status="PASS" starttime="20210731 10:43:16.039" endtime="20210731 10:43:16.044"/>
</branch>
<status status="PASS" starttime="20210731 10:43:16.039" endtime="20210731 10:43:16.044"/>
</if>
<status status="PASS" starttime="20210731 10:43:16.024" endtime="20210731 10:43:16.045"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:16.046" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:16.045" endtime="20210731 10:43:16.046"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:16.046" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:16.046" endtime="20210731 10:43:16.046"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:16.047" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:16.047" endtime="20210731 10:43:16.047"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:16.047" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:16.047" endtime="20210731 10:43:16.047"/>
</kw>
<msg timestamp="20210731 10:43:16.047" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:16.046" endtime="20210731 10:43:16.047"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:16.050" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:16.047" endtime="20210731 10:43:16.052"/>
</kw>
<status status="PASS" starttime="20210731 10:43:16.045" endtime="20210731 10:43:16.052"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:43:16.054" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:43:16.054" endtime="20210731 10:43:16.059"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:43:17.561" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:43:16.059" endtime="20210731 10:43:17.562"/>
</kw>
<status status="PASS" starttime="20210731 10:43:16.053" endtime="20210731 10:43:17.563"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:17.567" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:17.567" endtime="20210731 10:43:17.567"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:17.568" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:17.567" endtime="20210731 10:43:17.568"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:17.568" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:17.568" endtime="20210731 10:43:17.568"/>
</kw>
<msg timestamp="20210731 10:43:17.568" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:17.566" endtime="20210731 10:43:17.568"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:43:17.569" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:43:17.568" endtime="20210731 10:43:17.569"/>
</kw>
<status status="PASS" starttime="20210731 10:43:17.564" endtime="20210731 10:43:17.569"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:43:17.570" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:43:17.570" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:43:17.570" endtime="20210731 10:43:17.570"/>
</kw>
<status status="PASS" starttime="20210731 10:43:17.569" endtime="20210731 10:43:17.570"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:43:17.571" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:43:17.571" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:43:17.571" endtime="20210731 10:43:17.571"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:43:17.572" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:43:17.571" endtime="20210731 10:43:17.572"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:17.572" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:17.572" endtime="20210731 10:43:17.573"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:17.573" endtime="20210731 10:43:17.574"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:17.574" endtime="20210731 10:43:17.575"/>
</kw>
<status status="PASS" starttime="20210731 10:43:17.572" endtime="20210731 10:43:17.575"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:17.575" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:17.575" endtime="20210731 10:43:17.575"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:17.575" endtime="20210731 10:43:17.576"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:17.576" endtime="20210731 10:43:17.576"/>
</kw>
<status status="PASS" starttime="20210731 10:43:17.575" endtime="20210731 10:43:17.576"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:17.577" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:17.576" endtime="20210731 10:43:17.577"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:17.577" endtime="20210731 10:43:17.578"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:17.578" endtime="20210731 10:43:17.578"/>
</kw>
<status status="PASS" starttime="20210731 10:43:17.576" endtime="20210731 10:43:17.578"/>
</iter>
<status status="PASS" starttime="20210731 10:43:17.572" endtime="20210731 10:43:17.578"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:43:17.578" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:43:17.578" endtime="20210731 10:43:17.578"/>
</kw>
<status status="PASS" starttime="20210731 10:43:17.570" endtime="20210731 10:43:17.578"/>
</kw>
<status status="PASS" starttime="20210731 10:43:16.024" endtime="20210731 10:43:17.579"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/abc!g() &amp;%¤fghjklQWERTY</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:17.580" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:43:17.579" endtime="20210731 10:43:17.580"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:17.580" level="INFO">${payload} = {'username': '#¤/abc!g() &amp;%¤fghjklQWERTY'}</msg>
<status status="PASS" starttime="20210731 10:43:17.580" endtime="20210731 10:43:17.580"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:17.591" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:17.591" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:17.580" endtime="20210731 10:43:17.591"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:17.592" endtime="20210731 10:43:17.592"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:17.592" endtime="20210731 10:43:17.592"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:17.580" endtime="20210731 10:43:17.593"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:17.580" endtime="20210731 10:43:17.593"/>
</for>
<status status="FAIL" starttime="20210731 10:43:17.579" endtime="20210731 10:43:17.594"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:17.579" endtime="20210731 10:43:17.594"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/abc!g() &amp;%¤fghjklQWERTY</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:17.595" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:43:17.595" endtime="20210731 10:43:17.595"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:17.596" level="INFO">${payload} = {'username': '#¤/abc!g() &amp;%¤fghjklQWERTY'}</msg>
<status status="PASS" starttime="20210731 10:43:17.595" endtime="20210731 10:43:17.596"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:17.600" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:17.601" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:17.596" endtime="20210731 10:43:17.601"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:17.601" endtime="20210731 10:43:17.601"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:17.601" endtime="20210731 10:43:17.601"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:17.596" endtime="20210731 10:43:17.601"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:17.596" endtime="20210731 10:43:17.601"/>
</for>
<status status="FAIL" starttime="20210731 10:43:17.594" endtime="20210731 10:43:17.601"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:17.594" endtime="20210731 10:43:17.601"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/abc!g() &amp;%¤fghjklQWERTY</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:17.602" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:43:17.602" endtime="20210731 10:43:17.602"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:17.603" level="INFO">${payload} = {'username': '#¤/abc!g() &amp;%¤fghjklQWERTY'}</msg>
<status status="PASS" starttime="20210731 10:43:17.603" endtime="20210731 10:43:17.603"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:17.609" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:17.609" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:17.603" endtime="20210731 10:43:17.609"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:17.609" endtime="20210731 10:43:17.609"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:17.609" endtime="20210731 10:43:17.609"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:17.603" endtime="20210731 10:43:17.610"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:17.603" endtime="20210731 10:43:17.610"/>
</for>
<status status="FAIL" starttime="20210731 10:43:17.602" endtime="20210731 10:43:17.610"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:17.601" endtime="20210731 10:43:17.610"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:17.579" endtime="20210731 10:43:17.610"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:17.614" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:17.622" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:17.623" level="INFO">${pids} = 12970
12977
12988</msg>
<status status="PASS" starttime="20210731 10:43:17.611" endtime="20210731 10:43:17.623"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:17.624" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:17.623" endtime="20210731 10:43:17.624"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:17.625" level="INFO">${pids} = ['12970', '12977', '12988']</msg>
<status status="PASS" starttime="20210731 10:43:17.624" endtime="20210731 10:43:17.625"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12970</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:17.629" level="INFO">Running command 'kill 12970 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:17.625" endtime="20210731 10:43:17.630"/>
</kw>
<status status="PASS" starttime="20210731 10:43:17.625" endtime="20210731 10:43:17.630"/>
</iter>
<iter>
<var name="${pid}">12977</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:17.633" level="INFO">Running command 'kill 12977 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:17.630" endtime="20210731 10:43:17.635"/>
</kw>
<status status="PASS" starttime="20210731 10:43:17.630" endtime="20210731 10:43:17.635"/>
</iter>
<iter>
<var name="${pid}">12988</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:17.639" level="INFO">Running command 'kill 12988 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:17.636" endtime="20210731 10:43:17.639"/>
</kw>
<status status="PASS" starttime="20210731 10:43:17.636" endtime="20210731 10:43:17.639"/>
</iter>
<status status="PASS" starttime="20210731 10:43:17.625" endtime="20210731 10:43:17.639"/>
</for>
<status status="PASS" starttime="20210731 10:43:17.624" endtime="20210731 10:43:17.639"/>
</branch>
<status status="PASS" starttime="20210731 10:43:17.624" endtime="20210731 10:43:17.640"/>
</if>
<status status="PASS" starttime="20210731 10:43:17.610" endtime="20210731 10:43:17.640"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤/abc!g() &amp;%¤fghjklQWERTY'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:43:16.023" endtime="20210731 10:43:17.640">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t44" name="With Each Valid Token, Updating Password Of Each System User With '' Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:17.645" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:17.654" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:17.654" level="INFO">${pids} = 13017</msg>
<status status="PASS" starttime="20210731 10:43:17.642" endtime="20210731 10:43:17.654"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:17.655" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:17.654" endtime="20210731 10:43:17.655"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:17.656" level="INFO">${pids} = ['13017']</msg>
<status status="PASS" starttime="20210731 10:43:17.655" endtime="20210731 10:43:17.656"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">13017</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:17.660" level="INFO">Running command 'kill 13017 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:17.656" endtime="20210731 10:43:17.660"/>
</kw>
<status status="PASS" starttime="20210731 10:43:17.656" endtime="20210731 10:43:17.660"/>
</iter>
<status status="PASS" starttime="20210731 10:43:17.656" endtime="20210731 10:43:17.660"/>
</for>
<status status="PASS" starttime="20210731 10:43:17.655" endtime="20210731 10:43:17.660"/>
</branch>
<status status="PASS" starttime="20210731 10:43:17.655" endtime="20210731 10:43:17.660"/>
</if>
<status status="PASS" starttime="20210731 10:43:17.642" endtime="20210731 10:43:17.660"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:17.662" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:17.661" endtime="20210731 10:43:17.662"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:17.662" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:17.662" endtime="20210731 10:43:17.662"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:17.663" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:17.663" endtime="20210731 10:43:17.663"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:17.663" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:17.663" endtime="20210731 10:43:17.663"/>
</kw>
<msg timestamp="20210731 10:43:17.663" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:17.662" endtime="20210731 10:43:17.663"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:17.668" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:17.664" endtime="20210731 10:43:17.670"/>
</kw>
<status status="PASS" starttime="20210731 10:43:17.661" endtime="20210731 10:43:17.670"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:43:17.671" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:43:17.671" endtime="20210731 10:43:17.676"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:43:19.178" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:43:17.676" endtime="20210731 10:43:19.178"/>
</kw>
<status status="PASS" starttime="20210731 10:43:17.670" endtime="20210731 10:43:19.178"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:19.179" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:19.179" endtime="20210731 10:43:19.179"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:19.180" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:19.179" endtime="20210731 10:43:19.180"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:19.180" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:19.180" endtime="20210731 10:43:19.180"/>
</kw>
<msg timestamp="20210731 10:43:19.180" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:19.179" endtime="20210731 10:43:19.180"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:43:19.181" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:43:19.180" endtime="20210731 10:43:19.181"/>
</kw>
<status status="PASS" starttime="20210731 10:43:19.178" endtime="20210731 10:43:19.181"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:43:19.182" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:43:19.182" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:43:19.181" endtime="20210731 10:43:19.182"/>
</kw>
<status status="PASS" starttime="20210731 10:43:19.181" endtime="20210731 10:43:19.182"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:43:19.183" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:43:19.183" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:43:19.182" endtime="20210731 10:43:19.183"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:43:19.183" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:43:19.183" endtime="20210731 10:43:19.183"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:19.184" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:19.184" endtime="20210731 10:43:19.184"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:19.184" endtime="20210731 10:43:19.184"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:19.185" endtime="20210731 10:43:19.185"/>
</kw>
<status status="PASS" starttime="20210731 10:43:19.183" endtime="20210731 10:43:19.185"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:19.185" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:19.185" endtime="20210731 10:43:19.185"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:19.185" endtime="20210731 10:43:19.186"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:19.187" endtime="20210731 10:43:19.188"/>
</kw>
<status status="PASS" starttime="20210731 10:43:19.185" endtime="20210731 10:43:19.188"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:19.189" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:19.189" endtime="20210731 10:43:19.189"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:19.189" endtime="20210731 10:43:19.190"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:19.190" endtime="20210731 10:43:19.190"/>
</kw>
<status status="PASS" starttime="20210731 10:43:19.188" endtime="20210731 10:43:19.190"/>
</iter>
<status status="PASS" starttime="20210731 10:43:19.183" endtime="20210731 10:43:19.190"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:43:19.191" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:43:19.190" endtime="20210731 10:43:19.191"/>
</kw>
<status status="PASS" starttime="20210731 10:43:19.182" endtime="20210731 10:43:19.191"/>
</kw>
<status status="PASS" starttime="20210731 10:43:17.641" endtime="20210731 10:43:19.191"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=${EMPTY}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:19.193" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:43:19.192" endtime="20210731 10:43:19.193"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:19.193" level="INFO">${payload} = {'password': ''}</msg>
<status status="PASS" starttime="20210731 10:43:19.193" endtime="20210731 10:43:19.193"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:19.203" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:19.204" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:19.194" endtime="20210731 10:43:19.204"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:19.204" endtime="20210731 10:43:19.204"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:19.204" endtime="20210731 10:43:19.204"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:19.193" endtime="20210731 10:43:19.204"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:19.193" endtime="20210731 10:43:19.204"/>
</for>
<status status="FAIL" starttime="20210731 10:43:19.191" endtime="20210731 10:43:19.204"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:19.191" endtime="20210731 10:43:19.204"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=${EMPTY}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:19.206" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:43:19.206" endtime="20210731 10:43:19.206"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:19.207" level="INFO">${payload} = {'password': ''}</msg>
<status status="PASS" starttime="20210731 10:43:19.206" endtime="20210731 10:43:19.207"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:19.212" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:19.212" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:19.207" endtime="20210731 10:43:19.212"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:19.212" endtime="20210731 10:43:19.212"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:19.212" endtime="20210731 10:43:19.212"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:19.207" endtime="20210731 10:43:19.212"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:19.207" endtime="20210731 10:43:19.212"/>
</for>
<status status="FAIL" starttime="20210731 10:43:19.205" endtime="20210731 10:43:19.212"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:19.204" endtime="20210731 10:43:19.213"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=${EMPTY}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:19.215" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:43:19.214" endtime="20210731 10:43:19.215"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:19.215" level="INFO">${payload} = {'password': ''}</msg>
<status status="PASS" starttime="20210731 10:43:19.215" endtime="20210731 10:43:19.215"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:19.221" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:19.221" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:19.216" endtime="20210731 10:43:19.221"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:19.221" endtime="20210731 10:43:19.221"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:19.222" endtime="20210731 10:43:19.222"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:19.216" endtime="20210731 10:43:19.222"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:19.215" endtime="20210731 10:43:19.222"/>
</for>
<status status="FAIL" starttime="20210731 10:43:19.214" endtime="20210731 10:43:19.222"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:19.213" endtime="20210731 10:43:19.222"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:19.191" endtime="20210731 10:43:19.222"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:19.231" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:19.241" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:19.241" level="INFO">${pids} = 13040
13047
13051</msg>
<status status="PASS" starttime="20210731 10:43:19.226" endtime="20210731 10:43:19.241"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:19.242" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:19.242" endtime="20210731 10:43:19.242"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:19.243" level="INFO">${pids} = ['13040', '13047', '13051']</msg>
<status status="PASS" starttime="20210731 10:43:19.243" endtime="20210731 10:43:19.243"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">13040</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:19.247" level="INFO">Running command 'kill 13040 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:19.244" endtime="20210731 10:43:19.248"/>
</kw>
<status status="PASS" starttime="20210731 10:43:19.243" endtime="20210731 10:43:19.248"/>
</iter>
<iter>
<var name="${pid}">13047</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:19.251" level="INFO">Running command 'kill 13047 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:19.248" endtime="20210731 10:43:19.253"/>
</kw>
<status status="PASS" starttime="20210731 10:43:19.248" endtime="20210731 10:43:19.253"/>
</iter>
<iter>
<var name="${pid}">13051</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:19.257" level="INFO">Running command 'kill 13051 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:19.253" endtime="20210731 10:43:19.258"/>
</kw>
<status status="PASS" starttime="20210731 10:43:19.253" endtime="20210731 10:43:19.258"/>
</iter>
<status status="PASS" starttime="20210731 10:43:19.243" endtime="20210731 10:43:19.258"/>
</for>
<status status="PASS" starttime="20210731 10:43:19.242" endtime="20210731 10:43:19.258"/>
</branch>
<status status="PASS" starttime="20210731 10:43:19.242" endtime="20210731 10:43:19.258"/>
</if>
<status status="PASS" starttime="20210731 10:43:19.222" endtime="20210731 10:43:19.258"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": ''
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:43:17.641" endtime="20210731 10:43:19.259">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t45" name="With Each Valid Token, Updating Password Of Each System User With abcdefg Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:19.264" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:19.274" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:19.274" level="INFO">${pids} = 13080</msg>
<status status="PASS" starttime="20210731 10:43:19.260" endtime="20210731 10:43:19.274"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:19.275" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:19.275" endtime="20210731 10:43:19.275"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:19.276" level="INFO">${pids} = ['13080']</msg>
<status status="PASS" starttime="20210731 10:43:19.276" endtime="20210731 10:43:19.276"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">13080</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:19.279" level="INFO">Running command 'kill 13080 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:19.276" endtime="20210731 10:43:19.280"/>
</kw>
<status status="PASS" starttime="20210731 10:43:19.276" endtime="20210731 10:43:19.280"/>
</iter>
<status status="PASS" starttime="20210731 10:43:19.276" endtime="20210731 10:43:19.280"/>
</for>
<status status="PASS" starttime="20210731 10:43:19.275" endtime="20210731 10:43:19.280"/>
</branch>
<status status="PASS" starttime="20210731 10:43:19.275" endtime="20210731 10:43:19.280"/>
</if>
<status status="PASS" starttime="20210731 10:43:19.260" endtime="20210731 10:43:19.280"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:19.282" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:19.281" endtime="20210731 10:43:19.282"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:19.282" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:19.282" endtime="20210731 10:43:19.282"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:19.283" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:19.282" endtime="20210731 10:43:19.283"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:19.283" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:19.283" endtime="20210731 10:43:19.283"/>
</kw>
<msg timestamp="20210731 10:43:19.283" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:19.282" endtime="20210731 10:43:19.283"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:19.287" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:19.283" endtime="20210731 10:43:19.289"/>
</kw>
<status status="PASS" starttime="20210731 10:43:19.281" endtime="20210731 10:43:19.289"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:43:19.290" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:43:19.290" endtime="20210731 10:43:19.295"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:43:20.796" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:43:19.295" endtime="20210731 10:43:20.797"/>
</kw>
<status status="PASS" starttime="20210731 10:43:19.289" endtime="20210731 10:43:20.797"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:20.800" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:20.799" endtime="20210731 10:43:20.800"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:20.801" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:20.800" endtime="20210731 10:43:20.801"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:20.802" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:20.801" endtime="20210731 10:43:20.802"/>
</kw>
<msg timestamp="20210731 10:43:20.802" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:20.799" endtime="20210731 10:43:20.802"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:43:20.803" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:43:20.802" endtime="20210731 10:43:20.803"/>
</kw>
<status status="PASS" starttime="20210731 10:43:20.798" endtime="20210731 10:43:20.803"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:43:20.804" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:43:20.804" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:43:20.804" endtime="20210731 10:43:20.805"/>
</kw>
<status status="PASS" starttime="20210731 10:43:20.803" endtime="20210731 10:43:20.805"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:43:20.806" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:43:20.806" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:43:20.805" endtime="20210731 10:43:20.806"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:43:20.806" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:43:20.806" endtime="20210731 10:43:20.806"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:20.808" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:20.807" endtime="20210731 10:43:20.808"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:20.808" endtime="20210731 10:43:20.810"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:20.810" endtime="20210731 10:43:20.810"/>
</kw>
<status status="PASS" starttime="20210731 10:43:20.807" endtime="20210731 10:43:20.810"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:20.811" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:20.811" endtime="20210731 10:43:20.811"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:20.811" endtime="20210731 10:43:20.812"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:20.812" endtime="20210731 10:43:20.812"/>
</kw>
<status status="PASS" starttime="20210731 10:43:20.811" endtime="20210731 10:43:20.812"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:20.812" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:20.812" endtime="20210731 10:43:20.813"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:20.813" endtime="20210731 10:43:20.813"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:20.813" endtime="20210731 10:43:20.814"/>
</kw>
<status status="PASS" starttime="20210731 10:43:20.812" endtime="20210731 10:43:20.814"/>
</iter>
<status status="PASS" starttime="20210731 10:43:20.807" endtime="20210731 10:43:20.814"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:43:20.814" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:43:20.814" endtime="20210731 10:43:20.814"/>
</kw>
<status status="PASS" starttime="20210731 10:43:20.805" endtime="20210731 10:43:20.814"/>
</kw>
<status status="PASS" starttime="20210731 10:43:19.260" endtime="20210731 10:43:20.814"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdefg</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:20.815" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:43:20.815" endtime="20210731 10:43:20.815"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:20.816" level="INFO">${payload} = {'password': 'abcdefg'}</msg>
<status status="PASS" starttime="20210731 10:43:20.815" endtime="20210731 10:43:20.816"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:20.826" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:20.826" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:20.816" endtime="20210731 10:43:20.826"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:20.826" endtime="20210731 10:43:20.826"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:20.827" endtime="20210731 10:43:20.827"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:20.816" endtime="20210731 10:43:20.827"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:20.816" endtime="20210731 10:43:20.827"/>
</for>
<status status="FAIL" starttime="20210731 10:43:20.815" endtime="20210731 10:43:20.827"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:20.815" endtime="20210731 10:43:20.827"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdefg</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:20.828" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:43:20.828" endtime="20210731 10:43:20.828"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:20.828" level="INFO">${payload} = {'password': 'abcdefg'}</msg>
<status status="PASS" starttime="20210731 10:43:20.828" endtime="20210731 10:43:20.828"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:20.833" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:20.833" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:20.829" endtime="20210731 10:43:20.833"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:20.833" endtime="20210731 10:43:20.833"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:20.834" endtime="20210731 10:43:20.834"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:20.829" endtime="20210731 10:43:20.834"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:20.828" endtime="20210731 10:43:20.834"/>
</for>
<status status="FAIL" starttime="20210731 10:43:20.827" endtime="20210731 10:43:20.834"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:20.827" endtime="20210731 10:43:20.834"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdefg</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:20.835" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:43:20.835" endtime="20210731 10:43:20.835"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:20.835" level="INFO">${payload} = {'password': 'abcdefg'}</msg>
<status status="PASS" starttime="20210731 10:43:20.835" endtime="20210731 10:43:20.835"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:20.840" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:20.840" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:20.836" endtime="20210731 10:43:20.841"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:20.841" endtime="20210731 10:43:20.841"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:20.841" endtime="20210731 10:43:20.841"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:20.835" endtime="20210731 10:43:20.841"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:20.835" endtime="20210731 10:43:20.841"/>
</for>
<status status="FAIL" starttime="20210731 10:43:20.834" endtime="20210731 10:43:20.842"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:20.834" endtime="20210731 10:43:20.842"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:20.814" endtime="20210731 10:43:20.842"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:20.846" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:20.854" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:20.854" level="INFO">${pids} = 13103
13110
13116</msg>
<status status="PASS" starttime="20210731 10:43:20.843" endtime="20210731 10:43:20.854"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:20.855" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:20.855" endtime="20210731 10:43:20.855"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:20.857" level="INFO">${pids} = ['13103', '13110', '13116']</msg>
<status status="PASS" starttime="20210731 10:43:20.857" endtime="20210731 10:43:20.857"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">13103</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:20.861" level="INFO">Running command 'kill 13103 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:20.858" endtime="20210731 10:43:20.861"/>
</kw>
<status status="PASS" starttime="20210731 10:43:20.857" endtime="20210731 10:43:20.861"/>
</iter>
<iter>
<var name="${pid}">13110</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:20.864" level="INFO">Running command 'kill 13110 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:20.861" endtime="20210731 10:43:20.865"/>
</kw>
<status status="PASS" starttime="20210731 10:43:20.861" endtime="20210731 10:43:20.865"/>
</iter>
<iter>
<var name="${pid}">13116</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:20.868" level="INFO">Running command 'kill 13116 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:20.865" endtime="20210731 10:43:20.869"/>
</kw>
<status status="PASS" starttime="20210731 10:43:20.865" endtime="20210731 10:43:20.869"/>
</iter>
<status status="PASS" starttime="20210731 10:43:20.857" endtime="20210731 10:43:20.869"/>
</for>
<status status="PASS" starttime="20210731 10:43:20.856" endtime="20210731 10:43:20.869"/>
</branch>
<status status="PASS" starttime="20210731 10:43:20.855" endtime="20210731 10:43:20.869"/>
</if>
<status status="PASS" starttime="20210731 10:43:20.842" endtime="20210731 10:43:20.869"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcdefg'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:43:19.259" endtime="20210731 10:43:20.869">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t46" name="With Each Valid Token, Updating Password Of Each System User With abcdefgh Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:20.876" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:20.885" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:20.885" level="INFO">${pids} = 13145</msg>
<status status="PASS" starttime="20210731 10:43:20.871" endtime="20210731 10:43:20.885"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:20.886" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:20.886" endtime="20210731 10:43:20.886"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:20.887" level="INFO">${pids} = ['13145']</msg>
<status status="PASS" starttime="20210731 10:43:20.886" endtime="20210731 10:43:20.887"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">13145</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:20.891" level="INFO">Running command 'kill 13145 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:20.887" endtime="20210731 10:43:20.891"/>
</kw>
<status status="PASS" starttime="20210731 10:43:20.887" endtime="20210731 10:43:20.891"/>
</iter>
<status status="PASS" starttime="20210731 10:43:20.887" endtime="20210731 10:43:20.891"/>
</for>
<status status="PASS" starttime="20210731 10:43:20.886" endtime="20210731 10:43:20.891"/>
</branch>
<status status="PASS" starttime="20210731 10:43:20.886" endtime="20210731 10:43:20.891"/>
</if>
<status status="PASS" starttime="20210731 10:43:20.871" endtime="20210731 10:43:20.891"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:20.893" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:20.892" endtime="20210731 10:43:20.893"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:20.893" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:20.893" endtime="20210731 10:43:20.893"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:20.894" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:20.893" endtime="20210731 10:43:20.894"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:20.894" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:20.894" endtime="20210731 10:43:20.894"/>
</kw>
<msg timestamp="20210731 10:43:20.894" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:20.893" endtime="20210731 10:43:20.894"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:20.897" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:20.894" endtime="20210731 10:43:20.899"/>
</kw>
<status status="PASS" starttime="20210731 10:43:20.892" endtime="20210731 10:43:20.899"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:43:20.900" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:43:20.900" endtime="20210731 10:43:20.904"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:43:22.405" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:43:20.905" endtime="20210731 10:43:22.406"/>
</kw>
<status status="PASS" starttime="20210731 10:43:20.899" endtime="20210731 10:43:22.406"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:22.407" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:22.407" endtime="20210731 10:43:22.407"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:22.408" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:22.407" endtime="20210731 10:43:22.408"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:22.408" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:22.408" endtime="20210731 10:43:22.408"/>
</kw>
<msg timestamp="20210731 10:43:22.409" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:22.407" endtime="20210731 10:43:22.409"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:43:22.410" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:43:22.409" endtime="20210731 10:43:22.410"/>
</kw>
<status status="PASS" starttime="20210731 10:43:22.406" endtime="20210731 10:43:22.410"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:43:22.411" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:43:22.411" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:43:22.411" endtime="20210731 10:43:22.411"/>
</kw>
<status status="PASS" starttime="20210731 10:43:22.411" endtime="20210731 10:43:22.411"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:43:22.412" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:43:22.412" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:43:22.412" endtime="20210731 10:43:22.412"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:43:22.413" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:43:22.412" endtime="20210731 10:43:22.413"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:22.413" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:22.413" endtime="20210731 10:43:22.413"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:22.413" endtime="20210731 10:43:22.414"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:22.414" endtime="20210731 10:43:22.414"/>
</kw>
<status status="PASS" starttime="20210731 10:43:22.413" endtime="20210731 10:43:22.414"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:22.415" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:22.414" endtime="20210731 10:43:22.415"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:22.415" endtime="20210731 10:43:22.416"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:22.416" endtime="20210731 10:43:22.417"/>
</kw>
<status status="PASS" starttime="20210731 10:43:22.414" endtime="20210731 10:43:22.417"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:22.417" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:22.417" endtime="20210731 10:43:22.417"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:22.417" endtime="20210731 10:43:22.418"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:22.418" endtime="20210731 10:43:22.418"/>
</kw>
<status status="PASS" starttime="20210731 10:43:22.417" endtime="20210731 10:43:22.418"/>
</iter>
<status status="PASS" starttime="20210731 10:43:22.413" endtime="20210731 10:43:22.418"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:43:22.419" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:43:22.418" endtime="20210731 10:43:22.419"/>
</kw>
<status status="PASS" starttime="20210731 10:43:22.411" endtime="20210731 10:43:22.419"/>
</kw>
<status status="PASS" starttime="20210731 10:43:20.870" endtime="20210731 10:43:22.419"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdefgh</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:22.420" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:43:22.420" endtime="20210731 10:43:22.420"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:22.421" level="INFO">${payload} = {'password': 'abcdefgh'}</msg>
<status status="PASS" starttime="20210731 10:43:22.420" endtime="20210731 10:43:22.421"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:22.431" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:22.432" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:22.421" endtime="20210731 10:43:22.432"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:22.432" endtime="20210731 10:43:22.432"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:22.432" endtime="20210731 10:43:22.432"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:22.421" endtime="20210731 10:43:22.432"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:22.421" endtime="20210731 10:43:22.432"/>
</for>
<status status="FAIL" starttime="20210731 10:43:22.419" endtime="20210731 10:43:22.432"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:22.419" endtime="20210731 10:43:22.432"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdefgh</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:22.434" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:43:22.433" endtime="20210731 10:43:22.434"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:22.434" level="INFO">${payload} = {'password': 'abcdefgh'}</msg>
<status status="PASS" starttime="20210731 10:43:22.434" endtime="20210731 10:43:22.434"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:22.440" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:22.441" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:22.434" endtime="20210731 10:43:22.441"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:22.441" endtime="20210731 10:43:22.441"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:22.442" endtime="20210731 10:43:22.442"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:22.434" endtime="20210731 10:43:22.442"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:22.434" endtime="20210731 10:43:22.442"/>
</for>
<status status="FAIL" starttime="20210731 10:43:22.433" endtime="20210731 10:43:22.443"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:22.433" endtime="20210731 10:43:22.443"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdefgh</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:22.445" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:43:22.444" endtime="20210731 10:43:22.445"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:22.445" level="INFO">${payload} = {'password': 'abcdefgh'}</msg>
<status status="PASS" starttime="20210731 10:43:22.445" endtime="20210731 10:43:22.445"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:22.450" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:22.450" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:22.446" endtime="20210731 10:43:22.450"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:22.451" endtime="20210731 10:43:22.451"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:22.451" endtime="20210731 10:43:22.451"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:22.445" endtime="20210731 10:43:22.451"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:22.445" endtime="20210731 10:43:22.451"/>
</for>
<status status="FAIL" starttime="20210731 10:43:22.444" endtime="20210731 10:43:22.451"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:22.444" endtime="20210731 10:43:22.451"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:22.419" endtime="20210731 10:43:22.451"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:22.455" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:22.464" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:22.464" level="INFO">${pids} = 13168
13175
13186</msg>
<status status="PASS" starttime="20210731 10:43:22.452" endtime="20210731 10:43:22.464"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:22.465" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:22.465" endtime="20210731 10:43:22.465"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:22.466" level="INFO">${pids} = ['13168', '13175', '13186']</msg>
<status status="PASS" starttime="20210731 10:43:22.466" endtime="20210731 10:43:22.466"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">13168</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:22.469" level="INFO">Running command 'kill 13168 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:22.466" endtime="20210731 10:43:22.470"/>
</kw>
<status status="PASS" starttime="20210731 10:43:22.466" endtime="20210731 10:43:22.470"/>
</iter>
<iter>
<var name="${pid}">13175</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:22.475" level="INFO">Running command 'kill 13175 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:22.470" endtime="20210731 10:43:22.475"/>
</kw>
<status status="PASS" starttime="20210731 10:43:22.470" endtime="20210731 10:43:22.475"/>
</iter>
<iter>
<var name="${pid}">13186</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:22.479" level="INFO">Running command 'kill 13186 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:22.476" endtime="20210731 10:43:22.479"/>
</kw>
<status status="PASS" starttime="20210731 10:43:22.476" endtime="20210731 10:43:22.480"/>
</iter>
<status status="PASS" starttime="20210731 10:43:22.466" endtime="20210731 10:43:22.480"/>
</for>
<status status="PASS" starttime="20210731 10:43:22.465" endtime="20210731 10:43:22.480"/>
</branch>
<status status="PASS" starttime="20210731 10:43:22.465" endtime="20210731 10:43:22.480"/>
</if>
<status status="PASS" starttime="20210731 10:43:22.451" endtime="20210731 10:43:22.480"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcdefgh'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:43:20.870" endtime="20210731 10:43:22.480">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t47" name="With Each Valid Token, Updating Password Of Each System User With abcdefghjklmnprstoöuüvyz Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:22.485" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:22.495" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:22.495" level="INFO">${pids} = 13215</msg>
<status status="PASS" starttime="20210731 10:43:22.482" endtime="20210731 10:43:22.495"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:22.496" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:22.495" endtime="20210731 10:43:22.496"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:22.496" level="INFO">${pids} = ['13215']</msg>
<status status="PASS" starttime="20210731 10:43:22.496" endtime="20210731 10:43:22.496"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">13215</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:22.500" level="INFO">Running command 'kill 13215 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:22.497" endtime="20210731 10:43:22.500"/>
</kw>
<status status="PASS" starttime="20210731 10:43:22.497" endtime="20210731 10:43:22.500"/>
</iter>
<status status="PASS" starttime="20210731 10:43:22.496" endtime="20210731 10:43:22.500"/>
</for>
<status status="PASS" starttime="20210731 10:43:22.496" endtime="20210731 10:43:22.500"/>
</branch>
<status status="PASS" starttime="20210731 10:43:22.496" endtime="20210731 10:43:22.500"/>
</if>
<status status="PASS" starttime="20210731 10:43:22.482" endtime="20210731 10:43:22.501"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:22.502" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:22.501" endtime="20210731 10:43:22.502"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:22.502" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:22.502" endtime="20210731 10:43:22.502"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:22.503" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:22.502" endtime="20210731 10:43:22.503"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:22.503" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:22.503" endtime="20210731 10:43:22.503"/>
</kw>
<msg timestamp="20210731 10:43:22.503" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:22.502" endtime="20210731 10:43:22.503"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:22.509" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:22.503" endtime="20210731 10:43:22.512"/>
</kw>
<status status="PASS" starttime="20210731 10:43:22.501" endtime="20210731 10:43:22.512"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:43:22.513" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:43:22.513" endtime="20210731 10:43:22.517"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:43:24.019" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:43:22.518" endtime="20210731 10:43:24.019"/>
</kw>
<status status="PASS" starttime="20210731 10:43:22.512" endtime="20210731 10:43:24.019"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:24.020" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:24.020" endtime="20210731 10:43:24.020"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:24.021" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:24.020" endtime="20210731 10:43:24.021"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:24.021" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:24.021" endtime="20210731 10:43:24.021"/>
</kw>
<msg timestamp="20210731 10:43:24.021" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:24.020" endtime="20210731 10:43:24.021"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:43:24.022" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:43:24.021" endtime="20210731 10:43:24.023"/>
</kw>
<status status="PASS" starttime="20210731 10:43:24.019" endtime="20210731 10:43:24.023"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:43:24.024" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:43:24.024" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:43:24.024" endtime="20210731 10:43:24.025"/>
</kw>
<status status="PASS" starttime="20210731 10:43:24.023" endtime="20210731 10:43:24.025"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:43:24.026" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:43:24.026" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:43:24.026" endtime="20210731 10:43:24.026"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:43:24.027" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:43:24.026" endtime="20210731 10:43:24.027"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:24.027" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:24.027" endtime="20210731 10:43:24.027"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:24.027" endtime="20210731 10:43:24.028"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:24.028" endtime="20210731 10:43:24.028"/>
</kw>
<status status="PASS" starttime="20210731 10:43:24.027" endtime="20210731 10:43:24.028"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:24.029" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:24.028" endtime="20210731 10:43:24.029"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:24.029" endtime="20210731 10:43:24.030"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:24.030" endtime="20210731 10:43:24.030"/>
</kw>
<status status="PASS" starttime="20210731 10:43:24.028" endtime="20210731 10:43:24.030"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:24.030" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:24.030" endtime="20210731 10:43:24.030"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:24.030" endtime="20210731 10:43:24.031"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:24.031" endtime="20210731 10:43:24.031"/>
</kw>
<status status="PASS" starttime="20210731 10:43:24.030" endtime="20210731 10:43:24.032"/>
</iter>
<status status="PASS" starttime="20210731 10:43:24.027" endtime="20210731 10:43:24.032"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:43:24.032" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:43:24.032" endtime="20210731 10:43:24.032"/>
</kw>
<status status="PASS" starttime="20210731 10:43:24.026" endtime="20210731 10:43:24.032"/>
</kw>
<status status="PASS" starttime="20210731 10:43:22.481" endtime="20210731 10:43:24.032"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdefghjklmnprstoöuüvyz</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:24.034" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:43:24.033" endtime="20210731 10:43:24.034"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:24.034" level="INFO">${payload} = {'password': 'abcdefghjklmnprstoöuüvyz'}</msg>
<status status="PASS" starttime="20210731 10:43:24.034" endtime="20210731 10:43:24.034"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:24.047" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:24.047" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:24.035" endtime="20210731 10:43:24.047"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:24.048" endtime="20210731 10:43:24.048"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:24.048" endtime="20210731 10:43:24.048"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:24.034" endtime="20210731 10:43:24.048"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:24.034" endtime="20210731 10:43:24.048"/>
</for>
<status status="FAIL" starttime="20210731 10:43:24.033" endtime="20210731 10:43:24.048"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:24.033" endtime="20210731 10:43:24.048"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdefghjklmnprstoöuüvyz</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:24.049" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:43:24.049" endtime="20210731 10:43:24.049"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:24.049" level="INFO">${payload} = {'password': 'abcdefghjklmnprstoöuüvyz'}</msg>
<status status="PASS" starttime="20210731 10:43:24.049" endtime="20210731 10:43:24.049"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:24.054" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:24.054" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:24.050" endtime="20210731 10:43:24.054"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:24.054" endtime="20210731 10:43:24.054"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:24.054" endtime="20210731 10:43:24.054"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:24.050" endtime="20210731 10:43:24.054"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:24.050" endtime="20210731 10:43:24.055"/>
</for>
<status status="FAIL" starttime="20210731 10:43:24.048" endtime="20210731 10:43:24.055"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:24.048" endtime="20210731 10:43:24.055"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdefghjklmnprstoöuüvyz</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:24.056" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:43:24.055" endtime="20210731 10:43:24.056"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:24.056" level="INFO">${payload} = {'password': 'abcdefghjklmnprstoöuüvyz'}</msg>
<status status="PASS" starttime="20210731 10:43:24.056" endtime="20210731 10:43:24.056"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:24.061" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:24.061" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:24.056" endtime="20210731 10:43:24.061"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:24.061" endtime="20210731 10:43:24.061"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:24.061" endtime="20210731 10:43:24.061"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:24.056" endtime="20210731 10:43:24.061"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:24.056" endtime="20210731 10:43:24.061"/>
</for>
<status status="FAIL" starttime="20210731 10:43:24.055" endtime="20210731 10:43:24.061"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:24.055" endtime="20210731 10:43:24.062"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:24.032" endtime="20210731 10:43:24.062"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:24.065" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:24.074" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:24.074" level="INFO">${pids} = 13238
13245
13249</msg>
<status status="PASS" starttime="20210731 10:43:24.063" endtime="20210731 10:43:24.074"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:24.075" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:24.074" endtime="20210731 10:43:24.075"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:24.076" level="INFO">${pids} = ['13238', '13245', '13249']</msg>
<status status="PASS" starttime="20210731 10:43:24.075" endtime="20210731 10:43:24.076"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">13238</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:24.080" level="INFO">Running command 'kill 13238 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:24.076" endtime="20210731 10:43:24.080"/>
</kw>
<status status="PASS" starttime="20210731 10:43:24.076" endtime="20210731 10:43:24.080"/>
</iter>
<iter>
<var name="${pid}">13245</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:24.083" level="INFO">Running command 'kill 13245 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:24.081" endtime="20210731 10:43:24.084"/>
</kw>
<status status="PASS" starttime="20210731 10:43:24.081" endtime="20210731 10:43:24.084"/>
</iter>
<iter>
<var name="${pid}">13249</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:24.087" level="INFO">Running command 'kill 13249 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:24.084" endtime="20210731 10:43:24.088"/>
</kw>
<status status="PASS" starttime="20210731 10:43:24.084" endtime="20210731 10:43:24.088"/>
</iter>
<status status="PASS" starttime="20210731 10:43:24.076" endtime="20210731 10:43:24.088"/>
</for>
<status status="PASS" starttime="20210731 10:43:24.075" endtime="20210731 10:43:24.088"/>
</branch>
<status status="PASS" starttime="20210731 10:43:24.075" endtime="20210731 10:43:24.088"/>
</if>
<status status="PASS" starttime="20210731 10:43:24.062" endtime="20210731 10:43:24.089"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcdefghjklmnprstoöuüvyz'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:43:22.481" endtime="20210731 10:43:24.089">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t48" name="With Each Valid Token, Updating Password Of Each System User With ABCDEFG Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:24.096" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:24.105" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:24.105" level="INFO">${pids} = 13278</msg>
<status status="PASS" starttime="20210731 10:43:24.093" endtime="20210731 10:43:24.105"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:24.106" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:24.105" endtime="20210731 10:43:24.106"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:24.107" level="INFO">${pids} = ['13278']</msg>
<status status="PASS" starttime="20210731 10:43:24.107" endtime="20210731 10:43:24.107"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">13278</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:24.111" level="INFO">Running command 'kill 13278 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:24.108" endtime="20210731 10:43:24.111"/>
</kw>
<status status="PASS" starttime="20210731 10:43:24.107" endtime="20210731 10:43:24.111"/>
</iter>
<status status="PASS" starttime="20210731 10:43:24.107" endtime="20210731 10:43:24.111"/>
</for>
<status status="PASS" starttime="20210731 10:43:24.106" endtime="20210731 10:43:24.112"/>
</branch>
<status status="PASS" starttime="20210731 10:43:24.106" endtime="20210731 10:43:24.112"/>
</if>
<status status="PASS" starttime="20210731 10:43:24.092" endtime="20210731 10:43:24.112"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:24.113" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:24.113" endtime="20210731 10:43:24.113"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:24.114" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:24.113" endtime="20210731 10:43:24.114"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:24.114" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:24.114" endtime="20210731 10:43:24.114"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:24.115" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:24.114" endtime="20210731 10:43:24.115"/>
</kw>
<msg timestamp="20210731 10:43:24.116" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:24.113" endtime="20210731 10:43:24.116"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:24.120" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:24.116" endtime="20210731 10:43:24.122"/>
</kw>
<status status="PASS" starttime="20210731 10:43:24.112" endtime="20210731 10:43:24.122"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:43:24.124" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:43:24.123" endtime="20210731 10:43:24.127"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:43:25.630" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:43:24.128" endtime="20210731 10:43:25.630"/>
</kw>
<status status="PASS" starttime="20210731 10:43:24.122" endtime="20210731 10:43:25.630"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:25.631" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:25.631" endtime="20210731 10:43:25.631"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:25.632" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:25.632" endtime="20210731 10:43:25.632"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:25.632" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:25.632" endtime="20210731 10:43:25.632"/>
</kw>
<msg timestamp="20210731 10:43:25.633" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:25.631" endtime="20210731 10:43:25.633"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:43:25.633" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:43:25.633" endtime="20210731 10:43:25.634"/>
</kw>
<status status="PASS" starttime="20210731 10:43:25.630" endtime="20210731 10:43:25.634"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:43:25.635" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:43:25.635" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:43:25.635" endtime="20210731 10:43:25.635"/>
</kw>
<status status="PASS" starttime="20210731 10:43:25.635" endtime="20210731 10:43:25.635"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:43:25.636" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:43:25.636" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:43:25.636" endtime="20210731 10:43:25.636"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:43:25.637" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:43:25.636" endtime="20210731 10:43:25.637"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:25.637" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:25.637" endtime="20210731 10:43:25.637"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:25.637" endtime="20210731 10:43:25.638"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:25.638" endtime="20210731 10:43:25.638"/>
</kw>
<status status="PASS" starttime="20210731 10:43:25.637" endtime="20210731 10:43:25.639"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:25.639" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:25.639" endtime="20210731 10:43:25.639"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:25.640" endtime="20210731 10:43:25.642"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:25.643" endtime="20210731 10:43:25.643"/>
</kw>
<status status="PASS" starttime="20210731 10:43:25.639" endtime="20210731 10:43:25.643"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:25.643" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:25.643" endtime="20210731 10:43:25.643"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:25.643" endtime="20210731 10:43:25.644"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:25.644" endtime="20210731 10:43:25.644"/>
</kw>
<status status="PASS" starttime="20210731 10:43:25.643" endtime="20210731 10:43:25.644"/>
</iter>
<status status="PASS" starttime="20210731 10:43:25.637" endtime="20210731 10:43:25.644"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:43:25.645" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:43:25.645" endtime="20210731 10:43:25.645"/>
</kw>
<status status="PASS" starttime="20210731 10:43:25.636" endtime="20210731 10:43:25.645"/>
</kw>
<status status="PASS" starttime="20210731 10:43:24.092" endtime="20210731 10:43:25.645"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCDEFG</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:25.646" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:43:25.646" endtime="20210731 10:43:25.646"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:25.647" level="INFO">${payload} = {'password': 'ABCDEFG'}</msg>
<status status="PASS" starttime="20210731 10:43:25.646" endtime="20210731 10:43:25.647"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:25.656" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:25.656" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:25.647" endtime="20210731 10:43:25.656"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:25.656" endtime="20210731 10:43:25.656"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:25.656" endtime="20210731 10:43:25.657"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:25.647" endtime="20210731 10:43:25.657"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:25.647" endtime="20210731 10:43:25.657"/>
</for>
<status status="FAIL" starttime="20210731 10:43:25.646" endtime="20210731 10:43:25.657"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:25.645" endtime="20210731 10:43:25.657"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCDEFG</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:25.658" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:43:25.658" endtime="20210731 10:43:25.658"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:25.658" level="INFO">${payload} = {'password': 'ABCDEFG'}</msg>
<status status="PASS" starttime="20210731 10:43:25.658" endtime="20210731 10:43:25.658"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:25.663" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:25.663" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:25.659" endtime="20210731 10:43:25.663"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:25.663" endtime="20210731 10:43:25.663"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:25.663" endtime="20210731 10:43:25.663"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:25.658" endtime="20210731 10:43:25.663"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:25.658" endtime="20210731 10:43:25.664"/>
</for>
<status status="FAIL" starttime="20210731 10:43:25.657" endtime="20210731 10:43:25.664"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:25.657" endtime="20210731 10:43:25.665"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCDEFG</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:25.666" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:43:25.665" endtime="20210731 10:43:25.666"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:25.666" level="INFO">${payload} = {'password': 'ABCDEFG'}</msg>
<status status="PASS" starttime="20210731 10:43:25.666" endtime="20210731 10:43:25.666"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:25.670" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:25.670" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:25.666" endtime="20210731 10:43:25.670"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:25.670" endtime="20210731 10:43:25.670"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:25.670" endtime="20210731 10:43:25.670"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:25.666" endtime="20210731 10:43:25.670"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:25.666" endtime="20210731 10:43:25.671"/>
</for>
<status status="FAIL" starttime="20210731 10:43:25.665" endtime="20210731 10:43:25.671"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:25.665" endtime="20210731 10:43:25.671"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:25.645" endtime="20210731 10:43:25.671"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:25.676" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:25.684" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:25.684" level="INFO">${pids} = 13301
13308
13312</msg>
<status status="PASS" starttime="20210731 10:43:25.672" endtime="20210731 10:43:25.684"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:25.685" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:25.685" endtime="20210731 10:43:25.685"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:25.686" level="INFO">${pids} = ['13301', '13308', '13312']</msg>
<status status="PASS" starttime="20210731 10:43:25.686" endtime="20210731 10:43:25.686"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">13301</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:25.690" level="INFO">Running command 'kill 13301 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:25.686" endtime="20210731 10:43:25.690"/>
</kw>
<status status="PASS" starttime="20210731 10:43:25.686" endtime="20210731 10:43:25.690"/>
</iter>
<iter>
<var name="${pid}">13308</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:25.694" level="INFO">Running command 'kill 13308 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:25.691" endtime="20210731 10:43:25.696"/>
</kw>
<status status="PASS" starttime="20210731 10:43:25.690" endtime="20210731 10:43:25.696"/>
</iter>
<iter>
<var name="${pid}">13312</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:25.699" level="INFO">Running command 'kill 13312 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:25.697" endtime="20210731 10:43:25.700"/>
</kw>
<status status="PASS" starttime="20210731 10:43:25.696" endtime="20210731 10:43:25.700"/>
</iter>
<status status="PASS" starttime="20210731 10:43:25.686" endtime="20210731 10:43:25.700"/>
</for>
<status status="PASS" starttime="20210731 10:43:25.686" endtime="20210731 10:43:25.700"/>
</branch>
<status status="PASS" starttime="20210731 10:43:25.685" endtime="20210731 10:43:25.700"/>
</if>
<status status="PASS" starttime="20210731 10:43:25.671" endtime="20210731 10:43:25.700"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABCDEFG'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:43:24.090" endtime="20210731 10:43:25.700">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t49" name="With Each Valid Token, Updating Password Of Each System User With ABCDEFGH Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:25.714" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:25.723" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:25.723" level="INFO">${pids} = 13341</msg>
<status status="PASS" starttime="20210731 10:43:25.711" endtime="20210731 10:43:25.723"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:25.724" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:25.723" endtime="20210731 10:43:25.724"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:25.724" level="INFO">${pids} = ['13341']</msg>
<status status="PASS" starttime="20210731 10:43:25.724" endtime="20210731 10:43:25.724"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">13341</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:25.728" level="INFO">Running command 'kill 13341 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:25.725" endtime="20210731 10:43:25.728"/>
</kw>
<status status="PASS" starttime="20210731 10:43:25.725" endtime="20210731 10:43:25.728"/>
</iter>
<status status="PASS" starttime="20210731 10:43:25.724" endtime="20210731 10:43:25.728"/>
</for>
<status status="PASS" starttime="20210731 10:43:25.724" endtime="20210731 10:43:25.728"/>
</branch>
<status status="PASS" starttime="20210731 10:43:25.724" endtime="20210731 10:43:25.728"/>
</if>
<status status="PASS" starttime="20210731 10:43:25.711" endtime="20210731 10:43:25.728"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:25.729" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:25.729" endtime="20210731 10:43:25.729"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:25.730" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:25.730" endtime="20210731 10:43:25.730"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:25.730" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:25.730" endtime="20210731 10:43:25.730"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:25.730" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:25.730" endtime="20210731 10:43:25.730"/>
</kw>
<msg timestamp="20210731 10:43:25.731" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:25.729" endtime="20210731 10:43:25.731"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:25.733" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:25.731" endtime="20210731 10:43:25.735"/>
</kw>
<status status="PASS" starttime="20210731 10:43:25.728" endtime="20210731 10:43:25.735"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:43:25.736" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:43:25.736" endtime="20210731 10:43:25.741"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:43:27.244" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:43:25.742" endtime="20210731 10:43:27.245"/>
</kw>
<status status="PASS" starttime="20210731 10:43:25.736" endtime="20210731 10:43:27.245"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:27.246" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:27.246" endtime="20210731 10:43:27.246"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:27.247" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:27.246" endtime="20210731 10:43:27.247"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:27.247" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:27.247" endtime="20210731 10:43:27.248"/>
</kw>
<msg timestamp="20210731 10:43:27.248" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:27.246" endtime="20210731 10:43:27.248"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:43:27.248" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:43:27.248" endtime="20210731 10:43:27.249"/>
</kw>
<status status="PASS" starttime="20210731 10:43:27.245" endtime="20210731 10:43:27.249"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:43:27.249" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:43:27.249" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:43:27.249" endtime="20210731 10:43:27.249"/>
</kw>
<status status="PASS" starttime="20210731 10:43:27.249" endtime="20210731 10:43:27.250"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:43:27.250" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:43:27.250" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:43:27.250" endtime="20210731 10:43:27.250"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:43:27.251" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:43:27.250" endtime="20210731 10:43:27.251"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:27.251" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:27.251" endtime="20210731 10:43:27.251"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:27.251" endtime="20210731 10:43:27.252"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:27.252" endtime="20210731 10:43:27.252"/>
</kw>
<status status="PASS" starttime="20210731 10:43:27.251" endtime="20210731 10:43:27.252"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:27.253" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:27.253" endtime="20210731 10:43:27.253"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:27.253" endtime="20210731 10:43:27.254"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:27.254" endtime="20210731 10:43:27.254"/>
</kw>
<status status="PASS" starttime="20210731 10:43:27.252" endtime="20210731 10:43:27.254"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:27.254" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:27.254" endtime="20210731 10:43:27.254"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:27.254" endtime="20210731 10:43:27.255"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:27.255" endtime="20210731 10:43:27.255"/>
</kw>
<status status="PASS" starttime="20210731 10:43:27.254" endtime="20210731 10:43:27.256"/>
</iter>
<status status="PASS" starttime="20210731 10:43:27.251" endtime="20210731 10:43:27.256"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:43:27.256" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:43:27.256" endtime="20210731 10:43:27.256"/>
</kw>
<status status="PASS" starttime="20210731 10:43:27.250" endtime="20210731 10:43:27.256"/>
</kw>
<status status="PASS" starttime="20210731 10:43:25.708" endtime="20210731 10:43:27.256"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCDEFGH</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:27.258" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:43:27.257" endtime="20210731 10:43:27.258"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:27.258" level="INFO">${payload} = {'password': 'ABCDEFGH'}</msg>
<status status="PASS" starttime="20210731 10:43:27.258" endtime="20210731 10:43:27.258"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:27.268" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:27.268" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:27.258" endtime="20210731 10:43:27.268"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:27.268" endtime="20210731 10:43:27.268"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:27.268" endtime="20210731 10:43:27.268"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:27.258" endtime="20210731 10:43:27.268"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:27.258" endtime="20210731 10:43:27.268"/>
</for>
<status status="FAIL" starttime="20210731 10:43:27.257" endtime="20210731 10:43:27.269"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:27.257" endtime="20210731 10:43:27.269"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCDEFGH</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:27.270" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:43:27.270" endtime="20210731 10:43:27.270"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:27.270" level="INFO">${payload} = {'password': 'ABCDEFGH'}</msg>
<status status="PASS" starttime="20210731 10:43:27.270" endtime="20210731 10:43:27.270"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:27.275" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:27.276" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:27.271" endtime="20210731 10:43:27.276"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:27.276" endtime="20210731 10:43:27.276"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:27.276" endtime="20210731 10:43:27.276"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:27.270" endtime="20210731 10:43:27.276"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:27.270" endtime="20210731 10:43:27.276"/>
</for>
<status status="FAIL" starttime="20210731 10:43:27.269" endtime="20210731 10:43:27.276"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:27.269" endtime="20210731 10:43:27.276"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCDEFGH</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:27.278" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:43:27.277" endtime="20210731 10:43:27.278"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:27.278" level="INFO">${payload} = {'password': 'ABCDEFGH'}</msg>
<status status="PASS" starttime="20210731 10:43:27.278" endtime="20210731 10:43:27.278"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:27.282" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:27.283" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:27.278" endtime="20210731 10:43:27.283"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:27.283" endtime="20210731 10:43:27.283"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:27.283" endtime="20210731 10:43:27.283"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:27.278" endtime="20210731 10:43:27.283"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:27.278" endtime="20210731 10:43:27.283"/>
</for>
<status status="FAIL" starttime="20210731 10:43:27.276" endtime="20210731 10:43:27.283"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:27.276" endtime="20210731 10:43:27.283"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:27.256" endtime="20210731 10:43:27.283"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:27.287" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:27.298" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:27.299" level="INFO">${pids} = 13364
13371
13382</msg>
<status status="PASS" starttime="20210731 10:43:27.284" endtime="20210731 10:43:27.299"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:27.300" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:27.299" endtime="20210731 10:43:27.300"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:27.300" level="INFO">${pids} = ['13364', '13371', '13382']</msg>
<status status="PASS" starttime="20210731 10:43:27.300" endtime="20210731 10:43:27.300"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">13364</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:27.304" level="INFO">Running command 'kill 13364 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:27.301" endtime="20210731 10:43:27.305"/>
</kw>
<status status="PASS" starttime="20210731 10:43:27.301" endtime="20210731 10:43:27.305"/>
</iter>
<iter>
<var name="${pid}">13371</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:27.309" level="INFO">Running command 'kill 13371 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:27.305" endtime="20210731 10:43:27.310"/>
</kw>
<status status="PASS" starttime="20210731 10:43:27.305" endtime="20210731 10:43:27.310"/>
</iter>
<iter>
<var name="${pid}">13382</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:27.315" level="INFO">Running command 'kill 13382 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:27.310" endtime="20210731 10:43:27.316"/>
</kw>
<status status="PASS" starttime="20210731 10:43:27.310" endtime="20210731 10:43:27.316"/>
</iter>
<status status="PASS" starttime="20210731 10:43:27.301" endtime="20210731 10:43:27.316"/>
</for>
<status status="PASS" starttime="20210731 10:43:27.300" endtime="20210731 10:43:27.316"/>
</branch>
<status status="PASS" starttime="20210731 10:43:27.300" endtime="20210731 10:43:27.316"/>
</if>
<status status="PASS" starttime="20210731 10:43:27.284" endtime="20210731 10:43:27.316"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABCDEFGH'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:43:25.701" endtime="20210731 10:43:27.316">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t50" name="With Each Valid Token, Updating Password Of Each System User With ABCDEFGHJKLMNPRSTOÖUÜVYZ Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:27.321" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:27.331" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:27.331" level="INFO">${pids} = 13411</msg>
<status status="PASS" starttime="20210731 10:43:27.318" endtime="20210731 10:43:27.331"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:27.332" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:27.331" endtime="20210731 10:43:27.332"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:27.333" level="INFO">${pids} = ['13411']</msg>
<status status="PASS" starttime="20210731 10:43:27.332" endtime="20210731 10:43:27.333"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">13411</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:27.337" level="INFO">Running command 'kill 13411 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:27.333" endtime="20210731 10:43:27.337"/>
</kw>
<status status="PASS" starttime="20210731 10:43:27.333" endtime="20210731 10:43:27.337"/>
</iter>
<status status="PASS" starttime="20210731 10:43:27.333" endtime="20210731 10:43:27.337"/>
</for>
<status status="PASS" starttime="20210731 10:43:27.332" endtime="20210731 10:43:27.337"/>
</branch>
<status status="PASS" starttime="20210731 10:43:27.332" endtime="20210731 10:43:27.337"/>
</if>
<status status="PASS" starttime="20210731 10:43:27.318" endtime="20210731 10:43:27.337"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:27.339" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:27.338" endtime="20210731 10:43:27.339"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:27.339" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:27.339" endtime="20210731 10:43:27.339"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:27.340" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:27.339" endtime="20210731 10:43:27.340"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:27.341" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:27.340" endtime="20210731 10:43:27.341"/>
</kw>
<msg timestamp="20210731 10:43:27.341" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:27.339" endtime="20210731 10:43:27.342"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:27.345" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:27.342" endtime="20210731 10:43:27.347"/>
</kw>
<status status="PASS" starttime="20210731 10:43:27.338" endtime="20210731 10:43:27.348"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:43:27.349" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:43:27.348" endtime="20210731 10:43:27.353"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:43:28.855" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:43:27.353" endtime="20210731 10:43:28.856"/>
</kw>
<status status="PASS" starttime="20210731 10:43:27.348" endtime="20210731 10:43:28.856"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:28.858" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:28.857" endtime="20210731 10:43:28.858"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:28.858" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:28.858" endtime="20210731 10:43:28.858"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:28.858" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:28.858" endtime="20210731 10:43:28.858"/>
</kw>
<msg timestamp="20210731 10:43:28.858" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:28.857" endtime="20210731 10:43:28.858"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:43:28.859" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:43:28.859" endtime="20210731 10:43:28.859"/>
</kw>
<status status="PASS" starttime="20210731 10:43:28.857" endtime="20210731 10:43:28.860"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:43:28.860" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:43:28.860" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:43:28.860" endtime="20210731 10:43:28.861"/>
</kw>
<status status="PASS" starttime="20210731 10:43:28.860" endtime="20210731 10:43:28.861"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:43:28.861" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:43:28.861" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:43:28.861" endtime="20210731 10:43:28.861"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:43:28.862" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:43:28.861" endtime="20210731 10:43:28.862"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:28.862" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:28.862" endtime="20210731 10:43:28.862"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:28.862" endtime="20210731 10:43:28.863"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:28.863" endtime="20210731 10:43:28.863"/>
</kw>
<status status="PASS" starttime="20210731 10:43:28.862" endtime="20210731 10:43:28.863"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:28.865" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:28.864" endtime="20210731 10:43:28.865"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:28.865" endtime="20210731 10:43:28.866"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:28.866" endtime="20210731 10:43:28.866"/>
</kw>
<status status="PASS" starttime="20210731 10:43:28.863" endtime="20210731 10:43:28.866"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:28.866" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:28.866" endtime="20210731 10:43:28.866"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:28.867" endtime="20210731 10:43:28.867"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:28.867" endtime="20210731 10:43:28.868"/>
</kw>
<status status="PASS" starttime="20210731 10:43:28.866" endtime="20210731 10:43:28.868"/>
</iter>
<status status="PASS" starttime="20210731 10:43:28.862" endtime="20210731 10:43:28.868"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:43:28.868" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:43:28.868" endtime="20210731 10:43:28.868"/>
</kw>
<status status="PASS" starttime="20210731 10:43:28.861" endtime="20210731 10:43:28.868"/>
</kw>
<status status="PASS" starttime="20210731 10:43:27.318" endtime="20210731 10:43:28.868"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCDEFGHJKLMNPRSTOÖUÜVYZ</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:28.869" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:43:28.869" endtime="20210731 10:43:28.869"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:28.870" level="INFO">${payload} = {'password': 'ABCDEFGHJKLMNPRSTOÖUÜVYZ'}</msg>
<status status="PASS" starttime="20210731 10:43:28.870" endtime="20210731 10:43:28.870"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:28.880" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:28.881" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:28.870" endtime="20210731 10:43:28.881"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:28.881" endtime="20210731 10:43:28.881"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:28.881" endtime="20210731 10:43:28.881"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:28.870" endtime="20210731 10:43:28.881"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:28.870" endtime="20210731 10:43:28.881"/>
</for>
<status status="FAIL" starttime="20210731 10:43:28.869" endtime="20210731 10:43:28.881"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:28.869" endtime="20210731 10:43:28.881"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCDEFGHJKLMNPRSTOÖUÜVYZ</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:28.883" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:43:28.882" endtime="20210731 10:43:28.883"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:28.883" level="INFO">${payload} = {'password': 'ABCDEFGHJKLMNPRSTOÖUÜVYZ'}</msg>
<status status="PASS" starttime="20210731 10:43:28.883" endtime="20210731 10:43:28.883"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:28.888" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:28.888" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:28.883" endtime="20210731 10:43:28.889"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:28.890" endtime="20210731 10:43:28.890"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:28.890" endtime="20210731 10:43:28.890"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:28.883" endtime="20210731 10:43:28.890"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:28.883" endtime="20210731 10:43:28.890"/>
</for>
<status status="FAIL" starttime="20210731 10:43:28.882" endtime="20210731 10:43:28.890"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:28.881" endtime="20210731 10:43:28.890"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCDEFGHJKLMNPRSTOÖUÜVYZ</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:28.891" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:43:28.891" endtime="20210731 10:43:28.891"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:28.892" level="INFO">${payload} = {'password': 'ABCDEFGHJKLMNPRSTOÖUÜVYZ'}</msg>
<status status="PASS" starttime="20210731 10:43:28.891" endtime="20210731 10:43:28.892"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:28.896" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:28.896" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:28.892" endtime="20210731 10:43:28.896"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:28.897" endtime="20210731 10:43:28.897"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:28.897" endtime="20210731 10:43:28.897"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:28.892" endtime="20210731 10:43:28.897"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:28.892" endtime="20210731 10:43:28.897"/>
</for>
<status status="FAIL" starttime="20210731 10:43:28.890" endtime="20210731 10:43:28.897"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:28.890" endtime="20210731 10:43:28.897"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:28.868" endtime="20210731 10:43:28.897"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:28.901" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:28.910" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:28.910" level="INFO">${pids} = 13434
13441
13446</msg>
<status status="PASS" starttime="20210731 10:43:28.898" endtime="20210731 10:43:28.910"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:28.911" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:28.911" endtime="20210731 10:43:28.911"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:28.912" level="INFO">${pids} = ['13434', '13441', '13446']</msg>
<status status="PASS" starttime="20210731 10:43:28.912" endtime="20210731 10:43:28.912"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">13434</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:28.916" level="INFO">Running command 'kill 13434 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:28.912" endtime="20210731 10:43:28.916"/>
</kw>
<status status="PASS" starttime="20210731 10:43:28.912" endtime="20210731 10:43:28.916"/>
</iter>
<iter>
<var name="${pid}">13441</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:28.919" level="INFO">Running command 'kill 13441 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:28.916" endtime="20210731 10:43:28.921"/>
</kw>
<status status="PASS" starttime="20210731 10:43:28.916" endtime="20210731 10:43:28.921"/>
</iter>
<iter>
<var name="${pid}">13446</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:28.925" level="INFO">Running command 'kill 13446 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:28.922" endtime="20210731 10:43:28.926"/>
</kw>
<status status="PASS" starttime="20210731 10:43:28.921" endtime="20210731 10:43:28.926"/>
</iter>
<status status="PASS" starttime="20210731 10:43:28.912" endtime="20210731 10:43:28.926"/>
</for>
<status status="PASS" starttime="20210731 10:43:28.911" endtime="20210731 10:43:28.926"/>
</branch>
<status status="PASS" starttime="20210731 10:43:28.911" endtime="20210731 10:43:28.926"/>
</if>
<status status="PASS" starttime="20210731 10:43:28.898" endtime="20210731 10:43:28.926"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABCDEFGHJKLMNPRSTOÖUÜVYZ'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:43:27.317" endtime="20210731 10:43:28.927">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t51" name="With Each Valid Token, Updating Password Of Each System User With 0123456 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:28.934" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:28.944" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:28.944" level="INFO">${pids} = 13475</msg>
<status status="PASS" starttime="20210731 10:43:28.930" endtime="20210731 10:43:28.944"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:28.944" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:28.944" endtime="20210731 10:43:28.945"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:28.945" level="INFO">${pids} = ['13475']</msg>
<status status="PASS" starttime="20210731 10:43:28.945" endtime="20210731 10:43:28.945"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">13475</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:28.949" level="INFO">Running command 'kill 13475 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:28.946" endtime="20210731 10:43:28.950"/>
</kw>
<status status="PASS" starttime="20210731 10:43:28.946" endtime="20210731 10:43:28.950"/>
</iter>
<status status="PASS" starttime="20210731 10:43:28.945" endtime="20210731 10:43:28.950"/>
</for>
<status status="PASS" starttime="20210731 10:43:28.945" endtime="20210731 10:43:28.950"/>
</branch>
<status status="PASS" starttime="20210731 10:43:28.945" endtime="20210731 10:43:28.950"/>
</if>
<status status="PASS" starttime="20210731 10:43:28.929" endtime="20210731 10:43:28.950"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:28.951" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:28.951" endtime="20210731 10:43:28.951"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:28.952" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:28.951" endtime="20210731 10:43:28.952"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:28.952" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:28.952" endtime="20210731 10:43:28.952"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:28.971" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:28.952" endtime="20210731 10:43:28.971"/>
</kw>
<msg timestamp="20210731 10:43:28.971" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:28.951" endtime="20210731 10:43:28.971"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:28.975" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:28.971" endtime="20210731 10:43:28.977"/>
</kw>
<status status="PASS" starttime="20210731 10:43:28.950" endtime="20210731 10:43:28.977"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:43:28.978" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:43:28.978" endtime="20210731 10:43:28.982"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:43:30.486" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:43:28.982" endtime="20210731 10:43:30.486"/>
</kw>
<status status="PASS" starttime="20210731 10:43:28.977" endtime="20210731 10:43:30.487"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:30.488" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:30.488" endtime="20210731 10:43:30.488"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:30.488" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:30.488" endtime="20210731 10:43:30.488"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:30.489" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:30.488" endtime="20210731 10:43:30.489"/>
</kw>
<msg timestamp="20210731 10:43:30.489" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:30.487" endtime="20210731 10:43:30.489"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:43:30.490" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:43:30.489" endtime="20210731 10:43:30.490"/>
</kw>
<status status="PASS" starttime="20210731 10:43:30.487" endtime="20210731 10:43:30.490"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:43:30.491" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:43:30.491" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:43:30.491" endtime="20210731 10:43:30.491"/>
</kw>
<status status="PASS" starttime="20210731 10:43:30.491" endtime="20210731 10:43:30.491"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:43:30.492" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:43:30.492" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:43:30.492" endtime="20210731 10:43:30.492"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:43:30.492" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:43:30.492" endtime="20210731 10:43:30.492"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:30.493" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:30.493" endtime="20210731 10:43:30.493"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:30.493" endtime="20210731 10:43:30.494"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:30.494" endtime="20210731 10:43:30.494"/>
</kw>
<status status="PASS" starttime="20210731 10:43:30.493" endtime="20210731 10:43:30.494"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:30.495" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:30.494" endtime="20210731 10:43:30.495"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:30.495" endtime="20210731 10:43:30.495"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:30.495" endtime="20210731 10:43:30.496"/>
</kw>
<status status="PASS" starttime="20210731 10:43:30.494" endtime="20210731 10:43:30.496"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:30.496" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:30.496" endtime="20210731 10:43:30.496"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:30.496" endtime="20210731 10:43:30.497"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:30.497" endtime="20210731 10:43:30.497"/>
</kw>
<status status="PASS" starttime="20210731 10:43:30.496" endtime="20210731 10:43:30.497"/>
</iter>
<status status="PASS" starttime="20210731 10:43:30.493" endtime="20210731 10:43:30.497"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:43:30.497" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:43:30.497" endtime="20210731 10:43:30.497"/>
</kw>
<status status="PASS" starttime="20210731 10:43:30.491" endtime="20210731 10:43:30.498"/>
</kw>
<status status="PASS" starttime="20210731 10:43:28.928" endtime="20210731 10:43:30.498"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=0123456</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:30.499" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:43:30.498" endtime="20210731 10:43:30.499"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:30.499" level="INFO">${payload} = {'password': '0123456'}</msg>
<status status="PASS" starttime="20210731 10:43:30.499" endtime="20210731 10:43:30.499"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:30.510" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:30.510" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:30.500" endtime="20210731 10:43:30.510"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:30.511" endtime="20210731 10:43:30.511"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:30.511" endtime="20210731 10:43:30.511"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:30.500" endtime="20210731 10:43:30.511"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:30.500" endtime="20210731 10:43:30.511"/>
</for>
<status status="FAIL" starttime="20210731 10:43:30.498" endtime="20210731 10:43:30.511"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:30.498" endtime="20210731 10:43:30.511"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=0123456</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:30.512" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:43:30.512" endtime="20210731 10:43:30.512"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:30.512" level="INFO">${payload} = {'password': '0123456'}</msg>
<status status="PASS" starttime="20210731 10:43:30.512" endtime="20210731 10:43:30.512"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:30.516" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:30.517" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:30.513" endtime="20210731 10:43:30.517"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:30.517" endtime="20210731 10:43:30.517"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:30.517" endtime="20210731 10:43:30.517"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:30.513" endtime="20210731 10:43:30.517"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:30.513" endtime="20210731 10:43:30.517"/>
</for>
<status status="FAIL" starttime="20210731 10:43:30.511" endtime="20210731 10:43:30.517"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:30.511" endtime="20210731 10:43:30.517"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=0123456</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:30.518" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:43:30.518" endtime="20210731 10:43:30.518"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:30.519" level="INFO">${payload} = {'password': '0123456'}</msg>
<status status="PASS" starttime="20210731 10:43:30.518" endtime="20210731 10:43:30.519"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:30.522" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:30.523" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:30.519" endtime="20210731 10:43:30.523"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:30.523" endtime="20210731 10:43:30.523"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:30.524" endtime="20210731 10:43:30.524"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:30.519" endtime="20210731 10:43:30.524"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:30.519" endtime="20210731 10:43:30.524"/>
</for>
<status status="FAIL" starttime="20210731 10:43:30.517" endtime="20210731 10:43:30.524"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:30.517" endtime="20210731 10:43:30.524"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:30.498" endtime="20210731 10:43:30.524"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:30.528" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:30.536" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:30.537" level="INFO">${pids} = 13498
13505
13512</msg>
<status status="PASS" starttime="20210731 10:43:30.525" endtime="20210731 10:43:30.537"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:30.538" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:30.537" endtime="20210731 10:43:30.538"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:30.539" level="INFO">${pids} = ['13498', '13505', '13512']</msg>
<status status="PASS" starttime="20210731 10:43:30.538" endtime="20210731 10:43:30.539"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">13498</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:30.543" level="INFO">Running command 'kill 13498 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:30.539" endtime="20210731 10:43:30.544"/>
</kw>
<status status="PASS" starttime="20210731 10:43:30.539" endtime="20210731 10:43:30.544"/>
</iter>
<iter>
<var name="${pid}">13505</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:30.547" level="INFO">Running command 'kill 13505 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:30.544" endtime="20210731 10:43:30.548"/>
</kw>
<status status="PASS" starttime="20210731 10:43:30.544" endtime="20210731 10:43:30.548"/>
</iter>
<iter>
<var name="${pid}">13512</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:30.551" level="INFO">Running command 'kill 13512 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:30.548" endtime="20210731 10:43:30.551"/>
</kw>
<status status="PASS" starttime="20210731 10:43:30.548" endtime="20210731 10:43:30.551"/>
</iter>
<status status="PASS" starttime="20210731 10:43:30.539" endtime="20210731 10:43:30.551"/>
</for>
<status status="PASS" starttime="20210731 10:43:30.538" endtime="20210731 10:43:30.551"/>
</branch>
<status status="PASS" starttime="20210731 10:43:30.538" endtime="20210731 10:43:30.551"/>
</if>
<status status="PASS" starttime="20210731 10:43:30.524" endtime="20210731 10:43:30.552"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": '0123456'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:43:28.927" endtime="20210731 10:43:30.552">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t52" name="With Each Valid Token, Updating Password Of Each System User With 01234567 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:30.560" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:30.567" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:30.567" level="INFO">${pids} = 13541</msg>
<status status="PASS" starttime="20210731 10:43:30.553" endtime="20210731 10:43:30.567"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:30.568" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:30.567" endtime="20210731 10:43:30.568"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:30.568" level="INFO">${pids} = ['13541']</msg>
<status status="PASS" starttime="20210731 10:43:30.568" endtime="20210731 10:43:30.568"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">13541</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:30.572" level="INFO">Running command 'kill 13541 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:30.569" endtime="20210731 10:43:30.572"/>
</kw>
<status status="PASS" starttime="20210731 10:43:30.569" endtime="20210731 10:43:30.572"/>
</iter>
<status status="PASS" starttime="20210731 10:43:30.568" endtime="20210731 10:43:30.572"/>
</for>
<status status="PASS" starttime="20210731 10:43:30.568" endtime="20210731 10:43:30.572"/>
</branch>
<status status="PASS" starttime="20210731 10:43:30.568" endtime="20210731 10:43:30.572"/>
</if>
<status status="PASS" starttime="20210731 10:43:30.553" endtime="20210731 10:43:30.573"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:30.574" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:30.574" endtime="20210731 10:43:30.574"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:30.576" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:30.575" endtime="20210731 10:43:30.576"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:30.576" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:30.576" endtime="20210731 10:43:30.576"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:30.577" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:30.576" endtime="20210731 10:43:30.577"/>
</kw>
<msg timestamp="20210731 10:43:30.577" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:30.575" endtime="20210731 10:43:30.577"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:30.580" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:30.577" endtime="20210731 10:43:30.582"/>
</kw>
<status status="PASS" starttime="20210731 10:43:30.573" endtime="20210731 10:43:30.582"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:43:30.583" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:43:30.583" endtime="20210731 10:43:30.587"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:43:32.088" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:43:30.587" endtime="20210731 10:43:32.088"/>
</kw>
<status status="PASS" starttime="20210731 10:43:30.582" endtime="20210731 10:43:32.089"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:32.091" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:32.090" endtime="20210731 10:43:32.091"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:32.091" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:32.091" endtime="20210731 10:43:32.091"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:32.092" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:32.091" endtime="20210731 10:43:32.092"/>
</kw>
<msg timestamp="20210731 10:43:32.092" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:32.090" endtime="20210731 10:43:32.092"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:43:32.092" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:43:32.092" endtime="20210731 10:43:32.093"/>
</kw>
<status status="PASS" starttime="20210731 10:43:32.089" endtime="20210731 10:43:32.093"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:43:32.094" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:43:32.094" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:43:32.094" endtime="20210731 10:43:32.094"/>
</kw>
<status status="PASS" starttime="20210731 10:43:32.093" endtime="20210731 10:43:32.094"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:43:32.095" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:43:32.095" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:43:32.095" endtime="20210731 10:43:32.095"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:43:32.096" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:43:32.095" endtime="20210731 10:43:32.096"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:32.096" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:32.096" endtime="20210731 10:43:32.096"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:32.096" endtime="20210731 10:43:32.097"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:32.097" endtime="20210731 10:43:32.097"/>
</kw>
<status status="PASS" starttime="20210731 10:43:32.096" endtime="20210731 10:43:32.097"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:32.099" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:32.099" endtime="20210731 10:43:32.099"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:32.099" endtime="20210731 10:43:32.100"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:32.100" endtime="20210731 10:43:32.100"/>
</kw>
<status status="PASS" starttime="20210731 10:43:32.098" endtime="20210731 10:43:32.100"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:32.100" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:32.100" endtime="20210731 10:43:32.100"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:32.100" endtime="20210731 10:43:32.101"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:32.101" endtime="20210731 10:43:32.102"/>
</kw>
<status status="PASS" starttime="20210731 10:43:32.100" endtime="20210731 10:43:32.102"/>
</iter>
<status status="PASS" starttime="20210731 10:43:32.096" endtime="20210731 10:43:32.102"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:43:32.102" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:43:32.102" endtime="20210731 10:43:32.102"/>
</kw>
<status status="PASS" starttime="20210731 10:43:32.095" endtime="20210731 10:43:32.102"/>
</kw>
<status status="PASS" starttime="20210731 10:43:30.553" endtime="20210731 10:43:32.102"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=01234567</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:32.104" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:43:32.103" endtime="20210731 10:43:32.104"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:32.104" level="INFO">${payload} = {'password': '01234567'}</msg>
<status status="PASS" starttime="20210731 10:43:32.104" endtime="20210731 10:43:32.104"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:32.114" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:32.114" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:32.104" endtime="20210731 10:43:32.114"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:32.114" endtime="20210731 10:43:32.115"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:32.115" endtime="20210731 10:43:32.115"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:32.104" endtime="20210731 10:43:32.115"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:32.104" endtime="20210731 10:43:32.115"/>
</for>
<status status="FAIL" starttime="20210731 10:43:32.103" endtime="20210731 10:43:32.115"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:32.103" endtime="20210731 10:43:32.115"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=01234567</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:32.116" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:43:32.116" endtime="20210731 10:43:32.116"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:32.116" level="INFO">${payload} = {'password': '01234567'}</msg>
<status status="PASS" starttime="20210731 10:43:32.116" endtime="20210731 10:43:32.116"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:32.122" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:32.122" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:32.117" endtime="20210731 10:43:32.122"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:32.122" endtime="20210731 10:43:32.122"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:32.123" endtime="20210731 10:43:32.123"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:32.117" endtime="20210731 10:43:32.123"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:32.116" endtime="20210731 10:43:32.123"/>
</for>
<status status="FAIL" starttime="20210731 10:43:32.115" endtime="20210731 10:43:32.123"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:32.115" endtime="20210731 10:43:32.123"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=01234567</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:32.124" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:43:32.124" endtime="20210731 10:43:32.124"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:32.125" level="INFO">${payload} = {'password': '01234567'}</msg>
<status status="PASS" starttime="20210731 10:43:32.125" endtime="20210731 10:43:32.125"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:32.130" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:32.130" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:32.125" endtime="20210731 10:43:32.130"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:32.130" endtime="20210731 10:43:32.130"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:32.130" endtime="20210731 10:43:32.130"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:32.125" endtime="20210731 10:43:32.130"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:32.125" endtime="20210731 10:43:32.130"/>
</for>
<status status="FAIL" starttime="20210731 10:43:32.124" endtime="20210731 10:43:32.130"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:32.123" endtime="20210731 10:43:32.130"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:32.103" endtime="20210731 10:43:32.131"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:32.134" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:32.143" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:32.143" level="INFO">${pids} = 13564
13571
13576</msg>
<status status="PASS" starttime="20210731 10:43:32.131" endtime="20210731 10:43:32.143"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:32.144" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:32.144" endtime="20210731 10:43:32.144"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:32.145" level="INFO">${pids} = ['13564', '13571', '13576']</msg>
<status status="PASS" starttime="20210731 10:43:32.145" endtime="20210731 10:43:32.145"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">13564</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:32.148" level="INFO">Running command 'kill 13564 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:32.145" endtime="20210731 10:43:32.148"/>
</kw>
<status status="PASS" starttime="20210731 10:43:32.145" endtime="20210731 10:43:32.148"/>
</iter>
<iter>
<var name="${pid}">13571</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:32.151" level="INFO">Running command 'kill 13571 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:32.149" endtime="20210731 10:43:32.152"/>
</kw>
<status status="PASS" starttime="20210731 10:43:32.149" endtime="20210731 10:43:32.152"/>
</iter>
<iter>
<var name="${pid}">13576</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:32.157" level="INFO">Running command 'kill 13576 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:32.152" endtime="20210731 10:43:32.157"/>
</kw>
<status status="PASS" starttime="20210731 10:43:32.152" endtime="20210731 10:43:32.157"/>
</iter>
<status status="PASS" starttime="20210731 10:43:32.145" endtime="20210731 10:43:32.157"/>
</for>
<status status="PASS" starttime="20210731 10:43:32.144" endtime="20210731 10:43:32.157"/>
</branch>
<status status="PASS" starttime="20210731 10:43:32.144" endtime="20210731 10:43:32.157"/>
</if>
<status status="PASS" starttime="20210731 10:43:32.131" endtime="20210731 10:43:32.158"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": '01234567'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:43:30.552" endtime="20210731 10:43:32.158">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t53" name="With Each Valid Token, Updating Password Of Each System User With 01234567890123456789 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:32.171" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:32.181" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:32.181" level="INFO">${pids} = 13605</msg>
<status status="PASS" starttime="20210731 10:43:32.168" endtime="20210731 10:43:32.181"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:32.182" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:32.181" endtime="20210731 10:43:32.182"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:32.183" level="INFO">${pids} = ['13605']</msg>
<status status="PASS" starttime="20210731 10:43:32.182" endtime="20210731 10:43:32.183"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">13605</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:32.186" level="INFO">Running command 'kill 13605 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:32.183" endtime="20210731 10:43:32.186"/>
</kw>
<status status="PASS" starttime="20210731 10:43:32.183" endtime="20210731 10:43:32.186"/>
</iter>
<status status="PASS" starttime="20210731 10:43:32.183" endtime="20210731 10:43:32.186"/>
</for>
<status status="PASS" starttime="20210731 10:43:32.182" endtime="20210731 10:43:32.186"/>
</branch>
<status status="PASS" starttime="20210731 10:43:32.182" endtime="20210731 10:43:32.186"/>
</if>
<status status="PASS" starttime="20210731 10:43:32.168" endtime="20210731 10:43:32.187"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:32.188" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:32.187" endtime="20210731 10:43:32.188"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:32.188" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:32.188" endtime="20210731 10:43:32.188"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:32.189" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:32.188" endtime="20210731 10:43:32.189"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:32.189" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:32.189" endtime="20210731 10:43:32.189"/>
</kw>
<msg timestamp="20210731 10:43:32.190" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:32.188" endtime="20210731 10:43:32.190"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:32.194" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:32.191" endtime="20210731 10:43:32.195"/>
</kw>
<status status="PASS" starttime="20210731 10:43:32.187" endtime="20210731 10:43:32.196"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:43:32.197" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:43:32.197" endtime="20210731 10:43:32.205"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:43:33.708" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:43:32.206" endtime="20210731 10:43:33.708"/>
</kw>
<status status="PASS" starttime="20210731 10:43:32.196" endtime="20210731 10:43:33.708"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:33.710" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:33.710" endtime="20210731 10:43:33.710"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:33.710" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:33.710" endtime="20210731 10:43:33.710"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:33.711" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:33.710" endtime="20210731 10:43:33.711"/>
</kw>
<msg timestamp="20210731 10:43:33.711" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:33.709" endtime="20210731 10:43:33.711"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:43:33.712" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:43:33.711" endtime="20210731 10:43:33.713"/>
</kw>
<status status="PASS" starttime="20210731 10:43:33.709" endtime="20210731 10:43:33.713"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:43:33.714" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:43:33.714" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:43:33.714" endtime="20210731 10:43:33.714"/>
</kw>
<status status="PASS" starttime="20210731 10:43:33.713" endtime="20210731 10:43:33.714"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:43:33.715" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:43:33.715" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:43:33.715" endtime="20210731 10:43:33.715"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:43:33.715" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:43:33.715" endtime="20210731 10:43:33.715"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:33.716" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:33.716" endtime="20210731 10:43:33.716"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:33.716" endtime="20210731 10:43:33.717"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:33.717" endtime="20210731 10:43:33.717"/>
</kw>
<status status="PASS" starttime="20210731 10:43:33.716" endtime="20210731 10:43:33.717"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:33.717" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:33.717" endtime="20210731 10:43:33.717"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:33.718" endtime="20210731 10:43:33.718"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:33.718" endtime="20210731 10:43:33.719"/>
</kw>
<status status="PASS" starttime="20210731 10:43:33.717" endtime="20210731 10:43:33.719"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:33.719" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:33.719" endtime="20210731 10:43:33.719"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:33.719" endtime="20210731 10:43:33.720"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:33.720" endtime="20210731 10:43:33.720"/>
</kw>
<status status="PASS" starttime="20210731 10:43:33.719" endtime="20210731 10:43:33.720"/>
</iter>
<status status="PASS" starttime="20210731 10:43:33.715" endtime="20210731 10:43:33.720"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:43:33.721" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:43:33.720" endtime="20210731 10:43:33.721"/>
</kw>
<status status="PASS" starttime="20210731 10:43:33.714" endtime="20210731 10:43:33.721"/>
</kw>
<status status="PASS" starttime="20210731 10:43:32.167" endtime="20210731 10:43:33.721"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=01234567890123456789</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:33.723" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:43:33.723" endtime="20210731 10:43:33.723"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:33.724" level="INFO">${payload} = {'password': '01234567890123456789'}</msg>
<status status="PASS" starttime="20210731 10:43:33.724" endtime="20210731 10:43:33.724"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:33.733" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:33.733" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:33.724" endtime="20210731 10:43:33.733"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:33.733" endtime="20210731 10:43:33.733"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:33.733" endtime="20210731 10:43:33.733"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:33.724" endtime="20210731 10:43:33.734"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:33.724" endtime="20210731 10:43:33.734"/>
</for>
<status status="FAIL" starttime="20210731 10:43:33.721" endtime="20210731 10:43:33.734"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:33.721" endtime="20210731 10:43:33.734"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=01234567890123456789</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:33.735" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:43:33.735" endtime="20210731 10:43:33.735"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:33.735" level="INFO">${payload} = {'password': '01234567890123456789'}</msg>
<status status="PASS" starttime="20210731 10:43:33.735" endtime="20210731 10:43:33.735"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:33.740" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:33.741" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:33.736" endtime="20210731 10:43:33.741"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:33.741" endtime="20210731 10:43:33.741"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:33.741" endtime="20210731 10:43:33.741"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:33.736" endtime="20210731 10:43:33.741"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:33.735" endtime="20210731 10:43:33.741"/>
</for>
<status status="FAIL" starttime="20210731 10:43:33.734" endtime="20210731 10:43:33.742"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:33.734" endtime="20210731 10:43:33.742"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=01234567890123456789</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:33.743" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:43:33.743" endtime="20210731 10:43:33.743"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:33.743" level="INFO">${payload} = {'password': '01234567890123456789'}</msg>
<status status="PASS" starttime="20210731 10:43:33.743" endtime="20210731 10:43:33.743"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:33.748" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:33.748" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:33.744" endtime="20210731 10:43:33.748"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:33.749" endtime="20210731 10:43:33.749"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:33.749" endtime="20210731 10:43:33.749"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:33.744" endtime="20210731 10:43:33.749"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:33.743" endtime="20210731 10:43:33.749"/>
</for>
<status status="FAIL" starttime="20210731 10:43:33.742" endtime="20210731 10:43:33.749"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:33.742" endtime="20210731 10:43:33.749"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:33.721" endtime="20210731 10:43:33.749"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:33.754" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:33.763" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:33.763" level="INFO">${pids} = 13628
13636
13647</msg>
<status status="PASS" starttime="20210731 10:43:33.751" endtime="20210731 10:43:33.763"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:33.764" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:33.764" endtime="20210731 10:43:33.764"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:33.765" level="INFO">${pids} = ['13628', '13636', '13647']</msg>
<status status="PASS" starttime="20210731 10:43:33.765" endtime="20210731 10:43:33.765"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">13628</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:33.768" level="INFO">Running command 'kill 13628 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:33.765" endtime="20210731 10:43:33.769"/>
</kw>
<status status="PASS" starttime="20210731 10:43:33.765" endtime="20210731 10:43:33.769"/>
</iter>
<iter>
<var name="${pid}">13636</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:33.772" level="INFO">Running command 'kill 13636 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:33.769" endtime="20210731 10:43:33.772"/>
</kw>
<status status="PASS" starttime="20210731 10:43:33.769" endtime="20210731 10:43:33.772"/>
</iter>
<iter>
<var name="${pid}">13647</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:33.779" level="INFO">Running command 'kill 13647 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:33.773" endtime="20210731 10:43:33.779"/>
</kw>
<status status="PASS" starttime="20210731 10:43:33.772" endtime="20210731 10:43:33.780"/>
</iter>
<status status="PASS" starttime="20210731 10:43:33.765" endtime="20210731 10:43:33.780"/>
</for>
<status status="PASS" starttime="20210731 10:43:33.764" endtime="20210731 10:43:33.780"/>
</branch>
<status status="PASS" starttime="20210731 10:43:33.764" endtime="20210731 10:43:33.780"/>
</if>
<status status="PASS" starttime="20210731 10:43:33.751" endtime="20210731 10:43:33.780"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": '01234567890123456789'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:43:32.166" endtime="20210731 10:43:33.780">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t54" name="With Each Valid Token, Updating Password Of Each System User With !?.?!.! Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:33.785" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:33.804" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:33.804" level="INFO">${pids} = 13676</msg>
<status status="PASS" starttime="20210731 10:43:33.782" endtime="20210731 10:43:33.804"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:33.805" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:33.805" endtime="20210731 10:43:33.805"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:33.806" level="INFO">${pids} = ['13676']</msg>
<status status="PASS" starttime="20210731 10:43:33.806" endtime="20210731 10:43:33.806"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">13676</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:33.811" level="INFO">Running command 'kill 13676 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:33.807" endtime="20210731 10:43:33.812"/>
</kw>
<status status="PASS" starttime="20210731 10:43:33.807" endtime="20210731 10:43:33.812"/>
</iter>
<status status="PASS" starttime="20210731 10:43:33.806" endtime="20210731 10:43:33.812"/>
</for>
<status status="PASS" starttime="20210731 10:43:33.806" endtime="20210731 10:43:33.812"/>
</branch>
<status status="PASS" starttime="20210731 10:43:33.806" endtime="20210731 10:43:33.812"/>
</if>
<status status="PASS" starttime="20210731 10:43:33.781" endtime="20210731 10:43:33.812"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:33.814" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:33.813" endtime="20210731 10:43:33.814"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:33.814" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:33.814" endtime="20210731 10:43:33.815"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:33.816" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:33.815" endtime="20210731 10:43:33.816"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:33.816" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:33.816" endtime="20210731 10:43:33.816"/>
</kw>
<msg timestamp="20210731 10:43:33.817" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:33.814" endtime="20210731 10:43:33.817"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:33.820" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:33.817" endtime="20210731 10:43:33.821"/>
</kw>
<status status="PASS" starttime="20210731 10:43:33.813" endtime="20210731 10:43:33.822"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:43:33.823" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:43:33.823" endtime="20210731 10:43:33.827"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:43:35.329" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:43:33.828" endtime="20210731 10:43:35.329"/>
</kw>
<status status="PASS" starttime="20210731 10:43:33.822" endtime="20210731 10:43:35.329"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:35.330" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:35.330" endtime="20210731 10:43:35.330"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:35.331" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:35.330" endtime="20210731 10:43:35.331"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:35.331" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:35.331" endtime="20210731 10:43:35.331"/>
</kw>
<msg timestamp="20210731 10:43:35.331" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:35.330" endtime="20210731 10:43:35.331"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:43:35.332" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:43:35.332" endtime="20210731 10:43:35.332"/>
</kw>
<status status="PASS" starttime="20210731 10:43:35.329" endtime="20210731 10:43:35.332"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:43:35.333" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:43:35.333" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:43:35.333" endtime="20210731 10:43:35.333"/>
</kw>
<status status="PASS" starttime="20210731 10:43:35.333" endtime="20210731 10:43:35.334"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:43:35.334" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:43:35.334" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:43:35.334" endtime="20210731 10:43:35.334"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:43:35.335" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:43:35.334" endtime="20210731 10:43:35.335"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:35.335" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:35.335" endtime="20210731 10:43:35.335"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:35.335" endtime="20210731 10:43:35.336"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:35.336" endtime="20210731 10:43:35.336"/>
</kw>
<status status="PASS" starttime="20210731 10:43:35.335" endtime="20210731 10:43:35.336"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:35.337" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:35.336" endtime="20210731 10:43:35.337"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:35.337" endtime="20210731 10:43:35.337"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:35.338" endtime="20210731 10:43:35.338"/>
</kw>
<status status="PASS" starttime="20210731 10:43:35.336" endtime="20210731 10:43:35.338"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:35.338" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:35.338" endtime="20210731 10:43:35.338"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:35.338" endtime="20210731 10:43:35.339"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:35.339" endtime="20210731 10:43:35.339"/>
</kw>
<status status="PASS" starttime="20210731 10:43:35.338" endtime="20210731 10:43:35.339"/>
</iter>
<status status="PASS" starttime="20210731 10:43:35.335" endtime="20210731 10:43:35.339"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:43:35.340" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:43:35.340" endtime="20210731 10:43:35.340"/>
</kw>
<status status="PASS" starttime="20210731 10:43:35.334" endtime="20210731 10:43:35.340"/>
</kw>
<status status="PASS" starttime="20210731 10:43:33.781" endtime="20210731 10:43:35.340"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=!?.?!.!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:35.342" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:43:35.342" endtime="20210731 10:43:35.342"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:35.343" level="INFO">${payload} = {'password': '!?.?!.!'}</msg>
<status status="PASS" starttime="20210731 10:43:35.342" endtime="20210731 10:43:35.343"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:35.351" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:35.352" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:35.343" endtime="20210731 10:43:35.352"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:35.352" endtime="20210731 10:43:35.352"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:35.352" endtime="20210731 10:43:35.352"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:35.343" endtime="20210731 10:43:35.352"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:35.343" endtime="20210731 10:43:35.352"/>
</for>
<status status="FAIL" starttime="20210731 10:43:35.341" endtime="20210731 10:43:35.352"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:35.341" endtime="20210731 10:43:35.352"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=!?.?!.!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:35.354" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:43:35.353" endtime="20210731 10:43:35.354"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:35.354" level="INFO">${payload} = {'password': '!?.?!.!'}</msg>
<status status="PASS" starttime="20210731 10:43:35.354" endtime="20210731 10:43:35.354"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:35.358" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:35.359" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:35.354" endtime="20210731 10:43:35.359"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:35.359" endtime="20210731 10:43:35.359"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:35.359" endtime="20210731 10:43:35.359"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:35.354" endtime="20210731 10:43:35.359"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:35.354" endtime="20210731 10:43:35.359"/>
</for>
<status status="FAIL" starttime="20210731 10:43:35.352" endtime="20210731 10:43:35.359"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:35.352" endtime="20210731 10:43:35.359"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=!?.?!.!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:35.360" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:43:35.360" endtime="20210731 10:43:35.360"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:35.361" level="INFO">${payload} = {'password': '!?.?!.!'}</msg>
<status status="PASS" starttime="20210731 10:43:35.361" endtime="20210731 10:43:35.361"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:35.365" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:35.365" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:35.361" endtime="20210731 10:43:35.365"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:35.365" endtime="20210731 10:43:35.365"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:35.366" endtime="20210731 10:43:35.366"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:35.361" endtime="20210731 10:43:35.366"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:35.361" endtime="20210731 10:43:35.366"/>
</for>
<status status="FAIL" starttime="20210731 10:43:35.359" endtime="20210731 10:43:35.366"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:35.359" endtime="20210731 10:43:35.366"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:35.341" endtime="20210731 10:43:35.366"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:35.370" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:35.379" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:35.379" level="INFO">${pids} = 13699
13706
13710</msg>
<status status="PASS" starttime="20210731 10:43:35.367" endtime="20210731 10:43:35.379"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:35.380" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:35.380" endtime="20210731 10:43:35.380"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:35.381" level="INFO">${pids} = ['13699', '13706', '13710']</msg>
<status status="PASS" starttime="20210731 10:43:35.381" endtime="20210731 10:43:35.381"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">13699</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:35.385" level="INFO">Running command 'kill 13699 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:35.381" endtime="20210731 10:43:35.385"/>
</kw>
<status status="PASS" starttime="20210731 10:43:35.381" endtime="20210731 10:43:35.385"/>
</iter>
<iter>
<var name="${pid}">13706</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:35.389" level="INFO">Running command 'kill 13706 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:35.386" endtime="20210731 10:43:35.391"/>
</kw>
<status status="PASS" starttime="20210731 10:43:35.385" endtime="20210731 10:43:35.392"/>
</iter>
<iter>
<var name="${pid}">13710</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:35.396" level="INFO">Running command 'kill 13710 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:35.392" endtime="20210731 10:43:35.396"/>
</kw>
<status status="PASS" starttime="20210731 10:43:35.392" endtime="20210731 10:43:35.396"/>
</iter>
<status status="PASS" starttime="20210731 10:43:35.381" endtime="20210731 10:43:35.396"/>
</for>
<status status="PASS" starttime="20210731 10:43:35.381" endtime="20210731 10:43:35.396"/>
</branch>
<status status="PASS" starttime="20210731 10:43:35.380" endtime="20210731 10:43:35.396"/>
</if>
<status status="PASS" starttime="20210731 10:43:35.366" endtime="20210731 10:43:35.397"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": '!?.?!.!'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:43:33.780" endtime="20210731 10:43:35.397">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t55" name="With Each Valid Token, Updating Password Of Each System User With !?.?!.!? Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:35.403" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:35.412" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:35.412" level="INFO">${pids} = 13739</msg>
<status status="PASS" starttime="20210731 10:43:35.399" endtime="20210731 10:43:35.413"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:35.414" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:35.413" endtime="20210731 10:43:35.414"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:35.414" level="INFO">${pids} = ['13739']</msg>
<status status="PASS" starttime="20210731 10:43:35.414" endtime="20210731 10:43:35.414"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">13739</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:35.418" level="INFO">Running command 'kill 13739 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:35.415" endtime="20210731 10:43:35.418"/>
</kw>
<status status="PASS" starttime="20210731 10:43:35.415" endtime="20210731 10:43:35.418"/>
</iter>
<status status="PASS" starttime="20210731 10:43:35.414" endtime="20210731 10:43:35.418"/>
</for>
<status status="PASS" starttime="20210731 10:43:35.414" endtime="20210731 10:43:35.418"/>
</branch>
<status status="PASS" starttime="20210731 10:43:35.414" endtime="20210731 10:43:35.419"/>
</if>
<status status="PASS" starttime="20210731 10:43:35.399" endtime="20210731 10:43:35.419"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:35.420" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:35.419" endtime="20210731 10:43:35.420"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:35.420" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:35.420" endtime="20210731 10:43:35.420"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:35.421" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:35.421" endtime="20210731 10:43:35.421"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:35.421" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:35.421" endtime="20210731 10:43:35.421"/>
</kw>
<msg timestamp="20210731 10:43:35.422" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:35.420" endtime="20210731 10:43:35.422"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:35.425" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:35.422" endtime="20210731 10:43:35.428"/>
</kw>
<status status="PASS" starttime="20210731 10:43:35.419" endtime="20210731 10:43:35.428"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:43:35.429" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:43:35.429" endtime="20210731 10:43:35.435"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:43:36.936" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:43:35.435" endtime="20210731 10:43:36.936"/>
</kw>
<status status="PASS" starttime="20210731 10:43:35.428" endtime="20210731 10:43:36.936"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:36.938" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:36.937" endtime="20210731 10:43:36.938"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:36.938" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:36.938" endtime="20210731 10:43:36.938"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:36.938" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:36.938" endtime="20210731 10:43:36.939"/>
</kw>
<msg timestamp="20210731 10:43:36.939" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:36.937" endtime="20210731 10:43:36.939"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:43:36.942" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:43:36.941" endtime="20210731 10:43:36.942"/>
</kw>
<status status="PASS" starttime="20210731 10:43:36.937" endtime="20210731 10:43:36.943"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:43:36.943" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:43:36.943" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:43:36.943" endtime="20210731 10:43:36.944"/>
</kw>
<status status="PASS" starttime="20210731 10:43:36.943" endtime="20210731 10:43:36.944"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:43:36.944" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:43:36.944" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:43:36.944" endtime="20210731 10:43:36.944"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:43:36.945" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:43:36.944" endtime="20210731 10:43:36.945"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:36.945" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:36.945" endtime="20210731 10:43:36.945"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:36.945" endtime="20210731 10:43:36.946"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:36.946" endtime="20210731 10:43:36.946"/>
</kw>
<status status="PASS" starttime="20210731 10:43:36.945" endtime="20210731 10:43:36.946"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:36.947" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:36.946" endtime="20210731 10:43:36.947"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:36.947" endtime="20210731 10:43:36.947"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:36.947" endtime="20210731 10:43:36.948"/>
</kw>
<status status="PASS" starttime="20210731 10:43:36.946" endtime="20210731 10:43:36.948"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:36.948" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:36.948" endtime="20210731 10:43:36.948"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:36.948" endtime="20210731 10:43:36.949"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:36.949" endtime="20210731 10:43:36.949"/>
</kw>
<status status="PASS" starttime="20210731 10:43:36.948" endtime="20210731 10:43:36.949"/>
</iter>
<status status="PASS" starttime="20210731 10:43:36.945" endtime="20210731 10:43:36.949"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:43:36.950" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:43:36.950" endtime="20210731 10:43:36.950"/>
</kw>
<status status="PASS" starttime="20210731 10:43:36.944" endtime="20210731 10:43:36.950"/>
</kw>
<status status="PASS" starttime="20210731 10:43:35.398" endtime="20210731 10:43:36.950"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=!?.?!.!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:36.952" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:43:36.952" endtime="20210731 10:43:36.952"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:36.953" level="INFO">${payload} = {'password': '!?.?!.!?'}</msg>
<status status="PASS" starttime="20210731 10:43:36.953" endtime="20210731 10:43:36.953"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:36.962" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:36.963" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:36.953" endtime="20210731 10:43:36.963"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:36.963" endtime="20210731 10:43:36.963"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:36.963" endtime="20210731 10:43:36.963"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:36.953" endtime="20210731 10:43:36.963"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:36.953" endtime="20210731 10:43:36.963"/>
</for>
<status status="FAIL" starttime="20210731 10:43:36.950" endtime="20210731 10:43:36.963"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:36.950" endtime="20210731 10:43:36.963"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=!?.?!.!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:36.964" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:43:36.964" endtime="20210731 10:43:36.964"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:36.965" level="INFO">${payload} = {'password': '!?.?!.!?'}</msg>
<status status="PASS" starttime="20210731 10:43:36.964" endtime="20210731 10:43:36.965"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:36.969" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:36.969" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:36.965" endtime="20210731 10:43:36.969"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:36.969" endtime="20210731 10:43:36.969"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:36.969" endtime="20210731 10:43:36.969"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:36.965" endtime="20210731 10:43:36.969"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:36.965" endtime="20210731 10:43:36.969"/>
</for>
<status status="FAIL" starttime="20210731 10:43:36.963" endtime="20210731 10:43:36.970"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:36.963" endtime="20210731 10:43:36.970"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=!?.?!.!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:36.971" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:43:36.970" endtime="20210731 10:43:36.971"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:36.971" level="INFO">${payload} = {'password': '!?.?!.!?'}</msg>
<status status="PASS" starttime="20210731 10:43:36.971" endtime="20210731 10:43:36.971"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:36.976" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:36.976" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:36.971" endtime="20210731 10:43:36.977"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:36.977" endtime="20210731 10:43:36.977"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:36.977" endtime="20210731 10:43:36.977"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:36.971" endtime="20210731 10:43:36.977"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:36.971" endtime="20210731 10:43:36.977"/>
</for>
<status status="FAIL" starttime="20210731 10:43:36.970" endtime="20210731 10:43:36.977"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:36.970" endtime="20210731 10:43:36.977"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:36.950" endtime="20210731 10:43:36.978"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:36.982" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:36.991" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:36.991" level="INFO">${pids} = 13762
13769
13776</msg>
<status status="PASS" starttime="20210731 10:43:36.979" endtime="20210731 10:43:36.991"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:36.992" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:36.992" endtime="20210731 10:43:36.992"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:36.993" level="INFO">${pids} = ['13762', '13769', '13776']</msg>
<status status="PASS" starttime="20210731 10:43:36.993" endtime="20210731 10:43:36.993"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">13762</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:36.996" level="INFO">Running command 'kill 13762 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:36.994" endtime="20210731 10:43:36.997"/>
</kw>
<status status="PASS" starttime="20210731 10:43:36.994" endtime="20210731 10:43:36.997"/>
</iter>
<iter>
<var name="${pid}">13769</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:37.001" level="INFO">Running command 'kill 13769 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:36.997" endtime="20210731 10:43:37.002"/>
</kw>
<status status="PASS" starttime="20210731 10:43:36.997" endtime="20210731 10:43:37.002"/>
</iter>
<iter>
<var name="${pid}">13776</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:37.006" level="INFO">Running command 'kill 13776 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:37.002" endtime="20210731 10:43:37.007"/>
</kw>
<status status="PASS" starttime="20210731 10:43:37.002" endtime="20210731 10:43:37.007"/>
</iter>
<status status="PASS" starttime="20210731 10:43:36.993" endtime="20210731 10:43:37.007"/>
</for>
<status status="PASS" starttime="20210731 10:43:36.993" endtime="20210731 10:43:37.007"/>
</branch>
<status status="PASS" starttime="20210731 10:43:36.992" endtime="20210731 10:43:37.007"/>
</if>
<status status="PASS" starttime="20210731 10:43:36.979" endtime="20210731 10:43:37.007"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": '!?.?!.!?'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:43:35.398" endtime="20210731 10:43:37.008">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t56" name="With Each Valid Token, Updating Password Of Each System User With !?.?!.!?!?.?!.!?!.!. Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:37.013" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:37.022" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:37.022" level="INFO">${pids} = 13805</msg>
<status status="PASS" starttime="20210731 10:43:37.010" endtime="20210731 10:43:37.022"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:37.023" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:37.022" endtime="20210731 10:43:37.023"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:37.023" level="INFO">${pids} = ['13805']</msg>
<status status="PASS" starttime="20210731 10:43:37.023" endtime="20210731 10:43:37.024"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">13805</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:37.027" level="INFO">Running command 'kill 13805 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:37.024" endtime="20210731 10:43:37.027"/>
</kw>
<status status="PASS" starttime="20210731 10:43:37.024" endtime="20210731 10:43:37.027"/>
</iter>
<status status="PASS" starttime="20210731 10:43:37.024" endtime="20210731 10:43:37.027"/>
</for>
<status status="PASS" starttime="20210731 10:43:37.023" endtime="20210731 10:43:37.027"/>
</branch>
<status status="PASS" starttime="20210731 10:43:37.023" endtime="20210731 10:43:37.027"/>
</if>
<status status="PASS" starttime="20210731 10:43:37.010" endtime="20210731 10:43:37.027"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:37.028" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:37.028" endtime="20210731 10:43:37.028"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:37.029" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:37.029" endtime="20210731 10:43:37.029"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:37.031" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:37.029" endtime="20210731 10:43:37.031"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:37.031" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:37.031" endtime="20210731 10:43:37.031"/>
</kw>
<msg timestamp="20210731 10:43:37.031" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:37.029" endtime="20210731 10:43:37.031"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:37.046" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:37.032" endtime="20210731 10:43:37.049"/>
</kw>
<status status="PASS" starttime="20210731 10:43:37.028" endtime="20210731 10:43:37.049"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:43:37.051" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:43:37.050" endtime="20210731 10:43:37.055"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:43:38.556" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:43:37.055" endtime="20210731 10:43:38.556"/>
</kw>
<status status="PASS" starttime="20210731 10:43:37.050" endtime="20210731 10:43:38.556"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:38.558" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:38.557" endtime="20210731 10:43:38.558"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:38.558" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:38.558" endtime="20210731 10:43:38.558"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:38.558" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:38.558" endtime="20210731 10:43:38.558"/>
</kw>
<msg timestamp="20210731 10:43:38.559" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:38.557" endtime="20210731 10:43:38.559"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:43:38.559" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:43:38.559" endtime="20210731 10:43:38.559"/>
</kw>
<status status="PASS" starttime="20210731 10:43:38.557" endtime="20210731 10:43:38.559"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:43:38.560" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:43:38.560" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:43:38.560" endtime="20210731 10:43:38.560"/>
</kw>
<status status="PASS" starttime="20210731 10:43:38.560" endtime="20210731 10:43:38.560"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:43:38.561" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:43:38.561" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:43:38.561" endtime="20210731 10:43:38.561"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:43:38.563" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:43:38.561" endtime="20210731 10:43:38.563"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:38.563" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:38.563" endtime="20210731 10:43:38.563"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:38.563" endtime="20210731 10:43:38.564"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:38.564" endtime="20210731 10:43:38.564"/>
</kw>
<status status="PASS" starttime="20210731 10:43:38.563" endtime="20210731 10:43:38.565"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:38.565" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:38.565" endtime="20210731 10:43:38.565"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:38.565" endtime="20210731 10:43:38.566"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:38.566" endtime="20210731 10:43:38.566"/>
</kw>
<status status="PASS" starttime="20210731 10:43:38.565" endtime="20210731 10:43:38.566"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:38.566" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:38.566" endtime="20210731 10:43:38.566"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:38.567" endtime="20210731 10:43:38.567"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:38.567" endtime="20210731 10:43:38.568"/>
</kw>
<status status="PASS" starttime="20210731 10:43:38.566" endtime="20210731 10:43:38.568"/>
</iter>
<status status="PASS" starttime="20210731 10:43:38.563" endtime="20210731 10:43:38.568"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:43:38.568" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:43:38.568" endtime="20210731 10:43:38.568"/>
</kw>
<status status="PASS" starttime="20210731 10:43:38.560" endtime="20210731 10:43:38.568"/>
</kw>
<status status="PASS" starttime="20210731 10:43:37.009" endtime="20210731 10:43:38.568"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=!?.?!.!?!?.?!.!?!.!.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:38.569" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:43:38.569" endtime="20210731 10:43:38.569"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:38.570" level="INFO">${payload} = {'password': '!?.?!.!?!?.?!.!?!.!.'}</msg>
<status status="PASS" starttime="20210731 10:43:38.570" endtime="20210731 10:43:38.570"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:38.580" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:38.580" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:38.570" endtime="20210731 10:43:38.580"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:38.580" endtime="20210731 10:43:38.581"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:38.581" endtime="20210731 10:43:38.581"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:38.570" endtime="20210731 10:43:38.581"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:38.570" endtime="20210731 10:43:38.581"/>
</for>
<status status="FAIL" starttime="20210731 10:43:38.569" endtime="20210731 10:43:38.581"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:38.569" endtime="20210731 10:43:38.581"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=!?.?!.!?!?.?!.!?!.!.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:38.582" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:43:38.582" endtime="20210731 10:43:38.582"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:38.583" level="INFO">${payload} = {'password': '!?.?!.!?!?.?!.!?!.!.'}</msg>
<status status="PASS" starttime="20210731 10:43:38.582" endtime="20210731 10:43:38.583"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:38.587" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:38.588" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:38.583" endtime="20210731 10:43:38.588"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:38.588" endtime="20210731 10:43:38.588"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:38.588" endtime="20210731 10:43:38.588"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:38.583" endtime="20210731 10:43:38.588"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:38.583" endtime="20210731 10:43:38.588"/>
</for>
<status status="FAIL" starttime="20210731 10:43:38.581" endtime="20210731 10:43:38.588"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:38.581" endtime="20210731 10:43:38.588"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=!?.?!.!?!?.?!.!?!.!.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:38.590" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:43:38.590" endtime="20210731 10:43:38.590"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:38.591" level="INFO">${payload} = {'password': '!?.?!.!?!?.?!.!?!.!.'}</msg>
<status status="PASS" starttime="20210731 10:43:38.591" endtime="20210731 10:43:38.591"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:38.608" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:38.608" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:38.592" endtime="20210731 10:43:38.608"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:38.608" endtime="20210731 10:43:38.608"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:38.608" endtime="20210731 10:43:38.608"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:38.591" endtime="20210731 10:43:38.608"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:38.591" endtime="20210731 10:43:38.608"/>
</for>
<status status="FAIL" starttime="20210731 10:43:38.589" endtime="20210731 10:43:38.608"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:38.589" endtime="20210731 10:43:38.609"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:38.568" endtime="20210731 10:43:38.609"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:38.613" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:38.622" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:38.622" level="INFO">${pids} = 13828
13835
13845</msg>
<status status="PASS" starttime="20210731 10:43:38.609" endtime="20210731 10:43:38.622"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:38.623" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:38.622" endtime="20210731 10:43:38.623"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:38.624" level="INFO">${pids} = ['13828', '13835', '13845']</msg>
<status status="PASS" starttime="20210731 10:43:38.623" endtime="20210731 10:43:38.624"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">13828</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:38.627" level="INFO">Running command 'kill 13828 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:38.624" endtime="20210731 10:43:38.628"/>
</kw>
<status status="PASS" starttime="20210731 10:43:38.624" endtime="20210731 10:43:38.628"/>
</iter>
<iter>
<var name="${pid}">13835</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:38.631" level="INFO">Running command 'kill 13835 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:38.628" endtime="20210731 10:43:38.631"/>
</kw>
<status status="PASS" starttime="20210731 10:43:38.628" endtime="20210731 10:43:38.632"/>
</iter>
<iter>
<var name="${pid}">13845</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:38.635" level="INFO">Running command 'kill 13845 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:38.632" endtime="20210731 10:43:38.635"/>
</kw>
<status status="PASS" starttime="20210731 10:43:38.632" endtime="20210731 10:43:38.635"/>
</iter>
<status status="PASS" starttime="20210731 10:43:38.624" endtime="20210731 10:43:38.635"/>
</for>
<status status="PASS" starttime="20210731 10:43:38.623" endtime="20210731 10:43:38.635"/>
</branch>
<status status="PASS" starttime="20210731 10:43:38.623" endtime="20210731 10:43:38.635"/>
</if>
<status status="PASS" starttime="20210731 10:43:38.609" endtime="20210731 10:43:38.636"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": '!?.?!.!?!?.?!.!?!.!.'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:43:37.008" endtime="20210731 10:43:38.636">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t57" name="With Each Valid Token, Updating Password Of Each System User With abcdABC Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:38.642" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:38.651" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:38.652" level="INFO">${pids} = 13874</msg>
<status status="PASS" starttime="20210731 10:43:38.638" endtime="20210731 10:43:38.652"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:38.653" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:38.652" endtime="20210731 10:43:38.653"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:38.653" level="INFO">${pids} = ['13874']</msg>
<status status="PASS" starttime="20210731 10:43:38.653" endtime="20210731 10:43:38.653"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">13874</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:38.658" level="INFO">Running command 'kill 13874 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:38.654" endtime="20210731 10:43:38.659"/>
</kw>
<status status="PASS" starttime="20210731 10:43:38.654" endtime="20210731 10:43:38.659"/>
</iter>
<status status="PASS" starttime="20210731 10:43:38.654" endtime="20210731 10:43:38.659"/>
</for>
<status status="PASS" starttime="20210731 10:43:38.653" endtime="20210731 10:43:38.659"/>
</branch>
<status status="PASS" starttime="20210731 10:43:38.653" endtime="20210731 10:43:38.659"/>
</if>
<status status="PASS" starttime="20210731 10:43:38.638" endtime="20210731 10:43:38.659"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:38.661" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:38.660" endtime="20210731 10:43:38.661"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:38.661" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:38.661" endtime="20210731 10:43:38.661"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:38.662" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:38.661" endtime="20210731 10:43:38.662"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:38.662" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:38.662" endtime="20210731 10:43:38.662"/>
</kw>
<msg timestamp="20210731 10:43:38.662" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:38.661" endtime="20210731 10:43:38.663"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:38.667" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:38.663" endtime="20210731 10:43:38.670"/>
</kw>
<status status="PASS" starttime="20210731 10:43:38.660" endtime="20210731 10:43:38.670"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:43:38.672" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:43:38.671" endtime="20210731 10:43:38.678"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:43:40.188" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:43:38.678" endtime="20210731 10:43:40.188"/>
</kw>
<status status="PASS" starttime="20210731 10:43:38.671" endtime="20210731 10:43:40.188"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:40.189" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:40.189" endtime="20210731 10:43:40.189"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:40.190" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:40.190" endtime="20210731 10:43:40.190"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:40.190" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:40.190" endtime="20210731 10:43:40.190"/>
</kw>
<msg timestamp="20210731 10:43:40.191" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:40.189" endtime="20210731 10:43:40.191"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:43:40.191" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:43:40.191" endtime="20210731 10:43:40.191"/>
</kw>
<status status="PASS" starttime="20210731 10:43:40.188" endtime="20210731 10:43:40.191"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:43:40.192" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:43:40.192" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:43:40.192" endtime="20210731 10:43:40.192"/>
</kw>
<status status="PASS" starttime="20210731 10:43:40.192" endtime="20210731 10:43:40.192"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:43:40.193" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:43:40.193" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:43:40.193" endtime="20210731 10:43:40.193"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:43:40.194" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:43:40.193" endtime="20210731 10:43:40.194"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:40.194" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:40.194" endtime="20210731 10:43:40.194"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:40.194" endtime="20210731 10:43:40.195"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:40.195" endtime="20210731 10:43:40.195"/>
</kw>
<status status="PASS" starttime="20210731 10:43:40.194" endtime="20210731 10:43:40.195"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:40.196" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:40.195" endtime="20210731 10:43:40.196"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:40.196" endtime="20210731 10:43:40.196"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:40.196" endtime="20210731 10:43:40.197"/>
</kw>
<status status="PASS" starttime="20210731 10:43:40.195" endtime="20210731 10:43:40.197"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:40.197" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:40.197" endtime="20210731 10:43:40.197"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:40.197" endtime="20210731 10:43:40.198"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:40.198" endtime="20210731 10:43:40.198"/>
</kw>
<status status="PASS" starttime="20210731 10:43:40.197" endtime="20210731 10:43:40.198"/>
</iter>
<status status="PASS" starttime="20210731 10:43:40.194" endtime="20210731 10:43:40.198"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:43:40.199" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:43:40.198" endtime="20210731 10:43:40.199"/>
</kw>
<status status="PASS" starttime="20210731 10:43:40.193" endtime="20210731 10:43:40.199"/>
</kw>
<status status="PASS" starttime="20210731 10:43:38.637" endtime="20210731 10:43:40.199"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdABC</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:40.200" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:43:40.200" endtime="20210731 10:43:40.200"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:40.201" level="INFO">${payload} = {'password': 'abcdABC'}</msg>
<status status="PASS" starttime="20210731 10:43:40.200" endtime="20210731 10:43:40.201"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:40.211" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:40.211" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:40.201" endtime="20210731 10:43:40.211"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:40.211" endtime="20210731 10:43:40.211"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:40.211" endtime="20210731 10:43:40.211"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:40.201" endtime="20210731 10:43:40.211"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:40.201" endtime="20210731 10:43:40.211"/>
</for>
<status status="FAIL" starttime="20210731 10:43:40.199" endtime="20210731 10:43:40.211"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:40.199" endtime="20210731 10:43:40.212"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdABC</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:40.213" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:43:40.212" endtime="20210731 10:43:40.213"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:40.213" level="INFO">${payload} = {'password': 'abcdABC'}</msg>
<status status="PASS" starttime="20210731 10:43:40.213" endtime="20210731 10:43:40.213"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:40.217" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:40.217" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:40.213" endtime="20210731 10:43:40.218"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:40.218" endtime="20210731 10:43:40.218"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:40.218" endtime="20210731 10:43:40.218"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:40.213" endtime="20210731 10:43:40.218"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:40.213" endtime="20210731 10:43:40.218"/>
</for>
<status status="FAIL" starttime="20210731 10:43:40.212" endtime="20210731 10:43:40.218"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:40.212" endtime="20210731 10:43:40.218"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdABC</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:40.219" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:43:40.219" endtime="20210731 10:43:40.219"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:40.220" level="INFO">${payload} = {'password': 'abcdABC'}</msg>
<status status="PASS" starttime="20210731 10:43:40.219" endtime="20210731 10:43:40.220"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:40.224" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:40.224" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:40.220" endtime="20210731 10:43:40.224"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:40.225" endtime="20210731 10:43:40.225"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:40.225" endtime="20210731 10:43:40.225"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:40.220" endtime="20210731 10:43:40.225"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:40.220" endtime="20210731 10:43:40.225"/>
</for>
<status status="FAIL" starttime="20210731 10:43:40.218" endtime="20210731 10:43:40.225"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:40.218" endtime="20210731 10:43:40.225"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:40.199" endtime="20210731 10:43:40.225"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:40.229" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:40.238" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:40.238" level="INFO">${pids} = 13897
13904
13908</msg>
<status status="PASS" starttime="20210731 10:43:40.226" endtime="20210731 10:43:40.238"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:40.239" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:40.239" endtime="20210731 10:43:40.239"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:40.241" level="INFO">${pids} = ['13897', '13904', '13908']</msg>
<status status="PASS" starttime="20210731 10:43:40.240" endtime="20210731 10:43:40.241"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">13897</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:40.244" level="INFO">Running command 'kill 13897 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:40.241" endtime="20210731 10:43:40.245"/>
</kw>
<status status="PASS" starttime="20210731 10:43:40.241" endtime="20210731 10:43:40.245"/>
</iter>
<iter>
<var name="${pid}">13904</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:40.248" level="INFO">Running command 'kill 13904 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:40.245" endtime="20210731 10:43:40.250"/>
</kw>
<status status="PASS" starttime="20210731 10:43:40.245" endtime="20210731 10:43:40.250"/>
</iter>
<iter>
<var name="${pid}">13908</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:40.253" level="INFO">Running command 'kill 13908 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:40.250" endtime="20210731 10:43:40.253"/>
</kw>
<status status="PASS" starttime="20210731 10:43:40.250" endtime="20210731 10:43:40.254"/>
</iter>
<status status="PASS" starttime="20210731 10:43:40.241" endtime="20210731 10:43:40.254"/>
</for>
<status status="PASS" starttime="20210731 10:43:40.240" endtime="20210731 10:43:40.254"/>
</branch>
<status status="PASS" starttime="20210731 10:43:40.239" endtime="20210731 10:43:40.254"/>
</if>
<status status="PASS" starttime="20210731 10:43:40.226" endtime="20210731 10:43:40.254"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcdABC'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:43:38.636" endtime="20210731 10:43:40.254">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t58" name="With Each Valid Token, Updating Password Of Each System User With abcdABCD Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:40.260" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:40.270" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:40.270" level="INFO">${pids} = 13937</msg>
<status status="PASS" starttime="20210731 10:43:40.256" endtime="20210731 10:43:40.270"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:40.271" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:40.270" endtime="20210731 10:43:40.271"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:40.271" level="INFO">${pids} = ['13937']</msg>
<status status="PASS" starttime="20210731 10:43:40.271" endtime="20210731 10:43:40.271"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">13937</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:40.276" level="INFO">Running command 'kill 13937 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:40.272" endtime="20210731 10:43:40.276"/>
</kw>
<status status="PASS" starttime="20210731 10:43:40.272" endtime="20210731 10:43:40.276"/>
</iter>
<status status="PASS" starttime="20210731 10:43:40.272" endtime="20210731 10:43:40.276"/>
</for>
<status status="PASS" starttime="20210731 10:43:40.271" endtime="20210731 10:43:40.277"/>
</branch>
<status status="PASS" starttime="20210731 10:43:40.271" endtime="20210731 10:43:40.277"/>
</if>
<status status="PASS" starttime="20210731 10:43:40.256" endtime="20210731 10:43:40.277"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:40.278" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:40.278" endtime="20210731 10:43:40.278"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:40.279" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:40.279" endtime="20210731 10:43:40.279"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:40.280" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:40.280" endtime="20210731 10:43:40.280"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:40.281" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:40.280" endtime="20210731 10:43:40.281"/>
</kw>
<msg timestamp="20210731 10:43:40.281" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:40.278" endtime="20210731 10:43:40.281"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:40.290" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:40.281" endtime="20210731 10:43:40.291"/>
</kw>
<status status="PASS" starttime="20210731 10:43:40.277" endtime="20210731 10:43:40.291"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:43:40.292" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:43:40.292" endtime="20210731 10:43:40.296"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:43:41.800" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:43:40.296" endtime="20210731 10:43:41.800"/>
</kw>
<status status="PASS" starttime="20210731 10:43:40.291" endtime="20210731 10:43:41.801"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:41.802" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:41.802" endtime="20210731 10:43:41.802"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:41.802" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:41.802" endtime="20210731 10:43:41.803"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:41.803" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:41.803" endtime="20210731 10:43:41.803"/>
</kw>
<msg timestamp="20210731 10:43:41.803" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:41.801" endtime="20210731 10:43:41.803"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:43:41.803" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:43:41.803" endtime="20210731 10:43:41.804"/>
</kw>
<status status="PASS" starttime="20210731 10:43:41.801" endtime="20210731 10:43:41.804"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:43:41.804" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:43:41.805" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:43:41.804" endtime="20210731 10:43:41.805"/>
</kw>
<status status="PASS" starttime="20210731 10:43:41.804" endtime="20210731 10:43:41.805"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:43:41.805" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:43:41.805" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:43:41.805" endtime="20210731 10:43:41.805"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:43:41.806" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:43:41.806" endtime="20210731 10:43:41.806"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:41.807" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:41.806" endtime="20210731 10:43:41.807"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:41.807" endtime="20210731 10:43:41.808"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:41.809" endtime="20210731 10:43:41.810"/>
</kw>
<status status="PASS" starttime="20210731 10:43:41.806" endtime="20210731 10:43:41.810"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:41.810" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:41.810" endtime="20210731 10:43:41.810"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:41.810" endtime="20210731 10:43:41.811"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:41.811" endtime="20210731 10:43:41.811"/>
</kw>
<status status="PASS" starttime="20210731 10:43:41.810" endtime="20210731 10:43:41.811"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:41.812" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:41.811" endtime="20210731 10:43:41.812"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:41.812" endtime="20210731 10:43:41.812"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:41.813" endtime="20210731 10:43:41.813"/>
</kw>
<status status="PASS" starttime="20210731 10:43:41.811" endtime="20210731 10:43:41.813"/>
</iter>
<status status="PASS" starttime="20210731 10:43:41.806" endtime="20210731 10:43:41.813"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:43:41.813" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:43:41.813" endtime="20210731 10:43:41.813"/>
</kw>
<status status="PASS" starttime="20210731 10:43:41.805" endtime="20210731 10:43:41.813"/>
</kw>
<status status="PASS" starttime="20210731 10:43:40.255" endtime="20210731 10:43:41.814"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdABCD</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:41.815" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:43:41.814" endtime="20210731 10:43:41.815"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:41.815" level="INFO">${payload} = {'password': 'abcdABCD'}</msg>
<status status="PASS" starttime="20210731 10:43:41.815" endtime="20210731 10:43:41.815"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:41.824" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:41.825" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:41.815" endtime="20210731 10:43:41.825"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:41.825" endtime="20210731 10:43:41.825"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:41.825" endtime="20210731 10:43:41.825"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:41.815" endtime="20210731 10:43:41.825"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:41.815" endtime="20210731 10:43:41.825"/>
</for>
<status status="FAIL" starttime="20210731 10:43:41.814" endtime="20210731 10:43:41.825"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:41.814" endtime="20210731 10:43:41.825"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdABCD</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:41.826" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:43:41.826" endtime="20210731 10:43:41.826"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:41.827" level="INFO">${payload} = {'password': 'abcdABCD'}</msg>
<status status="PASS" starttime="20210731 10:43:41.827" endtime="20210731 10:43:41.827"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:41.831" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:41.831" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:41.827" endtime="20210731 10:43:41.831"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:41.832" endtime="20210731 10:43:41.832"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:41.832" endtime="20210731 10:43:41.832"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:41.827" endtime="20210731 10:43:41.832"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:41.827" endtime="20210731 10:43:41.832"/>
</for>
<status status="FAIL" starttime="20210731 10:43:41.826" endtime="20210731 10:43:41.832"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:41.825" endtime="20210731 10:43:41.832"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdABCD</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:41.833" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:43:41.833" endtime="20210731 10:43:41.833"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:41.834" level="INFO">${payload} = {'password': 'abcdABCD'}</msg>
<status status="PASS" starttime="20210731 10:43:41.833" endtime="20210731 10:43:41.834"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:41.838" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:41.838" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:41.834" endtime="20210731 10:43:41.838"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:41.839" endtime="20210731 10:43:41.839"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:41.839" endtime="20210731 10:43:41.839"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:41.834" endtime="20210731 10:43:41.839"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:41.834" endtime="20210731 10:43:41.839"/>
</for>
<status status="FAIL" starttime="20210731 10:43:41.832" endtime="20210731 10:43:41.839"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:41.832" endtime="20210731 10:43:41.839"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:41.814" endtime="20210731 10:43:41.839"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:41.844" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:41.853" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:41.853" level="INFO">${pids} = 13960
13967
13973</msg>
<status status="PASS" starttime="20210731 10:43:41.840" endtime="20210731 10:43:41.853"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:41.854" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:41.853" endtime="20210731 10:43:41.854"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:41.855" level="INFO">${pids} = ['13960', '13967', '13973']</msg>
<status status="PASS" starttime="20210731 10:43:41.854" endtime="20210731 10:43:41.855"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">13960</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:41.858" level="INFO">Running command 'kill 13960 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:41.855" endtime="20210731 10:43:41.859"/>
</kw>
<status status="PASS" starttime="20210731 10:43:41.855" endtime="20210731 10:43:41.859"/>
</iter>
<iter>
<var name="${pid}">13967</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:41.864" level="INFO">Running command 'kill 13967 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:41.861" endtime="20210731 10:43:41.865"/>
</kw>
<status status="PASS" starttime="20210731 10:43:41.859" endtime="20210731 10:43:41.865"/>
</iter>
<iter>
<var name="${pid}">13973</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:41.869" level="INFO">Running command 'kill 13973 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:41.865" endtime="20210731 10:43:41.869"/>
</kw>
<status status="PASS" starttime="20210731 10:43:41.865" endtime="20210731 10:43:41.869"/>
</iter>
<status status="PASS" starttime="20210731 10:43:41.855" endtime="20210731 10:43:41.870"/>
</for>
<status status="PASS" starttime="20210731 10:43:41.854" endtime="20210731 10:43:41.870"/>
</branch>
<status status="PASS" starttime="20210731 10:43:41.854" endtime="20210731 10:43:41.870"/>
</if>
<status status="PASS" starttime="20210731 10:43:41.839" endtime="20210731 10:43:41.870"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcdABCD'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:43:40.255" endtime="20210731 10:43:41.870">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t59" name="With Each Valid Token, Updating Password Of Each System User With abcdABCDefgjklmnprstoö Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:41.876" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:41.885" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:41.885" level="INFO">${pids} = 14002</msg>
<status status="PASS" starttime="20210731 10:43:41.872" endtime="20210731 10:43:41.885"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:41.886" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:41.886" endtime="20210731 10:43:41.886"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:41.887" level="INFO">${pids} = ['14002']</msg>
<status status="PASS" starttime="20210731 10:43:41.886" endtime="20210731 10:43:41.887"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">14002</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:41.890" level="INFO">Running command 'kill 14002 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:41.887" endtime="20210731 10:43:41.890"/>
</kw>
<status status="PASS" starttime="20210731 10:43:41.887" endtime="20210731 10:43:41.890"/>
</iter>
<status status="PASS" starttime="20210731 10:43:41.887" endtime="20210731 10:43:41.891"/>
</for>
<status status="PASS" starttime="20210731 10:43:41.886" endtime="20210731 10:43:41.891"/>
</branch>
<status status="PASS" starttime="20210731 10:43:41.886" endtime="20210731 10:43:41.891"/>
</if>
<status status="PASS" starttime="20210731 10:43:41.872" endtime="20210731 10:43:41.891"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:41.892" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:41.891" endtime="20210731 10:43:41.892"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:41.893" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:41.892" endtime="20210731 10:43:41.893"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:41.893" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:41.893" endtime="20210731 10:43:41.893"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:41.893" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:41.893" endtime="20210731 10:43:41.893"/>
</kw>
<msg timestamp="20210731 10:43:41.894" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:41.892" endtime="20210731 10:43:41.894"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:41.897" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:41.894" endtime="20210731 10:43:41.899"/>
</kw>
<status status="PASS" starttime="20210731 10:43:41.891" endtime="20210731 10:43:41.899"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:43:41.900" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:43:41.900" endtime="20210731 10:43:41.906"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:43:43.408" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:43:41.906" endtime="20210731 10:43:43.408"/>
</kw>
<status status="PASS" starttime="20210731 10:43:41.899" endtime="20210731 10:43:43.409"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:43.410" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:43.410" endtime="20210731 10:43:43.410"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:43.410" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:43.410" endtime="20210731 10:43:43.410"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:43.411" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:43.410" endtime="20210731 10:43:43.411"/>
</kw>
<msg timestamp="20210731 10:43:43.411" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:43.409" endtime="20210731 10:43:43.411"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:43:43.411" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:43:43.411" endtime="20210731 10:43:43.412"/>
</kw>
<status status="PASS" starttime="20210731 10:43:43.409" endtime="20210731 10:43:43.412"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:43:43.412" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:43:43.413" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:43:43.412" endtime="20210731 10:43:43.413"/>
</kw>
<status status="PASS" starttime="20210731 10:43:43.412" endtime="20210731 10:43:43.413"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:43:43.413" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:43:43.414" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:43:43.413" endtime="20210731 10:43:43.414"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:43:43.414" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:43:43.414" endtime="20210731 10:43:43.414"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:43.415" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:43.415" endtime="20210731 10:43:43.415"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:43.415" endtime="20210731 10:43:43.416"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:43.416" endtime="20210731 10:43:43.416"/>
</kw>
<status status="PASS" starttime="20210731 10:43:43.414" endtime="20210731 10:43:43.416"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:43.417" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:43.416" endtime="20210731 10:43:43.417"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:43.417" endtime="20210731 10:43:43.417"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:43.418" endtime="20210731 10:43:43.418"/>
</kw>
<status status="PASS" starttime="20210731 10:43:43.416" endtime="20210731 10:43:43.418"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:43.418" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:43.418" endtime="20210731 10:43:43.418"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:43.418" endtime="20210731 10:43:43.419"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:43.419" endtime="20210731 10:43:43.419"/>
</kw>
<status status="PASS" starttime="20210731 10:43:43.418" endtime="20210731 10:43:43.419"/>
</iter>
<status status="PASS" starttime="20210731 10:43:43.414" endtime="20210731 10:43:43.419"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:43:43.420" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:43:43.419" endtime="20210731 10:43:43.420"/>
</kw>
<status status="PASS" starttime="20210731 10:43:43.413" endtime="20210731 10:43:43.420"/>
</kw>
<status status="PASS" starttime="20210731 10:43:41.871" endtime="20210731 10:43:43.420"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdABCDefgjklmnprstoö</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:43.421" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:43:43.421" endtime="20210731 10:43:43.421"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:43.422" level="INFO">${payload} = {'password': 'abcdABCDefgjklmnprstoö'}</msg>
<status status="PASS" starttime="20210731 10:43:43.421" endtime="20210731 10:43:43.422"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:43.432" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:43.433" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:43.422" endtime="20210731 10:43:43.433"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:43.433" endtime="20210731 10:43:43.433"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:43.433" endtime="20210731 10:43:43.433"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:43.422" endtime="20210731 10:43:43.433"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:43.422" endtime="20210731 10:43:43.433"/>
</for>
<status status="FAIL" starttime="20210731 10:43:43.420" endtime="20210731 10:43:43.434"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:43.420" endtime="20210731 10:43:43.434"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdABCDefgjklmnprstoö</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:43.435" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:43:43.434" endtime="20210731 10:43:43.435"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:43.435" level="INFO">${payload} = {'password': 'abcdABCDefgjklmnprstoö'}</msg>
<status status="PASS" starttime="20210731 10:43:43.435" endtime="20210731 10:43:43.435"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:43.440" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:43.440" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:43.435" endtime="20210731 10:43:43.440"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:43.440" endtime="20210731 10:43:43.440"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:43.441" endtime="20210731 10:43:43.441"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:43.435" endtime="20210731 10:43:43.441"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:43.435" endtime="20210731 10:43:43.441"/>
</for>
<status status="FAIL" starttime="20210731 10:43:43.434" endtime="20210731 10:43:43.441"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:43.434" endtime="20210731 10:43:43.441"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdABCDefgjklmnprstoö</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:43.442" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:43:43.442" endtime="20210731 10:43:43.442"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:43.443" level="INFO">${payload} = {'password': 'abcdABCDefgjklmnprstoö'}</msg>
<status status="PASS" starttime="20210731 10:43:43.442" endtime="20210731 10:43:43.443"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:43.447" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:43.447" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:43.443" endtime="20210731 10:43:43.448"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:43.448" endtime="20210731 10:43:43.448"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:43.448" endtime="20210731 10:43:43.448"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:43.443" endtime="20210731 10:43:43.448"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:43.443" endtime="20210731 10:43:43.448"/>
</for>
<status status="FAIL" starttime="20210731 10:43:43.441" endtime="20210731 10:43:43.448"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:43.441" endtime="20210731 10:43:43.448"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:43.420" endtime="20210731 10:43:43.448"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:43.453" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:43.462" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:43.462" level="INFO">${pids} = 14025
14032
14043</msg>
<status status="PASS" starttime="20210731 10:43:43.449" endtime="20210731 10:43:43.462"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:43.463" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:43.463" endtime="20210731 10:43:43.463"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:43.464" level="INFO">${pids} = ['14025', '14032', '14043']</msg>
<status status="PASS" starttime="20210731 10:43:43.464" endtime="20210731 10:43:43.464"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">14025</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:43.467" level="INFO">Running command 'kill 14025 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:43.464" endtime="20210731 10:43:43.468"/>
</kw>
<status status="PASS" starttime="20210731 10:43:43.464" endtime="20210731 10:43:43.468"/>
</iter>
<iter>
<var name="${pid}">14032</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:43.471" level="INFO">Running command 'kill 14032 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:43.468" endtime="20210731 10:43:43.471"/>
</kw>
<status status="PASS" starttime="20210731 10:43:43.468" endtime="20210731 10:43:43.471"/>
</iter>
<iter>
<var name="${pid}">14043</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:43.476" level="INFO">Running command 'kill 14043 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:43.472" endtime="20210731 10:43:43.476"/>
</kw>
<status status="PASS" starttime="20210731 10:43:43.471" endtime="20210731 10:43:43.476"/>
</iter>
<status status="PASS" starttime="20210731 10:43:43.464" endtime="20210731 10:43:43.476"/>
</for>
<status status="PASS" starttime="20210731 10:43:43.463" endtime="20210731 10:43:43.476"/>
</branch>
<status status="PASS" starttime="20210731 10:43:43.463" endtime="20210731 10:43:43.476"/>
</if>
<status status="PASS" starttime="20210731 10:43:43.449" endtime="20210731 10:43:43.477"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcdABCDefgjklmnprstoö'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:43:41.871" endtime="20210731 10:43:43.478">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t60" name="With Each Valid Token, Updating Password Of Each System User With abcd012 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:43.482" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:43.492" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:43.492" level="INFO">${pids} = 14072</msg>
<status status="PASS" starttime="20210731 10:43:43.480" endtime="20210731 10:43:43.492"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:43.493" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:43.492" endtime="20210731 10:43:43.493"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:43.494" level="INFO">${pids} = ['14072']</msg>
<status status="PASS" starttime="20210731 10:43:43.493" endtime="20210731 10:43:43.494"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">14072</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:43.497" level="INFO">Running command 'kill 14072 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:43.494" endtime="20210731 10:43:43.498"/>
</kw>
<status status="PASS" starttime="20210731 10:43:43.494" endtime="20210731 10:43:43.498"/>
</iter>
<status status="PASS" starttime="20210731 10:43:43.494" endtime="20210731 10:43:43.498"/>
</for>
<status status="PASS" starttime="20210731 10:43:43.493" endtime="20210731 10:43:43.498"/>
</branch>
<status status="PASS" starttime="20210731 10:43:43.493" endtime="20210731 10:43:43.498"/>
</if>
<status status="PASS" starttime="20210731 10:43:43.479" endtime="20210731 10:43:43.498"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:43.499" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:43.499" endtime="20210731 10:43:43.499"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:43.500" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:43.499" endtime="20210731 10:43:43.500"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:43.500" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:43.500" endtime="20210731 10:43:43.500"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:43.500" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:43.500" endtime="20210731 10:43:43.500"/>
</kw>
<msg timestamp="20210731 10:43:43.501" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:43.499" endtime="20210731 10:43:43.501"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:43.504" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:43.501" endtime="20210731 10:43:43.506"/>
</kw>
<status status="PASS" starttime="20210731 10:43:43.498" endtime="20210731 10:43:43.506"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:43:43.507" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:43:43.507" endtime="20210731 10:43:43.513"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:43:45.028" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:43:43.514" endtime="20210731 10:43:45.028"/>
</kw>
<status status="PASS" starttime="20210731 10:43:43.506" endtime="20210731 10:43:45.028"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:45.030" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:45.029" endtime="20210731 10:43:45.030"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:45.030" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:45.030" endtime="20210731 10:43:45.030"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:45.031" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:45.030" endtime="20210731 10:43:45.031"/>
</kw>
<msg timestamp="20210731 10:43:45.031" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:45.029" endtime="20210731 10:43:45.031"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:43:45.031" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:43:45.031" endtime="20210731 10:43:45.032"/>
</kw>
<status status="PASS" starttime="20210731 10:43:45.029" endtime="20210731 10:43:45.032"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:43:45.033" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:43:45.033" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:43:45.033" endtime="20210731 10:43:45.034"/>
</kw>
<status status="PASS" starttime="20210731 10:43:45.032" endtime="20210731 10:43:45.034"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:43:45.034" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:43:45.035" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:43:45.034" endtime="20210731 10:43:45.035"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:43:45.035" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:43:45.035" endtime="20210731 10:43:45.035"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:45.036" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:45.035" endtime="20210731 10:43:45.036"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:45.036" endtime="20210731 10:43:45.037"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:45.038" endtime="20210731 10:43:45.038"/>
</kw>
<status status="PASS" starttime="20210731 10:43:45.035" endtime="20210731 10:43:45.038"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:45.038" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:45.038" endtime="20210731 10:43:45.038"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:45.038" endtime="20210731 10:43:45.039"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:45.040" endtime="20210731 10:43:45.040"/>
</kw>
<status status="PASS" starttime="20210731 10:43:45.038" endtime="20210731 10:43:45.040"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:45.041" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:45.040" endtime="20210731 10:43:45.041"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:45.041" endtime="20210731 10:43:45.042"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:45.042" endtime="20210731 10:43:45.042"/>
</kw>
<status status="PASS" starttime="20210731 10:43:45.040" endtime="20210731 10:43:45.042"/>
</iter>
<status status="PASS" starttime="20210731 10:43:45.035" endtime="20210731 10:43:45.042"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:43:45.043" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:43:45.043" endtime="20210731 10:43:45.043"/>
</kw>
<status status="PASS" starttime="20210731 10:43:45.034" endtime="20210731 10:43:45.043"/>
</kw>
<status status="PASS" starttime="20210731 10:43:43.479" endtime="20210731 10:43:45.043"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd012</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:45.044" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:43:45.044" endtime="20210731 10:43:45.045"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:45.045" level="INFO">${payload} = {'password': 'abcd012'}</msg>
<status status="PASS" starttime="20210731 10:43:45.045" endtime="20210731 10:43:45.045"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:45.054" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:45.054" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:45.045" endtime="20210731 10:43:45.054"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:45.055" endtime="20210731 10:43:45.055"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:45.055" endtime="20210731 10:43:45.055"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:45.045" endtime="20210731 10:43:45.055"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:45.045" endtime="20210731 10:43:45.055"/>
</for>
<status status="FAIL" starttime="20210731 10:43:45.044" endtime="20210731 10:43:45.055"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:45.044" endtime="20210731 10:43:45.055"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd012</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:45.056" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:43:45.056" endtime="20210731 10:43:45.056"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:45.057" level="INFO">${payload} = {'password': 'abcd012'}</msg>
<status status="PASS" starttime="20210731 10:43:45.056" endtime="20210731 10:43:45.057"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:45.062" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:45.062" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:45.058" endtime="20210731 10:43:45.062"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:45.062" endtime="20210731 10:43:45.062"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:45.062" endtime="20210731 10:43:45.062"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:45.057" endtime="20210731 10:43:45.062"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:45.057" endtime="20210731 10:43:45.063"/>
</for>
<status status="FAIL" starttime="20210731 10:43:45.055" endtime="20210731 10:43:45.063"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:45.055" endtime="20210731 10:43:45.063"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd012</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:45.064" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:43:45.063" endtime="20210731 10:43:45.064"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:45.064" level="INFO">${payload} = {'password': 'abcd012'}</msg>
<status status="PASS" starttime="20210731 10:43:45.064" endtime="20210731 10:43:45.064"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:45.068" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:45.068" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:45.064" endtime="20210731 10:43:45.069"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:45.069" endtime="20210731 10:43:45.069"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:45.069" endtime="20210731 10:43:45.069"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:45.064" endtime="20210731 10:43:45.069"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:45.064" endtime="20210731 10:43:45.069"/>
</for>
<status status="FAIL" starttime="20210731 10:43:45.063" endtime="20210731 10:43:45.069"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:45.063" endtime="20210731 10:43:45.069"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:45.043" endtime="20210731 10:43:45.069"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:45.073" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:45.083" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:45.083" level="INFO">${pids} = 14095
14102
14106</msg>
<status status="PASS" starttime="20210731 10:43:45.070" endtime="20210731 10:43:45.083"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:45.084" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:45.084" endtime="20210731 10:43:45.084"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:45.085" level="INFO">${pids} = ['14095', '14102', '14106']</msg>
<status status="PASS" starttime="20210731 10:43:45.085" endtime="20210731 10:43:45.085"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">14095</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:45.088" level="INFO">Running command 'kill 14095 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:45.085" endtime="20210731 10:43:45.089"/>
</kw>
<status status="PASS" starttime="20210731 10:43:45.085" endtime="20210731 10:43:45.089"/>
</iter>
<iter>
<var name="${pid}">14102</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:45.092" level="INFO">Running command 'kill 14102 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:45.089" endtime="20210731 10:43:45.093"/>
</kw>
<status status="PASS" starttime="20210731 10:43:45.089" endtime="20210731 10:43:45.093"/>
</iter>
<iter>
<var name="${pid}">14106</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:45.096" level="INFO">Running command 'kill 14106 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:45.093" endtime="20210731 10:43:45.096"/>
</kw>
<status status="PASS" starttime="20210731 10:43:45.093" endtime="20210731 10:43:45.096"/>
</iter>
<status status="PASS" starttime="20210731 10:43:45.085" endtime="20210731 10:43:45.096"/>
</for>
<status status="PASS" starttime="20210731 10:43:45.085" endtime="20210731 10:43:45.096"/>
</branch>
<status status="PASS" starttime="20210731 10:43:45.084" endtime="20210731 10:43:45.096"/>
</if>
<status status="PASS" starttime="20210731 10:43:45.070" endtime="20210731 10:43:45.097"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcd012'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:43:43.478" endtime="20210731 10:43:45.097">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t61" name="With Each Valid Token, Updating Password Of Each System User With abcd0123 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:45.108" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:45.117" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:45.117" level="INFO">${pids} = 14135</msg>
<status status="PASS" starttime="20210731 10:43:45.100" endtime="20210731 10:43:45.118"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:45.119" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:45.118" endtime="20210731 10:43:45.119"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:45.119" level="INFO">${pids} = ['14135']</msg>
<status status="PASS" starttime="20210731 10:43:45.119" endtime="20210731 10:43:45.119"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">14135</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:45.123" level="INFO">Running command 'kill 14135 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:45.120" endtime="20210731 10:43:45.123"/>
</kw>
<status status="PASS" starttime="20210731 10:43:45.120" endtime="20210731 10:43:45.123"/>
</iter>
<status status="PASS" starttime="20210731 10:43:45.119" endtime="20210731 10:43:45.123"/>
</for>
<status status="PASS" starttime="20210731 10:43:45.119" endtime="20210731 10:43:45.123"/>
</branch>
<status status="PASS" starttime="20210731 10:43:45.119" endtime="20210731 10:43:45.123"/>
</if>
<status status="PASS" starttime="20210731 10:43:45.099" endtime="20210731 10:43:45.124"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:45.125" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:45.124" endtime="20210731 10:43:45.125"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:45.125" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:45.125" endtime="20210731 10:43:45.125"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:45.126" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:45.126" endtime="20210731 10:43:45.126"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:45.126" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:45.126" endtime="20210731 10:43:45.126"/>
</kw>
<msg timestamp="20210731 10:43:45.126" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:45.125" endtime="20210731 10:43:45.126"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:45.130" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:45.127" endtime="20210731 10:43:45.131"/>
</kw>
<status status="PASS" starttime="20210731 10:43:45.124" endtime="20210731 10:43:45.132"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:43:45.133" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:43:45.132" endtime="20210731 10:43:45.137"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:43:46.645" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:43:45.137" endtime="20210731 10:43:46.645"/>
</kw>
<status status="PASS" starttime="20210731 10:43:45.132" endtime="20210731 10:43:46.645"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:46.647" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:46.646" endtime="20210731 10:43:46.647"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:46.647" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:46.647" endtime="20210731 10:43:46.647"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:46.647" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:46.647" endtime="20210731 10:43:46.647"/>
</kw>
<msg timestamp="20210731 10:43:46.647" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:46.646" endtime="20210731 10:43:46.648"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:43:46.649" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:43:46.648" endtime="20210731 10:43:46.649"/>
</kw>
<status status="PASS" starttime="20210731 10:43:46.646" endtime="20210731 10:43:46.649"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:43:46.650" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:43:46.650" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:43:46.650" endtime="20210731 10:43:46.650"/>
</kw>
<status status="PASS" starttime="20210731 10:43:46.649" endtime="20210731 10:43:46.650"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:43:46.651" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:43:46.651" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:43:46.651" endtime="20210731 10:43:46.651"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:43:46.652" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:43:46.651" endtime="20210731 10:43:46.652"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:46.652" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:46.652" endtime="20210731 10:43:46.652"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:46.652" endtime="20210731 10:43:46.653"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:46.653" endtime="20210731 10:43:46.653"/>
</kw>
<status status="PASS" starttime="20210731 10:43:46.652" endtime="20210731 10:43:46.653"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:46.654" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:46.654" endtime="20210731 10:43:46.654"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:46.654" endtime="20210731 10:43:46.654"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:46.655" endtime="20210731 10:43:46.655"/>
</kw>
<status status="PASS" starttime="20210731 10:43:46.653" endtime="20210731 10:43:46.655"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:46.655" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:46.655" endtime="20210731 10:43:46.655"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:46.655" endtime="20210731 10:43:46.656"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:46.656" endtime="20210731 10:43:46.656"/>
</kw>
<status status="PASS" starttime="20210731 10:43:46.655" endtime="20210731 10:43:46.656"/>
</iter>
<status status="PASS" starttime="20210731 10:43:46.652" endtime="20210731 10:43:46.656"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:43:46.657" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:43:46.656" endtime="20210731 10:43:46.657"/>
</kw>
<status status="PASS" starttime="20210731 10:43:46.651" endtime="20210731 10:43:46.657"/>
</kw>
<status status="PASS" starttime="20210731 10:43:45.099" endtime="20210731 10:43:46.657"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd0123</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:46.659" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:43:46.659" endtime="20210731 10:43:46.659"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:46.660" level="INFO">${payload} = {'password': 'abcd0123'}</msg>
<status status="PASS" starttime="20210731 10:43:46.659" endtime="20210731 10:43:46.660"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:46.669" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:46.669" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:46.660" endtime="20210731 10:43:46.669"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:46.669" endtime="20210731 10:43:46.669"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:46.669" endtime="20210731 10:43:46.670"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:46.660" endtime="20210731 10:43:46.670"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:46.660" endtime="20210731 10:43:46.670"/>
</for>
<status status="FAIL" starttime="20210731 10:43:46.657" endtime="20210731 10:43:46.670"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:46.657" endtime="20210731 10:43:46.670"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd0123</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:46.671" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:43:46.671" endtime="20210731 10:43:46.671"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:46.671" level="INFO">${payload} = {'password': 'abcd0123'}</msg>
<status status="PASS" starttime="20210731 10:43:46.671" endtime="20210731 10:43:46.671"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:46.676" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:46.676" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:46.672" endtime="20210731 10:43:46.676"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:46.677" endtime="20210731 10:43:46.677"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:46.677" endtime="20210731 10:43:46.677"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:46.671" endtime="20210731 10:43:46.677"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:46.671" endtime="20210731 10:43:46.677"/>
</for>
<status status="FAIL" starttime="20210731 10:43:46.670" endtime="20210731 10:43:46.677"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:46.670" endtime="20210731 10:43:46.677"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd0123</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:46.678" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:43:46.678" endtime="20210731 10:43:46.678"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:46.679" level="INFO">${payload} = {'password': 'abcd0123'}</msg>
<status status="PASS" starttime="20210731 10:43:46.678" endtime="20210731 10:43:46.679"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:46.683" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:46.683" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:46.679" endtime="20210731 10:43:46.683"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:46.684" endtime="20210731 10:43:46.684"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:46.684" endtime="20210731 10:43:46.684"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:46.679" endtime="20210731 10:43:46.684"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:46.679" endtime="20210731 10:43:46.684"/>
</for>
<status status="FAIL" starttime="20210731 10:43:46.677" endtime="20210731 10:43:46.684"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:46.677" endtime="20210731 10:43:46.684"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:46.657" endtime="20210731 10:43:46.684"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:46.689" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:46.698" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:46.698" level="INFO">${pids} = 14158
14165
14169</msg>
<status status="PASS" starttime="20210731 10:43:46.686" endtime="20210731 10:43:46.698"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:46.699" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:46.699" endtime="20210731 10:43:46.699"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:46.700" level="INFO">${pids} = ['14158', '14165', '14169']</msg>
<status status="PASS" starttime="20210731 10:43:46.699" endtime="20210731 10:43:46.700"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">14158</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:46.704" level="INFO">Running command 'kill 14158 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:46.700" endtime="20210731 10:43:46.704"/>
</kw>
<status status="PASS" starttime="20210731 10:43:46.700" endtime="20210731 10:43:46.704"/>
</iter>
<iter>
<var name="${pid}">14165</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:46.708" level="INFO">Running command 'kill 14165 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:46.705" endtime="20210731 10:43:46.710"/>
</kw>
<status status="PASS" starttime="20210731 10:43:46.704" endtime="20210731 10:43:46.710"/>
</iter>
<iter>
<var name="${pid}">14169</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:46.715" level="INFO">Running command 'kill 14169 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:46.711" endtime="20210731 10:43:46.715"/>
</kw>
<status status="PASS" starttime="20210731 10:43:46.710" endtime="20210731 10:43:46.715"/>
</iter>
<status status="PASS" starttime="20210731 10:43:46.700" endtime="20210731 10:43:46.715"/>
</for>
<status status="PASS" starttime="20210731 10:43:46.699" endtime="20210731 10:43:46.715"/>
</branch>
<status status="PASS" starttime="20210731 10:43:46.699" endtime="20210731 10:43:46.715"/>
</if>
<status status="PASS" starttime="20210731 10:43:46.685" endtime="20210731 10:43:46.715"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcd0123'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:43:45.098" endtime="20210731 10:43:46.716">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t62" name="With Each Valid Token, Updating Password Of Each System User With abcd0123456789defghjk4 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:46.720" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:46.730" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:46.730" level="INFO">${pids} = 14198</msg>
<status status="PASS" starttime="20210731 10:43:46.718" endtime="20210731 10:43:46.730"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:46.731" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:46.730" endtime="20210731 10:43:46.731"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:46.731" level="INFO">${pids} = ['14198']</msg>
<status status="PASS" starttime="20210731 10:43:46.731" endtime="20210731 10:43:46.731"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">14198</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:46.735" level="INFO">Running command 'kill 14198 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:46.732" endtime="20210731 10:43:46.736"/>
</kw>
<status status="PASS" starttime="20210731 10:43:46.732" endtime="20210731 10:43:46.736"/>
</iter>
<status status="PASS" starttime="20210731 10:43:46.731" endtime="20210731 10:43:46.736"/>
</for>
<status status="PASS" starttime="20210731 10:43:46.731" endtime="20210731 10:43:46.736"/>
</branch>
<status status="PASS" starttime="20210731 10:43:46.731" endtime="20210731 10:43:46.736"/>
</if>
<status status="PASS" starttime="20210731 10:43:46.717" endtime="20210731 10:43:46.736"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:46.738" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:46.737" endtime="20210731 10:43:46.738"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:46.738" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:46.738" endtime="20210731 10:43:46.738"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:46.740" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:46.739" endtime="20210731 10:43:46.740"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:46.741" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:46.740" endtime="20210731 10:43:46.741"/>
</kw>
<msg timestamp="20210731 10:43:46.741" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:46.738" endtime="20210731 10:43:46.741"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:46.745" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:46.741" endtime="20210731 10:43:46.747"/>
</kw>
<status status="PASS" starttime="20210731 10:43:46.737" endtime="20210731 10:43:46.747"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:43:46.748" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:43:46.748" endtime="20210731 10:43:46.752"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:43:48.254" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:43:46.753" endtime="20210731 10:43:48.254"/>
</kw>
<status status="PASS" starttime="20210731 10:43:46.747" endtime="20210731 10:43:48.255"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:48.256" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:48.256" endtime="20210731 10:43:48.256"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:48.256" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:48.256" endtime="20210731 10:43:48.256"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:48.257" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:48.256" endtime="20210731 10:43:48.257"/>
</kw>
<msg timestamp="20210731 10:43:48.257" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:48.255" endtime="20210731 10:43:48.257"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:43:48.258" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:43:48.257" endtime="20210731 10:43:48.258"/>
</kw>
<status status="PASS" starttime="20210731 10:43:48.255" endtime="20210731 10:43:48.258"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:43:48.259" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:43:48.259" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:43:48.259" endtime="20210731 10:43:48.259"/>
</kw>
<status status="PASS" starttime="20210731 10:43:48.258" endtime="20210731 10:43:48.259"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:43:48.260" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:43:48.260" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:43:48.260" endtime="20210731 10:43:48.260"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:43:48.260" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:43:48.260" endtime="20210731 10:43:48.261"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:48.261" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:48.261" endtime="20210731 10:43:48.261"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:48.261" endtime="20210731 10:43:48.262"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:48.262" endtime="20210731 10:43:48.264"/>
</kw>
<status status="PASS" starttime="20210731 10:43:48.261" endtime="20210731 10:43:48.264"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:48.265" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:48.264" endtime="20210731 10:43:48.265"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:48.265" endtime="20210731 10:43:48.265"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:48.265" endtime="20210731 10:43:48.266"/>
</kw>
<status status="PASS" starttime="20210731 10:43:48.264" endtime="20210731 10:43:48.266"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:48.266" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:48.266" endtime="20210731 10:43:48.266"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:48.266" endtime="20210731 10:43:48.267"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:48.267" endtime="20210731 10:43:48.267"/>
</kw>
<status status="PASS" starttime="20210731 10:43:48.266" endtime="20210731 10:43:48.267"/>
</iter>
<status status="PASS" starttime="20210731 10:43:48.261" endtime="20210731 10:43:48.267"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:43:48.268" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:43:48.267" endtime="20210731 10:43:48.268"/>
</kw>
<status status="PASS" starttime="20210731 10:43:48.259" endtime="20210731 10:43:48.268"/>
</kw>
<status status="PASS" starttime="20210731 10:43:46.717" endtime="20210731 10:43:48.268"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd0123456789defghjk4</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:48.269" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:43:48.269" endtime="20210731 10:43:48.269"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:48.269" level="INFO">${payload} = {'password': 'abcd0123456789defghjk4'}</msg>
<status status="PASS" starttime="20210731 10:43:48.269" endtime="20210731 10:43:48.269"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:48.280" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:48.280" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:48.270" endtime="20210731 10:43:48.280"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:48.280" endtime="20210731 10:43:48.280"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:48.280" endtime="20210731 10:43:48.280"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:48.269" endtime="20210731 10:43:48.280"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:48.269" endtime="20210731 10:43:48.280"/>
</for>
<status status="FAIL" starttime="20210731 10:43:48.268" endtime="20210731 10:43:48.281"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:48.268" endtime="20210731 10:43:48.281"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd0123456789defghjk4</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:48.282" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:43:48.281" endtime="20210731 10:43:48.282"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:48.282" level="INFO">${payload} = {'password': 'abcd0123456789defghjk4'}</msg>
<status status="PASS" starttime="20210731 10:43:48.282" endtime="20210731 10:43:48.282"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:48.287" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:48.287" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:48.282" endtime="20210731 10:43:48.287"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:48.287" endtime="20210731 10:43:48.287"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:48.287" endtime="20210731 10:43:48.287"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:48.282" endtime="20210731 10:43:48.287"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:48.282" endtime="20210731 10:43:48.287"/>
</for>
<status status="FAIL" starttime="20210731 10:43:48.281" endtime="20210731 10:43:48.288"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:48.281" endtime="20210731 10:43:48.288"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd0123456789defghjk4</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:48.289" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:43:48.288" endtime="20210731 10:43:48.289"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:48.289" level="INFO">${payload} = {'password': 'abcd0123456789defghjk4'}</msg>
<status status="PASS" starttime="20210731 10:43:48.289" endtime="20210731 10:43:48.289"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:48.294" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:48.294" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:48.290" endtime="20210731 10:43:48.294"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:48.294" endtime="20210731 10:43:48.294"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:48.295" endtime="20210731 10:43:48.295"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:48.289" endtime="20210731 10:43:48.295"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:48.289" endtime="20210731 10:43:48.295"/>
</for>
<status status="FAIL" starttime="20210731 10:43:48.288" endtime="20210731 10:43:48.295"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:48.288" endtime="20210731 10:43:48.295"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:48.268" endtime="20210731 10:43:48.295"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:48.302" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:48.314" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:48.314" level="INFO">${pids} = 14221
14228
14239</msg>
<status status="PASS" starttime="20210731 10:43:48.296" endtime="20210731 10:43:48.314"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:48.315" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:48.314" endtime="20210731 10:43:48.315"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:48.315" level="INFO">${pids} = ['14221', '14228', '14239']</msg>
<status status="PASS" starttime="20210731 10:43:48.315" endtime="20210731 10:43:48.315"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">14221</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:48.318" level="INFO">Running command 'kill 14221 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:48.316" endtime="20210731 10:43:48.319"/>
</kw>
<status status="PASS" starttime="20210731 10:43:48.316" endtime="20210731 10:43:48.319"/>
</iter>
<iter>
<var name="${pid}">14228</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:48.322" level="INFO">Running command 'kill 14228 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:48.319" endtime="20210731 10:43:48.323"/>
</kw>
<status status="PASS" starttime="20210731 10:43:48.319" endtime="20210731 10:43:48.323"/>
</iter>
<iter>
<var name="${pid}">14239</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:48.327" level="INFO">Running command 'kill 14239 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:48.323" endtime="20210731 10:43:48.327"/>
</kw>
<status status="PASS" starttime="20210731 10:43:48.323" endtime="20210731 10:43:48.327"/>
</iter>
<status status="PASS" starttime="20210731 10:43:48.315" endtime="20210731 10:43:48.327"/>
</for>
<status status="PASS" starttime="20210731 10:43:48.315" endtime="20210731 10:43:48.327"/>
</branch>
<status status="PASS" starttime="20210731 10:43:48.315" endtime="20210731 10:43:48.327"/>
</if>
<status status="PASS" starttime="20210731 10:43:48.295" endtime="20210731 10:43:48.328"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcd0123456789defghjk4'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:43:46.716" endtime="20210731 10:43:48.328">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t63" name="With Each Valid Token, Updating Password Of Each System User With abcd!?. Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:48.335" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:48.344" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:48.344" level="INFO">${pids} = 14268</msg>
<status status="PASS" starttime="20210731 10:43:48.331" endtime="20210731 10:43:48.344"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:48.345" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:48.344" endtime="20210731 10:43:48.345"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:48.346" level="INFO">${pids} = ['14268']</msg>
<status status="PASS" starttime="20210731 10:43:48.346" endtime="20210731 10:43:48.346"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">14268</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:48.349" level="INFO">Running command 'kill 14268 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:48.346" endtime="20210731 10:43:48.349"/>
</kw>
<status status="PASS" starttime="20210731 10:43:48.346" endtime="20210731 10:43:48.349"/>
</iter>
<status status="PASS" starttime="20210731 10:43:48.346" endtime="20210731 10:43:48.349"/>
</for>
<status status="PASS" starttime="20210731 10:43:48.345" endtime="20210731 10:43:48.350"/>
</branch>
<status status="PASS" starttime="20210731 10:43:48.345" endtime="20210731 10:43:48.350"/>
</if>
<status status="PASS" starttime="20210731 10:43:48.330" endtime="20210731 10:43:48.350"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:48.351" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:48.350" endtime="20210731 10:43:48.351"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:48.351" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:48.351" endtime="20210731 10:43:48.351"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:48.352" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:48.351" endtime="20210731 10:43:48.352"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:48.352" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:48.352" endtime="20210731 10:43:48.352"/>
</kw>
<msg timestamp="20210731 10:43:48.352" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:48.351" endtime="20210731 10:43:48.352"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:48.355" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:48.352" endtime="20210731 10:43:48.357"/>
</kw>
<status status="PASS" starttime="20210731 10:43:48.350" endtime="20210731 10:43:48.358"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:43:48.359" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:43:48.358" endtime="20210731 10:43:48.363"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:43:49.865" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:43:48.363" endtime="20210731 10:43:49.866"/>
</kw>
<status status="PASS" starttime="20210731 10:43:48.358" endtime="20210731 10:43:49.866"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:49.867" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:49.867" endtime="20210731 10:43:49.867"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:49.867" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:49.867" endtime="20210731 10:43:49.867"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:49.868" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:49.867" endtime="20210731 10:43:49.868"/>
</kw>
<msg timestamp="20210731 10:43:49.868" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:49.866" endtime="20210731 10:43:49.868"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:43:49.868" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:43:49.868" endtime="20210731 10:43:49.869"/>
</kw>
<status status="PASS" starttime="20210731 10:43:49.866" endtime="20210731 10:43:49.869"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:43:49.870" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:43:49.870" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:43:49.869" endtime="20210731 10:43:49.870"/>
</kw>
<status status="PASS" starttime="20210731 10:43:49.869" endtime="20210731 10:43:49.870"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:43:49.871" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:43:49.871" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:43:49.870" endtime="20210731 10:43:49.871"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:43:49.871" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:43:49.871" endtime="20210731 10:43:49.871"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:49.872" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:49.871" endtime="20210731 10:43:49.872"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:49.872" endtime="20210731 10:43:49.873"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:49.873" endtime="20210731 10:43:49.873"/>
</kw>
<status status="PASS" starttime="20210731 10:43:49.871" endtime="20210731 10:43:49.873"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:49.874" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:49.874" endtime="20210731 10:43:49.874"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:49.874" endtime="20210731 10:43:49.875"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:49.876" endtime="20210731 10:43:49.876"/>
</kw>
<status status="PASS" starttime="20210731 10:43:49.874" endtime="20210731 10:43:49.876"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:49.876" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:49.876" endtime="20210731 10:43:49.876"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:49.876" endtime="20210731 10:43:49.877"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:49.877" endtime="20210731 10:43:49.878"/>
</kw>
<status status="PASS" starttime="20210731 10:43:49.876" endtime="20210731 10:43:49.878"/>
</iter>
<status status="PASS" starttime="20210731 10:43:49.871" endtime="20210731 10:43:49.878"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:43:49.878" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:43:49.878" endtime="20210731 10:43:49.878"/>
</kw>
<status status="PASS" starttime="20210731 10:43:49.870" endtime="20210731 10:43:49.878"/>
</kw>
<status status="PASS" starttime="20210731 10:43:48.330" endtime="20210731 10:43:49.878"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:49.880" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:43:49.879" endtime="20210731 10:43:49.880"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:49.880" level="INFO">${payload} = {'password': 'abcd!?.'}</msg>
<status status="PASS" starttime="20210731 10:43:49.880" endtime="20210731 10:43:49.880"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:49.890" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:49.890" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:49.880" endtime="20210731 10:43:49.891"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:49.891" endtime="20210731 10:43:49.891"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:49.891" endtime="20210731 10:43:49.891"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:49.880" endtime="20210731 10:43:49.891"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:49.880" endtime="20210731 10:43:49.891"/>
</for>
<status status="FAIL" starttime="20210731 10:43:49.879" endtime="20210731 10:43:49.891"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:49.879" endtime="20210731 10:43:49.891"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:49.892" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:43:49.892" endtime="20210731 10:43:49.892"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:49.893" level="INFO">${payload} = {'password': 'abcd!?.'}</msg>
<status status="PASS" starttime="20210731 10:43:49.892" endtime="20210731 10:43:49.893"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:49.897" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:49.897" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:49.893" endtime="20210731 10:43:49.897"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:49.898" endtime="20210731 10:43:49.898"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:49.898" endtime="20210731 10:43:49.898"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:49.893" endtime="20210731 10:43:49.898"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:49.893" endtime="20210731 10:43:49.898"/>
</for>
<status status="FAIL" starttime="20210731 10:43:49.891" endtime="20210731 10:43:49.898"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:49.891" endtime="20210731 10:43:49.898"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:49.899" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:43:49.899" endtime="20210731 10:43:49.899"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:49.899" level="INFO">${payload} = {'password': 'abcd!?.'}</msg>
<status status="PASS" starttime="20210731 10:43:49.899" endtime="20210731 10:43:49.900"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:49.904" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:49.904" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:49.900" endtime="20210731 10:43:49.904"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:49.904" endtime="20210731 10:43:49.904"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:49.905" endtime="20210731 10:43:49.905"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:49.900" endtime="20210731 10:43:49.905"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:49.900" endtime="20210731 10:43:49.905"/>
</for>
<status status="FAIL" starttime="20210731 10:43:49.898" endtime="20210731 10:43:49.905"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:49.898" endtime="20210731 10:43:49.905"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:49.878" endtime="20210731 10:43:49.905"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:49.912" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:49.922" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:49.922" level="INFO">${pids} = 14291
14298
14302</msg>
<status status="PASS" starttime="20210731 10:43:49.908" endtime="20210731 10:43:49.922"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:49.923" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:49.922" endtime="20210731 10:43:49.923"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:49.924" level="INFO">${pids} = ['14291', '14298', '14302']</msg>
<status status="PASS" starttime="20210731 10:43:49.924" endtime="20210731 10:43:49.924"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">14291</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:49.928" level="INFO">Running command 'kill 14291 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:49.924" endtime="20210731 10:43:49.928"/>
</kw>
<status status="PASS" starttime="20210731 10:43:49.924" endtime="20210731 10:43:49.929"/>
</iter>
<iter>
<var name="${pid}">14298</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:49.933" level="INFO">Running command 'kill 14298 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:49.929" endtime="20210731 10:43:49.935"/>
</kw>
<status status="PASS" starttime="20210731 10:43:49.929" endtime="20210731 10:43:49.935"/>
</iter>
<iter>
<var name="${pid}">14302</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:49.944" level="INFO">Running command 'kill 14302 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:49.936" endtime="20210731 10:43:49.944"/>
</kw>
<status status="PASS" starttime="20210731 10:43:49.935" endtime="20210731 10:43:49.944"/>
</iter>
<status status="PASS" starttime="20210731 10:43:49.924" endtime="20210731 10:43:49.944"/>
</for>
<status status="PASS" starttime="20210731 10:43:49.923" endtime="20210731 10:43:49.944"/>
</branch>
<status status="PASS" starttime="20210731 10:43:49.923" endtime="20210731 10:43:49.944"/>
</if>
<status status="PASS" starttime="20210731 10:43:49.906" endtime="20210731 10:43:49.945"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcd!?.'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:43:48.329" endtime="20210731 10:43:49.945">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t64" name="With Each Valid Token, Updating Password Of Each System User With abcd!?.! Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:49.951" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:49.960" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:49.960" level="INFO">${pids} = 14331</msg>
<status status="PASS" starttime="20210731 10:43:49.947" endtime="20210731 10:43:49.960"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:49.961" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:49.961" endtime="20210731 10:43:49.961"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:49.962" level="INFO">${pids} = ['14331']</msg>
<status status="PASS" starttime="20210731 10:43:49.962" endtime="20210731 10:43:49.962"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">14331</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:49.966" level="INFO">Running command 'kill 14331 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:49.963" endtime="20210731 10:43:49.966"/>
</kw>
<status status="PASS" starttime="20210731 10:43:49.963" endtime="20210731 10:43:49.966"/>
</iter>
<status status="PASS" starttime="20210731 10:43:49.962" endtime="20210731 10:43:49.966"/>
</for>
<status status="PASS" starttime="20210731 10:43:49.962" endtime="20210731 10:43:49.966"/>
</branch>
<status status="PASS" starttime="20210731 10:43:49.961" endtime="20210731 10:43:49.966"/>
</if>
<status status="PASS" starttime="20210731 10:43:49.947" endtime="20210731 10:43:49.967"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:49.968" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:49.967" endtime="20210731 10:43:49.968"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:49.968" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:49.968" endtime="20210731 10:43:49.968"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:49.969" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:49.969" endtime="20210731 10:43:49.969"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:49.969" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:49.969" endtime="20210731 10:43:49.970"/>
</kw>
<msg timestamp="20210731 10:43:49.970" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:49.968" endtime="20210731 10:43:49.970"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:49.975" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:49.970" endtime="20210731 10:43:49.977"/>
</kw>
<status status="PASS" starttime="20210731 10:43:49.967" endtime="20210731 10:43:49.978"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:43:49.979" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:43:49.979" endtime="20210731 10:43:49.983"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:43:51.485" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:43:49.984" endtime="20210731 10:43:51.486"/>
</kw>
<status status="PASS" starttime="20210731 10:43:49.978" endtime="20210731 10:43:51.486"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:51.487" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:51.487" endtime="20210731 10:43:51.487"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:51.487" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:51.487" endtime="20210731 10:43:51.488"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:51.488" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:51.488" endtime="20210731 10:43:51.488"/>
</kw>
<msg timestamp="20210731 10:43:51.488" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:51.486" endtime="20210731 10:43:51.488"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:43:51.489" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:43:51.488" endtime="20210731 10:43:51.489"/>
</kw>
<status status="PASS" starttime="20210731 10:43:51.486" endtime="20210731 10:43:51.489"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:43:51.490" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:43:51.490" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:43:51.490" endtime="20210731 10:43:51.490"/>
</kw>
<status status="PASS" starttime="20210731 10:43:51.489" endtime="20210731 10:43:51.490"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:43:51.491" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:43:51.491" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:43:51.491" endtime="20210731 10:43:51.491"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:43:51.492" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:43:51.491" endtime="20210731 10:43:51.492"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:51.492" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:51.492" endtime="20210731 10:43:51.492"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:51.492" endtime="20210731 10:43:51.493"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:51.494" endtime="20210731 10:43:51.495"/>
</kw>
<status status="PASS" starttime="20210731 10:43:51.492" endtime="20210731 10:43:51.495"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:51.495" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:51.495" endtime="20210731 10:43:51.495"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:51.495" endtime="20210731 10:43:51.496"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:51.496" endtime="20210731 10:43:51.496"/>
</kw>
<status status="PASS" starttime="20210731 10:43:51.495" endtime="20210731 10:43:51.496"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:51.497" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:51.496" endtime="20210731 10:43:51.497"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:51.497" endtime="20210731 10:43:51.498"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:51.498" endtime="20210731 10:43:51.498"/>
</kw>
<status status="PASS" starttime="20210731 10:43:51.496" endtime="20210731 10:43:51.498"/>
</iter>
<status status="PASS" starttime="20210731 10:43:51.492" endtime="20210731 10:43:51.498"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:43:51.498" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:43:51.498" endtime="20210731 10:43:51.498"/>
</kw>
<status status="PASS" starttime="20210731 10:43:51.490" endtime="20210731 10:43:51.499"/>
</kw>
<status status="PASS" starttime="20210731 10:43:49.947" endtime="20210731 10:43:51.499"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd!?.!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:51.500" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:43:51.500" endtime="20210731 10:43:51.500"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:51.500" level="INFO">${payload} = {'password': 'abcd!?.!'}</msg>
<status status="PASS" starttime="20210731 10:43:51.500" endtime="20210731 10:43:51.500"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:51.511" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:51.511" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:51.501" endtime="20210731 10:43:51.511"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:51.512" endtime="20210731 10:43:51.512"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:51.512" endtime="20210731 10:43:51.512"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:51.501" endtime="20210731 10:43:51.512"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:51.501" endtime="20210731 10:43:51.512"/>
</for>
<status status="FAIL" starttime="20210731 10:43:51.499" endtime="20210731 10:43:51.512"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:51.499" endtime="20210731 10:43:51.512"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd!?.!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:51.513" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:43:51.513" endtime="20210731 10:43:51.513"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:51.514" level="INFO">${payload} = {'password': 'abcd!?.!'}</msg>
<status status="PASS" starttime="20210731 10:43:51.513" endtime="20210731 10:43:51.514"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:51.519" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:51.519" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:51.514" endtime="20210731 10:43:51.520"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:51.520" endtime="20210731 10:43:51.520"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:51.520" endtime="20210731 10:43:51.520"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:51.514" endtime="20210731 10:43:51.520"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:51.514" endtime="20210731 10:43:51.520"/>
</for>
<status status="FAIL" starttime="20210731 10:43:51.512" endtime="20210731 10:43:51.520"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:51.512" endtime="20210731 10:43:51.520"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd!?.!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:51.521" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:43:51.521" endtime="20210731 10:43:51.521"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:51.522" level="INFO">${payload} = {'password': 'abcd!?.!'}</msg>
<status status="PASS" starttime="20210731 10:43:51.521" endtime="20210731 10:43:51.522"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:51.527" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:51.527" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:51.522" endtime="20210731 10:43:51.527"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:51.527" endtime="20210731 10:43:51.527"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:51.527" endtime="20210731 10:43:51.527"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:51.522" endtime="20210731 10:43:51.527"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:51.522" endtime="20210731 10:43:51.527"/>
</for>
<status status="FAIL" starttime="20210731 10:43:51.520" endtime="20210731 10:43:51.528"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:51.520" endtime="20210731 10:43:51.528"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:51.499" endtime="20210731 10:43:51.528"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:51.533" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:51.542" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:51.542" level="INFO">${pids} = 14354
14361
14369</msg>
<status status="PASS" starttime="20210731 10:43:51.529" endtime="20210731 10:43:51.542"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:51.543" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:51.543" endtime="20210731 10:43:51.543"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:51.544" level="INFO">${pids} = ['14354', '14361', '14369']</msg>
<status status="PASS" starttime="20210731 10:43:51.544" endtime="20210731 10:43:51.544"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">14354</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:51.547" level="INFO">Running command 'kill 14354 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:51.544" endtime="20210731 10:43:51.548"/>
</kw>
<status status="PASS" starttime="20210731 10:43:51.544" endtime="20210731 10:43:51.548"/>
</iter>
<iter>
<var name="${pid}">14361</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:51.551" level="INFO">Running command 'kill 14361 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:51.548" endtime="20210731 10:43:51.551"/>
</kw>
<status status="PASS" starttime="20210731 10:43:51.548" endtime="20210731 10:43:51.551"/>
</iter>
<iter>
<var name="${pid}">14369</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:51.555" level="INFO">Running command 'kill 14369 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:51.552" endtime="20210731 10:43:51.556"/>
</kw>
<status status="PASS" starttime="20210731 10:43:51.552" endtime="20210731 10:43:51.556"/>
</iter>
<status status="PASS" starttime="20210731 10:43:51.544" endtime="20210731 10:43:51.556"/>
</for>
<status status="PASS" starttime="20210731 10:43:51.544" endtime="20210731 10:43:51.556"/>
</branch>
<status status="PASS" starttime="20210731 10:43:51.544" endtime="20210731 10:43:51.556"/>
</if>
<status status="PASS" starttime="20210731 10:43:51.528" endtime="20210731 10:43:51.556"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcd!?.!'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:43:49.946" endtime="20210731 10:43:51.556">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t65" name="With Each Valid Token, Updating Password Of Each System User With abcd!?.!abcd!?.!abcd?? Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:51.562" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:51.572" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:51.572" level="INFO">${pids} = 14398</msg>
<status status="PASS" starttime="20210731 10:43:51.558" endtime="20210731 10:43:51.572"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:51.573" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:51.572" endtime="20210731 10:43:51.573"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:51.574" level="INFO">${pids} = ['14398']</msg>
<status status="PASS" starttime="20210731 10:43:51.574" endtime="20210731 10:43:51.574"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">14398</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:51.579" level="INFO">Running command 'kill 14398 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:51.575" endtime="20210731 10:43:51.579"/>
</kw>
<status status="PASS" starttime="20210731 10:43:51.574" endtime="20210731 10:43:51.579"/>
</iter>
<status status="PASS" starttime="20210731 10:43:51.574" endtime="20210731 10:43:51.579"/>
</for>
<status status="PASS" starttime="20210731 10:43:51.573" endtime="20210731 10:43:51.579"/>
</branch>
<status status="PASS" starttime="20210731 10:43:51.573" endtime="20210731 10:43:51.579"/>
</if>
<status status="PASS" starttime="20210731 10:43:51.558" endtime="20210731 10:43:51.579"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:51.581" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:51.580" endtime="20210731 10:43:51.581"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:51.582" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:51.582" endtime="20210731 10:43:51.582"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:51.583" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:51.582" endtime="20210731 10:43:51.583"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:51.583" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:51.583" endtime="20210731 10:43:51.583"/>
</kw>
<msg timestamp="20210731 10:43:51.583" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:51.581" endtime="20210731 10:43:51.583"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:51.587" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:51.584" endtime="20210731 10:43:51.590"/>
</kw>
<status status="PASS" starttime="20210731 10:43:51.580" endtime="20210731 10:43:51.591"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:43:51.592" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:43:51.591" endtime="20210731 10:43:51.599"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:43:53.101" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:43:51.599" endtime="20210731 10:43:53.101"/>
</kw>
<status status="PASS" starttime="20210731 10:43:51.591" endtime="20210731 10:43:53.101"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:53.103" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:53.102" endtime="20210731 10:43:53.103"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:53.103" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:53.103" endtime="20210731 10:43:53.103"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:53.103" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:53.103" endtime="20210731 10:43:53.104"/>
</kw>
<msg timestamp="20210731 10:43:53.105" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:53.102" endtime="20210731 10:43:53.105"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:43:53.105" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:43:53.105" endtime="20210731 10:43:53.106"/>
</kw>
<status status="PASS" starttime="20210731 10:43:53.101" endtime="20210731 10:43:53.106"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:43:53.107" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:43:53.107" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:43:53.107" endtime="20210731 10:43:53.107"/>
</kw>
<status status="PASS" starttime="20210731 10:43:53.106" endtime="20210731 10:43:53.108"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:43:53.109" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:43:53.109" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:43:53.109" endtime="20210731 10:43:53.110"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:43:53.110" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:43:53.110" endtime="20210731 10:43:53.110"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:53.110" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:53.110" endtime="20210731 10:43:53.110"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:53.111" endtime="20210731 10:43:53.111"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:53.111" endtime="20210731 10:43:53.112"/>
</kw>
<status status="PASS" starttime="20210731 10:43:53.110" endtime="20210731 10:43:53.112"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:53.112" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:53.112" endtime="20210731 10:43:53.112"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:53.112" endtime="20210731 10:43:53.113"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:53.113" endtime="20210731 10:43:53.113"/>
</kw>
<status status="PASS" starttime="20210731 10:43:53.112" endtime="20210731 10:43:53.113"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:53.114" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:53.113" endtime="20210731 10:43:53.114"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:53.114" endtime="20210731 10:43:53.114"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:53.114" endtime="20210731 10:43:53.115"/>
</kw>
<status status="PASS" starttime="20210731 10:43:53.113" endtime="20210731 10:43:53.115"/>
</iter>
<status status="PASS" starttime="20210731 10:43:53.110" endtime="20210731 10:43:53.115"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:43:53.115" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:43:53.115" endtime="20210731 10:43:53.115"/>
</kw>
<status status="PASS" starttime="20210731 10:43:53.108" endtime="20210731 10:43:53.115"/>
</kw>
<status status="PASS" starttime="20210731 10:43:51.558" endtime="20210731 10:43:53.115"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd!?.!abcd!?.!abcd??</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:53.118" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:43:53.117" endtime="20210731 10:43:53.118"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:53.118" level="INFO">${payload} = {'password': 'abcd!?.!abcd!?.!abcd??'}</msg>
<status status="PASS" starttime="20210731 10:43:53.118" endtime="20210731 10:43:53.118"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:53.127" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:53.127" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:53.118" endtime="20210731 10:43:53.127"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:53.128" endtime="20210731 10:43:53.128"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:53.128" endtime="20210731 10:43:53.128"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:53.118" endtime="20210731 10:43:53.128"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:53.118" endtime="20210731 10:43:53.128"/>
</for>
<status status="FAIL" starttime="20210731 10:43:53.116" endtime="20210731 10:43:53.128"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:53.116" endtime="20210731 10:43:53.128"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd!?.!abcd!?.!abcd??</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:53.129" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:43:53.129" endtime="20210731 10:43:53.129"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:53.129" level="INFO">${payload} = {'password': 'abcd!?.!abcd!?.!abcd??'}</msg>
<status status="PASS" starttime="20210731 10:43:53.129" endtime="20210731 10:43:53.129"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:53.134" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:53.134" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:53.130" endtime="20210731 10:43:53.134"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:53.134" endtime="20210731 10:43:53.134"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:53.134" endtime="20210731 10:43:53.134"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:53.130" endtime="20210731 10:43:53.134"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:53.130" endtime="20210731 10:43:53.134"/>
</for>
<status status="FAIL" starttime="20210731 10:43:53.128" endtime="20210731 10:43:53.134"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:53.128" endtime="20210731 10:43:53.134"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd!?.!abcd!?.!abcd??</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:53.135" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:43:53.135" endtime="20210731 10:43:53.135"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:53.136" level="INFO">${payload} = {'password': 'abcd!?.!abcd!?.!abcd??'}</msg>
<status status="PASS" starttime="20210731 10:43:53.136" endtime="20210731 10:43:53.136"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:53.140" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:53.141" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:53.136" endtime="20210731 10:43:53.141"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:53.141" endtime="20210731 10:43:53.141"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:53.141" endtime="20210731 10:43:53.141"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:53.136" endtime="20210731 10:43:53.141"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:53.136" endtime="20210731 10:43:53.141"/>
</for>
<status status="FAIL" starttime="20210731 10:43:53.135" endtime="20210731 10:43:53.143"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:53.135" endtime="20210731 10:43:53.143"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:53.116" endtime="20210731 10:43:53.143"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:53.148" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:53.158" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:53.158" level="INFO">${pids} = 14421
14428
14439</msg>
<status status="PASS" starttime="20210731 10:43:53.145" endtime="20210731 10:43:53.158"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:53.159" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:53.159" endtime="20210731 10:43:53.160"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:53.160" level="INFO">${pids} = ['14421', '14428', '14439']</msg>
<status status="PASS" starttime="20210731 10:43:53.160" endtime="20210731 10:43:53.161"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">14421</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:53.164" level="INFO">Running command 'kill 14421 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:53.161" endtime="20210731 10:43:53.164"/>
</kw>
<status status="PASS" starttime="20210731 10:43:53.161" endtime="20210731 10:43:53.164"/>
</iter>
<iter>
<var name="${pid}">14428</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:53.168" level="INFO">Running command 'kill 14428 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:53.165" endtime="20210731 10:43:53.170"/>
</kw>
<status status="PASS" starttime="20210731 10:43:53.165" endtime="20210731 10:43:53.170"/>
</iter>
<iter>
<var name="${pid}">14439</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:53.175" level="INFO">Running command 'kill 14439 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:53.171" endtime="20210731 10:43:53.175"/>
</kw>
<status status="PASS" starttime="20210731 10:43:53.170" endtime="20210731 10:43:53.175"/>
</iter>
<status status="PASS" starttime="20210731 10:43:53.161" endtime="20210731 10:43:53.175"/>
</for>
<status status="PASS" starttime="20210731 10:43:53.160" endtime="20210731 10:43:53.176"/>
</branch>
<status status="PASS" starttime="20210731 10:43:53.160" endtime="20210731 10:43:53.176"/>
</if>
<status status="PASS" starttime="20210731 10:43:53.144" endtime="20210731 10:43:53.176"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcd!?.!abcd!?.!abcd??'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:43:51.557" endtime="20210731 10:43:53.176">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t66" name="With Each Valid Token, Updating Password Of Each System User With ABCD012 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:53.182" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:53.191" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:53.192" level="INFO">${pids} = 14468</msg>
<status status="PASS" starttime="20210731 10:43:53.179" endtime="20210731 10:43:53.192"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:53.193" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:53.192" endtime="20210731 10:43:53.193"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:53.193" level="INFO">${pids} = ['14468']</msg>
<status status="PASS" starttime="20210731 10:43:53.193" endtime="20210731 10:43:53.193"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">14468</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:53.197" level="INFO">Running command 'kill 14468 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:53.194" endtime="20210731 10:43:53.198"/>
</kw>
<status status="PASS" starttime="20210731 10:43:53.194" endtime="20210731 10:43:53.198"/>
</iter>
<status status="PASS" starttime="20210731 10:43:53.193" endtime="20210731 10:43:53.198"/>
</for>
<status status="PASS" starttime="20210731 10:43:53.193" endtime="20210731 10:43:53.198"/>
</branch>
<status status="PASS" starttime="20210731 10:43:53.193" endtime="20210731 10:43:53.198"/>
</if>
<status status="PASS" starttime="20210731 10:43:53.179" endtime="20210731 10:43:53.198"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:53.199" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:53.199" endtime="20210731 10:43:53.199"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:53.200" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:53.200" endtime="20210731 10:43:53.200"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:53.200" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:53.200" endtime="20210731 10:43:53.200"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:53.201" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:53.201" endtime="20210731 10:43:53.201"/>
</kw>
<msg timestamp="20210731 10:43:53.201" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:53.199" endtime="20210731 10:43:53.201"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:53.206" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:53.201" endtime="20210731 10:43:53.208"/>
</kw>
<status status="PASS" starttime="20210731 10:43:53.199" endtime="20210731 10:43:53.208"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:43:53.210" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:43:53.210" endtime="20210731 10:43:53.214"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:43:54.715" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:43:53.215" endtime="20210731 10:43:54.715"/>
</kw>
<status status="PASS" starttime="20210731 10:43:53.209" endtime="20210731 10:43:54.716"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:54.717" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:54.717" endtime="20210731 10:43:54.717"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:54.718" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:54.717" endtime="20210731 10:43:54.718"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:54.718" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:54.718" endtime="20210731 10:43:54.718"/>
</kw>
<msg timestamp="20210731 10:43:54.719" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:54.716" endtime="20210731 10:43:54.719"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:43:54.720" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:43:54.719" endtime="20210731 10:43:54.721"/>
</kw>
<status status="PASS" starttime="20210731 10:43:54.716" endtime="20210731 10:43:54.721"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:43:54.722" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:43:54.722" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:43:54.721" endtime="20210731 10:43:54.722"/>
</kw>
<status status="PASS" starttime="20210731 10:43:54.721" endtime="20210731 10:43:54.722"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:43:54.723" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:43:54.723" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:43:54.722" endtime="20210731 10:43:54.723"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:43:54.724" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:43:54.723" endtime="20210731 10:43:54.724"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:54.725" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:54.724" endtime="20210731 10:43:54.725"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:54.725" endtime="20210731 10:43:54.727"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:54.727" endtime="20210731 10:43:54.727"/>
</kw>
<status status="PASS" starttime="20210731 10:43:54.724" endtime="20210731 10:43:54.727"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:54.728" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:54.728" endtime="20210731 10:43:54.728"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:54.728" endtime="20210731 10:43:54.729"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:54.729" endtime="20210731 10:43:54.729"/>
</kw>
<status status="PASS" starttime="20210731 10:43:54.727" endtime="20210731 10:43:54.729"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:54.730" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:54.729" endtime="20210731 10:43:54.730"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:54.730" endtime="20210731 10:43:54.731"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:54.731" endtime="20210731 10:43:54.731"/>
</kw>
<status status="PASS" starttime="20210731 10:43:54.729" endtime="20210731 10:43:54.731"/>
</iter>
<status status="PASS" starttime="20210731 10:43:54.724" endtime="20210731 10:43:54.731"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:43:54.732" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:43:54.731" endtime="20210731 10:43:54.732"/>
</kw>
<status status="PASS" starttime="20210731 10:43:54.722" endtime="20210731 10:43:54.732"/>
</kw>
<status status="PASS" starttime="20210731 10:43:53.178" endtime="20210731 10:43:54.732"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD012</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:54.733" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:43:54.733" endtime="20210731 10:43:54.733"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:54.734" level="INFO">${payload} = {'password': 'ABCD012'}</msg>
<status status="PASS" starttime="20210731 10:43:54.733" endtime="20210731 10:43:54.734"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:54.746" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:54.746" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:54.734" endtime="20210731 10:43:54.746"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:54.746" endtime="20210731 10:43:54.746"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:54.746" endtime="20210731 10:43:54.747"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:54.734" endtime="20210731 10:43:54.747"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:54.734" endtime="20210731 10:43:54.747"/>
</for>
<status status="FAIL" starttime="20210731 10:43:54.732" endtime="20210731 10:43:54.747"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:54.732" endtime="20210731 10:43:54.747"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD012</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:54.748" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:43:54.748" endtime="20210731 10:43:54.748"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:54.748" level="INFO">${payload} = {'password': 'ABCD012'}</msg>
<status status="PASS" starttime="20210731 10:43:54.748" endtime="20210731 10:43:54.748"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:54.756" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:54.756" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:54.750" endtime="20210731 10:43:54.756"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:54.756" endtime="20210731 10:43:54.756"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:54.757" endtime="20210731 10:43:54.757"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:54.749" endtime="20210731 10:43:54.757"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:54.749" endtime="20210731 10:43:54.757"/>
</for>
<status status="FAIL" starttime="20210731 10:43:54.747" endtime="20210731 10:43:54.757"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:54.747" endtime="20210731 10:43:54.757"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD012</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:54.758" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:43:54.758" endtime="20210731 10:43:54.758"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:54.759" level="INFO">${payload} = {'password': 'ABCD012'}</msg>
<status status="PASS" starttime="20210731 10:43:54.758" endtime="20210731 10:43:54.759"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:54.763" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:54.764" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:54.759" endtime="20210731 10:43:54.764"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:54.764" endtime="20210731 10:43:54.764"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:54.764" endtime="20210731 10:43:54.764"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:54.759" endtime="20210731 10:43:54.764"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:54.759" endtime="20210731 10:43:54.764"/>
</for>
<status status="FAIL" starttime="20210731 10:43:54.757" endtime="20210731 10:43:54.764"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:54.757" endtime="20210731 10:43:54.764"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:54.732" endtime="20210731 10:43:54.764"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:54.777" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:54.792" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:54.793" level="INFO">${pids} = 14491
14498
14503</msg>
<status status="PASS" starttime="20210731 10:43:54.766" endtime="20210731 10:43:54.793"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:54.794" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:54.793" endtime="20210731 10:43:54.794"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:54.795" level="INFO">${pids} = ['14491', '14498', '14503']</msg>
<status status="PASS" starttime="20210731 10:43:54.794" endtime="20210731 10:43:54.795"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">14491</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:54.798" level="INFO">Running command 'kill 14491 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:54.795" endtime="20210731 10:43:54.799"/>
</kw>
<status status="PASS" starttime="20210731 10:43:54.795" endtime="20210731 10:43:54.799"/>
</iter>
<iter>
<var name="${pid}">14498</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:54.805" level="INFO">Running command 'kill 14498 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:54.800" endtime="20210731 10:43:54.808"/>
</kw>
<status status="PASS" starttime="20210731 10:43:54.799" endtime="20210731 10:43:54.808"/>
</iter>
<iter>
<var name="${pid}">14503</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:54.813" level="INFO">Running command 'kill 14503 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:54.809" endtime="20210731 10:43:54.813"/>
</kw>
<status status="PASS" starttime="20210731 10:43:54.808" endtime="20210731 10:43:54.813"/>
</iter>
<status status="PASS" starttime="20210731 10:43:54.795" endtime="20210731 10:43:54.813"/>
</for>
<status status="PASS" starttime="20210731 10:43:54.794" endtime="20210731 10:43:54.814"/>
</branch>
<status status="PASS" starttime="20210731 10:43:54.794" endtime="20210731 10:43:54.814"/>
</if>
<status status="PASS" starttime="20210731 10:43:54.765" endtime="20210731 10:43:54.814"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABCD012'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:43:53.177" endtime="20210731 10:43:54.814">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t67" name="With Each Valid Token, Updating Password Of Each System User With ABCD0123 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:54.824" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:54.835" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:54.836" level="INFO">${pids} = 14532</msg>
<status status="PASS" starttime="20210731 10:43:54.817" endtime="20210731 10:43:54.836"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:54.837" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:54.836" endtime="20210731 10:43:54.837"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:54.838" level="INFO">${pids} = ['14532']</msg>
<status status="PASS" starttime="20210731 10:43:54.837" endtime="20210731 10:43:54.838"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">14532</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:54.842" level="INFO">Running command 'kill 14532 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:54.838" endtime="20210731 10:43:54.843"/>
</kw>
<status status="PASS" starttime="20210731 10:43:54.838" endtime="20210731 10:43:54.843"/>
</iter>
<status status="PASS" starttime="20210731 10:43:54.838" endtime="20210731 10:43:54.843"/>
</for>
<status status="PASS" starttime="20210731 10:43:54.837" endtime="20210731 10:43:54.843"/>
</branch>
<status status="PASS" starttime="20210731 10:43:54.837" endtime="20210731 10:43:54.843"/>
</if>
<status status="PASS" starttime="20210731 10:43:54.817" endtime="20210731 10:43:54.844"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:54.845" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:54.844" endtime="20210731 10:43:54.845"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:54.845" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:54.845" endtime="20210731 10:43:54.845"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:54.846" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:54.846" endtime="20210731 10:43:54.846"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:54.846" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:54.846" endtime="20210731 10:43:54.846"/>
</kw>
<msg timestamp="20210731 10:43:54.846" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:54.845" endtime="20210731 10:43:54.847"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:54.850" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:54.847" endtime="20210731 10:43:54.852"/>
</kw>
<status status="PASS" starttime="20210731 10:43:54.844" endtime="20210731 10:43:54.852"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:43:54.854" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:43:54.853" endtime="20210731 10:43:54.859"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:43:56.363" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:43:54.859" endtime="20210731 10:43:56.363"/>
</kw>
<status status="PASS" starttime="20210731 10:43:54.853" endtime="20210731 10:43:56.364"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:56.365" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:56.364" endtime="20210731 10:43:56.365"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:56.365" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:56.365" endtime="20210731 10:43:56.365"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:56.365" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:56.365" endtime="20210731 10:43:56.365"/>
</kw>
<msg timestamp="20210731 10:43:56.366" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:56.364" endtime="20210731 10:43:56.366"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:43:56.366" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:43:56.366" endtime="20210731 10:43:56.367"/>
</kw>
<status status="PASS" starttime="20210731 10:43:56.364" endtime="20210731 10:43:56.367"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:43:56.367" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:43:56.367" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:43:56.367" endtime="20210731 10:43:56.368"/>
</kw>
<status status="PASS" starttime="20210731 10:43:56.367" endtime="20210731 10:43:56.368"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:43:56.368" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:43:56.369" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:43:56.368" endtime="20210731 10:43:56.369"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:43:56.369" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:43:56.369" endtime="20210731 10:43:56.369"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:56.369" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:56.369" endtime="20210731 10:43:56.369"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:56.370" endtime="20210731 10:43:56.370"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:56.370" endtime="20210731 10:43:56.370"/>
</kw>
<status status="PASS" starttime="20210731 10:43:56.369" endtime="20210731 10:43:56.371"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:56.371" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:56.371" endtime="20210731 10:43:56.371"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:56.371" endtime="20210731 10:43:56.372"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:56.372" endtime="20210731 10:43:56.372"/>
</kw>
<status status="PASS" starttime="20210731 10:43:56.371" endtime="20210731 10:43:56.372"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:56.372" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:56.372" endtime="20210731 10:43:56.372"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:56.372" endtime="20210731 10:43:56.374"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:56.374" endtime="20210731 10:43:56.374"/>
</kw>
<status status="PASS" starttime="20210731 10:43:56.372" endtime="20210731 10:43:56.374"/>
</iter>
<status status="PASS" starttime="20210731 10:43:56.369" endtime="20210731 10:43:56.375"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:43:56.375" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:43:56.375" endtime="20210731 10:43:56.375"/>
</kw>
<status status="PASS" starttime="20210731 10:43:56.368" endtime="20210731 10:43:56.375"/>
</kw>
<status status="PASS" starttime="20210731 10:43:54.816" endtime="20210731 10:43:56.375"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD0123</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:56.377" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:43:56.377" endtime="20210731 10:43:56.377"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:56.378" level="INFO">${payload} = {'password': 'ABCD0123'}</msg>
<status status="PASS" starttime="20210731 10:43:56.378" endtime="20210731 10:43:56.378"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:56.387" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:56.388" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:56.379" endtime="20210731 10:43:56.388"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:56.388" endtime="20210731 10:43:56.388"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:56.388" endtime="20210731 10:43:56.388"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:56.379" endtime="20210731 10:43:56.388"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:56.378" endtime="20210731 10:43:56.388"/>
</for>
<status status="FAIL" starttime="20210731 10:43:56.376" endtime="20210731 10:43:56.388"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:56.376" endtime="20210731 10:43:56.388"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD0123</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:56.389" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:43:56.389" endtime="20210731 10:43:56.389"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:56.390" level="INFO">${payload} = {'password': 'ABCD0123'}</msg>
<status status="PASS" starttime="20210731 10:43:56.390" endtime="20210731 10:43:56.390"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:56.394" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:56.395" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:56.391" endtime="20210731 10:43:56.395"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:56.395" endtime="20210731 10:43:56.395"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:56.395" endtime="20210731 10:43:56.395"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:56.390" endtime="20210731 10:43:56.395"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:56.390" endtime="20210731 10:43:56.395"/>
</for>
<status status="FAIL" starttime="20210731 10:43:56.389" endtime="20210731 10:43:56.395"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:56.388" endtime="20210731 10:43:56.395"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD0123</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:56.396" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:43:56.396" endtime="20210731 10:43:56.396"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:56.397" level="INFO">${payload} = {'password': 'ABCD0123'}</msg>
<status status="PASS" starttime="20210731 10:43:56.396" endtime="20210731 10:43:56.397"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:56.401" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:56.401" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:56.397" endtime="20210731 10:43:56.401"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:56.401" endtime="20210731 10:43:56.401"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:56.401" endtime="20210731 10:43:56.401"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:56.397" endtime="20210731 10:43:56.401"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:56.397" endtime="20210731 10:43:56.401"/>
</for>
<status status="FAIL" starttime="20210731 10:43:56.395" endtime="20210731 10:43:56.402"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:56.395" endtime="20210731 10:43:56.402"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:56.375" endtime="20210731 10:43:56.402"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:56.407" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:56.416" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:56.416" level="INFO">${pids} = 14555
14562
14566</msg>
<status status="PASS" starttime="20210731 10:43:56.404" endtime="20210731 10:43:56.416"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:56.417" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:56.417" endtime="20210731 10:43:56.418"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:56.418" level="INFO">${pids} = ['14555', '14562', '14566']</msg>
<status status="PASS" starttime="20210731 10:43:56.418" endtime="20210731 10:43:56.418"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">14555</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:56.422" level="INFO">Running command 'kill 14555 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:56.419" endtime="20210731 10:43:56.423"/>
</kw>
<status status="PASS" starttime="20210731 10:43:56.418" endtime="20210731 10:43:56.423"/>
</iter>
<iter>
<var name="${pid}">14562</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:56.427" level="INFO">Running command 'kill 14562 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:56.424" endtime="20210731 10:43:56.427"/>
</kw>
<status status="PASS" starttime="20210731 10:43:56.423" endtime="20210731 10:43:56.427"/>
</iter>
<iter>
<var name="${pid}">14566</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:56.431" level="INFO">Running command 'kill 14566 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:56.428" endtime="20210731 10:43:56.431"/>
</kw>
<status status="PASS" starttime="20210731 10:43:56.428" endtime="20210731 10:43:56.431"/>
</iter>
<status status="PASS" starttime="20210731 10:43:56.418" endtime="20210731 10:43:56.431"/>
</for>
<status status="PASS" starttime="20210731 10:43:56.418" endtime="20210731 10:43:56.431"/>
</branch>
<status status="PASS" starttime="20210731 10:43:56.418" endtime="20210731 10:43:56.431"/>
</if>
<status status="PASS" starttime="20210731 10:43:56.403" endtime="20210731 10:43:56.431"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABCD0123'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:43:54.815" endtime="20210731 10:43:56.432">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t68" name="With Each Valid Token, Updating Password Of Each System User With ABCD0123ABCD0123ABCD01 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:56.438" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:56.447" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:56.447" level="INFO">${pids} = 14595</msg>
<status status="PASS" starttime="20210731 10:43:56.435" endtime="20210731 10:43:56.447"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:56.448" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:56.448" endtime="20210731 10:43:56.448"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:56.449" level="INFO">${pids} = ['14595']</msg>
<status status="PASS" starttime="20210731 10:43:56.449" endtime="20210731 10:43:56.449"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">14595</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:56.453" level="INFO">Running command 'kill 14595 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:56.450" endtime="20210731 10:43:56.453"/>
</kw>
<status status="PASS" starttime="20210731 10:43:56.449" endtime="20210731 10:43:56.453"/>
</iter>
<status status="PASS" starttime="20210731 10:43:56.449" endtime="20210731 10:43:56.453"/>
</for>
<status status="PASS" starttime="20210731 10:43:56.449" endtime="20210731 10:43:56.453"/>
</branch>
<status status="PASS" starttime="20210731 10:43:56.448" endtime="20210731 10:43:56.453"/>
</if>
<status status="PASS" starttime="20210731 10:43:56.434" endtime="20210731 10:43:56.454"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:56.455" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:56.455" endtime="20210731 10:43:56.455"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:56.456" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:56.455" endtime="20210731 10:43:56.456"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:56.456" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:56.456" endtime="20210731 10:43:56.456"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:56.457" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:56.456" endtime="20210731 10:43:56.457"/>
</kw>
<msg timestamp="20210731 10:43:56.457" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:56.455" endtime="20210731 10:43:56.457"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:56.461" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:56.457" endtime="20210731 10:43:56.462"/>
</kw>
<status status="PASS" starttime="20210731 10:43:56.454" endtime="20210731 10:43:56.463"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:43:56.464" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:43:56.463" endtime="20210731 10:43:56.468"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:43:57.971" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:43:56.468" endtime="20210731 10:43:57.971"/>
</kw>
<status status="PASS" starttime="20210731 10:43:56.463" endtime="20210731 10:43:57.971"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:57.973" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:57.972" endtime="20210731 10:43:57.973"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:57.974" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:57.973" endtime="20210731 10:43:57.974"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:57.974" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:57.974" endtime="20210731 10:43:57.974"/>
</kw>
<msg timestamp="20210731 10:43:57.975" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:57.972" endtime="20210731 10:43:57.975"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:43:57.975" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:43:57.975" endtime="20210731 10:43:57.976"/>
</kw>
<status status="PASS" starttime="20210731 10:43:57.972" endtime="20210731 10:43:57.976"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:43:57.977" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:43:57.977" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:43:57.977" endtime="20210731 10:43:57.977"/>
</kw>
<status status="PASS" starttime="20210731 10:43:57.976" endtime="20210731 10:43:57.977"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:43:57.978" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:43:57.978" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:43:57.977" endtime="20210731 10:43:57.978"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:43:57.978" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:43:57.978" endtime="20210731 10:43:57.978"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:57.979" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:57.979" endtime="20210731 10:43:57.979"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:57.979" endtime="20210731 10:43:57.980"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:57.980" endtime="20210731 10:43:57.980"/>
</kw>
<status status="PASS" starttime="20210731 10:43:57.979" endtime="20210731 10:43:57.980"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:57.981" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:57.981" endtime="20210731 10:43:57.981"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:57.981" endtime="20210731 10:43:57.982"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:57.982" endtime="20210731 10:43:57.982"/>
</kw>
<status status="PASS" starttime="20210731 10:43:57.980" endtime="20210731 10:43:57.982"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:57.983" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:57.983" endtime="20210731 10:43:57.983"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:57.983" endtime="20210731 10:43:57.984"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:57.984" endtime="20210731 10:43:57.984"/>
</kw>
<status status="PASS" starttime="20210731 10:43:57.982" endtime="20210731 10:43:57.984"/>
</iter>
<status status="PASS" starttime="20210731 10:43:57.979" endtime="20210731 10:43:57.984"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:43:57.985" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:43:57.984" endtime="20210731 10:43:57.985"/>
</kw>
<status status="PASS" starttime="20210731 10:43:57.977" endtime="20210731 10:43:57.985"/>
</kw>
<status status="PASS" starttime="20210731 10:43:56.434" endtime="20210731 10:43:57.985"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD0123ABCD0123ABCD01</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:57.986" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:43:57.986" endtime="20210731 10:43:57.986"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:57.986" level="INFO">${payload} = {'password': 'ABCD0123ABCD0123ABCD01'}</msg>
<status status="PASS" starttime="20210731 10:43:57.986" endtime="20210731 10:43:57.987"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:57.996" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:57.997" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:57.987" endtime="20210731 10:43:57.997"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:57.997" endtime="20210731 10:43:57.997"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:57.997" endtime="20210731 10:43:57.997"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:57.987" endtime="20210731 10:43:57.997"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:57.987" endtime="20210731 10:43:57.997"/>
</for>
<status status="FAIL" starttime="20210731 10:43:57.985" endtime="20210731 10:43:57.997"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:57.985" endtime="20210731 10:43:57.997"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD0123ABCD0123ABCD01</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:57.998" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:43:57.998" endtime="20210731 10:43:57.998"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:57.999" level="INFO">${payload} = {'password': 'ABCD0123ABCD0123ABCD01'}</msg>
<status status="PASS" starttime="20210731 10:43:57.999" endtime="20210731 10:43:57.999"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:58.003" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:58.004" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:57.999" endtime="20210731 10:43:58.004"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:58.004" endtime="20210731 10:43:58.004"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:58.004" endtime="20210731 10:43:58.004"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:57.999" endtime="20210731 10:43:58.004"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:57.999" endtime="20210731 10:43:58.004"/>
</for>
<status status="FAIL" starttime="20210731 10:43:57.997" endtime="20210731 10:43:58.004"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:57.997" endtime="20210731 10:43:58.004"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD0123ABCD0123ABCD01</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:58.006" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:43:58.005" endtime="20210731 10:43:58.006"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:58.006" level="INFO">${payload} = {'password': 'ABCD0123ABCD0123ABCD01'}</msg>
<status status="PASS" starttime="20210731 10:43:58.006" endtime="20210731 10:43:58.006"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:58.012" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:58.012" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:58.007" endtime="20210731 10:43:58.012"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:58.012" endtime="20210731 10:43:58.012"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:58.012" endtime="20210731 10:43:58.012"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:58.006" endtime="20210731 10:43:58.012"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:58.006" endtime="20210731 10:43:58.012"/>
</for>
<status status="FAIL" starttime="20210731 10:43:58.005" endtime="20210731 10:43:58.013"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:58.004" endtime="20210731 10:43:58.013"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:57.985" endtime="20210731 10:43:58.013"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:58.017" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:58.026" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:58.026" level="INFO">${pids} = 14618
14625
14636</msg>
<status status="PASS" starttime="20210731 10:43:58.014" endtime="20210731 10:43:58.026"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:58.027" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:58.027" endtime="20210731 10:43:58.027"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:58.028" level="INFO">${pids} = ['14618', '14625', '14636']</msg>
<status status="PASS" starttime="20210731 10:43:58.028" endtime="20210731 10:43:58.028"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">14618</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:58.031" level="INFO">Running command 'kill 14618 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:58.028" endtime="20210731 10:43:58.032"/>
</kw>
<status status="PASS" starttime="20210731 10:43:58.028" endtime="20210731 10:43:58.032"/>
</iter>
<iter>
<var name="${pid}">14625</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:58.035" level="INFO">Running command 'kill 14625 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:58.032" endtime="20210731 10:43:58.037"/>
</kw>
<status status="PASS" starttime="20210731 10:43:58.032" endtime="20210731 10:43:58.037"/>
</iter>
<iter>
<var name="${pid}">14636</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:58.042" level="INFO">Running command 'kill 14636 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:58.037" endtime="20210731 10:43:58.043"/>
</kw>
<status status="PASS" starttime="20210731 10:43:58.037" endtime="20210731 10:43:58.043"/>
</iter>
<status status="PASS" starttime="20210731 10:43:58.028" endtime="20210731 10:43:58.043"/>
</for>
<status status="PASS" starttime="20210731 10:43:58.028" endtime="20210731 10:43:58.043"/>
</branch>
<status status="PASS" starttime="20210731 10:43:58.027" endtime="20210731 10:43:58.044"/>
</if>
<status status="PASS" starttime="20210731 10:43:58.013" endtime="20210731 10:43:58.044"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABCD0123ABCD0123ABCD01'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:43:56.433" endtime="20210731 10:43:58.044">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t69" name="With Each Valid Token, Updating Password Of Each System User With ABCD!?. Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:58.051" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:58.060" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:58.060" level="INFO">${pids} = 14665</msg>
<status status="PASS" starttime="20210731 10:43:58.046" endtime="20210731 10:43:58.060"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:58.061" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:58.060" endtime="20210731 10:43:58.061"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:58.062" level="INFO">${pids} = ['14665']</msg>
<status status="PASS" starttime="20210731 10:43:58.061" endtime="20210731 10:43:58.062"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">14665</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:58.065" level="INFO">Running command 'kill 14665 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:58.062" endtime="20210731 10:43:58.065"/>
</kw>
<status status="PASS" starttime="20210731 10:43:58.062" endtime="20210731 10:43:58.065"/>
</iter>
<status status="PASS" starttime="20210731 10:43:58.062" endtime="20210731 10:43:58.065"/>
</for>
<status status="PASS" starttime="20210731 10:43:58.061" endtime="20210731 10:43:58.066"/>
</branch>
<status status="PASS" starttime="20210731 10:43:58.061" endtime="20210731 10:43:58.066"/>
</if>
<status status="PASS" starttime="20210731 10:43:58.046" endtime="20210731 10:43:58.066"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:58.067" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:58.066" endtime="20210731 10:43:58.067"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:58.067" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:58.067" endtime="20210731 10:43:58.067"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:58.068" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:58.068" endtime="20210731 10:43:58.068"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:58.068" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:58.068" endtime="20210731 10:43:58.068"/>
</kw>
<msg timestamp="20210731 10:43:58.068" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:58.067" endtime="20210731 10:43:58.068"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:58.071" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:58.068" endtime="20210731 10:43:58.073"/>
</kw>
<status status="PASS" starttime="20210731 10:43:58.066" endtime="20210731 10:43:58.073"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:43:58.075" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:43:58.074" endtime="20210731 10:43:58.079"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:43:59.580" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:43:58.079" endtime="20210731 10:43:59.580"/>
</kw>
<status status="PASS" starttime="20210731 10:43:58.073" endtime="20210731 10:43:59.580"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:59.581" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:59.581" endtime="20210731 10:43:59.581"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:59.582" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:59.582" endtime="20210731 10:43:59.582"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:59.582" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:59.582" endtime="20210731 10:43:59.583"/>
</kw>
<msg timestamp="20210731 10:43:59.583" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:59.581" endtime="20210731 10:43:59.583"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:43:59.583" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:43:59.583" endtime="20210731 10:43:59.584"/>
</kw>
<status status="PASS" starttime="20210731 10:43:59.580" endtime="20210731 10:43:59.584"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:43:59.584" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:43:59.584" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:43:59.584" endtime="20210731 10:43:59.585"/>
</kw>
<status status="PASS" starttime="20210731 10:43:59.584" endtime="20210731 10:43:59.585"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:43:59.585" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:43:59.586" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:43:59.585" endtime="20210731 10:43:59.586"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:43:59.586" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:43:59.586" endtime="20210731 10:43:59.586"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:59.586" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:59.586" endtime="20210731 10:43:59.586"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:59.587" endtime="20210731 10:43:59.587"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:59.587" endtime="20210731 10:43:59.587"/>
</kw>
<status status="PASS" starttime="20210731 10:43:59.586" endtime="20210731 10:43:59.588"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:59.588" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:59.588" endtime="20210731 10:43:59.588"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:59.588" endtime="20210731 10:43:59.589"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:59.589" endtime="20210731 10:43:59.589"/>
</kw>
<status status="PASS" starttime="20210731 10:43:59.588" endtime="20210731 10:43:59.589"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:59.589" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:43:59.589" endtime="20210731 10:43:59.589"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:43:59.590" endtime="20210731 10:43:59.590"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:43:59.590" endtime="20210731 10:43:59.591"/>
</kw>
<status status="PASS" starttime="20210731 10:43:59.589" endtime="20210731 10:43:59.591"/>
</iter>
<status status="PASS" starttime="20210731 10:43:59.586" endtime="20210731 10:43:59.591"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:43:59.591" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:43:59.591" endtime="20210731 10:43:59.591"/>
</kw>
<status status="PASS" starttime="20210731 10:43:59.585" endtime="20210731 10:43:59.591"/>
</kw>
<status status="PASS" starttime="20210731 10:43:58.046" endtime="20210731 10:43:59.591"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:59.593" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:43:59.592" endtime="20210731 10:43:59.593"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:59.594" level="INFO">${payload} = {'password': 'ABCD!?.'}</msg>
<status status="PASS" starttime="20210731 10:43:59.593" endtime="20210731 10:43:59.594"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:59.603" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:59.603" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:59.594" endtime="20210731 10:43:59.603"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:59.604" endtime="20210731 10:43:59.604"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:59.604" endtime="20210731 10:43:59.604"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:59.594" endtime="20210731 10:43:59.604"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:59.594" endtime="20210731 10:43:59.604"/>
</for>
<status status="FAIL" starttime="20210731 10:43:59.592" endtime="20210731 10:43:59.604"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:59.592" endtime="20210731 10:43:59.604"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:59.605" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:43:59.605" endtime="20210731 10:43:59.605"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:59.606" level="INFO">${payload} = {'password': 'ABCD!?.'}</msg>
<status status="PASS" starttime="20210731 10:43:59.605" endtime="20210731 10:43:59.606"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:59.611" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:59.612" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:59.606" endtime="20210731 10:43:59.612"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:59.612" endtime="20210731 10:43:59.612"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:59.612" endtime="20210731 10:43:59.612"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:59.606" endtime="20210731 10:43:59.612"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:59.606" endtime="20210731 10:43:59.612"/>
</for>
<status status="FAIL" starttime="20210731 10:43:59.604" endtime="20210731 10:43:59.612"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:59.604" endtime="20210731 10:43:59.612"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:59.613" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:43:59.613" endtime="20210731 10:43:59.613"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:43:59.614" level="INFO">${payload} = {'password': 'ABCD!?.'}</msg>
<status status="PASS" starttime="20210731 10:43:59.613" endtime="20210731 10:43:59.614"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:43:59.620" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:43:59.620" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:43:59.614" endtime="20210731 10:43:59.620"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:43:59.620" endtime="20210731 10:43:59.620"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:43:59.620" endtime="20210731 10:43:59.620"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:59.614" endtime="20210731 10:43:59.620"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:59.614" endtime="20210731 10:43:59.620"/>
</for>
<status status="FAIL" starttime="20210731 10:43:59.612" endtime="20210731 10:43:59.620"/>
</kw>
<status status="FAIL" starttime="20210731 10:43:59.612" endtime="20210731 10:43:59.620"/>
</iter>
<status status="FAIL" starttime="20210731 10:43:59.592" endtime="20210731 10:43:59.621"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:59.626" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:59.635" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:59.635" level="INFO">${pids} = 14688
14695
14699</msg>
<status status="PASS" starttime="20210731 10:43:59.622" endtime="20210731 10:43:59.635"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:59.636" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:59.635" endtime="20210731 10:43:59.636"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:59.636" level="INFO">${pids} = ['14688', '14695', '14699']</msg>
<status status="PASS" starttime="20210731 10:43:59.636" endtime="20210731 10:43:59.636"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">14688</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:59.640" level="INFO">Running command 'kill 14688 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:59.637" endtime="20210731 10:43:59.641"/>
</kw>
<status status="PASS" starttime="20210731 10:43:59.637" endtime="20210731 10:43:59.641"/>
</iter>
<iter>
<var name="${pid}">14695</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:59.646" level="INFO">Running command 'kill 14695 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:59.642" endtime="20210731 10:43:59.646"/>
</kw>
<status status="PASS" starttime="20210731 10:43:59.641" endtime="20210731 10:43:59.646"/>
</iter>
<iter>
<var name="${pid}">14699</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:59.650" level="INFO">Running command 'kill 14699 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:59.647" endtime="20210731 10:43:59.650"/>
</kw>
<status status="PASS" starttime="20210731 10:43:59.646" endtime="20210731 10:43:59.651"/>
</iter>
<status status="PASS" starttime="20210731 10:43:59.636" endtime="20210731 10:43:59.651"/>
</for>
<status status="PASS" starttime="20210731 10:43:59.636" endtime="20210731 10:43:59.651"/>
</branch>
<status status="PASS" starttime="20210731 10:43:59.636" endtime="20210731 10:43:59.651"/>
</if>
<status status="PASS" starttime="20210731 10:43:59.621" endtime="20210731 10:43:59.651"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABCD!?.'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:43:58.045" endtime="20210731 10:43:59.651">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t70" name="With Each Valid Token, Updating Password Of Each System User With ABCD!?.. Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:43:59.656" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:43:59.665" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:43:59.665" level="INFO">${pids} = 14728</msg>
<status status="PASS" starttime="20210731 10:43:59.653" endtime="20210731 10:43:59.665"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:59.666" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:43:59.665" endtime="20210731 10:43:59.666"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:43:59.667" level="INFO">${pids} = ['14728']</msg>
<status status="PASS" starttime="20210731 10:43:59.666" endtime="20210731 10:43:59.667"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">14728</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:59.671" level="INFO">Running command 'kill 14728 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:59.667" endtime="20210731 10:43:59.671"/>
</kw>
<status status="PASS" starttime="20210731 10:43:59.667" endtime="20210731 10:43:59.671"/>
</iter>
<status status="PASS" starttime="20210731 10:43:59.667" endtime="20210731 10:43:59.671"/>
</for>
<status status="PASS" starttime="20210731 10:43:59.666" endtime="20210731 10:43:59.672"/>
</branch>
<status status="PASS" starttime="20210731 10:43:59.666" endtime="20210731 10:43:59.672"/>
</if>
<status status="PASS" starttime="20210731 10:43:59.653" endtime="20210731 10:43:59.672"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:59.673" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:59.673" endtime="20210731 10:43:59.673"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:59.675" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:43:59.674" endtime="20210731 10:43:59.675"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:43:59.676" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:43:59.675" endtime="20210731 10:43:59.676"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:43:59.677" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:59.676" endtime="20210731 10:43:59.677"/>
</kw>
<msg timestamp="20210731 10:43:59.677" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:43:59.673" endtime="20210731 10:43:59.677"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:43:59.683" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:43:59.678" endtime="20210731 10:43:59.686"/>
</kw>
<status status="PASS" starttime="20210731 10:43:59.672" endtime="20210731 10:43:59.686"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:43:59.687" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:43:59.687" endtime="20210731 10:43:59.692"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:44:01.193" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:43:59.692" endtime="20210731 10:44:01.194"/>
</kw>
<status status="PASS" starttime="20210731 10:43:59.686" endtime="20210731 10:44:01.194"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:01.195" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:01.195" endtime="20210731 10:44:01.195"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:01.195" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:01.195" endtime="20210731 10:44:01.195"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:01.196" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:01.195" endtime="20210731 10:44:01.196"/>
</kw>
<msg timestamp="20210731 10:44:01.196" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:01.194" endtime="20210731 10:44:01.196"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:44:01.196" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:44:01.196" endtime="20210731 10:44:01.196"/>
</kw>
<status status="PASS" starttime="20210731 10:44:01.194" endtime="20210731 10:44:01.197"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:44:01.197" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:44:01.197" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:44:01.197" endtime="20210731 10:44:01.197"/>
</kw>
<status status="PASS" starttime="20210731 10:44:01.197" endtime="20210731 10:44:01.197"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:44:01.198" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:44:01.198" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:44:01.198" endtime="20210731 10:44:01.198"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:44:01.199" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:44:01.198" endtime="20210731 10:44:01.199"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:01.199" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:01.199" endtime="20210731 10:44:01.199"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:01.199" endtime="20210731 10:44:01.200"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:01.200" endtime="20210731 10:44:01.200"/>
</kw>
<status status="PASS" starttime="20210731 10:44:01.199" endtime="20210731 10:44:01.200"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:01.201" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:01.201" endtime="20210731 10:44:01.201"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:01.202" endtime="20210731 10:44:01.202"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:01.203" endtime="20210731 10:44:01.203"/>
</kw>
<status status="PASS" starttime="20210731 10:44:01.201" endtime="20210731 10:44:01.203"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:01.203" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:01.203" endtime="20210731 10:44:01.203"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:01.203" endtime="20210731 10:44:01.204"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:01.204" endtime="20210731 10:44:01.204"/>
</kw>
<status status="PASS" starttime="20210731 10:44:01.203" endtime="20210731 10:44:01.204"/>
</iter>
<status status="PASS" starttime="20210731 10:44:01.199" endtime="20210731 10:44:01.204"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:44:01.205" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:44:01.204" endtime="20210731 10:44:01.205"/>
</kw>
<status status="PASS" starttime="20210731 10:44:01.198" endtime="20210731 10:44:01.205"/>
</kw>
<status status="PASS" starttime="20210731 10:43:59.652" endtime="20210731 10:44:01.205"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD!?..</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:01.206" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:44:01.206" endtime="20210731 10:44:01.206"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:01.207" level="INFO">${payload} = {'password': 'ABCD!?..'}</msg>
<status status="PASS" starttime="20210731 10:44:01.206" endtime="20210731 10:44:01.207"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:01.216" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:01.217" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:01.207" endtime="20210731 10:44:01.217"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:01.217" endtime="20210731 10:44:01.217"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:01.217" endtime="20210731 10:44:01.217"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:01.207" endtime="20210731 10:44:01.217"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:01.207" endtime="20210731 10:44:01.217"/>
</for>
<status status="FAIL" starttime="20210731 10:44:01.205" endtime="20210731 10:44:01.217"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:01.205" endtime="20210731 10:44:01.217"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD!?..</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:01.218" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:44:01.218" endtime="20210731 10:44:01.218"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:01.219" level="INFO">${payload} = {'password': 'ABCD!?..'}</msg>
<status status="PASS" starttime="20210731 10:44:01.218" endtime="20210731 10:44:01.219"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:01.223" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:01.224" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:01.219" endtime="20210731 10:44:01.224"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:01.224" endtime="20210731 10:44:01.224"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:01.224" endtime="20210731 10:44:01.224"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:01.219" endtime="20210731 10:44:01.224"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:01.219" endtime="20210731 10:44:01.224"/>
</for>
<status status="FAIL" starttime="20210731 10:44:01.217" endtime="20210731 10:44:01.224"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:01.217" endtime="20210731 10:44:01.224"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD!?..</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:01.225" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:44:01.225" endtime="20210731 10:44:01.225"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:01.226" level="INFO">${payload} = {'password': 'ABCD!?..'}</msg>
<status status="PASS" starttime="20210731 10:44:01.225" endtime="20210731 10:44:01.226"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:01.230" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:01.230" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:01.226" endtime="20210731 10:44:01.230"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:01.231" endtime="20210731 10:44:01.231"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:01.231" endtime="20210731 10:44:01.231"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:01.226" endtime="20210731 10:44:01.231"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:01.226" endtime="20210731 10:44:01.231"/>
</for>
<status status="FAIL" starttime="20210731 10:44:01.224" endtime="20210731 10:44:01.231"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:01.224" endtime="20210731 10:44:01.231"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:01.205" endtime="20210731 10:44:01.231"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:01.235" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:01.244" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:01.244" level="INFO">${pids} = 14751
14758
14762</msg>
<status status="PASS" starttime="20210731 10:44:01.232" endtime="20210731 10:44:01.245"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:01.246" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:01.245" endtime="20210731 10:44:01.246"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:01.246" level="INFO">${pids} = ['14751', '14758', '14762']</msg>
<status status="PASS" starttime="20210731 10:44:01.246" endtime="20210731 10:44:01.246"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">14751</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:01.249" level="INFO">Running command 'kill 14751 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:01.247" endtime="20210731 10:44:01.250"/>
</kw>
<status status="PASS" starttime="20210731 10:44:01.246" endtime="20210731 10:44:01.250"/>
</iter>
<iter>
<var name="${pid}">14758</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:01.253" level="INFO">Running command 'kill 14758 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:01.250" endtime="20210731 10:44:01.253"/>
</kw>
<status status="PASS" starttime="20210731 10:44:01.250" endtime="20210731 10:44:01.253"/>
</iter>
<iter>
<var name="${pid}">14762</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:01.257" level="INFO">Running command 'kill 14762 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:01.254" endtime="20210731 10:44:01.258"/>
</kw>
<status status="PASS" starttime="20210731 10:44:01.254" endtime="20210731 10:44:01.258"/>
</iter>
<status status="PASS" starttime="20210731 10:44:01.246" endtime="20210731 10:44:01.258"/>
</for>
<status status="PASS" starttime="20210731 10:44:01.246" endtime="20210731 10:44:01.258"/>
</branch>
<status status="PASS" starttime="20210731 10:44:01.246" endtime="20210731 10:44:01.258"/>
</if>
<status status="PASS" starttime="20210731 10:44:01.231" endtime="20210731 10:44:01.258"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABCD!?..'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:43:59.652" endtime="20210731 10:44:01.258">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t71" name="With Each Valid Token, Updating Password Of Each System User With ABCD!?..ABCD!?..ABCD!? Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:01.269" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:01.279" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:01.279" level="INFO">${pids} = 14791</msg>
<status status="PASS" starttime="20210731 10:44:01.261" endtime="20210731 10:44:01.279"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:01.280" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:01.279" endtime="20210731 10:44:01.280"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:01.281" level="INFO">${pids} = ['14791']</msg>
<status status="PASS" starttime="20210731 10:44:01.280" endtime="20210731 10:44:01.281"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">14791</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:01.284" level="INFO">Running command 'kill 14791 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:01.281" endtime="20210731 10:44:01.284"/>
</kw>
<status status="PASS" starttime="20210731 10:44:01.281" endtime="20210731 10:44:01.285"/>
</iter>
<status status="PASS" starttime="20210731 10:44:01.281" endtime="20210731 10:44:01.285"/>
</for>
<status status="PASS" starttime="20210731 10:44:01.280" endtime="20210731 10:44:01.285"/>
</branch>
<status status="PASS" starttime="20210731 10:44:01.280" endtime="20210731 10:44:01.285"/>
</if>
<status status="PASS" starttime="20210731 10:44:01.261" endtime="20210731 10:44:01.285"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:01.286" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:01.286" endtime="20210731 10:44:01.286"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:01.287" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:01.286" endtime="20210731 10:44:01.287"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:01.287" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:01.287" endtime="20210731 10:44:01.287"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:01.287" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:01.287" endtime="20210731 10:44:01.287"/>
</kw>
<msg timestamp="20210731 10:44:01.288" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:01.286" endtime="20210731 10:44:01.288"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:01.291" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:01.288" endtime="20210731 10:44:01.294"/>
</kw>
<status status="PASS" starttime="20210731 10:44:01.285" endtime="20210731 10:44:01.294"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:44:01.295" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:44:01.295" endtime="20210731 10:44:01.299"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:44:02.800" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:44:01.300" endtime="20210731 10:44:02.800"/>
</kw>
<status status="PASS" starttime="20210731 10:44:01.294" endtime="20210731 10:44:02.801"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:02.802" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:02.802" endtime="20210731 10:44:02.802"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:02.802" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:02.802" endtime="20210731 10:44:02.802"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:02.803" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:02.802" endtime="20210731 10:44:02.803"/>
</kw>
<msg timestamp="20210731 10:44:02.803" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:02.801" endtime="20210731 10:44:02.803"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:44:02.804" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:44:02.803" endtime="20210731 10:44:02.804"/>
</kw>
<status status="PASS" starttime="20210731 10:44:02.801" endtime="20210731 10:44:02.804"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:44:02.805" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:44:02.805" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:44:02.805" endtime="20210731 10:44:02.805"/>
</kw>
<status status="PASS" starttime="20210731 10:44:02.805" endtime="20210731 10:44:02.805"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:44:02.806" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:44:02.807" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:44:02.806" endtime="20210731 10:44:02.807"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:44:02.807" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:44:02.807" endtime="20210731 10:44:02.807"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:02.808" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:02.808" endtime="20210731 10:44:02.808"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:02.808" endtime="20210731 10:44:02.809"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:02.809" endtime="20210731 10:44:02.809"/>
</kw>
<status status="PASS" starttime="20210731 10:44:02.807" endtime="20210731 10:44:02.809"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:02.810" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:02.809" endtime="20210731 10:44:02.810"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:02.810" endtime="20210731 10:44:02.811"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:02.811" endtime="20210731 10:44:02.811"/>
</kw>
<status status="PASS" starttime="20210731 10:44:02.809" endtime="20210731 10:44:02.811"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:02.812" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:02.811" endtime="20210731 10:44:02.812"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:02.812" endtime="20210731 10:44:02.813"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:02.813" endtime="20210731 10:44:02.813"/>
</kw>
<status status="PASS" starttime="20210731 10:44:02.811" endtime="20210731 10:44:02.813"/>
</iter>
<status status="PASS" starttime="20210731 10:44:02.807" endtime="20210731 10:44:02.813"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:44:02.814" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:44:02.813" endtime="20210731 10:44:02.814"/>
</kw>
<status status="PASS" starttime="20210731 10:44:02.806" endtime="20210731 10:44:02.814"/>
</kw>
<status status="PASS" starttime="20210731 10:44:01.260" endtime="20210731 10:44:02.814"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD!?..ABCD!?..ABCD!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:02.816" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:44:02.815" endtime="20210731 10:44:02.816"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:02.816" level="INFO">${payload} = {'password': 'ABCD!?..ABCD!?..ABCD!?'}</msg>
<status status="PASS" starttime="20210731 10:44:02.816" endtime="20210731 10:44:02.816"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:02.826" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:02.826" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:02.817" endtime="20210731 10:44:02.826"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:02.826" endtime="20210731 10:44:02.827"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:02.827" endtime="20210731 10:44:02.827"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:02.816" endtime="20210731 10:44:02.827"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:02.816" endtime="20210731 10:44:02.827"/>
</for>
<status status="FAIL" starttime="20210731 10:44:02.814" endtime="20210731 10:44:02.827"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:02.814" endtime="20210731 10:44:02.827"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD!?..ABCD!?..ABCD!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:02.828" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:44:02.828" endtime="20210731 10:44:02.828"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:02.828" level="INFO">${payload} = {'password': 'ABCD!?..ABCD!?..ABCD!?'}</msg>
<status status="PASS" starttime="20210731 10:44:02.828" endtime="20210731 10:44:02.828"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:02.833" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:02.833" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:02.829" endtime="20210731 10:44:02.833"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:02.833" endtime="20210731 10:44:02.833"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:02.833" endtime="20210731 10:44:02.833"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:02.829" endtime="20210731 10:44:02.833"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:02.829" endtime="20210731 10:44:02.833"/>
</for>
<status status="FAIL" starttime="20210731 10:44:02.827" endtime="20210731 10:44:02.833"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:02.827" endtime="20210731 10:44:02.833"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD!?..ABCD!?..ABCD!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:02.834" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:44:02.834" endtime="20210731 10:44:02.834"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:02.835" level="INFO">${payload} = {'password': 'ABCD!?..ABCD!?..ABCD!?'}</msg>
<status status="PASS" starttime="20210731 10:44:02.835" endtime="20210731 10:44:02.835"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:02.839" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:02.840" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:02.835" endtime="20210731 10:44:02.840"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:02.840" endtime="20210731 10:44:02.840"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:02.840" endtime="20210731 10:44:02.840"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:02.835" endtime="20210731 10:44:02.840"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:02.835" endtime="20210731 10:44:02.840"/>
</for>
<status status="FAIL" starttime="20210731 10:44:02.834" endtime="20210731 10:44:02.841"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:02.834" endtime="20210731 10:44:02.841"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:02.814" endtime="20210731 10:44:02.841"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:02.846" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:02.855" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:02.855" level="INFO">${pids} = 14814
14821
14832</msg>
<status status="PASS" starttime="20210731 10:44:02.842" endtime="20210731 10:44:02.855"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:02.856" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:02.855" endtime="20210731 10:44:02.856"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:02.856" level="INFO">${pids} = ['14814', '14821', '14832']</msg>
<status status="PASS" starttime="20210731 10:44:02.856" endtime="20210731 10:44:02.856"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">14814</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:02.860" level="INFO">Running command 'kill 14814 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:02.857" endtime="20210731 10:44:02.860"/>
</kw>
<status status="PASS" starttime="20210731 10:44:02.857" endtime="20210731 10:44:02.860"/>
</iter>
<iter>
<var name="${pid}">14821</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:02.863" level="INFO">Running command 'kill 14821 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:02.861" endtime="20210731 10:44:02.864"/>
</kw>
<status status="PASS" starttime="20210731 10:44:02.860" endtime="20210731 10:44:02.864"/>
</iter>
<iter>
<var name="${pid}">14832</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:02.867" level="INFO">Running command 'kill 14832 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:02.864" endtime="20210731 10:44:02.867"/>
</kw>
<status status="PASS" starttime="20210731 10:44:02.864" endtime="20210731 10:44:02.867"/>
</iter>
<status status="PASS" starttime="20210731 10:44:02.856" endtime="20210731 10:44:02.867"/>
</for>
<status status="PASS" starttime="20210731 10:44:02.856" endtime="20210731 10:44:02.867"/>
</branch>
<status status="PASS" starttime="20210731 10:44:02.856" endtime="20210731 10:44:02.868"/>
</if>
<status status="PASS" starttime="20210731 10:44:02.841" endtime="20210731 10:44:02.868"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABCD!?..ABCD!?..ABCD!?'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:44:01.259" endtime="20210731 10:44:02.868">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t72" name="With Each Valid Token, Updating Password Of Each System User With 0123!?. Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:02.878" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:02.887" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:02.887" level="INFO">${pids} = 14861</msg>
<status status="PASS" starttime="20210731 10:44:02.870" endtime="20210731 10:44:02.887"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:02.888" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:02.888" endtime="20210731 10:44:02.888"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:02.889" level="INFO">${pids} = ['14861']</msg>
<status status="PASS" starttime="20210731 10:44:02.888" endtime="20210731 10:44:02.889"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">14861</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:02.894" level="INFO">Running command 'kill 14861 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:02.889" endtime="20210731 10:44:02.894"/>
</kw>
<status status="PASS" starttime="20210731 10:44:02.889" endtime="20210731 10:44:02.894"/>
</iter>
<status status="PASS" starttime="20210731 10:44:02.889" endtime="20210731 10:44:02.895"/>
</for>
<status status="PASS" starttime="20210731 10:44:02.888" endtime="20210731 10:44:02.895"/>
</branch>
<status status="PASS" starttime="20210731 10:44:02.888" endtime="20210731 10:44:02.895"/>
</if>
<status status="PASS" starttime="20210731 10:44:02.870" endtime="20210731 10:44:02.895"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:02.896" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:02.896" endtime="20210731 10:44:02.896"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:02.896" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:02.896" endtime="20210731 10:44:02.896"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:02.897" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:02.897" endtime="20210731 10:44:02.897"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:02.898" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:02.897" endtime="20210731 10:44:02.898"/>
</kw>
<msg timestamp="20210731 10:44:02.898" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:02.896" endtime="20210731 10:44:02.898"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:02.901" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:02.898" endtime="20210731 10:44:02.903"/>
</kw>
<status status="PASS" starttime="20210731 10:44:02.895" endtime="20210731 10:44:02.903"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:44:02.904" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:44:02.904" endtime="20210731 10:44:02.910"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:44:04.411" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:44:02.910" endtime="20210731 10:44:04.411"/>
</kw>
<status status="PASS" starttime="20210731 10:44:02.903" endtime="20210731 10:44:04.412"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:04.414" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:04.413" endtime="20210731 10:44:04.414"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:04.414" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:04.414" endtime="20210731 10:44:04.414"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:04.415" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:04.415" endtime="20210731 10:44:04.415"/>
</kw>
<msg timestamp="20210731 10:44:04.415" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:04.413" endtime="20210731 10:44:04.415"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:44:04.416" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:44:04.416" endtime="20210731 10:44:04.417"/>
</kw>
<status status="PASS" starttime="20210731 10:44:04.412" endtime="20210731 10:44:04.417"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:44:04.418" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:44:04.418" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:44:04.418" endtime="20210731 10:44:04.418"/>
</kw>
<status status="PASS" starttime="20210731 10:44:04.417" endtime="20210731 10:44:04.418"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:44:04.419" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:44:04.419" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:44:04.419" endtime="20210731 10:44:04.419"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:44:04.420" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:44:04.419" endtime="20210731 10:44:04.420"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:04.420" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:04.420" endtime="20210731 10:44:04.420"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:04.420" endtime="20210731 10:44:04.422"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:04.422" endtime="20210731 10:44:04.423"/>
</kw>
<status status="PASS" starttime="20210731 10:44:04.420" endtime="20210731 10:44:04.423"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:04.423" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:04.423" endtime="20210731 10:44:04.423"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:04.423" endtime="20210731 10:44:04.424"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:04.424" endtime="20210731 10:44:04.425"/>
</kw>
<status status="PASS" starttime="20210731 10:44:04.423" endtime="20210731 10:44:04.425"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:04.425" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:04.425" endtime="20210731 10:44:04.425"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:04.425" endtime="20210731 10:44:04.426"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:04.426" endtime="20210731 10:44:04.426"/>
</kw>
<status status="PASS" starttime="20210731 10:44:04.425" endtime="20210731 10:44:04.427"/>
</iter>
<status status="PASS" starttime="20210731 10:44:04.420" endtime="20210731 10:44:04.427"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:44:04.427" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:44:04.427" endtime="20210731 10:44:04.427"/>
</kw>
<status status="PASS" starttime="20210731 10:44:04.418" endtime="20210731 10:44:04.427"/>
</kw>
<status status="PASS" starttime="20210731 10:44:02.869" endtime="20210731 10:44:04.427"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=0123!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:04.428" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:44:04.428" endtime="20210731 10:44:04.429"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:04.429" level="INFO">${payload} = {'password': '0123!?.'}</msg>
<status status="PASS" starttime="20210731 10:44:04.429" endtime="20210731 10:44:04.429"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:04.438" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:04.439" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:04.429" endtime="20210731 10:44:04.439"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:04.439" endtime="20210731 10:44:04.439"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:04.439" endtime="20210731 10:44:04.439"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:04.429" endtime="20210731 10:44:04.439"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:04.429" endtime="20210731 10:44:04.439"/>
</for>
<status status="FAIL" starttime="20210731 10:44:04.428" endtime="20210731 10:44:04.439"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:04.428" endtime="20210731 10:44:04.440"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=0123!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:04.442" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:44:04.442" endtime="20210731 10:44:04.443"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:04.443" level="INFO">${payload} = {'password': '0123!?.'}</msg>
<status status="PASS" starttime="20210731 10:44:04.443" endtime="20210731 10:44:04.443"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:04.449" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:04.449" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:04.445" endtime="20210731 10:44:04.449"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:04.449" endtime="20210731 10:44:04.449"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:04.449" endtime="20210731 10:44:04.449"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:04.445" endtime="20210731 10:44:04.449"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:04.443" endtime="20210731 10:44:04.449"/>
</for>
<status status="FAIL" starttime="20210731 10:44:04.440" endtime="20210731 10:44:04.449"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:04.440" endtime="20210731 10:44:04.449"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=0123!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:04.450" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:44:04.450" endtime="20210731 10:44:04.450"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:04.451" level="INFO">${payload} = {'password': '0123!?.'}</msg>
<status status="PASS" starttime="20210731 10:44:04.451" endtime="20210731 10:44:04.451"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:04.455" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:04.456" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:04.451" endtime="20210731 10:44:04.456"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:04.456" endtime="20210731 10:44:04.456"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:04.456" endtime="20210731 10:44:04.456"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:04.451" endtime="20210731 10:44:04.456"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:04.451" endtime="20210731 10:44:04.456"/>
</for>
<status status="FAIL" starttime="20210731 10:44:04.450" endtime="20210731 10:44:04.456"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:04.450" endtime="20210731 10:44:04.456"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:04.427" endtime="20210731 10:44:04.456"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:04.461" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:04.471" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:04.471" level="INFO">${pids} = 14884
14891
14902</msg>
<status status="PASS" starttime="20210731 10:44:04.457" endtime="20210731 10:44:04.471"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:04.472" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:04.471" endtime="20210731 10:44:04.472"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:04.472" level="INFO">${pids} = ['14884', '14891', '14902']</msg>
<status status="PASS" starttime="20210731 10:44:04.472" endtime="20210731 10:44:04.473"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">14884</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:04.477" level="INFO">Running command 'kill 14884 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:04.473" endtime="20210731 10:44:04.478"/>
</kw>
<status status="PASS" starttime="20210731 10:44:04.473" endtime="20210731 10:44:04.478"/>
</iter>
<iter>
<var name="${pid}">14891</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:04.481" level="INFO">Running command 'kill 14891 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:04.478" endtime="20210731 10:44:04.483"/>
</kw>
<status status="PASS" starttime="20210731 10:44:04.478" endtime="20210731 10:44:04.483"/>
</iter>
<iter>
<var name="${pid}">14902</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:04.488" level="INFO">Running command 'kill 14902 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:04.484" endtime="20210731 10:44:04.489"/>
</kw>
<status status="PASS" starttime="20210731 10:44:04.483" endtime="20210731 10:44:04.489"/>
</iter>
<status status="PASS" starttime="20210731 10:44:04.473" endtime="20210731 10:44:04.489"/>
</for>
<status status="PASS" starttime="20210731 10:44:04.472" endtime="20210731 10:44:04.489"/>
</branch>
<status status="PASS" starttime="20210731 10:44:04.472" endtime="20210731 10:44:04.489"/>
</if>
<status status="PASS" starttime="20210731 10:44:04.457" endtime="20210731 10:44:04.489"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": '0123!?.'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:44:02.868" endtime="20210731 10:44:04.489">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t73" name="With Each Valid Token, Updating Password Of Each System User With 0123!?.0 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:04.495" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:04.504" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:04.504" level="INFO">${pids} = 14931</msg>
<status status="PASS" starttime="20210731 10:44:04.492" endtime="20210731 10:44:04.504"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:04.505" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:04.504" endtime="20210731 10:44:04.505"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:04.506" level="INFO">${pids} = ['14931']</msg>
<status status="PASS" starttime="20210731 10:44:04.506" endtime="20210731 10:44:04.506"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">14931</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:04.511" level="INFO">Running command 'kill 14931 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:04.506" endtime="20210731 10:44:04.511"/>
</kw>
<status status="PASS" starttime="20210731 10:44:04.506" endtime="20210731 10:44:04.511"/>
</iter>
<status status="PASS" starttime="20210731 10:44:04.506" endtime="20210731 10:44:04.511"/>
</for>
<status status="PASS" starttime="20210731 10:44:04.506" endtime="20210731 10:44:04.511"/>
</branch>
<status status="PASS" starttime="20210731 10:44:04.505" endtime="20210731 10:44:04.512"/>
</if>
<status status="PASS" starttime="20210731 10:44:04.491" endtime="20210731 10:44:04.512"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:04.513" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:04.513" endtime="20210731 10:44:04.513"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:04.514" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:04.513" endtime="20210731 10:44:04.514"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:04.514" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:04.514" endtime="20210731 10:44:04.514"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:04.514" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:04.514" endtime="20210731 10:44:04.514"/>
</kw>
<msg timestamp="20210731 10:44:04.515" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:04.513" endtime="20210731 10:44:04.515"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:04.518" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:04.515" endtime="20210731 10:44:04.520"/>
</kw>
<status status="PASS" starttime="20210731 10:44:04.512" endtime="20210731 10:44:04.520"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:44:04.521" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:44:04.521" endtime="20210731 10:44:04.525"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:44:06.028" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:44:04.526" endtime="20210731 10:44:06.028"/>
</kw>
<status status="PASS" starttime="20210731 10:44:04.520" endtime="20210731 10:44:06.029"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:06.030" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:06.030" endtime="20210731 10:44:06.030"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:06.030" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:06.030" endtime="20210731 10:44:06.030"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:06.031" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:06.030" endtime="20210731 10:44:06.031"/>
</kw>
<msg timestamp="20210731 10:44:06.031" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:06.029" endtime="20210731 10:44:06.032"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:44:06.033" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:44:06.032" endtime="20210731 10:44:06.033"/>
</kw>
<status status="PASS" starttime="20210731 10:44:06.029" endtime="20210731 10:44:06.033"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:44:06.034" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:44:06.034" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:44:06.034" endtime="20210731 10:44:06.034"/>
</kw>
<status status="PASS" starttime="20210731 10:44:06.033" endtime="20210731 10:44:06.034"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:44:06.035" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:44:06.035" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:44:06.034" endtime="20210731 10:44:06.035"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:44:06.035" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:44:06.035" endtime="20210731 10:44:06.035"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:06.036" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:06.035" endtime="20210731 10:44:06.036"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:06.036" endtime="20210731 10:44:06.036"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:06.036" endtime="20210731 10:44:06.037"/>
</kw>
<status status="PASS" starttime="20210731 10:44:06.035" endtime="20210731 10:44:06.037"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:06.037" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:06.037" endtime="20210731 10:44:06.037"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:06.037" endtime="20210731 10:44:06.038"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:06.038" endtime="20210731 10:44:06.038"/>
</kw>
<status status="PASS" starttime="20210731 10:44:06.037" endtime="20210731 10:44:06.038"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:06.038" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:06.038" endtime="20210731 10:44:06.038"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:06.039" endtime="20210731 10:44:06.039"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:06.040" endtime="20210731 10:44:06.040"/>
</kw>
<status status="PASS" starttime="20210731 10:44:06.038" endtime="20210731 10:44:06.040"/>
</iter>
<status status="PASS" starttime="20210731 10:44:06.035" endtime="20210731 10:44:06.040"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:44:06.041" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:44:06.040" endtime="20210731 10:44:06.041"/>
</kw>
<status status="PASS" starttime="20210731 10:44:06.034" endtime="20210731 10:44:06.042"/>
</kw>
<status status="PASS" starttime="20210731 10:44:04.491" endtime="20210731 10:44:06.042"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=0123!?.0</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:06.045" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:44:06.044" endtime="20210731 10:44:06.045"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:06.045" level="INFO">${payload} = {'password': '0123!?.0'}</msg>
<status status="PASS" starttime="20210731 10:44:06.045" endtime="20210731 10:44:06.045"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:06.054" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:06.054" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:06.046" endtime="20210731 10:44:06.054"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:06.055" endtime="20210731 10:44:06.055"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:06.055" endtime="20210731 10:44:06.055"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:06.046" endtime="20210731 10:44:06.055"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:06.045" endtime="20210731 10:44:06.055"/>
</for>
<status status="FAIL" starttime="20210731 10:44:06.043" endtime="20210731 10:44:06.055"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:06.043" endtime="20210731 10:44:06.055"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=0123!?.0</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:06.056" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:44:06.056" endtime="20210731 10:44:06.056"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:06.056" level="INFO">${payload} = {'password': '0123!?.0'}</msg>
<status status="PASS" starttime="20210731 10:44:06.056" endtime="20210731 10:44:06.056"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:06.061" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:06.061" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:06.057" endtime="20210731 10:44:06.061"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:06.061" endtime="20210731 10:44:06.061"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:06.061" endtime="20210731 10:44:06.061"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:06.057" endtime="20210731 10:44:06.061"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:06.056" endtime="20210731 10:44:06.061"/>
</for>
<status status="FAIL" starttime="20210731 10:44:06.055" endtime="20210731 10:44:06.062"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:06.055" endtime="20210731 10:44:06.062"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=0123!?.0</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:06.063" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:44:06.062" endtime="20210731 10:44:06.063"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:06.063" level="INFO">${payload} = {'password': '0123!?.0'}</msg>
<status status="PASS" starttime="20210731 10:44:06.063" endtime="20210731 10:44:06.063"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:06.067" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:06.068" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:06.064" endtime="20210731 10:44:06.068"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:06.068" endtime="20210731 10:44:06.068"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:06.068" endtime="20210731 10:44:06.068"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:06.063" endtime="20210731 10:44:06.068"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:06.063" endtime="20210731 10:44:06.068"/>
</for>
<status status="FAIL" starttime="20210731 10:44:06.062" endtime="20210731 10:44:06.069"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:06.062" endtime="20210731 10:44:06.069"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:06.042" endtime="20210731 10:44:06.069"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:06.074" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:06.084" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:06.084" level="INFO">${pids} = 14954
14961
14965</msg>
<status status="PASS" starttime="20210731 10:44:06.071" endtime="20210731 10:44:06.084"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:06.085" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:06.084" endtime="20210731 10:44:06.085"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:06.085" level="INFO">${pids} = ['14954', '14961', '14965']</msg>
<status status="PASS" starttime="20210731 10:44:06.085" endtime="20210731 10:44:06.085"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">14954</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:06.089" level="INFO">Running command 'kill 14954 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:06.086" endtime="20210731 10:44:06.089"/>
</kw>
<status status="PASS" starttime="20210731 10:44:06.085" endtime="20210731 10:44:06.089"/>
</iter>
<iter>
<var name="${pid}">14961</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:06.093" level="INFO">Running command 'kill 14961 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:06.090" endtime="20210731 10:44:06.094"/>
</kw>
<status status="PASS" starttime="20210731 10:44:06.089" endtime="20210731 10:44:06.094"/>
</iter>
<iter>
<var name="${pid}">14965</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:06.097" level="INFO">Running command 'kill 14965 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:06.094" endtime="20210731 10:44:06.098"/>
</kw>
<status status="PASS" starttime="20210731 10:44:06.094" endtime="20210731 10:44:06.098"/>
</iter>
<status status="PASS" starttime="20210731 10:44:06.085" endtime="20210731 10:44:06.098"/>
</for>
<status status="PASS" starttime="20210731 10:44:06.085" endtime="20210731 10:44:06.098"/>
</branch>
<status status="PASS" starttime="20210731 10:44:06.085" endtime="20210731 10:44:06.098"/>
</if>
<status status="PASS" starttime="20210731 10:44:06.070" endtime="20210731 10:44:06.098"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": '0123!?.0'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:44:04.490" endtime="20210731 10:44:06.099">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t74" name="With Each Valid Token, Updating Password Of Each System User With 0123!?.00123!?.00123!? Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:06.104" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:06.114" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:06.114" level="INFO">${pids} = 14994</msg>
<status status="PASS" starttime="20210731 10:44:06.101" endtime="20210731 10:44:06.114"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:06.115" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:06.115" endtime="20210731 10:44:06.115"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:06.116" level="INFO">${pids} = ['14994']</msg>
<status status="PASS" starttime="20210731 10:44:06.116" endtime="20210731 10:44:06.116"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">14994</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:06.119" level="INFO">Running command 'kill 14994 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:06.116" endtime="20210731 10:44:06.120"/>
</kw>
<status status="PASS" starttime="20210731 10:44:06.116" endtime="20210731 10:44:06.120"/>
</iter>
<status status="PASS" starttime="20210731 10:44:06.116" endtime="20210731 10:44:06.120"/>
</for>
<status status="PASS" starttime="20210731 10:44:06.115" endtime="20210731 10:44:06.120"/>
</branch>
<status status="PASS" starttime="20210731 10:44:06.115" endtime="20210731 10:44:06.120"/>
</if>
<status status="PASS" starttime="20210731 10:44:06.101" endtime="20210731 10:44:06.120"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:06.121" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:06.121" endtime="20210731 10:44:06.121"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:06.122" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:06.122" endtime="20210731 10:44:06.122"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:06.123" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:06.122" endtime="20210731 10:44:06.123"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:06.124" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:06.123" endtime="20210731 10:44:06.124"/>
</kw>
<msg timestamp="20210731 10:44:06.124" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:06.121" endtime="20210731 10:44:06.124"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:06.127" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:06.124" endtime="20210731 10:44:06.129"/>
</kw>
<status status="PASS" starttime="20210731 10:44:06.121" endtime="20210731 10:44:06.129"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:44:06.131" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:44:06.130" endtime="20210731 10:44:06.135"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:44:07.637" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:44:06.136" endtime="20210731 10:44:07.637"/>
</kw>
<status status="PASS" starttime="20210731 10:44:06.130" endtime="20210731 10:44:07.637"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:07.639" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:07.638" endtime="20210731 10:44:07.639"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:07.639" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:07.639" endtime="20210731 10:44:07.639"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:07.639" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:07.639" endtime="20210731 10:44:07.639"/>
</kw>
<msg timestamp="20210731 10:44:07.640" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:07.638" endtime="20210731 10:44:07.640"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:44:07.640" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:44:07.640" endtime="20210731 10:44:07.641"/>
</kw>
<status status="PASS" starttime="20210731 10:44:07.638" endtime="20210731 10:44:07.641"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:44:07.643" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:44:07.643" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:44:07.642" endtime="20210731 10:44:07.643"/>
</kw>
<status status="PASS" starttime="20210731 10:44:07.642" endtime="20210731 10:44:07.643"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:44:07.644" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:44:07.645" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:44:07.644" endtime="20210731 10:44:07.645"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:44:07.645" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:44:07.645" endtime="20210731 10:44:07.645"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:07.646" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:07.646" endtime="20210731 10:44:07.646"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:07.646" endtime="20210731 10:44:07.647"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:07.647" endtime="20210731 10:44:07.648"/>
</kw>
<status status="PASS" starttime="20210731 10:44:07.645" endtime="20210731 10:44:07.648"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:07.648" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:07.648" endtime="20210731 10:44:07.648"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:07.648" endtime="20210731 10:44:07.649"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:07.649" endtime="20210731 10:44:07.649"/>
</kw>
<status status="PASS" starttime="20210731 10:44:07.648" endtime="20210731 10:44:07.649"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:07.650" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:07.650" endtime="20210731 10:44:07.650"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:07.650" endtime="20210731 10:44:07.651"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:07.651" endtime="20210731 10:44:07.651"/>
</kw>
<status status="PASS" starttime="20210731 10:44:07.650" endtime="20210731 10:44:07.651"/>
</iter>
<status status="PASS" starttime="20210731 10:44:07.645" endtime="20210731 10:44:07.651"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:44:07.651" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:44:07.651" endtime="20210731 10:44:07.651"/>
</kw>
<status status="PASS" starttime="20210731 10:44:07.643" endtime="20210731 10:44:07.652"/>
</kw>
<status status="PASS" starttime="20210731 10:44:06.100" endtime="20210731 10:44:07.652"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=0123!?.00123!?.00123!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:07.653" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:44:07.652" endtime="20210731 10:44:07.653"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:07.653" level="INFO">${payload} = {'password': '0123!?.00123!?.00123!?'}</msg>
<status status="PASS" starttime="20210731 10:44:07.653" endtime="20210731 10:44:07.653"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:07.663" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:07.664" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:07.653" endtime="20210731 10:44:07.664"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:07.664" endtime="20210731 10:44:07.664"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:07.664" endtime="20210731 10:44:07.664"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:07.653" endtime="20210731 10:44:07.664"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:07.653" endtime="20210731 10:44:07.664"/>
</for>
<status status="FAIL" starttime="20210731 10:44:07.652" endtime="20210731 10:44:07.664"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:07.652" endtime="20210731 10:44:07.664"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=0123!?.00123!?.00123!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:07.666" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:44:07.665" endtime="20210731 10:44:07.666"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:07.666" level="INFO">${payload} = {'password': '0123!?.00123!?.00123!?'}</msg>
<status status="PASS" starttime="20210731 10:44:07.666" endtime="20210731 10:44:07.666"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:07.676" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:07.676" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:07.666" endtime="20210731 10:44:07.676"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:07.677" endtime="20210731 10:44:07.677"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:07.677" endtime="20210731 10:44:07.677"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:07.666" endtime="20210731 10:44:07.677"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:07.666" endtime="20210731 10:44:07.677"/>
</for>
<status status="FAIL" starttime="20210731 10:44:07.665" endtime="20210731 10:44:07.677"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:07.665" endtime="20210731 10:44:07.677"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=0123!?.00123!?.00123!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:07.679" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:44:07.679" endtime="20210731 10:44:07.679"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:07.679" level="INFO">${payload} = {'password': '0123!?.00123!?.00123!?'}</msg>
<status status="PASS" starttime="20210731 10:44:07.679" endtime="20210731 10:44:07.680"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:07.684" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:07.685" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:07.680" endtime="20210731 10:44:07.685"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:07.685" endtime="20210731 10:44:07.685"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:07.685" endtime="20210731 10:44:07.685"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:07.680" endtime="20210731 10:44:07.685"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:07.680" endtime="20210731 10:44:07.685"/>
</for>
<status status="FAIL" starttime="20210731 10:44:07.678" endtime="20210731 10:44:07.686"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:07.678" endtime="20210731 10:44:07.686"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:07.652" endtime="20210731 10:44:07.686"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:07.690" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:07.700" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:07.700" level="INFO">${pids} = 15017
15024
15031</msg>
<status status="PASS" starttime="20210731 10:44:07.687" endtime="20210731 10:44:07.700"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:07.701" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:07.700" endtime="20210731 10:44:07.701"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:07.701" level="INFO">${pids} = ['15017', '15024', '15031']</msg>
<status status="PASS" starttime="20210731 10:44:07.701" endtime="20210731 10:44:07.701"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">15017</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:07.707" level="INFO">Running command 'kill 15017 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:07.702" endtime="20210731 10:44:07.708"/>
</kw>
<status status="PASS" starttime="20210731 10:44:07.702" endtime="20210731 10:44:07.709"/>
</iter>
<iter>
<var name="${pid}">15024</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:07.713" level="INFO">Running command 'kill 15024 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:07.709" endtime="20210731 10:44:07.714"/>
</kw>
<status status="PASS" starttime="20210731 10:44:07.709" endtime="20210731 10:44:07.714"/>
</iter>
<iter>
<var name="${pid}">15031</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:07.718" level="INFO">Running command 'kill 15031 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:07.714" endtime="20210731 10:44:07.718"/>
</kw>
<status status="PASS" starttime="20210731 10:44:07.714" endtime="20210731 10:44:07.718"/>
</iter>
<status status="PASS" starttime="20210731 10:44:07.701" endtime="20210731 10:44:07.718"/>
</for>
<status status="PASS" starttime="20210731 10:44:07.701" endtime="20210731 10:44:07.718"/>
</branch>
<status status="PASS" starttime="20210731 10:44:07.701" endtime="20210731 10:44:07.718"/>
</if>
<status status="PASS" starttime="20210731 10:44:07.686" endtime="20210731 10:44:07.719"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": '0123!?.00123!?.00123!?'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:44:06.100" endtime="20210731 10:44:07.719">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t75" name="With Each Valid Token, Updating Password Of Each System User With abcdAB9 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:07.725" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:07.737" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:07.737" level="INFO">${pids} = 15063</msg>
<status status="PASS" starttime="20210731 10:44:07.721" endtime="20210731 10:44:07.738"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:07.738" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:07.738" endtime="20210731 10:44:07.738"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:07.739" level="INFO">${pids} = ['15063']</msg>
<status status="PASS" starttime="20210731 10:44:07.739" endtime="20210731 10:44:07.739"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">15063</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:07.743" level="INFO">Running command 'kill 15063 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:07.739" endtime="20210731 10:44:07.744"/>
</kw>
<status status="PASS" starttime="20210731 10:44:07.739" endtime="20210731 10:44:07.744"/>
</iter>
<status status="PASS" starttime="20210731 10:44:07.739" endtime="20210731 10:44:07.744"/>
</for>
<status status="PASS" starttime="20210731 10:44:07.739" endtime="20210731 10:44:07.744"/>
</branch>
<status status="PASS" starttime="20210731 10:44:07.738" endtime="20210731 10:44:07.744"/>
</if>
<status status="PASS" starttime="20210731 10:44:07.720" endtime="20210731 10:44:07.745"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:07.746" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:07.745" endtime="20210731 10:44:07.746"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:07.746" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:07.746" endtime="20210731 10:44:07.746"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:07.747" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:07.747" endtime="20210731 10:44:07.747"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:07.747" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:07.747" endtime="20210731 10:44:07.747"/>
</kw>
<msg timestamp="20210731 10:44:07.747" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:07.746" endtime="20210731 10:44:07.747"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:07.751" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:07.748" endtime="20210731 10:44:07.752"/>
</kw>
<status status="PASS" starttime="20210731 10:44:07.745" endtime="20210731 10:44:07.753"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:44:07.754" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:44:07.753" endtime="20210731 10:44:07.758"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:44:09.262" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:44:07.759" endtime="20210731 10:44:09.263"/>
</kw>
<status status="PASS" starttime="20210731 10:44:07.753" endtime="20210731 10:44:09.263"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:09.264" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:09.264" endtime="20210731 10:44:09.264"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:09.265" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:09.264" endtime="20210731 10:44:09.265"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:09.265" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:09.265" endtime="20210731 10:44:09.265"/>
</kw>
<msg timestamp="20210731 10:44:09.266" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:09.264" endtime="20210731 10:44:09.266"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:44:09.267" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:44:09.267" endtime="20210731 10:44:09.267"/>
</kw>
<status status="PASS" starttime="20210731 10:44:09.263" endtime="20210731 10:44:09.267"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:44:09.268" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:44:09.268" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:44:09.268" endtime="20210731 10:44:09.268"/>
</kw>
<status status="PASS" starttime="20210731 10:44:09.268" endtime="20210731 10:44:09.268"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:44:09.269" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:44:09.269" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:44:09.268" endtime="20210731 10:44:09.269"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:44:09.269" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:44:09.269" endtime="20210731 10:44:09.269"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:09.270" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:09.270" endtime="20210731 10:44:09.270"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:09.270" endtime="20210731 10:44:09.271"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:09.271" endtime="20210731 10:44:09.271"/>
</kw>
<status status="PASS" starttime="20210731 10:44:09.269" endtime="20210731 10:44:09.271"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:09.271" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:09.271" endtime="20210731 10:44:09.271"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:09.271" endtime="20210731 10:44:09.272"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:09.272" endtime="20210731 10:44:09.272"/>
</kw>
<status status="PASS" starttime="20210731 10:44:09.271" endtime="20210731 10:44:09.272"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:09.273" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:09.273" endtime="20210731 10:44:09.273"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:09.273" endtime="20210731 10:44:09.274"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:09.274" endtime="20210731 10:44:09.274"/>
</kw>
<status status="PASS" starttime="20210731 10:44:09.272" endtime="20210731 10:44:09.274"/>
</iter>
<status status="PASS" starttime="20210731 10:44:09.269" endtime="20210731 10:44:09.274"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:44:09.275" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:44:09.274" endtime="20210731 10:44:09.275"/>
</kw>
<status status="PASS" starttime="20210731 10:44:09.268" endtime="20210731 10:44:09.275"/>
</kw>
<status status="PASS" starttime="20210731 10:44:07.720" endtime="20210731 10:44:09.275"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdAB9</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:09.279" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:44:09.278" endtime="20210731 10:44:09.279"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:09.279" level="INFO">${payload} = {'password': 'abcdAB9'}</msg>
<status status="PASS" starttime="20210731 10:44:09.279" endtime="20210731 10:44:09.279"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:09.288" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:09.288" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:09.279" endtime="20210731 10:44:09.288"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:09.288" endtime="20210731 10:44:09.288"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:09.289" endtime="20210731 10:44:09.289"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:09.279" endtime="20210731 10:44:09.289"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:09.279" endtime="20210731 10:44:09.289"/>
</for>
<status status="FAIL" starttime="20210731 10:44:09.277" endtime="20210731 10:44:09.289"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:09.276" endtime="20210731 10:44:09.289"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdAB9</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:09.290" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:44:09.290" endtime="20210731 10:44:09.290"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:09.291" level="INFO">${payload} = {'password': 'abcdAB9'}</msg>
<status status="PASS" starttime="20210731 10:44:09.290" endtime="20210731 10:44:09.291"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:09.295" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:09.295" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:09.291" endtime="20210731 10:44:09.295"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:09.295" endtime="20210731 10:44:09.296"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:09.296" endtime="20210731 10:44:09.296"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:09.291" endtime="20210731 10:44:09.296"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:09.291" endtime="20210731 10:44:09.296"/>
</for>
<status status="FAIL" starttime="20210731 10:44:09.289" endtime="20210731 10:44:09.296"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:09.289" endtime="20210731 10:44:09.296"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdAB9</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:09.297" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:44:09.297" endtime="20210731 10:44:09.297"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:09.297" level="INFO">${payload} = {'password': 'abcdAB9'}</msg>
<status status="PASS" starttime="20210731 10:44:09.297" endtime="20210731 10:44:09.297"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:09.302" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:09.302" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:09.298" endtime="20210731 10:44:09.302"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:09.302" endtime="20210731 10:44:09.302"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:09.302" endtime="20210731 10:44:09.303"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:09.298" endtime="20210731 10:44:09.303"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:09.298" endtime="20210731 10:44:09.303"/>
</for>
<status status="FAIL" starttime="20210731 10:44:09.296" endtime="20210731 10:44:09.303"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:09.296" endtime="20210731 10:44:09.303"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:09.276" endtime="20210731 10:44:09.303"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:09.309" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:09.318" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:09.318" level="INFO">${pids} = 15087
15094
15098</msg>
<status status="PASS" starttime="20210731 10:44:09.305" endtime="20210731 10:44:09.318"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:09.319" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:09.319" endtime="20210731 10:44:09.319"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:09.320" level="INFO">${pids} = ['15087', '15094', '15098']</msg>
<status status="PASS" starttime="20210731 10:44:09.319" endtime="20210731 10:44:09.320"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">15087</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:09.327" level="INFO">Running command 'kill 15087 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:09.320" endtime="20210731 10:44:09.327"/>
</kw>
<status status="PASS" starttime="20210731 10:44:09.320" endtime="20210731 10:44:09.327"/>
</iter>
<iter>
<var name="${pid}">15094</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:09.332" level="INFO">Running command 'kill 15094 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:09.328" endtime="20210731 10:44:09.333"/>
</kw>
<status status="PASS" starttime="20210731 10:44:09.328" endtime="20210731 10:44:09.333"/>
</iter>
<iter>
<var name="${pid}">15098</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:09.338" level="INFO">Running command 'kill 15098 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:09.334" endtime="20210731 10:44:09.339"/>
</kw>
<status status="PASS" starttime="20210731 10:44:09.334" endtime="20210731 10:44:09.339"/>
</iter>
<status status="PASS" starttime="20210731 10:44:09.320" endtime="20210731 10:44:09.339"/>
</for>
<status status="PASS" starttime="20210731 10:44:09.319" endtime="20210731 10:44:09.339"/>
</branch>
<status status="PASS" starttime="20210731 10:44:09.319" endtime="20210731 10:44:09.339"/>
</if>
<status status="PASS" starttime="20210731 10:44:09.304" endtime="20210731 10:44:09.339"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcdAB9'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:44:07.719" endtime="20210731 10:44:09.340">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t76" name="With Each Valid Token, Updating Password Of Each System User With abcdAB90 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:09.346" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:09.355" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:09.355" level="INFO">${pids} = 15127</msg>
<status status="PASS" starttime="20210731 10:44:09.343" endtime="20210731 10:44:09.355"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:09.356" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:09.355" endtime="20210731 10:44:09.356"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:09.356" level="INFO">${pids} = ['15127']</msg>
<status status="PASS" starttime="20210731 10:44:09.356" endtime="20210731 10:44:09.356"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">15127</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:09.360" level="INFO">Running command 'kill 15127 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:09.357" endtime="20210731 10:44:09.360"/>
</kw>
<status status="PASS" starttime="20210731 10:44:09.357" endtime="20210731 10:44:09.360"/>
</iter>
<status status="PASS" starttime="20210731 10:44:09.356" endtime="20210731 10:44:09.361"/>
</for>
<status status="PASS" starttime="20210731 10:44:09.356" endtime="20210731 10:44:09.361"/>
</branch>
<status status="PASS" starttime="20210731 10:44:09.356" endtime="20210731 10:44:09.361"/>
</if>
<status status="PASS" starttime="20210731 10:44:09.342" endtime="20210731 10:44:09.361"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:09.362" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:09.362" endtime="20210731 10:44:09.362"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:09.363" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:09.363" endtime="20210731 10:44:09.363"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:09.365" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:09.364" endtime="20210731 10:44:09.365"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:09.365" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:09.365" endtime="20210731 10:44:09.365"/>
</kw>
<msg timestamp="20210731 10:44:09.365" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:09.362" endtime="20210731 10:44:09.365"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:09.368" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:09.365" endtime="20210731 10:44:09.370"/>
</kw>
<status status="PASS" starttime="20210731 10:44:09.361" endtime="20210731 10:44:09.371"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:44:09.372" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:44:09.371" endtime="20210731 10:44:09.377"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:44:10.878" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:44:09.377" endtime="20210731 10:44:10.879"/>
</kw>
<status status="PASS" starttime="20210731 10:44:09.371" endtime="20210731 10:44:10.879"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:10.880" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:10.880" endtime="20210731 10:44:10.880"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:10.881" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:10.880" endtime="20210731 10:44:10.881"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:10.882" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:10.881" endtime="20210731 10:44:10.882"/>
</kw>
<msg timestamp="20210731 10:44:10.882" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:10.879" endtime="20210731 10:44:10.882"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:44:10.883" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:44:10.883" endtime="20210731 10:44:10.883"/>
</kw>
<status status="PASS" starttime="20210731 10:44:10.879" endtime="20210731 10:44:10.884"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:44:10.884" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:44:10.885" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:44:10.884" endtime="20210731 10:44:10.885"/>
</kw>
<status status="PASS" starttime="20210731 10:44:10.884" endtime="20210731 10:44:10.885"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:44:10.886" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:44:10.886" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:44:10.885" endtime="20210731 10:44:10.886"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:44:10.886" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:44:10.886" endtime="20210731 10:44:10.886"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:10.887" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:10.887" endtime="20210731 10:44:10.887"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:10.887" endtime="20210731 10:44:10.889"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:10.895" endtime="20210731 10:44:10.895"/>
</kw>
<status status="PASS" starttime="20210731 10:44:10.887" endtime="20210731 10:44:10.895"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:10.896" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:10.896" endtime="20210731 10:44:10.896"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:10.896" endtime="20210731 10:44:10.897"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:10.897" endtime="20210731 10:44:10.897"/>
</kw>
<status status="PASS" starttime="20210731 10:44:10.895" endtime="20210731 10:44:10.897"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:10.898" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:10.897" endtime="20210731 10:44:10.898"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:10.898" endtime="20210731 10:44:10.900"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:10.900" endtime="20210731 10:44:10.900"/>
</kw>
<status status="PASS" starttime="20210731 10:44:10.897" endtime="20210731 10:44:10.900"/>
</iter>
<status status="PASS" starttime="20210731 10:44:10.886" endtime="20210731 10:44:10.900"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:44:10.900" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:44:10.900" endtime="20210731 10:44:10.901"/>
</kw>
<status status="PASS" starttime="20210731 10:44:10.885" endtime="20210731 10:44:10.901"/>
</kw>
<status status="PASS" starttime="20210731 10:44:09.342" endtime="20210731 10:44:10.901"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdAB90</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:10.905" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:44:10.905" endtime="20210731 10:44:10.905"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:10.906" level="INFO">${payload} = {'password': 'abcdAB90'}</msg>
<status status="PASS" starttime="20210731 10:44:10.906" endtime="20210731 10:44:10.906"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:10.918" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:10.919" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:10.906" endtime="20210731 10:44:10.919"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:10.919" endtime="20210731 10:44:10.919"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:10.919" endtime="20210731 10:44:10.919"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:10.906" endtime="20210731 10:44:10.919"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:10.906" endtime="20210731 10:44:10.919"/>
</for>
<status status="FAIL" starttime="20210731 10:44:10.901" endtime="20210731 10:44:10.919"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:10.901" endtime="20210731 10:44:10.919"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdAB90</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:10.920" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:44:10.920" endtime="20210731 10:44:10.920"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:10.921" level="INFO">${payload} = {'password': 'abcdAB90'}</msg>
<status status="PASS" starttime="20210731 10:44:10.921" endtime="20210731 10:44:10.921"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:10.926" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:10.927" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:10.922" endtime="20210731 10:44:10.927"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:10.927" endtime="20210731 10:44:10.927"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:10.927" endtime="20210731 10:44:10.927"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:10.921" endtime="20210731 10:44:10.927"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:10.921" endtime="20210731 10:44:10.927"/>
</for>
<status status="FAIL" starttime="20210731 10:44:10.920" endtime="20210731 10:44:10.927"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:10.919" endtime="20210731 10:44:10.927"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdAB90</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:10.928" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:44:10.928" endtime="20210731 10:44:10.928"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:10.929" level="INFO">${payload} = {'password': 'abcdAB90'}</msg>
<status status="PASS" starttime="20210731 10:44:10.928" endtime="20210731 10:44:10.929"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:10.933" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:10.933" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:10.929" endtime="20210731 10:44:10.933"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:10.933" endtime="20210731 10:44:10.933"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:10.933" endtime="20210731 10:44:10.934"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:10.929" endtime="20210731 10:44:10.934"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:10.929" endtime="20210731 10:44:10.934"/>
</for>
<status status="FAIL" starttime="20210731 10:44:10.927" endtime="20210731 10:44:10.934"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:10.927" endtime="20210731 10:44:10.934"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:10.901" endtime="20210731 10:44:10.934"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:10.938" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:10.948" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:10.948" level="INFO">${pids} = 15150
15157
15165</msg>
<status status="PASS" starttime="20210731 10:44:10.935" endtime="20210731 10:44:10.948"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:10.949" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:10.949" endtime="20210731 10:44:10.949"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:10.950" level="INFO">${pids} = ['15150', '15157', '15165']</msg>
<status status="PASS" starttime="20210731 10:44:10.950" endtime="20210731 10:44:10.950"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">15150</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:10.953" level="INFO">Running command 'kill 15150 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:10.950" endtime="20210731 10:44:10.954"/>
</kw>
<status status="PASS" starttime="20210731 10:44:10.950" endtime="20210731 10:44:10.954"/>
</iter>
<iter>
<var name="${pid}">15157</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:10.957" level="INFO">Running command 'kill 15157 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:10.954" endtime="20210731 10:44:10.958"/>
</kw>
<status status="PASS" starttime="20210731 10:44:10.954" endtime="20210731 10:44:10.959"/>
</iter>
<iter>
<var name="${pid}">15165</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:10.962" level="INFO">Running command 'kill 15165 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:10.959" endtime="20210731 10:44:10.963"/>
</kw>
<status status="PASS" starttime="20210731 10:44:10.959" endtime="20210731 10:44:10.963"/>
</iter>
<status status="PASS" starttime="20210731 10:44:10.950" endtime="20210731 10:44:10.963"/>
</for>
<status status="PASS" starttime="20210731 10:44:10.950" endtime="20210731 10:44:10.963"/>
</branch>
<status status="PASS" starttime="20210731 10:44:10.949" endtime="20210731 10:44:10.963"/>
</if>
<status status="PASS" starttime="20210731 10:44:10.934" endtime="20210731 10:44:10.963"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcdAB90'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:44:09.341" endtime="20210731 10:44:10.964">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t77" name="With Each Valid Token, Updating Password Of Each System User With abcdAB90abcdAB90abcdAB Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:10.970" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:10.980" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:10.980" level="INFO">${pids} = 15194</msg>
<status status="PASS" starttime="20210731 10:44:10.967" endtime="20210731 10:44:10.980"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:10.981" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:10.981" endtime="20210731 10:44:10.981"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:10.982" level="INFO">${pids} = ['15194']</msg>
<status status="PASS" starttime="20210731 10:44:10.982" endtime="20210731 10:44:10.982"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">15194</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:10.985" level="INFO">Running command 'kill 15194 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:10.982" endtime="20210731 10:44:10.986"/>
</kw>
<status status="PASS" starttime="20210731 10:44:10.982" endtime="20210731 10:44:10.986"/>
</iter>
<status status="PASS" starttime="20210731 10:44:10.982" endtime="20210731 10:44:10.986"/>
</for>
<status status="PASS" starttime="20210731 10:44:10.982" endtime="20210731 10:44:10.986"/>
</branch>
<status status="PASS" starttime="20210731 10:44:10.981" endtime="20210731 10:44:10.986"/>
</if>
<status status="PASS" starttime="20210731 10:44:10.966" endtime="20210731 10:44:10.986"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:10.987" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:10.987" endtime="20210731 10:44:10.987"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:10.988" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:10.988" endtime="20210731 10:44:10.988"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:10.988" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:10.988" endtime="20210731 10:44:10.988"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:10.989" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:10.988" endtime="20210731 10:44:10.989"/>
</kw>
<msg timestamp="20210731 10:44:10.989" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:10.987" endtime="20210731 10:44:10.989"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:10.992" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:10.989" endtime="20210731 10:44:10.994"/>
</kw>
<status status="PASS" starttime="20210731 10:44:10.986" endtime="20210731 10:44:10.994"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:44:10.995" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:44:10.995" endtime="20210731 10:44:10.999"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:44:12.512" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:44:11.000" endtime="20210731 10:44:12.512"/>
</kw>
<status status="PASS" starttime="20210731 10:44:10.994" endtime="20210731 10:44:12.513"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:12.514" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:12.514" endtime="20210731 10:44:12.514"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:12.514" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:12.514" endtime="20210731 10:44:12.515"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:12.515" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:12.515" endtime="20210731 10:44:12.515"/>
</kw>
<msg timestamp="20210731 10:44:12.515" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:12.513" endtime="20210731 10:44:12.515"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:44:12.516" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:44:12.515" endtime="20210731 10:44:12.516"/>
</kw>
<status status="PASS" starttime="20210731 10:44:12.513" endtime="20210731 10:44:12.516"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:44:12.517" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:44:12.517" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:44:12.517" endtime="20210731 10:44:12.517"/>
</kw>
<status status="PASS" starttime="20210731 10:44:12.517" endtime="20210731 10:44:12.517"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:44:12.518" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:44:12.518" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:44:12.518" endtime="20210731 10:44:12.518"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:44:12.518" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:44:12.518" endtime="20210731 10:44:12.518"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:12.519" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:12.519" endtime="20210731 10:44:12.519"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:12.519" endtime="20210731 10:44:12.520"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:12.520" endtime="20210731 10:44:12.520"/>
</kw>
<status status="PASS" starttime="20210731 10:44:12.519" endtime="20210731 10:44:12.520"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:12.520" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:12.520" endtime="20210731 10:44:12.520"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:12.520" endtime="20210731 10:44:12.521"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:12.521" endtime="20210731 10:44:12.521"/>
</kw>
<status status="PASS" starttime="20210731 10:44:12.520" endtime="20210731 10:44:12.522"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:12.522" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:12.522" endtime="20210731 10:44:12.522"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:12.522" endtime="20210731 10:44:12.523"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:12.523" endtime="20210731 10:44:12.523"/>
</kw>
<status status="PASS" starttime="20210731 10:44:12.522" endtime="20210731 10:44:12.523"/>
</iter>
<status status="PASS" starttime="20210731 10:44:12.518" endtime="20210731 10:44:12.523"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:44:12.524" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:44:12.523" endtime="20210731 10:44:12.524"/>
</kw>
<status status="PASS" starttime="20210731 10:44:12.517" endtime="20210731 10:44:12.524"/>
</kw>
<status status="PASS" starttime="20210731 10:44:10.966" endtime="20210731 10:44:12.524"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdAB90abcdAB90abcdAB</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:12.526" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:44:12.525" endtime="20210731 10:44:12.526"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:12.526" level="INFO">${payload} = {'password': 'abcdAB90abcdAB90abcdAB'}</msg>
<status status="PASS" starttime="20210731 10:44:12.526" endtime="20210731 10:44:12.526"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:12.535" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:12.536" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:12.526" endtime="20210731 10:44:12.536"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:12.536" endtime="20210731 10:44:12.536"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:12.536" endtime="20210731 10:44:12.536"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:12.526" endtime="20210731 10:44:12.536"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:12.526" endtime="20210731 10:44:12.536"/>
</for>
<status status="FAIL" starttime="20210731 10:44:12.525" endtime="20210731 10:44:12.536"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:12.524" endtime="20210731 10:44:12.536"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdAB90abcdAB90abcdAB</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:12.537" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:44:12.537" endtime="20210731 10:44:12.537"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:12.538" level="INFO">${payload} = {'password': 'abcdAB90abcdAB90abcdAB'}</msg>
<status status="PASS" starttime="20210731 10:44:12.538" endtime="20210731 10:44:12.538"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:12.543" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:12.543" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:12.538" endtime="20210731 10:44:12.543"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:12.543" endtime="20210731 10:44:12.543"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:12.543" endtime="20210731 10:44:12.544"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:12.538" endtime="20210731 10:44:12.544"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:12.538" endtime="20210731 10:44:12.544"/>
</for>
<status status="FAIL" starttime="20210731 10:44:12.537" endtime="20210731 10:44:12.544"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:12.537" endtime="20210731 10:44:12.544"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdAB90abcdAB90abcdAB</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:12.545" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:44:12.545" endtime="20210731 10:44:12.545"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:12.545" level="INFO">${payload} = {'password': 'abcdAB90abcdAB90abcdAB'}</msg>
<status status="PASS" starttime="20210731 10:44:12.545" endtime="20210731 10:44:12.546"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:12.550" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:12.550" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:12.546" endtime="20210731 10:44:12.550"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:12.551" endtime="20210731 10:44:12.551"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:12.551" endtime="20210731 10:44:12.551"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:12.546" endtime="20210731 10:44:12.551"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:12.546" endtime="20210731 10:44:12.551"/>
</for>
<status status="FAIL" starttime="20210731 10:44:12.544" endtime="20210731 10:44:12.551"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:12.544" endtime="20210731 10:44:12.551"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:12.524" endtime="20210731 10:44:12.551"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:12.555" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:12.565" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:12.565" level="INFO">${pids} = 15217
15224
15229</msg>
<status status="PASS" starttime="20210731 10:44:12.552" endtime="20210731 10:44:12.565"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:12.566" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:12.565" endtime="20210731 10:44:12.566"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:12.566" level="INFO">${pids} = ['15217', '15224', '15229']</msg>
<status status="PASS" starttime="20210731 10:44:12.566" endtime="20210731 10:44:12.566"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">15217</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:12.570" level="INFO">Running command 'kill 15217 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:12.567" endtime="20210731 10:44:12.571"/>
</kw>
<status status="PASS" starttime="20210731 10:44:12.567" endtime="20210731 10:44:12.571"/>
</iter>
<iter>
<var name="${pid}">15224</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:12.576" level="INFO">Running command 'kill 15224 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:12.571" endtime="20210731 10:44:12.576"/>
</kw>
<status status="PASS" starttime="20210731 10:44:12.571" endtime="20210731 10:44:12.576"/>
</iter>
<iter>
<var name="${pid}">15229</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:12.581" level="INFO">Running command 'kill 15229 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:12.577" endtime="20210731 10:44:12.582"/>
</kw>
<status status="PASS" starttime="20210731 10:44:12.576" endtime="20210731 10:44:12.582"/>
</iter>
<status status="PASS" starttime="20210731 10:44:12.567" endtime="20210731 10:44:12.582"/>
</for>
<status status="PASS" starttime="20210731 10:44:12.566" endtime="20210731 10:44:12.582"/>
</branch>
<status status="PASS" starttime="20210731 10:44:12.566" endtime="20210731 10:44:12.583"/>
</if>
<status status="PASS" starttime="20210731 10:44:12.552" endtime="20210731 10:44:12.583"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcdAB90abcdAB90abcdAB'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:44:10.965" endtime="20210731 10:44:12.583">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t78" name="With Each Valid Token, Updating Password Of Each System User With ABCabc! Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:12.591" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:12.600" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:12.600" level="INFO">${pids} = 15258</msg>
<status status="PASS" starttime="20210731 10:44:12.586" endtime="20210731 10:44:12.600"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:12.601" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:12.601" endtime="20210731 10:44:12.601"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:12.602" level="INFO">${pids} = ['15258']</msg>
<status status="PASS" starttime="20210731 10:44:12.602" endtime="20210731 10:44:12.602"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">15258</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:12.605" level="INFO">Running command 'kill 15258 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:12.602" endtime="20210731 10:44:12.606"/>
</kw>
<status status="PASS" starttime="20210731 10:44:12.602" endtime="20210731 10:44:12.606"/>
</iter>
<status status="PASS" starttime="20210731 10:44:12.602" endtime="20210731 10:44:12.606"/>
</for>
<status status="PASS" starttime="20210731 10:44:12.602" endtime="20210731 10:44:12.606"/>
</branch>
<status status="PASS" starttime="20210731 10:44:12.601" endtime="20210731 10:44:12.606"/>
</if>
<status status="PASS" starttime="20210731 10:44:12.585" endtime="20210731 10:44:12.606"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:12.608" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:12.607" endtime="20210731 10:44:12.608"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:12.610" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:12.608" endtime="20210731 10:44:12.610"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:12.611" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:12.610" endtime="20210731 10:44:12.611"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:12.611" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:12.611" endtime="20210731 10:44:12.611"/>
</kw>
<msg timestamp="20210731 10:44:12.611" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:12.608" endtime="20210731 10:44:12.611"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:12.615" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:12.612" endtime="20210731 10:44:12.617"/>
</kw>
<status status="PASS" starttime="20210731 10:44:12.606" endtime="20210731 10:44:12.618"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:44:12.619" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:44:12.618" endtime="20210731 10:44:12.622"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:44:14.136" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:44:12.623" endtime="20210731 10:44:14.137"/>
</kw>
<status status="PASS" starttime="20210731 10:44:12.618" endtime="20210731 10:44:14.138"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:14.143" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:14.142" endtime="20210731 10:44:14.143"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:14.144" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:14.143" endtime="20210731 10:44:14.144"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:14.144" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:14.144" endtime="20210731 10:44:14.144"/>
</kw>
<msg timestamp="20210731 10:44:14.144" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:14.141" endtime="20210731 10:44:14.144"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:44:14.145" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:44:14.144" endtime="20210731 10:44:14.145"/>
</kw>
<status status="PASS" starttime="20210731 10:44:14.139" endtime="20210731 10:44:14.145"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:44:14.146" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:44:14.146" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:44:14.146" endtime="20210731 10:44:14.146"/>
</kw>
<status status="PASS" starttime="20210731 10:44:14.146" endtime="20210731 10:44:14.146"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:44:14.147" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:44:14.147" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:44:14.147" endtime="20210731 10:44:14.147"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:44:14.147" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:44:14.147" endtime="20210731 10:44:14.147"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:14.148" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:14.148" endtime="20210731 10:44:14.148"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:14.148" endtime="20210731 10:44:14.149"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:14.149" endtime="20210731 10:44:14.149"/>
</kw>
<status status="PASS" starttime="20210731 10:44:14.148" endtime="20210731 10:44:14.149"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:14.150" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:14.150" endtime="20210731 10:44:14.150"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:14.150" endtime="20210731 10:44:14.151"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:14.151" endtime="20210731 10:44:14.151"/>
</kw>
<status status="PASS" starttime="20210731 10:44:14.150" endtime="20210731 10:44:14.151"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:14.151" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:14.151" endtime="20210731 10:44:14.151"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:14.151" endtime="20210731 10:44:14.152"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:14.152" endtime="20210731 10:44:14.152"/>
</kw>
<status status="PASS" starttime="20210731 10:44:14.151" endtime="20210731 10:44:14.153"/>
</iter>
<status status="PASS" starttime="20210731 10:44:14.148" endtime="20210731 10:44:14.153"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:44:14.153" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:44:14.153" endtime="20210731 10:44:14.153"/>
</kw>
<status status="PASS" starttime="20210731 10:44:14.146" endtime="20210731 10:44:14.153"/>
</kw>
<status status="PASS" starttime="20210731 10:44:12.584" endtime="20210731 10:44:14.153"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCabc!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:14.154" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:44:14.154" endtime="20210731 10:44:14.154"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:14.155" level="INFO">${payload} = {'password': 'ABCabc!'}</msg>
<status status="PASS" starttime="20210731 10:44:14.154" endtime="20210731 10:44:14.155"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:14.164" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:14.164" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:14.155" endtime="20210731 10:44:14.164"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:14.165" endtime="20210731 10:44:14.165"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:14.165" endtime="20210731 10:44:14.165"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:14.155" endtime="20210731 10:44:14.165"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:14.155" endtime="20210731 10:44:14.165"/>
</for>
<status status="FAIL" starttime="20210731 10:44:14.154" endtime="20210731 10:44:14.165"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:14.153" endtime="20210731 10:44:14.165"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCabc!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:14.166" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:44:14.166" endtime="20210731 10:44:14.166"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:14.166" level="INFO">${payload} = {'password': 'ABCabc!'}</msg>
<status status="PASS" starttime="20210731 10:44:14.166" endtime="20210731 10:44:14.167"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:14.171" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:14.171" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:14.167" endtime="20210731 10:44:14.171"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:14.171" endtime="20210731 10:44:14.171"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:14.172" endtime="20210731 10:44:14.172"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:14.167" endtime="20210731 10:44:14.172"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:14.167" endtime="20210731 10:44:14.172"/>
</for>
<status status="FAIL" starttime="20210731 10:44:14.165" endtime="20210731 10:44:14.172"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:14.165" endtime="20210731 10:44:14.172"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCabc!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:14.174" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:44:14.173" endtime="20210731 10:44:14.174"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:14.175" level="INFO">${payload} = {'password': 'ABCabc!'}</msg>
<status status="PASS" starttime="20210731 10:44:14.174" endtime="20210731 10:44:14.175"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:14.181" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:14.182" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:14.176" endtime="20210731 10:44:14.182"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:14.182" endtime="20210731 10:44:14.182"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:14.182" endtime="20210731 10:44:14.182"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:14.175" endtime="20210731 10:44:14.182"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:14.175" endtime="20210731 10:44:14.182"/>
</for>
<status status="FAIL" starttime="20210731 10:44:14.172" endtime="20210731 10:44:14.182"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:14.172" endtime="20210731 10:44:14.182"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:14.153" endtime="20210731 10:44:14.182"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:14.187" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:14.196" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:14.196" level="INFO">${pids} = 15281
15288
15298</msg>
<status status="PASS" starttime="20210731 10:44:14.183" endtime="20210731 10:44:14.196"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:14.197" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:14.196" endtime="20210731 10:44:14.197"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:14.198" level="INFO">${pids} = ['15281', '15288', '15298']</msg>
<status status="PASS" starttime="20210731 10:44:14.197" endtime="20210731 10:44:14.198"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">15281</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:14.201" level="INFO">Running command 'kill 15281 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:14.198" endtime="20210731 10:44:14.202"/>
</kw>
<status status="PASS" starttime="20210731 10:44:14.198" endtime="20210731 10:44:14.202"/>
</iter>
<iter>
<var name="${pid}">15288</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:14.205" level="INFO">Running command 'kill 15288 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:14.202" endtime="20210731 10:44:14.206"/>
</kw>
<status status="PASS" starttime="20210731 10:44:14.202" endtime="20210731 10:44:14.206"/>
</iter>
<iter>
<var name="${pid}">15298</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:14.212" level="INFO">Running command 'kill 15298 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:14.206" endtime="20210731 10:44:14.212"/>
</kw>
<status status="PASS" starttime="20210731 10:44:14.206" endtime="20210731 10:44:14.213"/>
</iter>
<status status="PASS" starttime="20210731 10:44:14.198" endtime="20210731 10:44:14.213"/>
</for>
<status status="PASS" starttime="20210731 10:44:14.197" endtime="20210731 10:44:14.213"/>
</branch>
<status status="PASS" starttime="20210731 10:44:14.197" endtime="20210731 10:44:14.213"/>
</if>
<status status="PASS" starttime="20210731 10:44:14.183" endtime="20210731 10:44:14.213"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABCabc!'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:44:12.584" endtime="20210731 10:44:14.213">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t79" name="With Each Valid Token, Updating Password Of Each System User With ABCabc!? Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:14.218" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:14.228" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:14.228" level="INFO">${pids} = 15327</msg>
<status status="PASS" starttime="20210731 10:44:14.215" endtime="20210731 10:44:14.228"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:14.229" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:14.228" endtime="20210731 10:44:14.229"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:14.229" level="INFO">${pids} = ['15327']</msg>
<status status="PASS" starttime="20210731 10:44:14.229" endtime="20210731 10:44:14.229"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">15327</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:14.233" level="INFO">Running command 'kill 15327 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:14.230" endtime="20210731 10:44:14.234"/>
</kw>
<status status="PASS" starttime="20210731 10:44:14.230" endtime="20210731 10:44:14.234"/>
</iter>
<status status="PASS" starttime="20210731 10:44:14.230" endtime="20210731 10:44:14.234"/>
</for>
<status status="PASS" starttime="20210731 10:44:14.229" endtime="20210731 10:44:14.234"/>
</branch>
<status status="PASS" starttime="20210731 10:44:14.229" endtime="20210731 10:44:14.234"/>
</if>
<status status="PASS" starttime="20210731 10:44:14.215" endtime="20210731 10:44:14.234"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:14.235" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:14.235" endtime="20210731 10:44:14.235"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:14.236" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:14.236" endtime="20210731 10:44:14.236"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:14.236" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:14.236" endtime="20210731 10:44:14.236"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:14.237" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:14.236" endtime="20210731 10:44:14.237"/>
</kw>
<msg timestamp="20210731 10:44:14.237" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:14.235" endtime="20210731 10:44:14.237"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:14.240" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:14.237" endtime="20210731 10:44:14.242"/>
</kw>
<status status="PASS" starttime="20210731 10:44:14.234" endtime="20210731 10:44:14.242"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:44:14.244" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:44:14.243" endtime="20210731 10:44:14.250"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:44:15.752" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:44:14.251" endtime="20210731 10:44:15.752"/>
</kw>
<status status="PASS" starttime="20210731 10:44:14.243" endtime="20210731 10:44:15.752"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:15.754" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:15.753" endtime="20210731 10:44:15.754"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:15.754" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:15.754" endtime="20210731 10:44:15.754"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:15.754" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:15.754" endtime="20210731 10:44:15.754"/>
</kw>
<msg timestamp="20210731 10:44:15.756" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:15.753" endtime="20210731 10:44:15.756"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:44:15.756" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:44:15.756" endtime="20210731 10:44:15.756"/>
</kw>
<status status="PASS" starttime="20210731 10:44:15.752" endtime="20210731 10:44:15.757"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:44:15.757" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:44:15.757" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:44:15.757" endtime="20210731 10:44:15.757"/>
</kw>
<status status="PASS" starttime="20210731 10:44:15.757" endtime="20210731 10:44:15.758"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:44:15.758" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:44:15.759" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:44:15.758" endtime="20210731 10:44:15.759"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:44:15.759" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:44:15.759" endtime="20210731 10:44:15.759"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:15.759" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:15.759" endtime="20210731 10:44:15.759"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:15.759" endtime="20210731 10:44:15.760"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:15.760" endtime="20210731 10:44:15.760"/>
</kw>
<status status="PASS" starttime="20210731 10:44:15.759" endtime="20210731 10:44:15.760"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:15.761" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:15.761" endtime="20210731 10:44:15.761"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:15.761" endtime="20210731 10:44:15.762"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:15.762" endtime="20210731 10:44:15.762"/>
</kw>
<status status="PASS" starttime="20210731 10:44:15.760" endtime="20210731 10:44:15.762"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:15.762" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:15.762" endtime="20210731 10:44:15.762"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:15.762" endtime="20210731 10:44:15.763"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:15.763" endtime="20210731 10:44:15.763"/>
</kw>
<status status="PASS" starttime="20210731 10:44:15.762" endtime="20210731 10:44:15.763"/>
</iter>
<status status="PASS" starttime="20210731 10:44:15.759" endtime="20210731 10:44:15.763"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:44:15.764" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:44:15.763" endtime="20210731 10:44:15.764"/>
</kw>
<status status="PASS" starttime="20210731 10:44:15.758" endtime="20210731 10:44:15.764"/>
</kw>
<status status="PASS" starttime="20210731 10:44:14.214" endtime="20210731 10:44:15.764"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCabc!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:15.766" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:44:15.766" endtime="20210731 10:44:15.766"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:15.767" level="INFO">${payload} = {'password': 'ABCabc!?'}</msg>
<status status="PASS" starttime="20210731 10:44:15.766" endtime="20210731 10:44:15.767"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:15.777" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:15.778" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:15.767" endtime="20210731 10:44:15.778"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:15.778" endtime="20210731 10:44:15.778"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:15.778" endtime="20210731 10:44:15.778"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:15.767" endtime="20210731 10:44:15.778"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:15.767" endtime="20210731 10:44:15.778"/>
</for>
<status status="FAIL" starttime="20210731 10:44:15.764" endtime="20210731 10:44:15.778"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:15.764" endtime="20210731 10:44:15.778"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCabc!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:15.779" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:44:15.779" endtime="20210731 10:44:15.779"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:15.780" level="INFO">${payload} = {'password': 'ABCabc!?'}</msg>
<status status="PASS" starttime="20210731 10:44:15.779" endtime="20210731 10:44:15.780"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:15.784" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:15.784" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:15.780" endtime="20210731 10:44:15.784"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:15.784" endtime="20210731 10:44:15.785"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:15.785" endtime="20210731 10:44:15.785"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:15.780" endtime="20210731 10:44:15.785"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:15.780" endtime="20210731 10:44:15.785"/>
</for>
<status status="FAIL" starttime="20210731 10:44:15.778" endtime="20210731 10:44:15.785"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:15.778" endtime="20210731 10:44:15.785"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCabc!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:15.786" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:44:15.786" endtime="20210731 10:44:15.786"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:15.787" level="INFO">${payload} = {'password': 'ABCabc!?'}</msg>
<status status="PASS" starttime="20210731 10:44:15.786" endtime="20210731 10:44:15.787"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:15.792" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:15.792" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:15.787" endtime="20210731 10:44:15.792"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:15.792" endtime="20210731 10:44:15.792"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:15.792" endtime="20210731 10:44:15.792"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:15.787" endtime="20210731 10:44:15.792"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:15.787" endtime="20210731 10:44:15.792"/>
</for>
<status status="FAIL" starttime="20210731 10:44:15.785" endtime="20210731 10:44:15.792"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:15.785" endtime="20210731 10:44:15.793"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:15.764" endtime="20210731 10:44:15.793"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:15.798" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:15.807" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:15.807" level="INFO">${pids} = 15350
15357
15361</msg>
<status status="PASS" starttime="20210731 10:44:15.795" endtime="20210731 10:44:15.807"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:15.808" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:15.807" endtime="20210731 10:44:15.808"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:15.809" level="INFO">${pids} = ['15350', '15357', '15361']</msg>
<status status="PASS" starttime="20210731 10:44:15.808" endtime="20210731 10:44:15.809"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">15350</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:15.813" level="INFO">Running command 'kill 15350 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:15.809" endtime="20210731 10:44:15.813"/>
</kw>
<status status="PASS" starttime="20210731 10:44:15.809" endtime="20210731 10:44:15.813"/>
</iter>
<iter>
<var name="${pid}">15357</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:15.816" level="INFO">Running command 'kill 15357 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:15.814" endtime="20210731 10:44:15.817"/>
</kw>
<status status="PASS" starttime="20210731 10:44:15.813" endtime="20210731 10:44:15.817"/>
</iter>
<iter>
<var name="${pid}">15361</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:15.820" level="INFO">Running command 'kill 15361 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:15.817" endtime="20210731 10:44:15.821"/>
</kw>
<status status="PASS" starttime="20210731 10:44:15.817" endtime="20210731 10:44:15.821"/>
</iter>
<status status="PASS" starttime="20210731 10:44:15.809" endtime="20210731 10:44:15.821"/>
</for>
<status status="PASS" starttime="20210731 10:44:15.808" endtime="20210731 10:44:15.821"/>
</branch>
<status status="PASS" starttime="20210731 10:44:15.808" endtime="20210731 10:44:15.821"/>
</if>
<status status="PASS" starttime="20210731 10:44:15.794" endtime="20210731 10:44:15.822"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABCabc!?'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:44:14.214" endtime="20210731 10:44:15.822">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t80" name="With Each Valid Token, Updating Password Of Each System User With ABCabc!?ABCabc!?ABCab. Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:15.827" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:15.838" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:15.838" level="INFO">${pids} = 15390</msg>
<status status="PASS" starttime="20210731 10:44:15.824" endtime="20210731 10:44:15.838"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:15.839" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:15.838" endtime="20210731 10:44:15.839"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:15.839" level="INFO">${pids} = ['15390']</msg>
<status status="PASS" starttime="20210731 10:44:15.839" endtime="20210731 10:44:15.840"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">15390</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:15.844" level="INFO">Running command 'kill 15390 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:15.840" endtime="20210731 10:44:15.845"/>
</kw>
<status status="PASS" starttime="20210731 10:44:15.840" endtime="20210731 10:44:15.845"/>
</iter>
<status status="PASS" starttime="20210731 10:44:15.840" endtime="20210731 10:44:15.845"/>
</for>
<status status="PASS" starttime="20210731 10:44:15.839" endtime="20210731 10:44:15.845"/>
</branch>
<status status="PASS" starttime="20210731 10:44:15.839" endtime="20210731 10:44:15.845"/>
</if>
<status status="PASS" starttime="20210731 10:44:15.824" endtime="20210731 10:44:15.846"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:15.847" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:15.846" endtime="20210731 10:44:15.847"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:15.847" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:15.847" endtime="20210731 10:44:15.847"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:15.849" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:15.847" endtime="20210731 10:44:15.849"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:15.849" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:15.849" endtime="20210731 10:44:15.849"/>
</kw>
<msg timestamp="20210731 10:44:15.849" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:15.847" endtime="20210731 10:44:15.849"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:15.853" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:15.850" endtime="20210731 10:44:15.855"/>
</kw>
<status status="PASS" starttime="20210731 10:44:15.846" endtime="20210731 10:44:15.855"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:44:15.856" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:44:15.856" endtime="20210731 10:44:15.861"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:44:17.361" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:44:15.861" endtime="20210731 10:44:17.362"/>
</kw>
<status status="PASS" starttime="20210731 10:44:15.855" endtime="20210731 10:44:17.362"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:17.363" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:17.363" endtime="20210731 10:44:17.363"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:17.364" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:17.363" endtime="20210731 10:44:17.364"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:17.364" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:17.364" endtime="20210731 10:44:17.364"/>
</kw>
<msg timestamp="20210731 10:44:17.364" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:17.363" endtime="20210731 10:44:17.364"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:44:17.365" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:44:17.364" endtime="20210731 10:44:17.365"/>
</kw>
<status status="PASS" starttime="20210731 10:44:17.362" endtime="20210731 10:44:17.365"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:44:17.366" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:44:17.366" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:44:17.366" endtime="20210731 10:44:17.366"/>
</kw>
<status status="PASS" starttime="20210731 10:44:17.365" endtime="20210731 10:44:17.366"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:44:17.367" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:44:17.368" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:44:17.366" endtime="20210731 10:44:17.368"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:44:17.368" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:44:17.368" endtime="20210731 10:44:17.368"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:17.369" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:17.368" endtime="20210731 10:44:17.369"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:17.369" endtime="20210731 10:44:17.371"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:17.371" endtime="20210731 10:44:17.372"/>
</kw>
<status status="PASS" starttime="20210731 10:44:17.368" endtime="20210731 10:44:17.372"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:17.373" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:17.373" endtime="20210731 10:44:17.373"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:17.373" endtime="20210731 10:44:17.375"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:17.375" endtime="20210731 10:44:17.375"/>
</kw>
<status status="PASS" starttime="20210731 10:44:17.372" endtime="20210731 10:44:17.375"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:17.376" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:17.376" endtime="20210731 10:44:17.376"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:17.376" endtime="20210731 10:44:17.377"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:17.377" endtime="20210731 10:44:17.377"/>
</kw>
<status status="PASS" starttime="20210731 10:44:17.375" endtime="20210731 10:44:17.377"/>
</iter>
<status status="PASS" starttime="20210731 10:44:17.368" endtime="20210731 10:44:17.377"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:44:17.378" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:44:17.377" endtime="20210731 10:44:17.378"/>
</kw>
<status status="PASS" starttime="20210731 10:44:17.366" endtime="20210731 10:44:17.378"/>
</kw>
<status status="PASS" starttime="20210731 10:44:15.824" endtime="20210731 10:44:17.378"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCabc!?ABCabc!?ABCab.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:17.379" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:44:17.379" endtime="20210731 10:44:17.379"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:17.379" level="INFO">${payload} = {'password': 'ABCabc!?ABCabc!?ABCab.'}</msg>
<status status="PASS" starttime="20210731 10:44:17.379" endtime="20210731 10:44:17.379"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:17.389" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:17.389" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:17.380" endtime="20210731 10:44:17.389"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:17.389" endtime="20210731 10:44:17.389"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:17.389" endtime="20210731 10:44:17.389"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:17.380" endtime="20210731 10:44:17.390"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:17.380" endtime="20210731 10:44:17.390"/>
</for>
<status status="FAIL" starttime="20210731 10:44:17.378" endtime="20210731 10:44:17.390"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:17.378" endtime="20210731 10:44:17.390"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCabc!?ABCabc!?ABCab.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:17.391" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:44:17.391" endtime="20210731 10:44:17.391"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:17.391" level="INFO">${payload} = {'password': 'ABCabc!?ABCabc!?ABCab.'}</msg>
<status status="PASS" starttime="20210731 10:44:17.391" endtime="20210731 10:44:17.392"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:17.397" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:17.397" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:17.392" endtime="20210731 10:44:17.397"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:17.397" endtime="20210731 10:44:17.397"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:17.397" endtime="20210731 10:44:17.397"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:17.392" endtime="20210731 10:44:17.397"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:17.392" endtime="20210731 10:44:17.397"/>
</for>
<status status="FAIL" starttime="20210731 10:44:17.390" endtime="20210731 10:44:17.398"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:17.390" endtime="20210731 10:44:17.398"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCabc!?ABCabc!?ABCab.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:17.399" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:44:17.398" endtime="20210731 10:44:17.399"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:17.399" level="INFO">${payload} = {'password': 'ABCabc!?ABCabc!?ABCab.'}</msg>
<status status="PASS" starttime="20210731 10:44:17.399" endtime="20210731 10:44:17.399"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:17.404" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:17.405" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:17.399" endtime="20210731 10:44:17.405"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:17.405" endtime="20210731 10:44:17.405"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:17.405" endtime="20210731 10:44:17.405"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:17.399" endtime="20210731 10:44:17.405"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:17.399" endtime="20210731 10:44:17.405"/>
</for>
<status status="FAIL" starttime="20210731 10:44:17.398" endtime="20210731 10:44:17.405"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:17.398" endtime="20210731 10:44:17.405"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:17.378" endtime="20210731 10:44:17.405"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:17.410" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:17.419" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:17.419" level="INFO">${pids} = 15413
15420
15425</msg>
<status status="PASS" starttime="20210731 10:44:17.406" endtime="20210731 10:44:17.419"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:17.420" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:17.420" endtime="20210731 10:44:17.420"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:17.421" level="INFO">${pids} = ['15413', '15420', '15425']</msg>
<status status="PASS" starttime="20210731 10:44:17.421" endtime="20210731 10:44:17.421"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">15413</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:17.425" level="INFO">Running command 'kill 15413 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:17.421" endtime="20210731 10:44:17.426"/>
</kw>
<status status="PASS" starttime="20210731 10:44:17.421" endtime="20210731 10:44:17.426"/>
</iter>
<iter>
<var name="${pid}">15420</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:17.429" level="INFO">Running command 'kill 15420 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:17.426" endtime="20210731 10:44:17.430"/>
</kw>
<status status="PASS" starttime="20210731 10:44:17.426" endtime="20210731 10:44:17.430"/>
</iter>
<iter>
<var name="${pid}">15425</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:17.433" level="INFO">Running command 'kill 15425 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:17.430" endtime="20210731 10:44:17.434"/>
</kw>
<status status="PASS" starttime="20210731 10:44:17.430" endtime="20210731 10:44:17.434"/>
</iter>
<status status="PASS" starttime="20210731 10:44:17.421" endtime="20210731 10:44:17.434"/>
</for>
<status status="PASS" starttime="20210731 10:44:17.420" endtime="20210731 10:44:17.434"/>
</branch>
<status status="PASS" starttime="20210731 10:44:17.420" endtime="20210731 10:44:17.434"/>
</if>
<status status="PASS" starttime="20210731 10:44:17.406" endtime="20210731 10:44:17.434"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABCabc!?ABCabc!?ABCab.'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:44:15.823" endtime="20210731 10:44:17.434">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t81" name="With Each Valid Token, Updating Password Of Each System User With abc012. Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:17.441" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:17.451" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:17.451" level="INFO">${pids} = 15454</msg>
<status status="PASS" starttime="20210731 10:44:17.437" endtime="20210731 10:44:17.451"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:17.452" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:17.451" endtime="20210731 10:44:17.452"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:17.452" level="INFO">${pids} = ['15454']</msg>
<status status="PASS" starttime="20210731 10:44:17.452" endtime="20210731 10:44:17.452"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">15454</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:17.456" level="INFO">Running command 'kill 15454 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:17.453" endtime="20210731 10:44:17.456"/>
</kw>
<status status="PASS" starttime="20210731 10:44:17.453" endtime="20210731 10:44:17.456"/>
</iter>
<status status="PASS" starttime="20210731 10:44:17.452" endtime="20210731 10:44:17.456"/>
</for>
<status status="PASS" starttime="20210731 10:44:17.452" endtime="20210731 10:44:17.456"/>
</branch>
<status status="PASS" starttime="20210731 10:44:17.452" endtime="20210731 10:44:17.456"/>
</if>
<status status="PASS" starttime="20210731 10:44:17.437" endtime="20210731 10:44:17.457"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:17.458" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:17.458" endtime="20210731 10:44:17.458"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:17.459" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:17.458" endtime="20210731 10:44:17.459"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:17.459" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:17.459" endtime="20210731 10:44:17.459"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:17.459" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:17.459" endtime="20210731 10:44:17.459"/>
</kw>
<msg timestamp="20210731 10:44:17.459" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:17.458" endtime="20210731 10:44:17.460"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:17.463" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:17.460" endtime="20210731 10:44:17.465"/>
</kw>
<status status="PASS" starttime="20210731 10:44:17.457" endtime="20210731 10:44:17.465"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:44:17.466" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:44:17.466" endtime="20210731 10:44:17.491"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:44:18.992" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:44:17.491" endtime="20210731 10:44:18.992"/>
</kw>
<status status="PASS" starttime="20210731 10:44:17.465" endtime="20210731 10:44:18.993"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:18.994" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:18.994" endtime="20210731 10:44:18.994"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:18.994" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:18.994" endtime="20210731 10:44:18.994"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:18.995" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:18.994" endtime="20210731 10:44:18.995"/>
</kw>
<msg timestamp="20210731 10:44:18.996" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:18.993" endtime="20210731 10:44:18.996"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:44:18.997" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:44:18.996" endtime="20210731 10:44:18.998"/>
</kw>
<status status="PASS" starttime="20210731 10:44:18.993" endtime="20210731 10:44:18.998"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:44:18.998" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:44:18.998" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:44:18.998" endtime="20210731 10:44:18.998"/>
</kw>
<status status="PASS" starttime="20210731 10:44:18.998" endtime="20210731 10:44:18.999"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:44:18.999" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:44:18.999" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:44:18.999" endtime="20210731 10:44:18.999"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:44:19.000" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:44:19.000" endtime="20210731 10:44:19.000"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:19.000" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:19.000" endtime="20210731 10:44:19.000"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:19.000" endtime="20210731 10:44:19.001"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:19.001" endtime="20210731 10:44:19.001"/>
</kw>
<status status="PASS" starttime="20210731 10:44:19.000" endtime="20210731 10:44:19.001"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:19.002" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:19.001" endtime="20210731 10:44:19.002"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:19.002" endtime="20210731 10:44:19.003"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:19.003" endtime="20210731 10:44:19.003"/>
</kw>
<status status="PASS" starttime="20210731 10:44:19.001" endtime="20210731 10:44:19.003"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:19.004" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:19.004" endtime="20210731 10:44:19.004"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:19.004" endtime="20210731 10:44:19.005"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:19.005" endtime="20210731 10:44:19.005"/>
</kw>
<status status="PASS" starttime="20210731 10:44:19.003" endtime="20210731 10:44:19.005"/>
</iter>
<status status="PASS" starttime="20210731 10:44:19.000" endtime="20210731 10:44:19.005"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:44:19.006" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:44:19.005" endtime="20210731 10:44:19.006"/>
</kw>
<status status="PASS" starttime="20210731 10:44:18.999" endtime="20210731 10:44:19.006"/>
</kw>
<status status="PASS" starttime="20210731 10:44:17.437" endtime="20210731 10:44:19.006"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc012.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:19.010" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:44:19.009" endtime="20210731 10:44:19.010"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:19.010" level="INFO">${payload} = {'password': 'abc012.'}</msg>
<status status="PASS" starttime="20210731 10:44:19.010" endtime="20210731 10:44:19.010"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:19.019" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:19.020" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:19.011" endtime="20210731 10:44:19.020"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:19.020" endtime="20210731 10:44:19.020"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:19.020" endtime="20210731 10:44:19.020"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:19.011" endtime="20210731 10:44:19.020"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:19.010" endtime="20210731 10:44:19.020"/>
</for>
<status status="FAIL" starttime="20210731 10:44:19.007" endtime="20210731 10:44:19.020"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:19.006" endtime="20210731 10:44:19.020"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc012.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:19.021" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:44:19.021" endtime="20210731 10:44:19.021"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:19.022" level="INFO">${payload} = {'password': 'abc012.'}</msg>
<status status="PASS" starttime="20210731 10:44:19.022" endtime="20210731 10:44:19.022"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:19.026" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:19.026" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:19.022" endtime="20210731 10:44:19.027"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:19.027" endtime="20210731 10:44:19.027"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:19.027" endtime="20210731 10:44:19.027"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:19.022" endtime="20210731 10:44:19.027"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:19.022" endtime="20210731 10:44:19.027"/>
</for>
<status status="FAIL" starttime="20210731 10:44:19.020" endtime="20210731 10:44:19.027"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:19.020" endtime="20210731 10:44:19.027"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc012.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:19.028" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:44:19.028" endtime="20210731 10:44:19.028"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:19.029" level="INFO">${payload} = {'password': 'abc012.'}</msg>
<status status="PASS" starttime="20210731 10:44:19.028" endtime="20210731 10:44:19.029"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:19.033" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:19.033" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:19.029" endtime="20210731 10:44:19.033"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:19.033" endtime="20210731 10:44:19.034"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:19.034" endtime="20210731 10:44:19.034"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:19.029" endtime="20210731 10:44:19.034"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:19.029" endtime="20210731 10:44:19.034"/>
</for>
<status status="FAIL" starttime="20210731 10:44:19.027" endtime="20210731 10:44:19.034"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:19.027" endtime="20210731 10:44:19.034"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:19.006" endtime="20210731 10:44:19.034"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:19.039" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:19.049" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:19.049" level="INFO">${pids} = 15477
15484
15494</msg>
<status status="PASS" starttime="20210731 10:44:19.036" endtime="20210731 10:44:19.050"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:19.050" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:19.050" endtime="20210731 10:44:19.050"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:19.051" level="INFO">${pids} = ['15477', '15484', '15494']</msg>
<status status="PASS" starttime="20210731 10:44:19.051" endtime="20210731 10:44:19.051"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">15477</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:19.055" level="INFO">Running command 'kill 15477 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:19.051" endtime="20210731 10:44:19.055"/>
</kw>
<status status="PASS" starttime="20210731 10:44:19.051" endtime="20210731 10:44:19.055"/>
</iter>
<iter>
<var name="${pid}">15484</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:19.059" level="INFO">Running command 'kill 15484 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:19.055" endtime="20210731 10:44:19.061"/>
</kw>
<status status="PASS" starttime="20210731 10:44:19.055" endtime="20210731 10:44:19.061"/>
</iter>
<iter>
<var name="${pid}">15494</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:19.065" level="INFO">Running command 'kill 15494 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:19.061" endtime="20210731 10:44:19.066"/>
</kw>
<status status="PASS" starttime="20210731 10:44:19.061" endtime="20210731 10:44:19.066"/>
</iter>
<status status="PASS" starttime="20210731 10:44:19.051" endtime="20210731 10:44:19.066"/>
</for>
<status status="PASS" starttime="20210731 10:44:19.051" endtime="20210731 10:44:19.066"/>
</branch>
<status status="PASS" starttime="20210731 10:44:19.050" endtime="20210731 10:44:19.066"/>
</if>
<status status="PASS" starttime="20210731 10:44:19.035" endtime="20210731 10:44:19.066"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abc012.'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:44:17.436" endtime="20210731 10:44:19.067">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t82" name="With Each Valid Token, Updating Password Of Each System User With abc012!? Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:19.071" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:19.082" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:19.082" level="INFO">${pids} = 15523</msg>
<status status="PASS" starttime="20210731 10:44:19.068" endtime="20210731 10:44:19.082"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:19.083" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:19.083" endtime="20210731 10:44:19.083"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:19.084" level="INFO">${pids} = ['15523']</msg>
<status status="PASS" starttime="20210731 10:44:19.083" endtime="20210731 10:44:19.084"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">15523</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:19.087" level="INFO">Running command 'kill 15523 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:19.084" endtime="20210731 10:44:19.087"/>
</kw>
<status status="PASS" starttime="20210731 10:44:19.084" endtime="20210731 10:44:19.087"/>
</iter>
<status status="PASS" starttime="20210731 10:44:19.084" endtime="20210731 10:44:19.088"/>
</for>
<status status="PASS" starttime="20210731 10:44:19.083" endtime="20210731 10:44:19.088"/>
</branch>
<status status="PASS" starttime="20210731 10:44:19.083" endtime="20210731 10:44:19.088"/>
</if>
<status status="PASS" starttime="20210731 10:44:19.068" endtime="20210731 10:44:19.088"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:19.089" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:19.089" endtime="20210731 10:44:19.089"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:19.090" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:19.090" endtime="20210731 10:44:19.090"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:19.091" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:19.090" endtime="20210731 10:44:19.091"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:19.092" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:19.091" endtime="20210731 10:44:19.092"/>
</kw>
<msg timestamp="20210731 10:44:19.092" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:19.089" endtime="20210731 10:44:19.092"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:19.095" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:19.092" endtime="20210731 10:44:19.097"/>
</kw>
<status status="PASS" starttime="20210731 10:44:19.088" endtime="20210731 10:44:19.098"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:44:19.099" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:44:19.098" endtime="20210731 10:44:19.105"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:44:20.608" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:44:19.105" endtime="20210731 10:44:20.608"/>
</kw>
<status status="PASS" starttime="20210731 10:44:19.098" endtime="20210731 10:44:20.609"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:20.610" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:20.610" endtime="20210731 10:44:20.610"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:20.611" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:20.610" endtime="20210731 10:44:20.611"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:20.611" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:20.611" endtime="20210731 10:44:20.611"/>
</kw>
<msg timestamp="20210731 10:44:20.611" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:20.610" endtime="20210731 10:44:20.611"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:44:20.612" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:44:20.611" endtime="20210731 10:44:20.612"/>
</kw>
<status status="PASS" starttime="20210731 10:44:20.609" endtime="20210731 10:44:20.613"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:44:20.613" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:44:20.613" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:44:20.613" endtime="20210731 10:44:20.614"/>
</kw>
<status status="PASS" starttime="20210731 10:44:20.613" endtime="20210731 10:44:20.614"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:44:20.615" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:44:20.615" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:44:20.614" endtime="20210731 10:44:20.615"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:44:20.615" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:44:20.615" endtime="20210731 10:44:20.615"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:20.616" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:20.615" endtime="20210731 10:44:20.616"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:20.616" endtime="20210731 10:44:20.616"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:20.617" endtime="20210731 10:44:20.617"/>
</kw>
<status status="PASS" starttime="20210731 10:44:20.615" endtime="20210731 10:44:20.617"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:20.617" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:20.617" endtime="20210731 10:44:20.617"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:20.617" endtime="20210731 10:44:20.618"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:20.618" endtime="20210731 10:44:20.618"/>
</kw>
<status status="PASS" starttime="20210731 10:44:20.617" endtime="20210731 10:44:20.618"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:20.619" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:20.619" endtime="20210731 10:44:20.619"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:20.619" endtime="20210731 10:44:20.620"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:20.620" endtime="20210731 10:44:20.620"/>
</kw>
<status status="PASS" starttime="20210731 10:44:20.618" endtime="20210731 10:44:20.620"/>
</iter>
<status status="PASS" starttime="20210731 10:44:20.615" endtime="20210731 10:44:20.620"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:44:20.620" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:44:20.620" endtime="20210731 10:44:20.620"/>
</kw>
<status status="PASS" starttime="20210731 10:44:20.614" endtime="20210731 10:44:20.621"/>
</kw>
<status status="PASS" starttime="20210731 10:44:19.068" endtime="20210731 10:44:20.621"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc012!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:20.622" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:44:20.622" endtime="20210731 10:44:20.622"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:20.622" level="INFO">${payload} = {'password': 'abc012!?'}</msg>
<status status="PASS" starttime="20210731 10:44:20.622" endtime="20210731 10:44:20.622"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:20.631" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:20.632" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:20.623" endtime="20210731 10:44:20.632"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:20.632" endtime="20210731 10:44:20.632"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:20.632" endtime="20210731 10:44:20.632"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:20.622" endtime="20210731 10:44:20.632"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:20.622" endtime="20210731 10:44:20.632"/>
</for>
<status status="FAIL" starttime="20210731 10:44:20.621" endtime="20210731 10:44:20.632"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:20.621" endtime="20210731 10:44:20.632"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc012!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:20.634" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:44:20.634" endtime="20210731 10:44:20.634"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:20.635" level="INFO">${payload} = {'password': 'abc012!?'}</msg>
<status status="PASS" starttime="20210731 10:44:20.635" endtime="20210731 10:44:20.635"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:20.640" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:20.640" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:20.635" endtime="20210731 10:44:20.640"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:20.640" endtime="20210731 10:44:20.641"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:20.641" endtime="20210731 10:44:20.641"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:20.635" endtime="20210731 10:44:20.641"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:20.635" endtime="20210731 10:44:20.641"/>
</for>
<status status="FAIL" starttime="20210731 10:44:20.633" endtime="20210731 10:44:20.642"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:20.633" endtime="20210731 10:44:20.642"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc012!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:20.644" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:44:20.643" endtime="20210731 10:44:20.644"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:20.644" level="INFO">${payload} = {'password': 'abc012!?'}</msg>
<status status="PASS" starttime="20210731 10:44:20.644" endtime="20210731 10:44:20.644"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:20.649" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:20.649" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:20.644" endtime="20210731 10:44:20.649"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:20.649" endtime="20210731 10:44:20.649"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:20.649" endtime="20210731 10:44:20.649"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:20.644" endtime="20210731 10:44:20.649"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:20.644" endtime="20210731 10:44:20.650"/>
</for>
<status status="FAIL" starttime="20210731 10:44:20.642" endtime="20210731 10:44:20.650"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:20.642" endtime="20210731 10:44:20.650"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:20.621" endtime="20210731 10:44:20.650"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:20.654" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:20.663" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:20.663" level="INFO">${pids} = 15546
15553
15557</msg>
<status status="PASS" starttime="20210731 10:44:20.651" endtime="20210731 10:44:20.663"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:20.664" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:20.663" endtime="20210731 10:44:20.664"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:20.665" level="INFO">${pids} = ['15546', '15553', '15557']</msg>
<status status="PASS" starttime="20210731 10:44:20.664" endtime="20210731 10:44:20.665"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">15546</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:20.668" level="INFO">Running command 'kill 15546 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:20.665" endtime="20210731 10:44:20.668"/>
</kw>
<status status="PASS" starttime="20210731 10:44:20.665" endtime="20210731 10:44:20.668"/>
</iter>
<iter>
<var name="${pid}">15553</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:20.674" level="INFO">Running command 'kill 15553 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:20.669" endtime="20210731 10:44:20.675"/>
</kw>
<status status="PASS" starttime="20210731 10:44:20.669" endtime="20210731 10:44:20.675"/>
</iter>
<iter>
<var name="${pid}">15557</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:20.681" level="INFO">Running command 'kill 15557 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:20.676" endtime="20210731 10:44:20.682"/>
</kw>
<status status="PASS" starttime="20210731 10:44:20.675" endtime="20210731 10:44:20.682"/>
</iter>
<status status="PASS" starttime="20210731 10:44:20.665" endtime="20210731 10:44:20.682"/>
</for>
<status status="PASS" starttime="20210731 10:44:20.664" endtime="20210731 10:44:20.682"/>
</branch>
<status status="PASS" starttime="20210731 10:44:20.664" endtime="20210731 10:44:20.682"/>
</if>
<status status="PASS" starttime="20210731 10:44:20.650" endtime="20210731 10:44:20.682"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abc012!?'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:44:19.067" endtime="20210731 10:44:20.682">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t83" name="With Each Valid Token, Updating Password Of Each System User With abc012!?abc012!?abc012 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:20.687" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:20.697" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:20.697" level="INFO">${pids} = 15586</msg>
<status status="PASS" starttime="20210731 10:44:20.685" endtime="20210731 10:44:20.697"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:20.698" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:20.698" endtime="20210731 10:44:20.698"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:20.699" level="INFO">${pids} = ['15586']</msg>
<status status="PASS" starttime="20210731 10:44:20.699" endtime="20210731 10:44:20.699"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">15586</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:20.702" level="INFO">Running command 'kill 15586 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:20.699" endtime="20210731 10:44:20.703"/>
</kw>
<status status="PASS" starttime="20210731 10:44:20.699" endtime="20210731 10:44:20.703"/>
</iter>
<status status="PASS" starttime="20210731 10:44:20.699" endtime="20210731 10:44:20.703"/>
</for>
<status status="PASS" starttime="20210731 10:44:20.698" endtime="20210731 10:44:20.703"/>
</branch>
<status status="PASS" starttime="20210731 10:44:20.698" endtime="20210731 10:44:20.703"/>
</if>
<status status="PASS" starttime="20210731 10:44:20.684" endtime="20210731 10:44:20.703"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:20.704" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:20.704" endtime="20210731 10:44:20.704"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:20.705" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:20.705" endtime="20210731 10:44:20.705"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:20.705" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:20.705" endtime="20210731 10:44:20.705"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:20.706" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:20.705" endtime="20210731 10:44:20.706"/>
</kw>
<msg timestamp="20210731 10:44:20.706" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:20.704" endtime="20210731 10:44:20.706"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:20.710" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:20.706" endtime="20210731 10:44:20.712"/>
</kw>
<status status="PASS" starttime="20210731 10:44:20.703" endtime="20210731 10:44:20.712"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:44:20.713" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:44:20.713" endtime="20210731 10:44:20.717"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:44:22.219" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:44:20.718" endtime="20210731 10:44:22.219"/>
</kw>
<status status="PASS" starttime="20210731 10:44:20.713" endtime="20210731 10:44:22.219"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:22.221" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:22.220" endtime="20210731 10:44:22.221"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:22.221" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:22.221" endtime="20210731 10:44:22.221"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:22.221" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:22.221" endtime="20210731 10:44:22.222"/>
</kw>
<msg timestamp="20210731 10:44:22.222" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:22.220" endtime="20210731 10:44:22.222"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:44:22.222" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:44:22.222" endtime="20210731 10:44:22.223"/>
</kw>
<status status="PASS" starttime="20210731 10:44:22.220" endtime="20210731 10:44:22.223"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:44:22.223" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:44:22.224" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:44:22.223" endtime="20210731 10:44:22.224"/>
</kw>
<status status="PASS" starttime="20210731 10:44:22.223" endtime="20210731 10:44:22.224"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:44:22.225" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:44:22.225" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:44:22.224" endtime="20210731 10:44:22.225"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:44:22.226" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:44:22.225" endtime="20210731 10:44:22.226"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:22.226" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:22.226" endtime="20210731 10:44:22.226"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:22.226" endtime="20210731 10:44:22.227"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:22.227" endtime="20210731 10:44:22.227"/>
</kw>
<status status="PASS" starttime="20210731 10:44:22.226" endtime="20210731 10:44:22.227"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:22.228" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:22.227" endtime="20210731 10:44:22.228"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:22.228" endtime="20210731 10:44:22.228"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:22.228" endtime="20210731 10:44:22.229"/>
</kw>
<status status="PASS" starttime="20210731 10:44:22.227" endtime="20210731 10:44:22.229"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:22.229" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:22.229" endtime="20210731 10:44:22.229"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:22.229" endtime="20210731 10:44:22.230"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:22.230" endtime="20210731 10:44:22.230"/>
</kw>
<status status="PASS" starttime="20210731 10:44:22.229" endtime="20210731 10:44:22.230"/>
</iter>
<status status="PASS" starttime="20210731 10:44:22.226" endtime="20210731 10:44:22.230"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:44:22.231" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:44:22.230" endtime="20210731 10:44:22.231"/>
</kw>
<status status="PASS" starttime="20210731 10:44:22.224" endtime="20210731 10:44:22.231"/>
</kw>
<status status="PASS" starttime="20210731 10:44:20.684" endtime="20210731 10:44:22.231"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc012!?abc012!?abc012</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:22.232" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:44:22.232" endtime="20210731 10:44:22.232"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:22.233" level="INFO">${payload} = {'password': 'abc012!?abc012!?abc012'}</msg>
<status status="PASS" starttime="20210731 10:44:22.232" endtime="20210731 10:44:22.233"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:22.243" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:22.243" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:22.233" endtime="20210731 10:44:22.243"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:22.243" endtime="20210731 10:44:22.243"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:22.243" endtime="20210731 10:44:22.244"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:22.233" endtime="20210731 10:44:22.244"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:22.233" endtime="20210731 10:44:22.244"/>
</for>
<status status="FAIL" starttime="20210731 10:44:22.231" endtime="20210731 10:44:22.244"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:22.231" endtime="20210731 10:44:22.244"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc012!?abc012!?abc012</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:22.245" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:44:22.245" endtime="20210731 10:44:22.245"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:22.245" level="INFO">${payload} = {'password': 'abc012!?abc012!?abc012'}</msg>
<status status="PASS" starttime="20210731 10:44:22.245" endtime="20210731 10:44:22.245"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:22.250" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:22.250" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:22.246" endtime="20210731 10:44:22.250"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:22.250" endtime="20210731 10:44:22.250"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:22.250" endtime="20210731 10:44:22.250"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:22.246" endtime="20210731 10:44:22.250"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:22.245" endtime="20210731 10:44:22.250"/>
</for>
<status status="FAIL" starttime="20210731 10:44:22.244" endtime="20210731 10:44:22.250"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:22.244" endtime="20210731 10:44:22.250"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc012!?abc012!?abc012</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:22.251" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:44:22.251" endtime="20210731 10:44:22.251"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:22.252" level="INFO">${payload} = {'password': 'abc012!?abc012!?abc012'}</msg>
<status status="PASS" starttime="20210731 10:44:22.251" endtime="20210731 10:44:22.252"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:22.256" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:22.256" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:22.252" endtime="20210731 10:44:22.256"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:22.256" endtime="20210731 10:44:22.256"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:22.256" endtime="20210731 10:44:22.257"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:22.252" endtime="20210731 10:44:22.257"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:22.252" endtime="20210731 10:44:22.257"/>
</for>
<status status="FAIL" starttime="20210731 10:44:22.250" endtime="20210731 10:44:22.257"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:22.250" endtime="20210731 10:44:22.257"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:22.231" endtime="20210731 10:44:22.257"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:22.262" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:22.270" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:22.271" level="INFO">${pids} = 15609
15616
15624</msg>
<status status="PASS" starttime="20210731 10:44:22.259" endtime="20210731 10:44:22.271"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:22.271" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:22.271" endtime="20210731 10:44:22.271"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:22.272" level="INFO">${pids} = ['15609', '15616', '15624']</msg>
<status status="PASS" starttime="20210731 10:44:22.272" endtime="20210731 10:44:22.272"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">15609</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:22.277" level="INFO">Running command 'kill 15609 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:22.273" endtime="20210731 10:44:22.278"/>
</kw>
<status status="PASS" starttime="20210731 10:44:22.272" endtime="20210731 10:44:22.278"/>
</iter>
<iter>
<var name="${pid}">15616</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:22.282" level="INFO">Running command 'kill 15616 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:22.279" endtime="20210731 10:44:22.284"/>
</kw>
<status status="PASS" starttime="20210731 10:44:22.278" endtime="20210731 10:44:22.284"/>
</iter>
<iter>
<var name="${pid}">15624</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:22.288" level="INFO">Running command 'kill 15624 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:22.285" endtime="20210731 10:44:22.288"/>
</kw>
<status status="PASS" starttime="20210731 10:44:22.284" endtime="20210731 10:44:22.288"/>
</iter>
<status status="PASS" starttime="20210731 10:44:22.272" endtime="20210731 10:44:22.288"/>
</for>
<status status="PASS" starttime="20210731 10:44:22.272" endtime="20210731 10:44:22.288"/>
</branch>
<status status="PASS" starttime="20210731 10:44:22.272" endtime="20210731 10:44:22.288"/>
</if>
<status status="PASS" starttime="20210731 10:44:22.258" endtime="20210731 10:44:22.289"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abc012!?abc012!?abc012'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:44:20.683" endtime="20210731 10:44:22.289">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t84" name="With Each Valid Token, Updating Password Of Each System User With abc!?.Z Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:22.294" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:22.303" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:22.303" level="INFO">${pids} = 15653</msg>
<status status="PASS" starttime="20210731 10:44:22.291" endtime="20210731 10:44:22.303"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:22.304" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:22.304" endtime="20210731 10:44:22.304"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:22.305" level="INFO">${pids} = ['15653']</msg>
<status status="PASS" starttime="20210731 10:44:22.304" endtime="20210731 10:44:22.305"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">15653</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:22.309" level="INFO">Running command 'kill 15653 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:22.305" endtime="20210731 10:44:22.309"/>
</kw>
<status status="PASS" starttime="20210731 10:44:22.305" endtime="20210731 10:44:22.310"/>
</iter>
<status status="PASS" starttime="20210731 10:44:22.305" endtime="20210731 10:44:22.310"/>
</for>
<status status="PASS" starttime="20210731 10:44:22.304" endtime="20210731 10:44:22.310"/>
</branch>
<status status="PASS" starttime="20210731 10:44:22.304" endtime="20210731 10:44:22.310"/>
</if>
<status status="PASS" starttime="20210731 10:44:22.291" endtime="20210731 10:44:22.310"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:22.311" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:22.311" endtime="20210731 10:44:22.311"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:22.312" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:22.312" endtime="20210731 10:44:22.312"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:22.312" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:22.312" endtime="20210731 10:44:22.312"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:22.313" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:22.313" endtime="20210731 10:44:22.313"/>
</kw>
<msg timestamp="20210731 10:44:22.313" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:22.311" endtime="20210731 10:44:22.313"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:22.317" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:22.313" endtime="20210731 10:44:22.319"/>
</kw>
<status status="PASS" starttime="20210731 10:44:22.310" endtime="20210731 10:44:22.319"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:44:22.320" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:44:22.320" endtime="20210731 10:44:22.324"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:44:23.826" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:44:22.325" endtime="20210731 10:44:23.826"/>
</kw>
<status status="PASS" starttime="20210731 10:44:22.319" endtime="20210731 10:44:23.826"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:23.828" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:23.827" endtime="20210731 10:44:23.828"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:23.828" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:23.828" endtime="20210731 10:44:23.828"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:23.829" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:23.828" endtime="20210731 10:44:23.829"/>
</kw>
<msg timestamp="20210731 10:44:23.829" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:23.827" endtime="20210731 10:44:23.829"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:44:23.829" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:44:23.829" endtime="20210731 10:44:23.830"/>
</kw>
<status status="PASS" starttime="20210731 10:44:23.827" endtime="20210731 10:44:23.830"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:44:23.831" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:44:23.831" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:44:23.830" endtime="20210731 10:44:23.831"/>
</kw>
<status status="PASS" starttime="20210731 10:44:23.830" endtime="20210731 10:44:23.831"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:44:23.832" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:44:23.832" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:44:23.831" endtime="20210731 10:44:23.832"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:44:23.832" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:44:23.832" endtime="20210731 10:44:23.832"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:23.833" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:23.832" endtime="20210731 10:44:23.833"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:23.833" endtime="20210731 10:44:23.835"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:23.835" endtime="20210731 10:44:23.836"/>
</kw>
<status status="PASS" starttime="20210731 10:44:23.832" endtime="20210731 10:44:23.836"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:23.836" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:23.836" endtime="20210731 10:44:23.836"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:23.836" endtime="20210731 10:44:23.837"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:23.837" endtime="20210731 10:44:23.837"/>
</kw>
<status status="PASS" starttime="20210731 10:44:23.836" endtime="20210731 10:44:23.837"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:23.838" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:23.837" endtime="20210731 10:44:23.838"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:23.838" endtime="20210731 10:44:23.838"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:23.838" endtime="20210731 10:44:23.839"/>
</kw>
<status status="PASS" starttime="20210731 10:44:23.837" endtime="20210731 10:44:23.839"/>
</iter>
<status status="PASS" starttime="20210731 10:44:23.832" endtime="20210731 10:44:23.839"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:44:23.839" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:44:23.839" endtime="20210731 10:44:23.839"/>
</kw>
<status status="PASS" starttime="20210731 10:44:23.831" endtime="20210731 10:44:23.839"/>
</kw>
<status status="PASS" starttime="20210731 10:44:22.290" endtime="20210731 10:44:23.839"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.Z</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:23.842" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:44:23.841" endtime="20210731 10:44:23.842"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:23.843" level="INFO">${payload} = {'password': 'abc!?.Z'}</msg>
<status status="PASS" starttime="20210731 10:44:23.842" endtime="20210731 10:44:23.843"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:23.851" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:23.852" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:23.843" endtime="20210731 10:44:23.852"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:23.852" endtime="20210731 10:44:23.852"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:23.852" endtime="20210731 10:44:23.852"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:23.843" endtime="20210731 10:44:23.852"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:23.843" endtime="20210731 10:44:23.852"/>
</for>
<status status="FAIL" starttime="20210731 10:44:23.840" endtime="20210731 10:44:23.853"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:23.840" endtime="20210731 10:44:23.853"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.Z</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:23.854" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:44:23.854" endtime="20210731 10:44:23.854"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:23.854" level="INFO">${payload} = {'password': 'abc!?.Z'}</msg>
<status status="PASS" starttime="20210731 10:44:23.854" endtime="20210731 10:44:23.854"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:23.859" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:23.860" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:23.855" endtime="20210731 10:44:23.860"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:23.860" endtime="20210731 10:44:23.860"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:23.860" endtime="20210731 10:44:23.860"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:23.855" endtime="20210731 10:44:23.860"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:23.855" endtime="20210731 10:44:23.860"/>
</for>
<status status="FAIL" starttime="20210731 10:44:23.853" endtime="20210731 10:44:23.860"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:23.853" endtime="20210731 10:44:23.860"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.Z</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:23.861" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:44:23.861" endtime="20210731 10:44:23.861"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:23.862" level="INFO">${payload} = {'password': 'abc!?.Z'}</msg>
<status status="PASS" starttime="20210731 10:44:23.861" endtime="20210731 10:44:23.862"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:23.866" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:23.866" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:23.862" endtime="20210731 10:44:23.866"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:23.866" endtime="20210731 10:44:23.866"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:23.866" endtime="20210731 10:44:23.866"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:23.862" endtime="20210731 10:44:23.866"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:23.862" endtime="20210731 10:44:23.866"/>
</for>
<status status="FAIL" starttime="20210731 10:44:23.860" endtime="20210731 10:44:23.867"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:23.860" endtime="20210731 10:44:23.867"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:23.840" endtime="20210731 10:44:23.867"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:23.871" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:23.881" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:23.881" level="INFO">${pids} = 15676
15683
15693</msg>
<status status="PASS" starttime="20210731 10:44:23.868" endtime="20210731 10:44:23.881"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:23.882" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:23.882" endtime="20210731 10:44:23.882"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:23.883" level="INFO">${pids} = ['15676', '15683', '15693']</msg>
<status status="PASS" starttime="20210731 10:44:23.883" endtime="20210731 10:44:23.883"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">15676</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:23.886" level="INFO">Running command 'kill 15676 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:23.883" endtime="20210731 10:44:23.887"/>
</kw>
<status status="PASS" starttime="20210731 10:44:23.883" endtime="20210731 10:44:23.887"/>
</iter>
<iter>
<var name="${pid}">15683</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:23.890" level="INFO">Running command 'kill 15683 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:23.887" endtime="20210731 10:44:23.890"/>
</kw>
<status status="PASS" starttime="20210731 10:44:23.887" endtime="20210731 10:44:23.891"/>
</iter>
<iter>
<var name="${pid}">15693</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:23.894" level="INFO">Running command 'kill 15693 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:23.891" endtime="20210731 10:44:23.895"/>
</kw>
<status status="PASS" starttime="20210731 10:44:23.891" endtime="20210731 10:44:23.895"/>
</iter>
<status status="PASS" starttime="20210731 10:44:23.883" endtime="20210731 10:44:23.895"/>
</for>
<status status="PASS" starttime="20210731 10:44:23.882" endtime="20210731 10:44:23.895"/>
</branch>
<status status="PASS" starttime="20210731 10:44:23.882" endtime="20210731 10:44:23.895"/>
</if>
<status status="PASS" starttime="20210731 10:44:23.867" endtime="20210731 10:44:23.895"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abc!?.Z'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:44:22.289" endtime="20210731 10:44:23.895">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t85" name="With Each Valid Token, Updating Password Of Each System User With abc!?.ZA Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:23.902" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:23.912" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:23.912" level="INFO">${pids} = 15722</msg>
<status status="PASS" starttime="20210731 10:44:23.898" endtime="20210731 10:44:23.912"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:23.913" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:23.912" endtime="20210731 10:44:23.913"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:23.914" level="INFO">${pids} = ['15722']</msg>
<status status="PASS" starttime="20210731 10:44:23.913" endtime="20210731 10:44:23.914"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">15722</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:23.917" level="INFO">Running command 'kill 15722 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:23.914" endtime="20210731 10:44:23.918"/>
</kw>
<status status="PASS" starttime="20210731 10:44:23.914" endtime="20210731 10:44:23.918"/>
</iter>
<status status="PASS" starttime="20210731 10:44:23.914" endtime="20210731 10:44:23.918"/>
</for>
<status status="PASS" starttime="20210731 10:44:23.913" endtime="20210731 10:44:23.918"/>
</branch>
<status status="PASS" starttime="20210731 10:44:23.913" endtime="20210731 10:44:23.918"/>
</if>
<status status="PASS" starttime="20210731 10:44:23.897" endtime="20210731 10:44:23.918"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:23.919" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:23.919" endtime="20210731 10:44:23.919"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:23.920" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:23.920" endtime="20210731 10:44:23.920"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:23.920" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:23.920" endtime="20210731 10:44:23.920"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:23.921" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:23.920" endtime="20210731 10:44:23.921"/>
</kw>
<msg timestamp="20210731 10:44:23.921" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:23.919" endtime="20210731 10:44:23.921"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:23.924" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:23.921" endtime="20210731 10:44:23.927"/>
</kw>
<status status="PASS" starttime="20210731 10:44:23.918" endtime="20210731 10:44:23.927"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:44:23.928" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:44:23.928" endtime="20210731 10:44:23.933"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:44:25.434" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:44:23.933" endtime="20210731 10:44:25.434"/>
</kw>
<status status="PASS" starttime="20210731 10:44:23.927" endtime="20210731 10:44:25.435"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:25.436" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:25.435" endtime="20210731 10:44:25.436"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:25.436" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:25.436" endtime="20210731 10:44:25.436"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:25.436" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:25.436" endtime="20210731 10:44:25.436"/>
</kw>
<msg timestamp="20210731 10:44:25.437" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:25.435" endtime="20210731 10:44:25.437"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:44:25.437" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:44:25.437" endtime="20210731 10:44:25.438"/>
</kw>
<status status="PASS" starttime="20210731 10:44:25.435" endtime="20210731 10:44:25.438"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:44:25.439" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:44:25.439" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:44:25.439" endtime="20210731 10:44:25.439"/>
</kw>
<status status="PASS" starttime="20210731 10:44:25.438" endtime="20210731 10:44:25.439"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:44:25.441" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:44:25.441" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:44:25.440" endtime="20210731 10:44:25.441"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:44:25.441" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:44:25.441" endtime="20210731 10:44:25.441"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:25.442" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:25.442" endtime="20210731 10:44:25.442"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:25.442" endtime="20210731 10:44:25.443"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:25.443" endtime="20210731 10:44:25.443"/>
</kw>
<status status="PASS" starttime="20210731 10:44:25.442" endtime="20210731 10:44:25.443"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:25.444" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:25.444" endtime="20210731 10:44:25.444"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:25.444" endtime="20210731 10:44:25.445"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:25.445" endtime="20210731 10:44:25.445"/>
</kw>
<status status="PASS" starttime="20210731 10:44:25.444" endtime="20210731 10:44:25.445"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:25.446" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:25.445" endtime="20210731 10:44:25.446"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:25.446" endtime="20210731 10:44:25.446"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:25.447" endtime="20210731 10:44:25.447"/>
</kw>
<status status="PASS" starttime="20210731 10:44:25.445" endtime="20210731 10:44:25.447"/>
</iter>
<status status="PASS" starttime="20210731 10:44:25.441" endtime="20210731 10:44:25.447"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:44:25.447" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:44:25.447" endtime="20210731 10:44:25.447"/>
</kw>
<status status="PASS" starttime="20210731 10:44:25.439" endtime="20210731 10:44:25.448"/>
</kw>
<status status="PASS" starttime="20210731 10:44:23.897" endtime="20210731 10:44:25.448"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.ZA</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:25.449" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:44:25.449" endtime="20210731 10:44:25.449"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:25.450" level="INFO">${payload} = {'password': 'abc!?.ZA'}</msg>
<status status="PASS" starttime="20210731 10:44:25.449" endtime="20210731 10:44:25.450"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:25.459" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:25.459" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:25.450" endtime="20210731 10:44:25.459"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:25.460" endtime="20210731 10:44:25.460"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:25.460" endtime="20210731 10:44:25.460"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:25.450" endtime="20210731 10:44:25.460"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:25.450" endtime="20210731 10:44:25.460"/>
</for>
<status status="FAIL" starttime="20210731 10:44:25.448" endtime="20210731 10:44:25.460"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:25.448" endtime="20210731 10:44:25.460"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.ZA</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:25.461" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:44:25.461" endtime="20210731 10:44:25.461"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:25.462" level="INFO">${payload} = {'password': 'abc!?.ZA'}</msg>
<status status="PASS" starttime="20210731 10:44:25.461" endtime="20210731 10:44:25.462"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:25.466" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:25.466" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:25.462" endtime="20210731 10:44:25.466"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:25.466" endtime="20210731 10:44:25.466"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:25.467" endtime="20210731 10:44:25.467"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:25.462" endtime="20210731 10:44:25.467"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:25.462" endtime="20210731 10:44:25.467"/>
</for>
<status status="FAIL" starttime="20210731 10:44:25.460" endtime="20210731 10:44:25.467"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:25.460" endtime="20210731 10:44:25.467"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.ZA</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:25.468" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:44:25.468" endtime="20210731 10:44:25.468"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:25.468" level="INFO">${payload} = {'password': 'abc!?.ZA'}</msg>
<status status="PASS" starttime="20210731 10:44:25.468" endtime="20210731 10:44:25.468"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:25.473" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:25.473" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:25.469" endtime="20210731 10:44:25.473"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:25.474" endtime="20210731 10:44:25.474"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:25.474" endtime="20210731 10:44:25.474"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:25.469" endtime="20210731 10:44:25.474"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:25.469" endtime="20210731 10:44:25.474"/>
</for>
<status status="FAIL" starttime="20210731 10:44:25.467" endtime="20210731 10:44:25.475"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:25.467" endtime="20210731 10:44:25.475"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:25.448" endtime="20210731 10:44:25.475"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:25.480" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:25.491" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:25.491" level="INFO">${pids} = 15745
15752
15757</msg>
<status status="PASS" starttime="20210731 10:44:25.476" endtime="20210731 10:44:25.491"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:25.492" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:25.491" endtime="20210731 10:44:25.492"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:25.492" level="INFO">${pids} = ['15745', '15752', '15757']</msg>
<status status="PASS" starttime="20210731 10:44:25.492" endtime="20210731 10:44:25.492"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">15745</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:25.496" level="INFO">Running command 'kill 15745 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:25.493" endtime="20210731 10:44:25.496"/>
</kw>
<status status="PASS" starttime="20210731 10:44:25.493" endtime="20210731 10:44:25.496"/>
</iter>
<iter>
<var name="${pid}">15752</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:25.500" level="INFO">Running command 'kill 15752 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:25.497" endtime="20210731 10:44:25.502"/>
</kw>
<status status="PASS" starttime="20210731 10:44:25.497" endtime="20210731 10:44:25.502"/>
</iter>
<iter>
<var name="${pid}">15757</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:25.506" level="INFO">Running command 'kill 15757 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:25.502" endtime="20210731 10:44:25.507"/>
</kw>
<status status="PASS" starttime="20210731 10:44:25.502" endtime="20210731 10:44:25.507"/>
</iter>
<status status="PASS" starttime="20210731 10:44:25.492" endtime="20210731 10:44:25.507"/>
</for>
<status status="PASS" starttime="20210731 10:44:25.492" endtime="20210731 10:44:25.507"/>
</branch>
<status status="PASS" starttime="20210731 10:44:25.492" endtime="20210731 10:44:25.507"/>
</if>
<status status="PASS" starttime="20210731 10:44:25.475" endtime="20210731 10:44:25.507"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abc!?.ZA'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:44:23.896" endtime="20210731 10:44:25.508">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t86" name="With Each Valid Token, Updating Password Of Each System User With abc!?.ZAabc!?.ZAabc!?. Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:25.514" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:25.524" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:25.524" level="INFO">${pids} = 15786</msg>
<status status="PASS" starttime="20210731 10:44:25.510" endtime="20210731 10:44:25.524"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:25.525" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:25.524" endtime="20210731 10:44:25.525"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:25.526" level="INFO">${pids} = ['15786']</msg>
<status status="PASS" starttime="20210731 10:44:25.525" endtime="20210731 10:44:25.526"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">15786</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:25.530" level="INFO">Running command 'kill 15786 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:25.526" endtime="20210731 10:44:25.530"/>
</kw>
<status status="PASS" starttime="20210731 10:44:25.526" endtime="20210731 10:44:25.530"/>
</iter>
<status status="PASS" starttime="20210731 10:44:25.526" endtime="20210731 10:44:25.530"/>
</for>
<status status="PASS" starttime="20210731 10:44:25.525" endtime="20210731 10:44:25.531"/>
</branch>
<status status="PASS" starttime="20210731 10:44:25.525" endtime="20210731 10:44:25.531"/>
</if>
<status status="PASS" starttime="20210731 10:44:25.510" endtime="20210731 10:44:25.531"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:25.532" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:25.532" endtime="20210731 10:44:25.532"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:25.533" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:25.532" endtime="20210731 10:44:25.533"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:25.534" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:25.534" endtime="20210731 10:44:25.534"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:25.535" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:25.535" endtime="20210731 10:44:25.535"/>
</kw>
<msg timestamp="20210731 10:44:25.536" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:25.532" endtime="20210731 10:44:25.536"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:25.539" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:25.536" endtime="20210731 10:44:25.541"/>
</kw>
<status status="PASS" starttime="20210731 10:44:25.531" endtime="20210731 10:44:25.542"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:44:25.543" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:44:25.543" endtime="20210731 10:44:25.548"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:44:27.049" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:44:25.548" endtime="20210731 10:44:27.049"/>
</kw>
<status status="PASS" starttime="20210731 10:44:25.542" endtime="20210731 10:44:27.050"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:27.051" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:27.050" endtime="20210731 10:44:27.051"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:27.051" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:27.051" endtime="20210731 10:44:27.051"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:27.052" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:27.051" endtime="20210731 10:44:27.052"/>
</kw>
<msg timestamp="20210731 10:44:27.052" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:27.050" endtime="20210731 10:44:27.052"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:44:27.052" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:44:27.052" endtime="20210731 10:44:27.053"/>
</kw>
<status status="PASS" starttime="20210731 10:44:27.050" endtime="20210731 10:44:27.053"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:44:27.054" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:44:27.054" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:44:27.054" endtime="20210731 10:44:27.054"/>
</kw>
<status status="PASS" starttime="20210731 10:44:27.053" endtime="20210731 10:44:27.055"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:44:27.056" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:44:27.056" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:44:27.055" endtime="20210731 10:44:27.056"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:44:27.056" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:44:27.056" endtime="20210731 10:44:27.056"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:27.057" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:27.056" endtime="20210731 10:44:27.057"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:27.057" endtime="20210731 10:44:27.058"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:27.058" endtime="20210731 10:44:27.058"/>
</kw>
<status status="PASS" starttime="20210731 10:44:27.056" endtime="20210731 10:44:27.058"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:27.059" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:27.059" endtime="20210731 10:44:27.059"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:27.059" endtime="20210731 10:44:27.060"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:27.060" endtime="20210731 10:44:27.060"/>
</kw>
<status status="PASS" starttime="20210731 10:44:27.058" endtime="20210731 10:44:27.060"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:27.060" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:27.060" endtime="20210731 10:44:27.060"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:27.060" endtime="20210731 10:44:27.061"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:27.061" endtime="20210731 10:44:27.061"/>
</kw>
<status status="PASS" starttime="20210731 10:44:27.060" endtime="20210731 10:44:27.062"/>
</iter>
<status status="PASS" starttime="20210731 10:44:27.056" endtime="20210731 10:44:27.062"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:44:27.062" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:44:27.062" endtime="20210731 10:44:27.062"/>
</kw>
<status status="PASS" starttime="20210731 10:44:27.055" endtime="20210731 10:44:27.062"/>
</kw>
<status status="PASS" starttime="20210731 10:44:25.509" endtime="20210731 10:44:27.062"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.ZAabc!?.ZAabc!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:27.063" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:44:27.063" endtime="20210731 10:44:27.063"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:27.064" level="INFO">${payload} = {'password': 'abc!?.ZAabc!?.ZAabc!?.'}</msg>
<status status="PASS" starttime="20210731 10:44:27.064" endtime="20210731 10:44:27.064"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:27.072" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:27.073" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:27.064" endtime="20210731 10:44:27.073"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:27.073" endtime="20210731 10:44:27.073"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:27.073" endtime="20210731 10:44:27.073"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:27.064" endtime="20210731 10:44:27.073"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:27.064" endtime="20210731 10:44:27.073"/>
</for>
<status status="FAIL" starttime="20210731 10:44:27.063" endtime="20210731 10:44:27.074"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:27.063" endtime="20210731 10:44:27.074"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.ZAabc!?.ZAabc!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:27.076" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:44:27.075" endtime="20210731 10:44:27.076"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:27.076" level="INFO">${payload} = {'password': 'abc!?.ZAabc!?.ZAabc!?.'}</msg>
<status status="PASS" starttime="20210731 10:44:27.076" endtime="20210731 10:44:27.076"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:27.081" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:27.082" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:27.077" endtime="20210731 10:44:27.082"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:27.082" endtime="20210731 10:44:27.082"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:27.082" endtime="20210731 10:44:27.082"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:27.076" endtime="20210731 10:44:27.082"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:27.076" endtime="20210731 10:44:27.082"/>
</for>
<status status="FAIL" starttime="20210731 10:44:27.074" endtime="20210731 10:44:27.082"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:27.074" endtime="20210731 10:44:27.082"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.ZAabc!?.ZAabc!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:27.083" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:44:27.083" endtime="20210731 10:44:27.083"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:27.084" level="INFO">${payload} = {'password': 'abc!?.ZAabc!?.ZAabc!?.'}</msg>
<status status="PASS" starttime="20210731 10:44:27.084" endtime="20210731 10:44:27.084"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:27.089" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:27.089" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:27.084" endtime="20210731 10:44:27.089"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:27.089" endtime="20210731 10:44:27.089"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:27.089" endtime="20210731 10:44:27.089"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:27.084" endtime="20210731 10:44:27.089"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:27.084" endtime="20210731 10:44:27.090"/>
</for>
<status status="FAIL" starttime="20210731 10:44:27.083" endtime="20210731 10:44:27.090"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:27.082" endtime="20210731 10:44:27.090"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:27.062" endtime="20210731 10:44:27.090"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:27.094" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:27.104" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:27.104" level="INFO">${pids} = 15809
15816
15821</msg>
<status status="PASS" starttime="20210731 10:44:27.091" endtime="20210731 10:44:27.104"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:27.105" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:27.104" endtime="20210731 10:44:27.105"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:27.105" level="INFO">${pids} = ['15809', '15816', '15821']</msg>
<status status="PASS" starttime="20210731 10:44:27.105" endtime="20210731 10:44:27.105"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">15809</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:27.112" level="INFO">Running command 'kill 15809 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:27.106" endtime="20210731 10:44:27.112"/>
</kw>
<status status="PASS" starttime="20210731 10:44:27.106" endtime="20210731 10:44:27.113"/>
</iter>
<iter>
<var name="${pid}">15816</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:27.116" level="INFO">Running command 'kill 15816 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:27.113" endtime="20210731 10:44:27.118"/>
</kw>
<status status="PASS" starttime="20210731 10:44:27.113" endtime="20210731 10:44:27.118"/>
</iter>
<iter>
<var name="${pid}">15821</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:27.123" level="INFO">Running command 'kill 15821 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:27.119" endtime="20210731 10:44:27.123"/>
</kw>
<status status="PASS" starttime="20210731 10:44:27.118" endtime="20210731 10:44:27.123"/>
</iter>
<status status="PASS" starttime="20210731 10:44:27.106" endtime="20210731 10:44:27.123"/>
</for>
<status status="PASS" starttime="20210731 10:44:27.105" endtime="20210731 10:44:27.123"/>
</branch>
<status status="PASS" starttime="20210731 10:44:27.105" endtime="20210731 10:44:27.123"/>
</if>
<status status="PASS" starttime="20210731 10:44:27.090" endtime="20210731 10:44:27.123"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abc!?.ZAabc!?.ZAabc!?.'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:44:25.508" endtime="20210731 10:44:27.124">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t87" name="With Each Valid Token, Updating Password Of Each System User With abc!?.6 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:27.131" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:27.141" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:27.141" level="INFO">${pids} = 15850</msg>
<status status="PASS" starttime="20210731 10:44:27.128" endtime="20210731 10:44:27.141"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:27.142" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:27.142" endtime="20210731 10:44:27.142"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:27.143" level="INFO">${pids} = ['15850']</msg>
<status status="PASS" starttime="20210731 10:44:27.143" endtime="20210731 10:44:27.143"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">15850</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:27.147" level="INFO">Running command 'kill 15850 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:27.143" endtime="20210731 10:44:27.147"/>
</kw>
<status status="PASS" starttime="20210731 10:44:27.143" endtime="20210731 10:44:27.147"/>
</iter>
<status status="PASS" starttime="20210731 10:44:27.143" endtime="20210731 10:44:27.148"/>
</for>
<status status="PASS" starttime="20210731 10:44:27.142" endtime="20210731 10:44:27.148"/>
</branch>
<status status="PASS" starttime="20210731 10:44:27.142" endtime="20210731 10:44:27.148"/>
</if>
<status status="PASS" starttime="20210731 10:44:27.128" endtime="20210731 10:44:27.148"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:27.149" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:27.149" endtime="20210731 10:44:27.149"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:27.150" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:27.149" endtime="20210731 10:44:27.150"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:27.150" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:27.150" endtime="20210731 10:44:27.150"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:27.150" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:27.150" endtime="20210731 10:44:27.150"/>
</kw>
<msg timestamp="20210731 10:44:27.151" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:27.149" endtime="20210731 10:44:27.151"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:27.155" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:27.151" endtime="20210731 10:44:27.157"/>
</kw>
<status status="PASS" starttime="20210731 10:44:27.148" endtime="20210731 10:44:27.157"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:44:27.159" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:44:27.158" endtime="20210731 10:44:27.163"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:44:28.664" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:44:27.163" endtime="20210731 10:44:28.664"/>
</kw>
<status status="PASS" starttime="20210731 10:44:27.157" endtime="20210731 10:44:28.664"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:28.666" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:28.665" endtime="20210731 10:44:28.666"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:28.666" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:28.666" endtime="20210731 10:44:28.666"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:28.667" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:28.666" endtime="20210731 10:44:28.667"/>
</kw>
<msg timestamp="20210731 10:44:28.668" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:28.665" endtime="20210731 10:44:28.668"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:44:28.669" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:44:28.669" endtime="20210731 10:44:28.670"/>
</kw>
<status status="PASS" starttime="20210731 10:44:28.664" endtime="20210731 10:44:28.670"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:44:28.671" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:44:28.671" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:44:28.671" endtime="20210731 10:44:28.672"/>
</kw>
<status status="PASS" starttime="20210731 10:44:28.671" endtime="20210731 10:44:28.672"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:44:28.673" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:44:28.673" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:44:28.672" endtime="20210731 10:44:28.673"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:44:28.674" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:44:28.673" endtime="20210731 10:44:28.674"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:28.675" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:28.674" endtime="20210731 10:44:28.675"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:28.675" endtime="20210731 10:44:28.676"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:28.677" endtime="20210731 10:44:28.678"/>
</kw>
<status status="PASS" starttime="20210731 10:44:28.674" endtime="20210731 10:44:28.678"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:28.678" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:28.678" endtime="20210731 10:44:28.678"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:28.678" endtime="20210731 10:44:28.679"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:28.680" endtime="20210731 10:44:28.680"/>
</kw>
<status status="PASS" starttime="20210731 10:44:28.678" endtime="20210731 10:44:28.680"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:28.680" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:28.680" endtime="20210731 10:44:28.680"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:28.680" endtime="20210731 10:44:28.681"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:28.681" endtime="20210731 10:44:28.682"/>
</kw>
<status status="PASS" starttime="20210731 10:44:28.680" endtime="20210731 10:44:28.682"/>
</iter>
<status status="PASS" starttime="20210731 10:44:28.674" endtime="20210731 10:44:28.682"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:44:28.683" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:44:28.682" endtime="20210731 10:44:28.683"/>
</kw>
<status status="PASS" starttime="20210731 10:44:28.672" endtime="20210731 10:44:28.683"/>
</kw>
<status status="PASS" starttime="20210731 10:44:27.127" endtime="20210731 10:44:28.683"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.6</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:28.688" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:44:28.687" endtime="20210731 10:44:28.688"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:28.688" level="INFO">${payload} = {'password': 'abc!?.6'}</msg>
<status status="PASS" starttime="20210731 10:44:28.688" endtime="20210731 10:44:28.688"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:28.700" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:28.701" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:28.689" endtime="20210731 10:44:28.701"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:28.701" endtime="20210731 10:44:28.701"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:28.701" endtime="20210731 10:44:28.701"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:28.689" endtime="20210731 10:44:28.702"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:28.688" endtime="20210731 10:44:28.702"/>
</for>
<status status="FAIL" starttime="20210731 10:44:28.686" endtime="20210731 10:44:28.702"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:28.684" endtime="20210731 10:44:28.702"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.6</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:28.703" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:44:28.703" endtime="20210731 10:44:28.703"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:28.705" level="INFO">${payload} = {'password': 'abc!?.6'}</msg>
<status status="PASS" starttime="20210731 10:44:28.704" endtime="20210731 10:44:28.705"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:28.712" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:28.713" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:28.705" endtime="20210731 10:44:28.713"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:28.713" endtime="20210731 10:44:28.713"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:28.713" endtime="20210731 10:44:28.713"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:28.705" endtime="20210731 10:44:28.713"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:28.705" endtime="20210731 10:44:28.713"/>
</for>
<status status="FAIL" starttime="20210731 10:44:28.702" endtime="20210731 10:44:28.714"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:28.702" endtime="20210731 10:44:28.714"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.6</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:28.715" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:44:28.714" endtime="20210731 10:44:28.715"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:28.715" level="INFO">${payload} = {'password': 'abc!?.6'}</msg>
<status status="PASS" starttime="20210731 10:44:28.715" endtime="20210731 10:44:28.715"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:28.724" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:28.724" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:28.716" endtime="20210731 10:44:28.724"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:28.724" endtime="20210731 10:44:28.724"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:28.725" endtime="20210731 10:44:28.725"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:28.716" endtime="20210731 10:44:28.725"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:28.716" endtime="20210731 10:44:28.725"/>
</for>
<status status="FAIL" starttime="20210731 10:44:28.714" endtime="20210731 10:44:28.725"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:28.714" endtime="20210731 10:44:28.725"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:28.683" endtime="20210731 10:44:28.728"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:28.740" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:28.753" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:28.753" level="INFO">${pids} = 15873
15880
15890</msg>
<status status="PASS" starttime="20210731 10:44:28.730" endtime="20210731 10:44:28.753"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:28.754" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:28.754" endtime="20210731 10:44:28.755"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:28.755" level="INFO">${pids} = ['15873', '15880', '15890']</msg>
<status status="PASS" starttime="20210731 10:44:28.755" endtime="20210731 10:44:28.755"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">15873</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:28.760" level="INFO">Running command 'kill 15873 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:28.756" endtime="20210731 10:44:28.761"/>
</kw>
<status status="PASS" starttime="20210731 10:44:28.756" endtime="20210731 10:44:28.761"/>
</iter>
<iter>
<var name="${pid}">15880</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:28.764" level="INFO">Running command 'kill 15880 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:28.761" endtime="20210731 10:44:28.765"/>
</kw>
<status status="PASS" starttime="20210731 10:44:28.761" endtime="20210731 10:44:28.765"/>
</iter>
<iter>
<var name="${pid}">15890</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:28.771" level="INFO">Running command 'kill 15890 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:28.766" endtime="20210731 10:44:28.771"/>
</kw>
<status status="PASS" starttime="20210731 10:44:28.765" endtime="20210731 10:44:28.771"/>
</iter>
<status status="PASS" starttime="20210731 10:44:28.755" endtime="20210731 10:44:28.771"/>
</for>
<status status="PASS" starttime="20210731 10:44:28.755" endtime="20210731 10:44:28.771"/>
</branch>
<status status="PASS" starttime="20210731 10:44:28.755" endtime="20210731 10:44:28.772"/>
</if>
<status status="PASS" starttime="20210731 10:44:28.730" endtime="20210731 10:44:28.772"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abc!?.6'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:44:27.126" endtime="20210731 10:44:28.772">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t88" name="With Each Valid Token, Updating Password Of Each System User With abc!?.67 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:28.788" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:28.803" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:28.803" level="INFO">${pids} = 15919</msg>
<status status="PASS" starttime="20210731 10:44:28.777" endtime="20210731 10:44:28.803"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:28.804" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:28.804" endtime="20210731 10:44:28.804"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:28.805" level="INFO">${pids} = ['15919']</msg>
<status status="PASS" starttime="20210731 10:44:28.805" endtime="20210731 10:44:28.805"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">15919</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:28.811" level="INFO">Running command 'kill 15919 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:28.806" endtime="20210731 10:44:28.811"/>
</kw>
<status status="PASS" starttime="20210731 10:44:28.806" endtime="20210731 10:44:28.812"/>
</iter>
<status status="PASS" starttime="20210731 10:44:28.806" endtime="20210731 10:44:28.812"/>
</for>
<status status="PASS" starttime="20210731 10:44:28.805" endtime="20210731 10:44:28.812"/>
</branch>
<status status="PASS" starttime="20210731 10:44:28.804" endtime="20210731 10:44:28.812"/>
</if>
<status status="PASS" starttime="20210731 10:44:28.776" endtime="20210731 10:44:28.812"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:28.813" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:28.813" endtime="20210731 10:44:28.813"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:28.814" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:28.814" endtime="20210731 10:44:28.814"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:28.816" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:28.815" endtime="20210731 10:44:28.816"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:28.816" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:28.816" endtime="20210731 10:44:28.816"/>
</kw>
<msg timestamp="20210731 10:44:28.817" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:28.813" endtime="20210731 10:44:28.817"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:28.823" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:28.817" endtime="20210731 10:44:28.826"/>
</kw>
<status status="PASS" starttime="20210731 10:44:28.812" endtime="20210731 10:44:28.826"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:44:28.828" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:44:28.827" endtime="20210731 10:44:28.845"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:44:30.348" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:44:28.845" endtime="20210731 10:44:30.348"/>
</kw>
<status status="PASS" starttime="20210731 10:44:28.826" endtime="20210731 10:44:30.348"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:30.349" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:30.349" endtime="20210731 10:44:30.350"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:30.350" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:30.350" endtime="20210731 10:44:30.350"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:30.350" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:30.350" endtime="20210731 10:44:30.350"/>
</kw>
<msg timestamp="20210731 10:44:30.350" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:30.349" endtime="20210731 10:44:30.350"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:44:30.351" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:44:30.351" endtime="20210731 10:44:30.352"/>
</kw>
<status status="PASS" starttime="20210731 10:44:30.349" endtime="20210731 10:44:30.352"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:44:30.352" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:44:30.352" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:44:30.352" endtime="20210731 10:44:30.352"/>
</kw>
<status status="PASS" starttime="20210731 10:44:30.352" endtime="20210731 10:44:30.353"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:44:30.353" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:44:30.353" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:44:30.353" endtime="20210731 10:44:30.353"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:44:30.354" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:44:30.354" endtime="20210731 10:44:30.354"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:30.354" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:30.354" endtime="20210731 10:44:30.354"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:30.354" endtime="20210731 10:44:30.355"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:30.355" endtime="20210731 10:44:30.356"/>
</kw>
<status status="PASS" starttime="20210731 10:44:30.354" endtime="20210731 10:44:30.356"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:30.357" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:30.357" endtime="20210731 10:44:30.357"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:30.357" endtime="20210731 10:44:30.358"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:30.358" endtime="20210731 10:44:30.358"/>
</kw>
<status status="PASS" starttime="20210731 10:44:30.357" endtime="20210731 10:44:30.358"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:30.359" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:30.358" endtime="20210731 10:44:30.359"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:30.359" endtime="20210731 10:44:30.359"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:30.359" endtime="20210731 10:44:30.360"/>
</kw>
<status status="PASS" starttime="20210731 10:44:30.358" endtime="20210731 10:44:30.360"/>
</iter>
<status status="PASS" starttime="20210731 10:44:30.354" endtime="20210731 10:44:30.360"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:44:30.360" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:44:30.360" endtime="20210731 10:44:30.360"/>
</kw>
<status status="PASS" starttime="20210731 10:44:30.353" endtime="20210731 10:44:30.360"/>
</kw>
<status status="PASS" starttime="20210731 10:44:28.774" endtime="20210731 10:44:30.360"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.67</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:30.361" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:44:30.361" endtime="20210731 10:44:30.361"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:30.362" level="INFO">${payload} = {'password': 'abc!?.67'}</msg>
<status status="PASS" starttime="20210731 10:44:30.362" endtime="20210731 10:44:30.362"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:30.376" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:30.376" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:30.362" endtime="20210731 10:44:30.376"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:30.376" endtime="20210731 10:44:30.377"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:30.377" endtime="20210731 10:44:30.377"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:30.362" endtime="20210731 10:44:30.377"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:30.362" endtime="20210731 10:44:30.377"/>
</for>
<status status="FAIL" starttime="20210731 10:44:30.361" endtime="20210731 10:44:30.377"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:30.361" endtime="20210731 10:44:30.377"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.67</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:30.380" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:44:30.380" endtime="20210731 10:44:30.380"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:30.381" level="INFO">${payload} = {'password': 'abc!?.67'}</msg>
<status status="PASS" starttime="20210731 10:44:30.380" endtime="20210731 10:44:30.381"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:30.387" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:30.388" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:30.381" endtime="20210731 10:44:30.388"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:30.388" endtime="20210731 10:44:30.388"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:30.388" endtime="20210731 10:44:30.388"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:30.381" endtime="20210731 10:44:30.388"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:30.381" endtime="20210731 10:44:30.388"/>
</for>
<status status="FAIL" starttime="20210731 10:44:30.378" endtime="20210731 10:44:30.388"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:30.377" endtime="20210731 10:44:30.388"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.67</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:30.390" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:44:30.389" endtime="20210731 10:44:30.390"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:30.390" level="INFO">${payload} = {'password': 'abc!?.67'}</msg>
<status status="PASS" starttime="20210731 10:44:30.390" endtime="20210731 10:44:30.390"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:30.395" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:30.395" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:30.390" endtime="20210731 10:44:30.395"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:30.395" endtime="20210731 10:44:30.395"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:30.395" endtime="20210731 10:44:30.395"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:30.390" endtime="20210731 10:44:30.395"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:30.390" endtime="20210731 10:44:30.395"/>
</for>
<status status="FAIL" starttime="20210731 10:44:30.389" endtime="20210731 10:44:30.396"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:30.389" endtime="20210731 10:44:30.396"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:30.360" endtime="20210731 10:44:30.396"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:30.400" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:30.410" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:30.410" level="INFO">${pids} = 15942
15949
15956</msg>
<status status="PASS" starttime="20210731 10:44:30.397" endtime="20210731 10:44:30.410"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:30.411" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:30.410" endtime="20210731 10:44:30.411"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:30.412" level="INFO">${pids} = ['15942', '15949', '15956']</msg>
<status status="PASS" starttime="20210731 10:44:30.411" endtime="20210731 10:44:30.412"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">15942</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:30.415" level="INFO">Running command 'kill 15942 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:30.412" endtime="20210731 10:44:30.416"/>
</kw>
<status status="PASS" starttime="20210731 10:44:30.412" endtime="20210731 10:44:30.416"/>
</iter>
<iter>
<var name="${pid}">15949</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:30.419" level="INFO">Running command 'kill 15949 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:30.416" endtime="20210731 10:44:30.420"/>
</kw>
<status status="PASS" starttime="20210731 10:44:30.416" endtime="20210731 10:44:30.420"/>
</iter>
<iter>
<var name="${pid}">15956</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:30.423" level="INFO">Running command 'kill 15956 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:30.420" endtime="20210731 10:44:30.424"/>
</kw>
<status status="PASS" starttime="20210731 10:44:30.420" endtime="20210731 10:44:30.424"/>
</iter>
<status status="PASS" starttime="20210731 10:44:30.412" endtime="20210731 10:44:30.424"/>
</for>
<status status="PASS" starttime="20210731 10:44:30.411" endtime="20210731 10:44:30.424"/>
</branch>
<status status="PASS" starttime="20210731 10:44:30.411" endtime="20210731 10:44:30.424"/>
</if>
<status status="PASS" starttime="20210731 10:44:30.396" endtime="20210731 10:44:30.425"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abc!?.67'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:44:28.773" endtime="20210731 10:44:30.425">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t89" name="With Each Valid Token, Updating Password Of Each System User With abc!?.67abc!?.67abc!?. Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:30.430" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:30.441" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:30.441" level="INFO">${pids} = 15985</msg>
<status status="PASS" starttime="20210731 10:44:30.427" endtime="20210731 10:44:30.441"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:30.442" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:30.442" endtime="20210731 10:44:30.442"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:30.443" level="INFO">${pids} = ['15985']</msg>
<status status="PASS" starttime="20210731 10:44:30.443" endtime="20210731 10:44:30.443"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">15985</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:30.447" level="INFO">Running command 'kill 15985 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:30.444" endtime="20210731 10:44:30.447"/>
</kw>
<status status="PASS" starttime="20210731 10:44:30.443" endtime="20210731 10:44:30.448"/>
</iter>
<status status="PASS" starttime="20210731 10:44:30.443" endtime="20210731 10:44:30.448"/>
</for>
<status status="PASS" starttime="20210731 10:44:30.442" endtime="20210731 10:44:30.448"/>
</branch>
<status status="PASS" starttime="20210731 10:44:30.442" endtime="20210731 10:44:30.448"/>
</if>
<status status="PASS" starttime="20210731 10:44:30.427" endtime="20210731 10:44:30.448"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:30.449" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:30.449" endtime="20210731 10:44:30.449"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:30.450" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:30.450" endtime="20210731 10:44:30.450"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:30.450" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:30.450" endtime="20210731 10:44:30.450"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:30.451" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:30.451" endtime="20210731 10:44:30.451"/>
</kw>
<msg timestamp="20210731 10:44:30.451" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:30.449" endtime="20210731 10:44:30.451"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:30.454" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:30.451" endtime="20210731 10:44:30.457"/>
</kw>
<status status="PASS" starttime="20210731 10:44:30.448" endtime="20210731 10:44:30.457"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:44:30.459" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:44:30.458" endtime="20210731 10:44:30.463"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:44:31.964" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:44:30.463" endtime="20210731 10:44:31.964"/>
</kw>
<status status="PASS" starttime="20210731 10:44:30.457" endtime="20210731 10:44:31.965"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:31.966" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:31.965" endtime="20210731 10:44:31.966"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:31.966" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:31.966" endtime="20210731 10:44:31.966"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:31.967" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:31.966" endtime="20210731 10:44:31.967"/>
</kw>
<msg timestamp="20210731 10:44:31.967" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:31.965" endtime="20210731 10:44:31.967"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:44:31.969" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:44:31.967" endtime="20210731 10:44:31.969"/>
</kw>
<status status="PASS" starttime="20210731 10:44:31.965" endtime="20210731 10:44:31.969"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:44:31.970" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:44:31.970" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:44:31.970" endtime="20210731 10:44:31.970"/>
</kw>
<status status="PASS" starttime="20210731 10:44:31.970" endtime="20210731 10:44:31.970"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:44:31.971" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:44:31.971" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:44:31.971" endtime="20210731 10:44:31.971"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:44:31.972" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:44:31.971" endtime="20210731 10:44:31.972"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:31.973" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:31.972" endtime="20210731 10:44:31.973"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:31.973" endtime="20210731 10:44:31.974"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:31.974" endtime="20210731 10:44:31.974"/>
</kw>
<status status="PASS" starttime="20210731 10:44:31.972" endtime="20210731 10:44:31.974"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:31.975" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:31.975" endtime="20210731 10:44:31.975"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:31.975" endtime="20210731 10:44:31.976"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:31.976" endtime="20210731 10:44:31.976"/>
</kw>
<status status="PASS" starttime="20210731 10:44:31.974" endtime="20210731 10:44:31.977"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:31.977" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:31.977" endtime="20210731 10:44:31.977"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:31.977" endtime="20210731 10:44:31.978"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:31.978" endtime="20210731 10:44:31.978"/>
</kw>
<status status="PASS" starttime="20210731 10:44:31.977" endtime="20210731 10:44:31.978"/>
</iter>
<status status="PASS" starttime="20210731 10:44:31.972" endtime="20210731 10:44:31.978"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:44:31.979" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:44:31.978" endtime="20210731 10:44:31.979"/>
</kw>
<status status="PASS" starttime="20210731 10:44:31.970" endtime="20210731 10:44:31.979"/>
</kw>
<status status="PASS" starttime="20210731 10:44:30.426" endtime="20210731 10:44:31.979"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.67abc!?.67abc!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:31.982" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:44:31.981" endtime="20210731 10:44:31.982"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:31.982" level="INFO">${payload} = {'password': 'abc!?.67abc!?.67abc!?.'}</msg>
<status status="PASS" starttime="20210731 10:44:31.982" endtime="20210731 10:44:31.982"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:31.992" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:31.992" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:31.982" endtime="20210731 10:44:31.993"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:31.993" endtime="20210731 10:44:31.993"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:31.993" endtime="20210731 10:44:31.993"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:31.982" endtime="20210731 10:44:31.993"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:31.982" endtime="20210731 10:44:31.993"/>
</for>
<status status="FAIL" starttime="20210731 10:44:31.980" endtime="20210731 10:44:31.993"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:31.979" endtime="20210731 10:44:31.993"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.67abc!?.67abc!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:31.994" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:44:31.994" endtime="20210731 10:44:31.994"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:31.995" level="INFO">${payload} = {'password': 'abc!?.67abc!?.67abc!?.'}</msg>
<status status="PASS" starttime="20210731 10:44:31.994" endtime="20210731 10:44:31.995"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:31.999" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:32.000" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:31.995" endtime="20210731 10:44:32.000"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:32.000" endtime="20210731 10:44:32.000"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:32.000" endtime="20210731 10:44:32.000"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:31.995" endtime="20210731 10:44:32.000"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:31.995" endtime="20210731 10:44:32.000"/>
</for>
<status status="FAIL" starttime="20210731 10:44:31.993" endtime="20210731 10:44:32.000"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:31.993" endtime="20210731 10:44:32.000"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.67abc!?.67abc!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:32.002" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:44:32.001" endtime="20210731 10:44:32.002"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:32.002" level="INFO">${payload} = {'password': 'abc!?.67abc!?.67abc!?.'}</msg>
<status status="PASS" starttime="20210731 10:44:32.002" endtime="20210731 10:44:32.002"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:32.007" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:32.008" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:32.002" endtime="20210731 10:44:32.008"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:32.008" endtime="20210731 10:44:32.008"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:32.008" endtime="20210731 10:44:32.008"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:32.002" endtime="20210731 10:44:32.008"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:32.002" endtime="20210731 10:44:32.008"/>
</for>
<status status="FAIL" starttime="20210731 10:44:32.001" endtime="20210731 10:44:32.010"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:32.000" endtime="20210731 10:44:32.010"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:31.979" endtime="20210731 10:44:32.010"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:32.015" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:32.026" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:32.026" level="INFO">${pids} = 16008
16015
16020</msg>
<status status="PASS" starttime="20210731 10:44:32.011" endtime="20210731 10:44:32.026"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:32.027" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:32.026" endtime="20210731 10:44:32.027"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:32.028" level="INFO">${pids} = ['16008', '16015', '16020']</msg>
<status status="PASS" starttime="20210731 10:44:32.027" endtime="20210731 10:44:32.028"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">16008</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:32.032" level="INFO">Running command 'kill 16008 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:32.028" endtime="20210731 10:44:32.032"/>
</kw>
<status status="PASS" starttime="20210731 10:44:32.028" endtime="20210731 10:44:32.032"/>
</iter>
<iter>
<var name="${pid}">16015</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:32.038" level="INFO">Running command 'kill 16015 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:32.033" endtime="20210731 10:44:32.039"/>
</kw>
<status status="PASS" starttime="20210731 10:44:32.032" endtime="20210731 10:44:32.039"/>
</iter>
<iter>
<var name="${pid}">16020</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:32.045" level="INFO">Running command 'kill 16020 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:32.039" endtime="20210731 10:44:32.046"/>
</kw>
<status status="PASS" starttime="20210731 10:44:32.039" endtime="20210731 10:44:32.046"/>
</iter>
<status status="PASS" starttime="20210731 10:44:32.028" endtime="20210731 10:44:32.046"/>
</for>
<status status="PASS" starttime="20210731 10:44:32.027" endtime="20210731 10:44:32.046"/>
</branch>
<status status="PASS" starttime="20210731 10:44:32.027" endtime="20210731 10:44:32.046"/>
</if>
<status status="PASS" starttime="20210731 10:44:32.010" endtime="20210731 10:44:32.046"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abc!?.67abc!?.67abc!?.'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:44:30.426" endtime="20210731 10:44:32.047">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t90" name="With Each Valid Token, Updating Password Of Each System User With ABC456. Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:32.053" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:32.063" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:32.063" level="INFO">${pids} = 16049</msg>
<status status="PASS" starttime="20210731 10:44:32.048" endtime="20210731 10:44:32.063"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:32.064" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:32.063" endtime="20210731 10:44:32.064"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:32.065" level="INFO">${pids} = ['16049']</msg>
<status status="PASS" starttime="20210731 10:44:32.064" endtime="20210731 10:44:32.065"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">16049</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:32.070" level="INFO">Running command 'kill 16049 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:32.065" endtime="20210731 10:44:32.071"/>
</kw>
<status status="PASS" starttime="20210731 10:44:32.065" endtime="20210731 10:44:32.071"/>
</iter>
<status status="PASS" starttime="20210731 10:44:32.065" endtime="20210731 10:44:32.071"/>
</for>
<status status="PASS" starttime="20210731 10:44:32.064" endtime="20210731 10:44:32.071"/>
</branch>
<status status="PASS" starttime="20210731 10:44:32.064" endtime="20210731 10:44:32.071"/>
</if>
<status status="PASS" starttime="20210731 10:44:32.048" endtime="20210731 10:44:32.071"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:32.072" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:32.072" endtime="20210731 10:44:32.072"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:32.074" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:32.073" endtime="20210731 10:44:32.074"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:32.075" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:32.075" endtime="20210731 10:44:32.075"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:32.076" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:32.075" endtime="20210731 10:44:32.076"/>
</kw>
<msg timestamp="20210731 10:44:32.076" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:32.072" endtime="20210731 10:44:32.076"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:32.080" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:32.077" endtime="20210731 10:44:32.082"/>
</kw>
<status status="PASS" starttime="20210731 10:44:32.071" endtime="20210731 10:44:32.082"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:44:32.084" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:44:32.083" endtime="20210731 10:44:32.088"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:44:33.590" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:44:32.089" endtime="20210731 10:44:33.590"/>
</kw>
<status status="PASS" starttime="20210731 10:44:32.083" endtime="20210731 10:44:33.590"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:33.592" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:33.592" endtime="20210731 10:44:33.592"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:33.593" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:33.592" endtime="20210731 10:44:33.593"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:33.593" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:33.593" endtime="20210731 10:44:33.593"/>
</kw>
<msg timestamp="20210731 10:44:33.593" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:33.591" endtime="20210731 10:44:33.593"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:44:33.594" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:44:33.594" endtime="20210731 10:44:33.594"/>
</kw>
<status status="PASS" starttime="20210731 10:44:33.590" endtime="20210731 10:44:33.595"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:44:33.595" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:44:33.595" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:44:33.595" endtime="20210731 10:44:33.595"/>
</kw>
<status status="PASS" starttime="20210731 10:44:33.595" endtime="20210731 10:44:33.596"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:44:33.596" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:44:33.596" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:44:33.596" endtime="20210731 10:44:33.596"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:44:33.597" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:44:33.597" endtime="20210731 10:44:33.597"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:33.597" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:33.597" endtime="20210731 10:44:33.597"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:33.597" endtime="20210731 10:44:33.598"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:33.599" endtime="20210731 10:44:33.599"/>
</kw>
<status status="PASS" starttime="20210731 10:44:33.597" endtime="20210731 10:44:33.599"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:33.599" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:33.599" endtime="20210731 10:44:33.599"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:33.600" endtime="20210731 10:44:33.600"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:33.601" endtime="20210731 10:44:33.601"/>
</kw>
<status status="PASS" starttime="20210731 10:44:33.599" endtime="20210731 10:44:33.601"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:33.601" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:33.601" endtime="20210731 10:44:33.601"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:33.601" endtime="20210731 10:44:33.603"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:33.603" endtime="20210731 10:44:33.603"/>
</kw>
<status status="PASS" starttime="20210731 10:44:33.601" endtime="20210731 10:44:33.603"/>
</iter>
<status status="PASS" starttime="20210731 10:44:33.597" endtime="20210731 10:44:33.603"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:44:33.604" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:44:33.603" endtime="20210731 10:44:33.604"/>
</kw>
<status status="PASS" starttime="20210731 10:44:33.596" endtime="20210731 10:44:33.604"/>
</kw>
<status status="PASS" starttime="20210731 10:44:32.048" endtime="20210731 10:44:33.604"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC456.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:33.606" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:44:33.605" endtime="20210731 10:44:33.606"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:33.606" level="INFO">${payload} = {'password': 'ABC456.'}</msg>
<status status="PASS" starttime="20210731 10:44:33.606" endtime="20210731 10:44:33.606"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:33.623" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:33.624" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:33.606" endtime="20210731 10:44:33.624"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:33.624" endtime="20210731 10:44:33.624"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:33.624" endtime="20210731 10:44:33.624"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:33.606" endtime="20210731 10:44:33.625"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:33.606" endtime="20210731 10:44:33.625"/>
</for>
<status status="FAIL" starttime="20210731 10:44:33.605" endtime="20210731 10:44:33.625"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:33.604" endtime="20210731 10:44:33.625"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC456.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:33.626" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:44:33.626" endtime="20210731 10:44:33.626"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:33.627" level="INFO">${payload} = {'password': 'ABC456.'}</msg>
<status status="PASS" starttime="20210731 10:44:33.626" endtime="20210731 10:44:33.627"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:33.632" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:33.632" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:33.627" endtime="20210731 10:44:33.632"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:33.632" endtime="20210731 10:44:33.632"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:33.632" endtime="20210731 10:44:33.632"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:33.627" endtime="20210731 10:44:33.632"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:33.627" endtime="20210731 10:44:33.632"/>
</for>
<status status="FAIL" starttime="20210731 10:44:33.625" endtime="20210731 10:44:33.633"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:33.625" endtime="20210731 10:44:33.633"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC456.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:33.634" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:44:33.634" endtime="20210731 10:44:33.634"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:33.635" level="INFO">${payload} = {'password': 'ABC456.'}</msg>
<status status="PASS" starttime="20210731 10:44:33.634" endtime="20210731 10:44:33.635"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:33.639" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:33.639" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:33.635" endtime="20210731 10:44:33.640"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:33.640" endtime="20210731 10:44:33.640"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:33.640" endtime="20210731 10:44:33.640"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:33.635" endtime="20210731 10:44:33.640"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:33.635" endtime="20210731 10:44:33.640"/>
</for>
<status status="FAIL" starttime="20210731 10:44:33.633" endtime="20210731 10:44:33.640"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:33.633" endtime="20210731 10:44:33.640"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:33.604" endtime="20210731 10:44:33.640"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:33.647" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:33.660" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:33.660" level="INFO">${pids} = 16072
16079
16089</msg>
<status status="PASS" starttime="20210731 10:44:33.642" endtime="20210731 10:44:33.660"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:33.661" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:33.660" endtime="20210731 10:44:33.661"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:33.662" level="INFO">${pids} = ['16072', '16079', '16089']</msg>
<status status="PASS" starttime="20210731 10:44:33.661" endtime="20210731 10:44:33.662"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">16072</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:33.666" level="INFO">Running command 'kill 16072 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:33.662" endtime="20210731 10:44:33.667"/>
</kw>
<status status="PASS" starttime="20210731 10:44:33.662" endtime="20210731 10:44:33.667"/>
</iter>
<iter>
<var name="${pid}">16079</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:33.671" level="INFO">Running command 'kill 16079 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:33.667" endtime="20210731 10:44:33.672"/>
</kw>
<status status="PASS" starttime="20210731 10:44:33.667" endtime="20210731 10:44:33.672"/>
</iter>
<iter>
<var name="${pid}">16089</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:33.679" level="INFO">Running command 'kill 16089 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:33.672" endtime="20210731 10:44:33.679"/>
</kw>
<status status="PASS" starttime="20210731 10:44:33.672" endtime="20210731 10:44:33.679"/>
</iter>
<status status="PASS" starttime="20210731 10:44:33.662" endtime="20210731 10:44:33.679"/>
</for>
<status status="PASS" starttime="20210731 10:44:33.661" endtime="20210731 10:44:33.679"/>
</branch>
<status status="PASS" starttime="20210731 10:44:33.661" endtime="20210731 10:44:33.679"/>
</if>
<status status="PASS" starttime="20210731 10:44:33.641" endtime="20210731 10:44:33.680"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABC456.'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:44:32.047" endtime="20210731 10:44:33.680">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t91" name="With Each Valid Token, Updating Password Of Each System User With ABC456.? Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:33.693" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:33.705" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:33.705" level="INFO">${pids} = 16118</msg>
<status status="PASS" starttime="20210731 10:44:33.682" endtime="20210731 10:44:33.705"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:33.706" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:33.705" endtime="20210731 10:44:33.706"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:33.707" level="INFO">${pids} = ['16118']</msg>
<status status="PASS" starttime="20210731 10:44:33.706" endtime="20210731 10:44:33.707"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">16118</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:33.711" level="INFO">Running command 'kill 16118 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:33.707" endtime="20210731 10:44:33.712"/>
</kw>
<status status="PASS" starttime="20210731 10:44:33.707" endtime="20210731 10:44:33.712"/>
</iter>
<status status="PASS" starttime="20210731 10:44:33.707" endtime="20210731 10:44:33.712"/>
</for>
<status status="PASS" starttime="20210731 10:44:33.706" endtime="20210731 10:44:33.712"/>
</branch>
<status status="PASS" starttime="20210731 10:44:33.706" endtime="20210731 10:44:33.712"/>
</if>
<status status="PASS" starttime="20210731 10:44:33.682" endtime="20210731 10:44:33.713"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:33.714" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:33.714" endtime="20210731 10:44:33.714"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:33.715" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:33.715" endtime="20210731 10:44:33.715"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:33.715" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:33.715" endtime="20210731 10:44:33.715"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:33.716" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:33.715" endtime="20210731 10:44:33.716"/>
</kw>
<msg timestamp="20210731 10:44:33.716" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:33.714" endtime="20210731 10:44:33.716"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:33.721" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:33.716" endtime="20210731 10:44:33.723"/>
</kw>
<status status="PASS" starttime="20210731 10:44:33.713" endtime="20210731 10:44:33.724"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:44:33.726" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:44:33.725" endtime="20210731 10:44:33.731"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:44:35.233" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:44:33.732" endtime="20210731 10:44:35.233"/>
</kw>
<status status="PASS" starttime="20210731 10:44:33.724" endtime="20210731 10:44:35.234"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:35.235" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:35.234" endtime="20210731 10:44:35.235"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:35.235" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:35.235" endtime="20210731 10:44:35.235"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:35.235" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:35.235" endtime="20210731 10:44:35.236"/>
</kw>
<msg timestamp="20210731 10:44:35.236" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:35.234" endtime="20210731 10:44:35.236"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:44:35.236" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:44:35.236" endtime="20210731 10:44:35.237"/>
</kw>
<status status="PASS" starttime="20210731 10:44:35.234" endtime="20210731 10:44:35.237"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:44:35.237" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:44:35.237" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:44:35.237" endtime="20210731 10:44:35.238"/>
</kw>
<status status="PASS" starttime="20210731 10:44:35.237" endtime="20210731 10:44:35.238"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:44:35.238" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:44:35.239" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:44:35.238" endtime="20210731 10:44:35.239"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:44:35.239" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:44:35.239" endtime="20210731 10:44:35.239"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:35.240" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:35.240" endtime="20210731 10:44:35.240"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:35.240" endtime="20210731 10:44:35.241"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:35.241" endtime="20210731 10:44:35.242"/>
</kw>
<status status="PASS" starttime="20210731 10:44:35.239" endtime="20210731 10:44:35.242"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:35.242" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:35.242" endtime="20210731 10:44:35.242"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:35.243" endtime="20210731 10:44:35.244"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:35.244" endtime="20210731 10:44:35.244"/>
</kw>
<status status="PASS" starttime="20210731 10:44:35.242" endtime="20210731 10:44:35.244"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:35.244" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:35.244" endtime="20210731 10:44:35.244"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:35.244" endtime="20210731 10:44:35.245"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:35.245" endtime="20210731 10:44:35.245"/>
</kw>
<status status="PASS" starttime="20210731 10:44:35.244" endtime="20210731 10:44:35.245"/>
</iter>
<status status="PASS" starttime="20210731 10:44:35.239" endtime="20210731 10:44:35.245"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:44:35.246" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:44:35.246" endtime="20210731 10:44:35.246"/>
</kw>
<status status="PASS" starttime="20210731 10:44:35.238" endtime="20210731 10:44:35.246"/>
</kw>
<status status="PASS" starttime="20210731 10:44:33.682" endtime="20210731 10:44:35.246"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC456.?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:35.247" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:44:35.247" endtime="20210731 10:44:35.247"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:35.248" level="INFO">${payload} = {'password': 'ABC456.?'}</msg>
<status status="PASS" starttime="20210731 10:44:35.248" endtime="20210731 10:44:35.248"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:35.256" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:35.257" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:35.248" endtime="20210731 10:44:35.257"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:35.257" endtime="20210731 10:44:35.257"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:35.257" endtime="20210731 10:44:35.257"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:35.248" endtime="20210731 10:44:35.257"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:35.248" endtime="20210731 10:44:35.257"/>
</for>
<status status="FAIL" starttime="20210731 10:44:35.247" endtime="20210731 10:44:35.258"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:35.246" endtime="20210731 10:44:35.258"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC456.?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:35.259" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:44:35.258" endtime="20210731 10:44:35.259"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:35.259" level="INFO">${payload} = {'password': 'ABC456.?'}</msg>
<status status="PASS" starttime="20210731 10:44:35.259" endtime="20210731 10:44:35.259"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:35.264" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:35.265" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:35.260" endtime="20210731 10:44:35.265"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:35.265" endtime="20210731 10:44:35.265"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:35.265" endtime="20210731 10:44:35.265"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:35.259" endtime="20210731 10:44:35.265"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:35.259" endtime="20210731 10:44:35.265"/>
</for>
<status status="FAIL" starttime="20210731 10:44:35.258" endtime="20210731 10:44:35.265"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:35.258" endtime="20210731 10:44:35.265"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC456.?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:35.266" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:44:35.266" endtime="20210731 10:44:35.266"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:35.267" level="INFO">${payload} = {'password': 'ABC456.?'}</msg>
<status status="PASS" starttime="20210731 10:44:35.266" endtime="20210731 10:44:35.267"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:35.271" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:35.271" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:35.267" endtime="20210731 10:44:35.271"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:35.271" endtime="20210731 10:44:35.271"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:35.271" endtime="20210731 10:44:35.271"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:35.267" endtime="20210731 10:44:35.271"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:35.267" endtime="20210731 10:44:35.271"/>
</for>
<status status="FAIL" starttime="20210731 10:44:35.265" endtime="20210731 10:44:35.271"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:35.265" endtime="20210731 10:44:35.271"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:35.246" endtime="20210731 10:44:35.271"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:35.277" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:35.287" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:35.287" level="INFO">${pids} = 16141
16148
16152</msg>
<status status="PASS" starttime="20210731 10:44:35.272" endtime="20210731 10:44:35.287"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:35.288" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:35.287" endtime="20210731 10:44:35.288"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:35.289" level="INFO">${pids} = ['16141', '16148', '16152']</msg>
<status status="PASS" starttime="20210731 10:44:35.288" endtime="20210731 10:44:35.289"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">16141</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:35.293" level="INFO">Running command 'kill 16141 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:35.289" endtime="20210731 10:44:35.293"/>
</kw>
<status status="PASS" starttime="20210731 10:44:35.289" endtime="20210731 10:44:35.293"/>
</iter>
<iter>
<var name="${pid}">16148</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:35.297" level="INFO">Running command 'kill 16148 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:35.294" endtime="20210731 10:44:35.298"/>
</kw>
<status status="PASS" starttime="20210731 10:44:35.294" endtime="20210731 10:44:35.298"/>
</iter>
<iter>
<var name="${pid}">16152</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:35.301" level="INFO">Running command 'kill 16152 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:35.298" endtime="20210731 10:44:35.301"/>
</kw>
<status status="PASS" starttime="20210731 10:44:35.298" endtime="20210731 10:44:35.301"/>
</iter>
<status status="PASS" starttime="20210731 10:44:35.289" endtime="20210731 10:44:35.302"/>
</for>
<status status="PASS" starttime="20210731 10:44:35.288" endtime="20210731 10:44:35.302"/>
</branch>
<status status="PASS" starttime="20210731 10:44:35.288" endtime="20210731 10:44:35.302"/>
</if>
<status status="PASS" starttime="20210731 10:44:35.272" endtime="20210731 10:44:35.302"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABC456.?'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:44:33.681" endtime="20210731 10:44:35.302">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t92" name="With Each Valid Token, Updating Password Of Each System User With ABC456.?ABC456.?ABC456 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:35.313" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:35.323" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:35.323" level="INFO">${pids} = 16181</msg>
<status status="PASS" starttime="20210731 10:44:35.304" endtime="20210731 10:44:35.323"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:35.325" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:35.324" endtime="20210731 10:44:35.325"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:35.325" level="INFO">${pids} = ['16181']</msg>
<status status="PASS" starttime="20210731 10:44:35.325" endtime="20210731 10:44:35.326"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">16181</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:35.329" level="INFO">Running command 'kill 16181 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:35.326" endtime="20210731 10:44:35.330"/>
</kw>
<status status="PASS" starttime="20210731 10:44:35.326" endtime="20210731 10:44:35.330"/>
</iter>
<status status="PASS" starttime="20210731 10:44:35.326" endtime="20210731 10:44:35.330"/>
</for>
<status status="PASS" starttime="20210731 10:44:35.325" endtime="20210731 10:44:35.330"/>
</branch>
<status status="PASS" starttime="20210731 10:44:35.325" endtime="20210731 10:44:35.330"/>
</if>
<status status="PASS" starttime="20210731 10:44:35.304" endtime="20210731 10:44:35.330"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:35.331" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:35.331" endtime="20210731 10:44:35.331"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:35.332" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:35.332" endtime="20210731 10:44:35.332"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:35.332" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:35.332" endtime="20210731 10:44:35.332"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:35.333" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:35.333" endtime="20210731 10:44:35.333"/>
</kw>
<msg timestamp="20210731 10:44:35.333" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:35.331" endtime="20210731 10:44:35.333"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:35.338" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:35.333" endtime="20210731 10:44:35.341"/>
</kw>
<status status="PASS" starttime="20210731 10:44:35.331" endtime="20210731 10:44:35.341"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:44:35.343" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:44:35.342" endtime="20210731 10:44:35.347"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:44:36.849" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:44:35.348" endtime="20210731 10:44:36.849"/>
</kw>
<status status="PASS" starttime="20210731 10:44:35.341" endtime="20210731 10:44:36.849"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:36.851" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:36.850" endtime="20210731 10:44:36.851"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:36.851" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:36.851" endtime="20210731 10:44:36.851"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:36.851" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:36.851" endtime="20210731 10:44:36.851"/>
</kw>
<msg timestamp="20210731 10:44:36.852" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:36.850" endtime="20210731 10:44:36.852"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:44:36.853" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:44:36.852" endtime="20210731 10:44:36.853"/>
</kw>
<status status="PASS" starttime="20210731 10:44:36.850" endtime="20210731 10:44:36.854"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:44:36.855" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:44:36.855" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:44:36.855" endtime="20210731 10:44:36.855"/>
</kw>
<status status="PASS" starttime="20210731 10:44:36.854" endtime="20210731 10:44:36.856"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:44:36.857" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:44:36.857" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:44:36.856" endtime="20210731 10:44:36.857"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:44:36.858" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:44:36.858" endtime="20210731 10:44:36.858"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:36.859" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:36.858" endtime="20210731 10:44:36.859"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:36.859" endtime="20210731 10:44:36.860"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:36.860" endtime="20210731 10:44:36.860"/>
</kw>
<status status="PASS" starttime="20210731 10:44:36.858" endtime="20210731 10:44:36.860"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:36.860" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:36.860" endtime="20210731 10:44:36.861"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:36.861" endtime="20210731 10:44:36.861"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:36.861" endtime="20210731 10:44:36.863"/>
</kw>
<status status="PASS" starttime="20210731 10:44:36.860" endtime="20210731 10:44:36.863"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:36.863" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:36.863" endtime="20210731 10:44:36.863"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:36.864" endtime="20210731 10:44:36.864"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:36.864" endtime="20210731 10:44:36.865"/>
</kw>
<status status="PASS" starttime="20210731 10:44:36.863" endtime="20210731 10:44:36.865"/>
</iter>
<status status="PASS" starttime="20210731 10:44:36.858" endtime="20210731 10:44:36.865"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:44:36.865" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:44:36.865" endtime="20210731 10:44:36.865"/>
</kw>
<status status="PASS" starttime="20210731 10:44:36.856" endtime="20210731 10:44:36.865"/>
</kw>
<status status="PASS" starttime="20210731 10:44:35.303" endtime="20210731 10:44:36.865"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC456.?ABC456.?ABC456</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:36.867" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:44:36.866" endtime="20210731 10:44:36.867"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:36.867" level="INFO">${payload} = {'password': 'ABC456.?ABC456.?ABC456'}</msg>
<status status="PASS" starttime="20210731 10:44:36.867" endtime="20210731 10:44:36.867"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:36.878" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:36.879" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:36.867" endtime="20210731 10:44:36.879"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:36.879" endtime="20210731 10:44:36.879"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:36.879" endtime="20210731 10:44:36.879"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:36.867" endtime="20210731 10:44:36.879"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:36.867" endtime="20210731 10:44:36.879"/>
</for>
<status status="FAIL" starttime="20210731 10:44:36.866" endtime="20210731 10:44:36.879"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:36.866" endtime="20210731 10:44:36.879"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC456.?ABC456.?ABC456</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:36.880" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:44:36.880" endtime="20210731 10:44:36.880"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:36.881" level="INFO">${payload} = {'password': 'ABC456.?ABC456.?ABC456'}</msg>
<status status="PASS" starttime="20210731 10:44:36.881" endtime="20210731 10:44:36.881"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:36.886" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:36.886" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:36.882" endtime="20210731 10:44:36.886"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:36.887" endtime="20210731 10:44:36.887"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:36.887" endtime="20210731 10:44:36.887"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:36.881" endtime="20210731 10:44:36.887"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:36.881" endtime="20210731 10:44:36.887"/>
</for>
<status status="FAIL" starttime="20210731 10:44:36.879" endtime="20210731 10:44:36.887"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:36.879" endtime="20210731 10:44:36.887"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC456.?ABC456.?ABC456</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:36.888" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:44:36.888" endtime="20210731 10:44:36.888"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:36.889" level="INFO">${payload} = {'password': 'ABC456.?ABC456.?ABC456'}</msg>
<status status="PASS" starttime="20210731 10:44:36.888" endtime="20210731 10:44:36.889"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:36.893" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:36.893" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:36.889" endtime="20210731 10:44:36.894"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:36.894" endtime="20210731 10:44:36.894"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:36.894" endtime="20210731 10:44:36.894"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:36.889" endtime="20210731 10:44:36.894"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:36.889" endtime="20210731 10:44:36.894"/>
</for>
<status status="FAIL" starttime="20210731 10:44:36.887" endtime="20210731 10:44:36.894"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:36.887" endtime="20210731 10:44:36.894"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:36.866" endtime="20210731 10:44:36.894"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:36.898" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:36.908" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:36.908" level="INFO">${pids} = 16204
16211
16219</msg>
<status status="PASS" starttime="20210731 10:44:36.895" endtime="20210731 10:44:36.908"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:36.910" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:36.909" endtime="20210731 10:44:36.910"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:36.910" level="INFO">${pids} = ['16204', '16211', '16219']</msg>
<status status="PASS" starttime="20210731 10:44:36.910" endtime="20210731 10:44:36.910"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">16204</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:36.914" level="INFO">Running command 'kill 16204 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:36.911" endtime="20210731 10:44:36.915"/>
</kw>
<status status="PASS" starttime="20210731 10:44:36.911" endtime="20210731 10:44:36.915"/>
</iter>
<iter>
<var name="${pid}">16211</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:36.920" level="INFO">Running command 'kill 16211 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:36.915" endtime="20210731 10:44:36.922"/>
</kw>
<status status="PASS" starttime="20210731 10:44:36.915" endtime="20210731 10:44:36.922"/>
</iter>
<iter>
<var name="${pid}">16219</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:36.927" level="INFO">Running command 'kill 16219 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:36.922" endtime="20210731 10:44:36.927"/>
</kw>
<status status="PASS" starttime="20210731 10:44:36.922" endtime="20210731 10:44:36.927"/>
</iter>
<status status="PASS" starttime="20210731 10:44:36.911" endtime="20210731 10:44:36.927"/>
</for>
<status status="PASS" starttime="20210731 10:44:36.910" endtime="20210731 10:44:36.927"/>
</branch>
<status status="PASS" starttime="20210731 10:44:36.910" endtime="20210731 10:44:36.927"/>
</if>
<status status="PASS" starttime="20210731 10:44:36.894" endtime="20210731 10:44:36.928"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABC456.?ABC456.?ABC456'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:44:35.303" endtime="20210731 10:44:36.928">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t93" name="With Each Valid Token, Updating Password Of Each System User With ABC!?.0 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:36.933" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:36.943" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:36.943" level="INFO">${pids} = 16248</msg>
<status status="PASS" starttime="20210731 10:44:36.930" endtime="20210731 10:44:36.943"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:36.944" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:36.943" endtime="20210731 10:44:36.944"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:36.945" level="INFO">${pids} = ['16248']</msg>
<status status="PASS" starttime="20210731 10:44:36.944" endtime="20210731 10:44:36.945"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">16248</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:36.948" level="INFO">Running command 'kill 16248 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:36.945" endtime="20210731 10:44:36.949"/>
</kw>
<status status="PASS" starttime="20210731 10:44:36.945" endtime="20210731 10:44:36.949"/>
</iter>
<status status="PASS" starttime="20210731 10:44:36.945" endtime="20210731 10:44:36.949"/>
</for>
<status status="PASS" starttime="20210731 10:44:36.944" endtime="20210731 10:44:36.949"/>
</branch>
<status status="PASS" starttime="20210731 10:44:36.944" endtime="20210731 10:44:36.949"/>
</if>
<status status="PASS" starttime="20210731 10:44:36.929" endtime="20210731 10:44:36.949"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:36.950" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:36.950" endtime="20210731 10:44:36.950"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:36.951" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:36.950" endtime="20210731 10:44:36.951"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:36.951" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:36.951" endtime="20210731 10:44:36.951"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:36.951" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:36.951" endtime="20210731 10:44:36.951"/>
</kw>
<msg timestamp="20210731 10:44:36.952" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:36.950" endtime="20210731 10:44:36.952"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:36.956" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:36.952" endtime="20210731 10:44:36.958"/>
</kw>
<status status="PASS" starttime="20210731 10:44:36.949" endtime="20210731 10:44:36.958"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:44:36.959" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:44:36.959" endtime="20210731 10:44:36.963"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:44:38.464" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:44:36.963" endtime="20210731 10:44:38.464"/>
</kw>
<status status="PASS" starttime="20210731 10:44:36.958" endtime="20210731 10:44:38.465"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:38.466" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:38.465" endtime="20210731 10:44:38.466"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:38.466" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:38.466" endtime="20210731 10:44:38.466"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:38.467" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:38.466" endtime="20210731 10:44:38.467"/>
</kw>
<msg timestamp="20210731 10:44:38.467" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:38.465" endtime="20210731 10:44:38.467"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:44:38.467" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:44:38.467" endtime="20210731 10:44:38.468"/>
</kw>
<status status="PASS" starttime="20210731 10:44:38.465" endtime="20210731 10:44:38.468"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:44:38.469" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:44:38.469" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:44:38.468" endtime="20210731 10:44:38.469"/>
</kw>
<status status="PASS" starttime="20210731 10:44:38.468" endtime="20210731 10:44:38.469"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:44:38.470" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:44:38.470" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:44:38.470" endtime="20210731 10:44:38.470"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:44:38.471" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:44:38.471" endtime="20210731 10:44:38.471"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:38.471" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:38.471" endtime="20210731 10:44:38.472"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:38.472" endtime="20210731 10:44:38.473"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:38.473" endtime="20210731 10:44:38.473"/>
</kw>
<status status="PASS" starttime="20210731 10:44:38.471" endtime="20210731 10:44:38.473"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:38.474" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:38.473" endtime="20210731 10:44:38.474"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:38.474" endtime="20210731 10:44:38.476"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:38.477" endtime="20210731 10:44:38.477"/>
</kw>
<status status="PASS" starttime="20210731 10:44:38.473" endtime="20210731 10:44:38.477"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:38.478" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:38.478" endtime="20210731 10:44:38.478"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:38.478" endtime="20210731 10:44:38.479"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:38.479" endtime="20210731 10:44:38.479"/>
</kw>
<status status="PASS" starttime="20210731 10:44:38.477" endtime="20210731 10:44:38.479"/>
</iter>
<status status="PASS" starttime="20210731 10:44:38.471" endtime="20210731 10:44:38.479"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:44:38.480" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:44:38.479" endtime="20210731 10:44:38.480"/>
</kw>
<status status="PASS" starttime="20210731 10:44:38.469" endtime="20210731 10:44:38.480"/>
</kw>
<status status="PASS" starttime="20210731 10:44:36.929" endtime="20210731 10:44:38.480"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC!?.0</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:38.481" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:44:38.481" endtime="20210731 10:44:38.481"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:38.481" level="INFO">${payload} = {'password': 'ABC!?.0'}</msg>
<status status="PASS" starttime="20210731 10:44:38.481" endtime="20210731 10:44:38.482"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:38.491" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:38.491" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:38.482" endtime="20210731 10:44:38.491"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:38.491" endtime="20210731 10:44:38.491"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:38.491" endtime="20210731 10:44:38.492"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:38.482" endtime="20210731 10:44:38.492"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:38.482" endtime="20210731 10:44:38.492"/>
</for>
<status status="FAIL" starttime="20210731 10:44:38.480" endtime="20210731 10:44:38.492"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:38.480" endtime="20210731 10:44:38.492"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC!?.0</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:38.493" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:44:38.493" endtime="20210731 10:44:38.493"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:38.493" level="INFO">${payload} = {'password': 'ABC!?.0'}</msg>
<status status="PASS" starttime="20210731 10:44:38.493" endtime="20210731 10:44:38.493"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:38.498" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:38.498" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:38.494" endtime="20210731 10:44:38.498"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:38.498" endtime="20210731 10:44:38.498"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:38.498" endtime="20210731 10:44:38.498"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:38.494" endtime="20210731 10:44:38.498"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:38.493" endtime="20210731 10:44:38.498"/>
</for>
<status status="FAIL" starttime="20210731 10:44:38.492" endtime="20210731 10:44:38.498"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:38.492" endtime="20210731 10:44:38.498"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC!?.0</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:38.499" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:44:38.499" endtime="20210731 10:44:38.499"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:38.500" level="INFO">${payload} = {'password': 'ABC!?.0'}</msg>
<status status="PASS" starttime="20210731 10:44:38.500" endtime="20210731 10:44:38.500"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:38.505" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:38.505" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:38.500" endtime="20210731 10:44:38.505"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:38.505" endtime="20210731 10:44:38.505"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:38.505" endtime="20210731 10:44:38.505"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:38.500" endtime="20210731 10:44:38.505"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:38.500" endtime="20210731 10:44:38.505"/>
</for>
<status status="FAIL" starttime="20210731 10:44:38.499" endtime="20210731 10:44:38.506"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:38.498" endtime="20210731 10:44:38.506"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:38.480" endtime="20210731 10:44:38.506"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:38.512" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:38.522" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:38.522" level="INFO">${pids} = 16271
16278
16289</msg>
<status status="PASS" starttime="20210731 10:44:38.507" endtime="20210731 10:44:38.522"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:38.523" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:38.522" endtime="20210731 10:44:38.523"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:38.524" level="INFO">${pids} = ['16271', '16278', '16289']</msg>
<status status="PASS" starttime="20210731 10:44:38.523" endtime="20210731 10:44:38.524"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">16271</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:38.528" level="INFO">Running command 'kill 16271 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:38.524" endtime="20210731 10:44:38.528"/>
</kw>
<status status="PASS" starttime="20210731 10:44:38.524" endtime="20210731 10:44:38.528"/>
</iter>
<iter>
<var name="${pid}">16278</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:38.532" level="INFO">Running command 'kill 16278 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:38.529" endtime="20210731 10:44:38.532"/>
</kw>
<status status="PASS" starttime="20210731 10:44:38.528" endtime="20210731 10:44:38.532"/>
</iter>
<iter>
<var name="${pid}">16289</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:38.536" level="INFO">Running command 'kill 16289 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:38.533" endtime="20210731 10:44:38.536"/>
</kw>
<status status="PASS" starttime="20210731 10:44:38.532" endtime="20210731 10:44:38.536"/>
</iter>
<status status="PASS" starttime="20210731 10:44:38.524" endtime="20210731 10:44:38.536"/>
</for>
<status status="PASS" starttime="20210731 10:44:38.523" endtime="20210731 10:44:38.536"/>
</branch>
<status status="PASS" starttime="20210731 10:44:38.523" endtime="20210731 10:44:38.536"/>
</if>
<status status="PASS" starttime="20210731 10:44:38.506" endtime="20210731 10:44:38.537"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABC!?.0'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:44:36.928" endtime="20210731 10:44:38.537">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t94" name="With Each Valid Token, Updating Password Of Each System User With ABC!?.01 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:38.543" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:38.553" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:38.553" level="INFO">${pids} = 16318</msg>
<status status="PASS" starttime="20210731 10:44:38.539" endtime="20210731 10:44:38.553"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:38.554" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:38.553" endtime="20210731 10:44:38.554"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:38.554" level="INFO">${pids} = ['16318']</msg>
<status status="PASS" starttime="20210731 10:44:38.554" endtime="20210731 10:44:38.555"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">16318</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:38.558" level="INFO">Running command 'kill 16318 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:38.555" endtime="20210731 10:44:38.559"/>
</kw>
<status status="PASS" starttime="20210731 10:44:38.555" endtime="20210731 10:44:38.559"/>
</iter>
<status status="PASS" starttime="20210731 10:44:38.555" endtime="20210731 10:44:38.559"/>
</for>
<status status="PASS" starttime="20210731 10:44:38.554" endtime="20210731 10:44:38.559"/>
</branch>
<status status="PASS" starttime="20210731 10:44:38.554" endtime="20210731 10:44:38.559"/>
</if>
<status status="PASS" starttime="20210731 10:44:38.539" endtime="20210731 10:44:38.559"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:38.560" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:38.560" endtime="20210731 10:44:38.560"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:38.561" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:38.561" endtime="20210731 10:44:38.561"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:38.561" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:38.561" endtime="20210731 10:44:38.561"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:38.562" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:38.561" endtime="20210731 10:44:38.562"/>
</kw>
<msg timestamp="20210731 10:44:38.562" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:38.560" endtime="20210731 10:44:38.562"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:38.565" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:38.562" endtime="20210731 10:44:38.567"/>
</kw>
<status status="PASS" starttime="20210731 10:44:38.559" endtime="20210731 10:44:38.567"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:44:38.568" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:44:38.568" endtime="20210731 10:44:38.572"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:44:40.075" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:44:38.573" endtime="20210731 10:44:40.075"/>
</kw>
<status status="PASS" starttime="20210731 10:44:38.567" endtime="20210731 10:44:40.075"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:40.077" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:40.077" endtime="20210731 10:44:40.077"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:40.078" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:40.077" endtime="20210731 10:44:40.078"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:40.078" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:40.078" endtime="20210731 10:44:40.078"/>
</kw>
<msg timestamp="20210731 10:44:40.078" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:40.076" endtime="20210731 10:44:40.078"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:44:40.079" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:44:40.078" endtime="20210731 10:44:40.079"/>
</kw>
<status status="PASS" starttime="20210731 10:44:40.076" endtime="20210731 10:44:40.079"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:44:40.080" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:44:40.080" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:44:40.080" endtime="20210731 10:44:40.080"/>
</kw>
<status status="PASS" starttime="20210731 10:44:40.080" endtime="20210731 10:44:40.080"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:44:40.081" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:44:40.081" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:44:40.081" endtime="20210731 10:44:40.081"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:44:40.081" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:44:40.081" endtime="20210731 10:44:40.081"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:40.082" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:40.082" endtime="20210731 10:44:40.082"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:40.082" endtime="20210731 10:44:40.083"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:40.083" endtime="20210731 10:44:40.084"/>
</kw>
<status status="PASS" starttime="20210731 10:44:40.082" endtime="20210731 10:44:40.084"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:40.085" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:40.085" endtime="20210731 10:44:40.085"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:40.085" endtime="20210731 10:44:40.086"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:40.086" endtime="20210731 10:44:40.086"/>
</kw>
<status status="PASS" starttime="20210731 10:44:40.084" endtime="20210731 10:44:40.086"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:40.086" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:40.086" endtime="20210731 10:44:40.086"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:40.086" endtime="20210731 10:44:40.087"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:40.087" endtime="20210731 10:44:40.087"/>
</kw>
<status status="PASS" starttime="20210731 10:44:40.086" endtime="20210731 10:44:40.087"/>
</iter>
<status status="PASS" starttime="20210731 10:44:40.082" endtime="20210731 10:44:40.087"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:44:40.088" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:44:40.088" endtime="20210731 10:44:40.088"/>
</kw>
<status status="PASS" starttime="20210731 10:44:40.080" endtime="20210731 10:44:40.088"/>
</kw>
<status status="PASS" starttime="20210731 10:44:38.538" endtime="20210731 10:44:40.088"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC!?.01</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:40.089" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:44:40.089" endtime="20210731 10:44:40.089"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:40.090" level="INFO">${payload} = {'password': 'ABC!?.01'}</msg>
<status status="PASS" starttime="20210731 10:44:40.089" endtime="20210731 10:44:40.090"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:40.099" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:40.099" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:40.090" endtime="20210731 10:44:40.099"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:40.099" endtime="20210731 10:44:40.099"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:40.099" endtime="20210731 10:44:40.099"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:40.090" endtime="20210731 10:44:40.100"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:40.090" endtime="20210731 10:44:40.100"/>
</for>
<status status="FAIL" starttime="20210731 10:44:40.089" endtime="20210731 10:44:40.100"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:40.088" endtime="20210731 10:44:40.100"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC!?.01</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:40.101" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:44:40.101" endtime="20210731 10:44:40.101"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:40.101" level="INFO">${payload} = {'password': 'ABC!?.01'}</msg>
<status status="PASS" starttime="20210731 10:44:40.101" endtime="20210731 10:44:40.101"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:40.106" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:40.106" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:40.102" endtime="20210731 10:44:40.107"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:40.107" endtime="20210731 10:44:40.107"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:40.107" endtime="20210731 10:44:40.107"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:40.101" endtime="20210731 10:44:40.107"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:40.101" endtime="20210731 10:44:40.107"/>
</for>
<status status="FAIL" starttime="20210731 10:44:40.100" endtime="20210731 10:44:40.107"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:40.100" endtime="20210731 10:44:40.107"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC!?.01</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:40.109" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:44:40.108" endtime="20210731 10:44:40.109"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:40.109" level="INFO">${payload} = {'password': 'ABC!?.01'}</msg>
<status status="PASS" starttime="20210731 10:44:40.109" endtime="20210731 10:44:40.109"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:40.114" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:40.114" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:40.110" endtime="20210731 10:44:40.114"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:40.114" endtime="20210731 10:44:40.114"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:40.114" endtime="20210731 10:44:40.115"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:40.110" endtime="20210731 10:44:40.115"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:40.109" endtime="20210731 10:44:40.115"/>
</for>
<status status="FAIL" starttime="20210731 10:44:40.107" endtime="20210731 10:44:40.115"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:40.107" endtime="20210731 10:44:40.115"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:40.088" endtime="20210731 10:44:40.115"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:40.119" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:40.130" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:40.130" level="INFO">${pids} = 16341
16348
16352</msg>
<status status="PASS" starttime="20210731 10:44:40.116" endtime="20210731 10:44:40.130"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:40.131" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:40.130" endtime="20210731 10:44:40.131"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:40.132" level="INFO">${pids} = ['16341', '16348', '16352']</msg>
<status status="PASS" starttime="20210731 10:44:40.131" endtime="20210731 10:44:40.132"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">16341</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:40.136" level="INFO">Running command 'kill 16341 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:40.132" endtime="20210731 10:44:40.136"/>
</kw>
<status status="PASS" starttime="20210731 10:44:40.132" endtime="20210731 10:44:40.136"/>
</iter>
<iter>
<var name="${pid}">16348</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:40.140" level="INFO">Running command 'kill 16348 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:40.137" endtime="20210731 10:44:40.141"/>
</kw>
<status status="PASS" starttime="20210731 10:44:40.136" endtime="20210731 10:44:40.141"/>
</iter>
<iter>
<var name="${pid}">16352</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:40.145" level="INFO">Running command 'kill 16352 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:40.142" endtime="20210731 10:44:40.146"/>
</kw>
<status status="PASS" starttime="20210731 10:44:40.141" endtime="20210731 10:44:40.146"/>
</iter>
<status status="PASS" starttime="20210731 10:44:40.132" endtime="20210731 10:44:40.146"/>
</for>
<status status="PASS" starttime="20210731 10:44:40.131" endtime="20210731 10:44:40.146"/>
</branch>
<status status="PASS" starttime="20210731 10:44:40.131" endtime="20210731 10:44:40.146"/>
</if>
<status status="PASS" starttime="20210731 10:44:40.115" endtime="20210731 10:44:40.146"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABC!?.01'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:44:38.537" endtime="20210731 10:44:40.146">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t95" name="With Each Valid Token, Updating Password Of Each System User With ABC!?.01ABC!?.01ABC!?. Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:40.152" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:40.162" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:40.162" level="INFO">${pids} = 16381</msg>
<status status="PASS" starttime="20210731 10:44:40.149" endtime="20210731 10:44:40.162"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:40.163" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:40.163" endtime="20210731 10:44:40.163"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:40.164" level="INFO">${pids} = ['16381']</msg>
<status status="PASS" starttime="20210731 10:44:40.164" endtime="20210731 10:44:40.164"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">16381</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:40.168" level="INFO">Running command 'kill 16381 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:40.165" endtime="20210731 10:44:40.168"/>
</kw>
<status status="PASS" starttime="20210731 10:44:40.164" endtime="20210731 10:44:40.168"/>
</iter>
<status status="PASS" starttime="20210731 10:44:40.164" endtime="20210731 10:44:40.168"/>
</for>
<status status="PASS" starttime="20210731 10:44:40.164" endtime="20210731 10:44:40.168"/>
</branch>
<status status="PASS" starttime="20210731 10:44:40.164" endtime="20210731 10:44:40.169"/>
</if>
<status status="PASS" starttime="20210731 10:44:40.148" endtime="20210731 10:44:40.169"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:40.170" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:40.170" endtime="20210731 10:44:40.170"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:40.171" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:40.170" endtime="20210731 10:44:40.171"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:40.171" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:40.171" endtime="20210731 10:44:40.171"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:40.171" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:40.171" endtime="20210731 10:44:40.171"/>
</kw>
<msg timestamp="20210731 10:44:40.172" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:40.170" endtime="20210731 10:44:40.172"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:40.175" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:40.172" endtime="20210731 10:44:40.177"/>
</kw>
<status status="PASS" starttime="20210731 10:44:40.169" endtime="20210731 10:44:40.178"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:44:40.179" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:44:40.179" endtime="20210731 10:44:40.183"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:44:41.685" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:44:40.184" endtime="20210731 10:44:41.685"/>
</kw>
<status status="PASS" starttime="20210731 10:44:40.178" endtime="20210731 10:44:41.685"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:41.687" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:41.686" endtime="20210731 10:44:41.687"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:41.687" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:41.687" endtime="20210731 10:44:41.687"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:41.687" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:41.687" endtime="20210731 10:44:41.688"/>
</kw>
<msg timestamp="20210731 10:44:41.689" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:41.686" endtime="20210731 10:44:41.689"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:44:41.689" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:44:41.689" endtime="20210731 10:44:41.690"/>
</kw>
<status status="PASS" starttime="20210731 10:44:41.686" endtime="20210731 10:44:41.690"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:44:41.690" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:44:41.690" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:44:41.690" endtime="20210731 10:44:41.691"/>
</kw>
<status status="PASS" starttime="20210731 10:44:41.690" endtime="20210731 10:44:41.691"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:44:41.692" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:44:41.692" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:44:41.691" endtime="20210731 10:44:41.692"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:44:41.692" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:44:41.692" endtime="20210731 10:44:41.692"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:41.693" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:41.692" endtime="20210731 10:44:41.693"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:41.693" endtime="20210731 10:44:41.694"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:41.694" endtime="20210731 10:44:41.695"/>
</kw>
<status status="PASS" starttime="20210731 10:44:41.692" endtime="20210731 10:44:41.695"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:41.695" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:41.695" endtime="20210731 10:44:41.695"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:41.695" endtime="20210731 10:44:41.696"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:41.696" endtime="20210731 10:44:41.696"/>
</kw>
<status status="PASS" starttime="20210731 10:44:41.695" endtime="20210731 10:44:41.696"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:41.696" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:41.696" endtime="20210731 10:44:41.696"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:41.696" endtime="20210731 10:44:41.697"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:41.697" endtime="20210731 10:44:41.698"/>
</kw>
<status status="PASS" starttime="20210731 10:44:41.696" endtime="20210731 10:44:41.698"/>
</iter>
<status status="PASS" starttime="20210731 10:44:41.692" endtime="20210731 10:44:41.698"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:44:41.698" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:44:41.698" endtime="20210731 10:44:41.698"/>
</kw>
<status status="PASS" starttime="20210731 10:44:41.691" endtime="20210731 10:44:41.698"/>
</kw>
<status status="PASS" starttime="20210731 10:44:40.148" endtime="20210731 10:44:41.698"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC!?.01ABC!?.01ABC!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:41.701" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:44:41.700" endtime="20210731 10:44:41.701"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:41.701" level="INFO">${payload} = {'password': 'ABC!?.01ABC!?.01ABC!?.'}</msg>
<status status="PASS" starttime="20210731 10:44:41.701" endtime="20210731 10:44:41.701"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:41.712" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:41.712" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:41.701" endtime="20210731 10:44:41.712"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:41.712" endtime="20210731 10:44:41.712"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:41.712" endtime="20210731 10:44:41.713"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:41.701" endtime="20210731 10:44:41.713"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:41.701" endtime="20210731 10:44:41.713"/>
</for>
<status status="FAIL" starttime="20210731 10:44:41.699" endtime="20210731 10:44:41.713"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:41.699" endtime="20210731 10:44:41.713"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC!?.01ABC!?.01ABC!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:41.714" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:44:41.714" endtime="20210731 10:44:41.714"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:41.714" level="INFO">${payload} = {'password': 'ABC!?.01ABC!?.01ABC!?.'}</msg>
<status status="PASS" starttime="20210731 10:44:41.714" endtime="20210731 10:44:41.714"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:41.719" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:41.719" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:41.715" endtime="20210731 10:44:41.719"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:41.719" endtime="20210731 10:44:41.719"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:41.719" endtime="20210731 10:44:41.719"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:41.714" endtime="20210731 10:44:41.719"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:41.714" endtime="20210731 10:44:41.719"/>
</for>
<status status="FAIL" starttime="20210731 10:44:41.713" endtime="20210731 10:44:41.719"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:41.713" endtime="20210731 10:44:41.719"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC!?.01ABC!?.01ABC!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:41.720" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:44:41.720" endtime="20210731 10:44:41.720"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:41.721" level="INFO">${payload} = {'password': 'ABC!?.01ABC!?.01ABC!?.'}</msg>
<status status="PASS" starttime="20210731 10:44:41.720" endtime="20210731 10:44:41.721"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:41.726" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:41.726" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:41.721" endtime="20210731 10:44:41.726"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:41.726" endtime="20210731 10:44:41.726"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:41.726" endtime="20210731 10:44:41.726"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:41.721" endtime="20210731 10:44:41.727"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:41.721" endtime="20210731 10:44:41.728"/>
</for>
<status status="FAIL" starttime="20210731 10:44:41.720" endtime="20210731 10:44:41.728"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:41.719" endtime="20210731 10:44:41.728"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:41.698" endtime="20210731 10:44:41.728"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:41.732" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:41.742" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:41.742" level="INFO">${pids} = 16404
16411
16418</msg>
<status status="PASS" starttime="20210731 10:44:41.729" endtime="20210731 10:44:41.742"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:41.743" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:41.743" endtime="20210731 10:44:41.744"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:41.744" level="INFO">${pids} = ['16404', '16411', '16418']</msg>
<status status="PASS" starttime="20210731 10:44:41.744" endtime="20210731 10:44:41.744"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">16404</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:41.748" level="INFO">Running command 'kill 16404 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:41.745" endtime="20210731 10:44:41.748"/>
</kw>
<status status="PASS" starttime="20210731 10:44:41.744" endtime="20210731 10:44:41.748"/>
</iter>
<iter>
<var name="${pid}">16411</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:41.751" level="INFO">Running command 'kill 16411 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:41.749" endtime="20210731 10:44:41.753"/>
</kw>
<status status="PASS" starttime="20210731 10:44:41.749" endtime="20210731 10:44:41.753"/>
</iter>
<iter>
<var name="${pid}">16418</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:41.760" level="INFO">Running command 'kill 16418 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:41.754" endtime="20210731 10:44:41.761"/>
</kw>
<status status="PASS" starttime="20210731 10:44:41.754" endtime="20210731 10:44:41.761"/>
</iter>
<status status="PASS" starttime="20210731 10:44:41.744" endtime="20210731 10:44:41.761"/>
</for>
<status status="PASS" starttime="20210731 10:44:41.744" endtime="20210731 10:44:41.761"/>
</branch>
<status status="PASS" starttime="20210731 10:44:41.744" endtime="20210731 10:44:41.761"/>
</if>
<status status="PASS" starttime="20210731 10:44:41.728" endtime="20210731 10:44:41.761"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABC!?.01ABC!?.01ABC!?.'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:44:40.147" endtime="20210731 10:44:41.762">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t96" name="With Each Valid Token, Updating Password Of Each System User With 012!.Aa Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:41.767" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:41.778" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:41.778" level="INFO">${pids} = 16447</msg>
<status status="PASS" starttime="20210731 10:44:41.764" endtime="20210731 10:44:41.778"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:41.779" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:41.778" endtime="20210731 10:44:41.779"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:41.779" level="INFO">${pids} = ['16447']</msg>
<status status="PASS" starttime="20210731 10:44:41.779" endtime="20210731 10:44:41.779"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">16447</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:41.783" level="INFO">Running command 'kill 16447 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:41.780" endtime="20210731 10:44:41.784"/>
</kw>
<status status="PASS" starttime="20210731 10:44:41.780" endtime="20210731 10:44:41.784"/>
</iter>
<status status="PASS" starttime="20210731 10:44:41.779" endtime="20210731 10:44:41.784"/>
</for>
<status status="PASS" starttime="20210731 10:44:41.779" endtime="20210731 10:44:41.784"/>
</branch>
<status status="PASS" starttime="20210731 10:44:41.779" endtime="20210731 10:44:41.784"/>
</if>
<status status="PASS" starttime="20210731 10:44:41.763" endtime="20210731 10:44:41.784"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:41.785" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:41.785" endtime="20210731 10:44:41.785"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:41.786" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:41.786" endtime="20210731 10:44:41.786"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:41.786" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:41.786" endtime="20210731 10:44:41.786"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:41.787" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:41.786" endtime="20210731 10:44:41.787"/>
</kw>
<msg timestamp="20210731 10:44:41.787" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:41.785" endtime="20210731 10:44:41.787"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:41.792" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:41.787" endtime="20210731 10:44:41.794"/>
</kw>
<status status="PASS" starttime="20210731 10:44:41.784" endtime="20210731 10:44:41.794"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:44:41.795" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:44:41.795" endtime="20210731 10:44:41.799"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:44:43.301" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:44:41.800" endtime="20210731 10:44:43.302"/>
</kw>
<status status="PASS" starttime="20210731 10:44:41.794" endtime="20210731 10:44:43.303"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:43.310" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:43.308" endtime="20210731 10:44:43.310"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:43.312" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:43.310" endtime="20210731 10:44:43.312"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:43.313" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:43.312" endtime="20210731 10:44:43.313"/>
</kw>
<msg timestamp="20210731 10:44:43.314" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:43.305" endtime="20210731 10:44:43.314"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:44:43.315" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:44:43.314" endtime="20210731 10:44:43.316"/>
</kw>
<status status="PASS" starttime="20210731 10:44:43.304" endtime="20210731 10:44:43.316"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:44:43.318" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:44:43.318" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:44:43.317" endtime="20210731 10:44:43.318"/>
</kw>
<status status="PASS" starttime="20210731 10:44:43.317" endtime="20210731 10:44:43.318"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:44:43.320" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:44:43.320" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:44:43.319" endtime="20210731 10:44:43.320"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:44:43.321" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:44:43.320" endtime="20210731 10:44:43.321"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:43.322" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:43.321" endtime="20210731 10:44:43.322"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:43.322" endtime="20210731 10:44:43.325"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:43.325" endtime="20210731 10:44:43.326"/>
</kw>
<status status="PASS" starttime="20210731 10:44:43.321" endtime="20210731 10:44:43.326"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:43.326" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:43.326" endtime="20210731 10:44:43.326"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:43.326" endtime="20210731 10:44:43.327"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:43.328" endtime="20210731 10:44:43.328"/>
</kw>
<status status="PASS" starttime="20210731 10:44:43.326" endtime="20210731 10:44:43.328"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:43.329" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:43.328" endtime="20210731 10:44:43.329"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:43.329" endtime="20210731 10:44:43.330"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:43.330" endtime="20210731 10:44:43.330"/>
</kw>
<status status="PASS" starttime="20210731 10:44:43.328" endtime="20210731 10:44:43.330"/>
</iter>
<status status="PASS" starttime="20210731 10:44:43.321" endtime="20210731 10:44:43.331"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:44:43.331" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:44:43.331" endtime="20210731 10:44:43.331"/>
</kw>
<status status="PASS" starttime="20210731 10:44:43.318" endtime="20210731 10:44:43.331"/>
</kw>
<status status="PASS" starttime="20210731 10:44:41.763" endtime="20210731 10:44:43.331"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=012!.Aa</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:43.333" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:44:43.333" endtime="20210731 10:44:43.333"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:43.334" level="INFO">${payload} = {'password': '012!.Aa'}</msg>
<status status="PASS" starttime="20210731 10:44:43.333" endtime="20210731 10:44:43.334"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:43.352" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:43.353" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:43.334" endtime="20210731 10:44:43.353"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:43.353" endtime="20210731 10:44:43.353"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:43.353" endtime="20210731 10:44:43.353"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:43.334" endtime="20210731 10:44:43.353"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:43.334" endtime="20210731 10:44:43.353"/>
</for>
<status status="FAIL" starttime="20210731 10:44:43.332" endtime="20210731 10:44:43.353"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:43.332" endtime="20210731 10:44:43.353"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=012!.Aa</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:43.355" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:44:43.354" endtime="20210731 10:44:43.355"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:43.355" level="INFO">${payload} = {'password': '012!.Aa'}</msg>
<status status="PASS" starttime="20210731 10:44:43.355" endtime="20210731 10:44:43.355"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:43.373" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:43.373" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:43.357" endtime="20210731 10:44:43.373"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:43.373" endtime="20210731 10:44:43.373"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:43.373" endtime="20210731 10:44:43.374"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:43.356" endtime="20210731 10:44:43.374"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:43.356" endtime="20210731 10:44:43.374"/>
</for>
<status status="FAIL" starttime="20210731 10:44:43.354" endtime="20210731 10:44:43.374"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:43.354" endtime="20210731 10:44:43.374"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=012!.Aa</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:43.376" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:44:43.375" endtime="20210731 10:44:43.376"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:43.376" level="INFO">${payload} = {'password': '012!.Aa'}</msg>
<status status="PASS" starttime="20210731 10:44:43.376" endtime="20210731 10:44:43.376"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:43.390" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:43.391" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:43.377" endtime="20210731 10:44:43.391"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:43.391" endtime="20210731 10:44:43.391"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:43.391" endtime="20210731 10:44:43.391"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:43.376" endtime="20210731 10:44:43.391"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:43.376" endtime="20210731 10:44:43.391"/>
</for>
<status status="FAIL" starttime="20210731 10:44:43.374" endtime="20210731 10:44:43.391"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:43.374" endtime="20210731 10:44:43.391"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:43.332" endtime="20210731 10:44:43.391"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:43.397" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:43.407" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:43.407" level="INFO">${pids} = 16470
16477
16488</msg>
<status status="PASS" starttime="20210731 10:44:43.393" endtime="20210731 10:44:43.407"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:43.408" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:43.407" endtime="20210731 10:44:43.408"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:43.409" level="INFO">${pids} = ['16470', '16477', '16488']</msg>
<status status="PASS" starttime="20210731 10:44:43.408" endtime="20210731 10:44:43.409"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">16470</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:43.414" level="INFO">Running command 'kill 16470 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:43.409" endtime="20210731 10:44:43.414"/>
</kw>
<status status="PASS" starttime="20210731 10:44:43.409" endtime="20210731 10:44:43.414"/>
</iter>
<iter>
<var name="${pid}">16477</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:43.421" level="INFO">Running command 'kill 16477 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:43.415" endtime="20210731 10:44:43.421"/>
</kw>
<status status="PASS" starttime="20210731 10:44:43.415" endtime="20210731 10:44:43.421"/>
</iter>
<iter>
<var name="${pid}">16488</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:43.431" level="INFO">Running command 'kill 16488 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:43.422" endtime="20210731 10:44:43.432"/>
</kw>
<status status="PASS" starttime="20210731 10:44:43.421" endtime="20210731 10:44:43.432"/>
</iter>
<status status="PASS" starttime="20210731 10:44:43.409" endtime="20210731 10:44:43.432"/>
</for>
<status status="PASS" starttime="20210731 10:44:43.408" endtime="20210731 10:44:43.432"/>
</branch>
<status status="PASS" starttime="20210731 10:44:43.408" endtime="20210731 10:44:43.432"/>
</if>
<status status="PASS" starttime="20210731 10:44:43.392" endtime="20210731 10:44:43.432"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": '012!.Aa'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:44:41.762" endtime="20210731 10:44:43.433">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t97" name="With Each Valid Token, Updating Password Of Each System User With 012!.Aab Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:43.438" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:43.448" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:43.448" level="INFO">${pids} = 16517</msg>
<status status="PASS" starttime="20210731 10:44:43.435" endtime="20210731 10:44:43.448"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:43.449" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:43.448" endtime="20210731 10:44:43.449"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:43.449" level="INFO">${pids} = ['16517']</msg>
<status status="PASS" starttime="20210731 10:44:43.449" endtime="20210731 10:44:43.450"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">16517</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:43.453" level="INFO">Running command 'kill 16517 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:43.450" endtime="20210731 10:44:43.454"/>
</kw>
<status status="PASS" starttime="20210731 10:44:43.450" endtime="20210731 10:44:43.454"/>
</iter>
<status status="PASS" starttime="20210731 10:44:43.450" endtime="20210731 10:44:43.454"/>
</for>
<status status="PASS" starttime="20210731 10:44:43.449" endtime="20210731 10:44:43.454"/>
</branch>
<status status="PASS" starttime="20210731 10:44:43.449" endtime="20210731 10:44:43.454"/>
</if>
<status status="PASS" starttime="20210731 10:44:43.434" endtime="20210731 10:44:43.454"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:43.455" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:43.455" endtime="20210731 10:44:43.455"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:43.456" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:43.455" endtime="20210731 10:44:43.456"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:43.456" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:43.456" endtime="20210731 10:44:43.456"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:43.456" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:43.456" endtime="20210731 10:44:43.456"/>
</kw>
<msg timestamp="20210731 10:44:43.457" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:43.455" endtime="20210731 10:44:43.457"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:43.460" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:43.457" endtime="20210731 10:44:43.462"/>
</kw>
<status status="PASS" starttime="20210731 10:44:43.454" endtime="20210731 10:44:43.462"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:44:43.464" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:44:43.463" endtime="20210731 10:44:43.470"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:44:44.971" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:44:43.470" endtime="20210731 10:44:44.971"/>
</kw>
<status status="PASS" starttime="20210731 10:44:43.463" endtime="20210731 10:44:44.972"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:44.973" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:44.973" endtime="20210731 10:44:44.973"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:44.974" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:44.974" endtime="20210731 10:44:44.974"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:44.975" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:44.974" endtime="20210731 10:44:44.976"/>
</kw>
<msg timestamp="20210731 10:44:44.977" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:44.972" endtime="20210731 10:44:44.977"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:44:44.978" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:44:44.978" endtime="20210731 10:44:44.979"/>
</kw>
<status status="PASS" starttime="20210731 10:44:44.972" endtime="20210731 10:44:44.979"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:44:44.979" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:44:44.979" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:44:44.979" endtime="20210731 10:44:44.980"/>
</kw>
<status status="PASS" starttime="20210731 10:44:44.979" endtime="20210731 10:44:44.980"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:44:44.980" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:44:44.980" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:44:44.980" endtime="20210731 10:44:44.981"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:44:44.981" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:44:44.981" endtime="20210731 10:44:44.981"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:44.981" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:44.981" endtime="20210731 10:44:44.981"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:44.982" endtime="20210731 10:44:44.983"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:44.983" endtime="20210731 10:44:44.983"/>
</kw>
<status status="PASS" starttime="20210731 10:44:44.981" endtime="20210731 10:44:44.983"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:44.984" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:44.983" endtime="20210731 10:44:44.984"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:44.984" endtime="20210731 10:44:44.984"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:44.984" endtime="20210731 10:44:44.985"/>
</kw>
<status status="PASS" starttime="20210731 10:44:44.983" endtime="20210731 10:44:44.985"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:44.985" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:44.985" endtime="20210731 10:44:44.985"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:44.985" endtime="20210731 10:44:44.986"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:44.986" endtime="20210731 10:44:44.986"/>
</kw>
<status status="PASS" starttime="20210731 10:44:44.985" endtime="20210731 10:44:44.986"/>
</iter>
<status status="PASS" starttime="20210731 10:44:44.981" endtime="20210731 10:44:44.986"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:44:44.987" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:44:44.987" endtime="20210731 10:44:44.987"/>
</kw>
<status status="PASS" starttime="20210731 10:44:44.980" endtime="20210731 10:44:44.987"/>
</kw>
<status status="PASS" starttime="20210731 10:44:43.434" endtime="20210731 10:44:44.987"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=012!.Aab</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:44.990" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:44:44.989" endtime="20210731 10:44:44.990"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:44.990" level="INFO">${payload} = {'password': '012!.Aab'}</msg>
<status status="PASS" starttime="20210731 10:44:44.990" endtime="20210731 10:44:44.990"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:45.000" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:45.000" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:44.991" endtime="20210731 10:44:45.000"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:45.001" endtime="20210731 10:44:45.001"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:45.001" endtime="20210731 10:44:45.001"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:44.991" endtime="20210731 10:44:45.001"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:44.990" endtime="20210731 10:44:45.001"/>
</for>
<status status="FAIL" starttime="20210731 10:44:44.988" endtime="20210731 10:44:45.001"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:44.987" endtime="20210731 10:44:45.001"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=012!.Aab</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:45.002" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:44:45.002" endtime="20210731 10:44:45.002"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:45.003" level="INFO">${payload} = {'password': '012!.Aab'}</msg>
<status status="PASS" starttime="20210731 10:44:45.002" endtime="20210731 10:44:45.003"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:45.008" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:45.008" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:45.003" endtime="20210731 10:44:45.008"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:45.008" endtime="20210731 10:44:45.008"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:45.008" endtime="20210731 10:44:45.008"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:45.003" endtime="20210731 10:44:45.008"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:45.003" endtime="20210731 10:44:45.009"/>
</for>
<status status="FAIL" starttime="20210731 10:44:45.001" endtime="20210731 10:44:45.009"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:45.001" endtime="20210731 10:44:45.009"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=012!.Aab</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:45.010" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:44:45.010" endtime="20210731 10:44:45.010"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:45.010" level="INFO">${payload} = {'password': '012!.Aab'}</msg>
<status status="PASS" starttime="20210731 10:44:45.010" endtime="20210731 10:44:45.010"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:45.015" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:45.016" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:45.011" endtime="20210731 10:44:45.016"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:45.016" endtime="20210731 10:44:45.016"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:45.016" endtime="20210731 10:44:45.016"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:45.011" endtime="20210731 10:44:45.016"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:45.010" endtime="20210731 10:44:45.016"/>
</for>
<status status="FAIL" starttime="20210731 10:44:45.009" endtime="20210731 10:44:45.016"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:45.009" endtime="20210731 10:44:45.016"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:44.987" endtime="20210731 10:44:45.017"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:45.022" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:45.036" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:45.036" level="INFO">${pids} = 16540
16547
16551</msg>
<status status="PASS" starttime="20210731 10:44:45.019" endtime="20210731 10:44:45.036"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:45.038" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:45.037" endtime="20210731 10:44:45.038"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:45.039" level="INFO">${pids} = ['16540', '16547', '16551']</msg>
<status status="PASS" starttime="20210731 10:44:45.038" endtime="20210731 10:44:45.039"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">16540</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:45.043" level="INFO">Running command 'kill 16540 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:45.039" endtime="20210731 10:44:45.044"/>
</kw>
<status status="PASS" starttime="20210731 10:44:45.039" endtime="20210731 10:44:45.044"/>
</iter>
<iter>
<var name="${pid}">16547</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:45.049" level="INFO">Running command 'kill 16547 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:45.044" endtime="20210731 10:44:45.049"/>
</kw>
<status status="PASS" starttime="20210731 10:44:45.044" endtime="20210731 10:44:45.049"/>
</iter>
<iter>
<var name="${pid}">16551</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:45.053" level="INFO">Running command 'kill 16551 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:45.050" endtime="20210731 10:44:45.054"/>
</kw>
<status status="PASS" starttime="20210731 10:44:45.049" endtime="20210731 10:44:45.054"/>
</iter>
<status status="PASS" starttime="20210731 10:44:45.039" endtime="20210731 10:44:45.054"/>
</for>
<status status="PASS" starttime="20210731 10:44:45.038" endtime="20210731 10:44:45.054"/>
</branch>
<status status="PASS" starttime="20210731 10:44:45.038" endtime="20210731 10:44:45.054"/>
</if>
<status status="PASS" starttime="20210731 10:44:45.018" endtime="20210731 10:44:45.054"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": '012!.Aab'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:44:43.433" endtime="20210731 10:44:45.055">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t98" name="With Each Valid Token, Updating Password Of Each System User With 012!.Aab012!.Aab012!.A Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:45.060" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:45.070" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:45.070" level="INFO">${pids} = 16580</msg>
<status status="PASS" starttime="20210731 10:44:45.057" endtime="20210731 10:44:45.070"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:45.071" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:45.071" endtime="20210731 10:44:45.071"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:45.072" level="INFO">${pids} = ['16580']</msg>
<status status="PASS" starttime="20210731 10:44:45.072" endtime="20210731 10:44:45.072"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">16580</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:45.077" level="INFO">Running command 'kill 16580 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:45.072" endtime="20210731 10:44:45.078"/>
</kw>
<status status="PASS" starttime="20210731 10:44:45.072" endtime="20210731 10:44:45.078"/>
</iter>
<status status="PASS" starttime="20210731 10:44:45.072" endtime="20210731 10:44:45.078"/>
</for>
<status status="PASS" starttime="20210731 10:44:45.072" endtime="20210731 10:44:45.078"/>
</branch>
<status status="PASS" starttime="20210731 10:44:45.071" endtime="20210731 10:44:45.078"/>
</if>
<status status="PASS" starttime="20210731 10:44:45.056" endtime="20210731 10:44:45.078"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:45.079" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:45.079" endtime="20210731 10:44:45.079"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:45.080" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:45.080" endtime="20210731 10:44:45.080"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:45.081" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:45.080" endtime="20210731 10:44:45.082"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:45.082" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:45.082" endtime="20210731 10:44:45.082"/>
</kw>
<msg timestamp="20210731 10:44:45.082" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:45.079" endtime="20210731 10:44:45.082"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:45.086" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:45.083" endtime="20210731 10:44:45.087"/>
</kw>
<status status="PASS" starttime="20210731 10:44:45.078" endtime="20210731 10:44:45.088"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:44:45.089" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:44:45.088" endtime="20210731 10:44:45.093"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:44:46.594" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:44:45.093" endtime="20210731 10:44:46.594"/>
</kw>
<status status="PASS" starttime="20210731 10:44:45.088" endtime="20210731 10:44:46.595"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:46.596" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:46.595" endtime="20210731 10:44:46.596"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:46.596" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:46.596" endtime="20210731 10:44:46.596"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:46.597" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:46.596" endtime="20210731 10:44:46.597"/>
</kw>
<msg timestamp="20210731 10:44:46.597" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:46.595" endtime="20210731 10:44:46.597"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:44:46.597" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:44:46.597" endtime="20210731 10:44:46.598"/>
</kw>
<status status="PASS" starttime="20210731 10:44:46.595" endtime="20210731 10:44:46.599"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:44:46.599" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:44:46.599" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:44:46.599" endtime="20210731 10:44:46.599"/>
</kw>
<status status="PASS" starttime="20210731 10:44:46.599" endtime="20210731 10:44:46.600"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:44:46.601" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:44:46.601" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:44:46.600" endtime="20210731 10:44:46.601"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:44:46.601" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:44:46.601" endtime="20210731 10:44:46.601"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:46.602" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:46.601" endtime="20210731 10:44:46.602"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:46.602" endtime="20210731 10:44:46.602"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:46.603" endtime="20210731 10:44:46.604"/>
</kw>
<status status="PASS" starttime="20210731 10:44:46.601" endtime="20210731 10:44:46.604"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:46.604" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:46.604" endtime="20210731 10:44:46.604"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:46.605" endtime="20210731 10:44:46.605"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:46.605" endtime="20210731 10:44:46.606"/>
</kw>
<status status="PASS" starttime="20210731 10:44:46.604" endtime="20210731 10:44:46.606"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:46.606" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:46.606" endtime="20210731 10:44:46.606"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:46.606" endtime="20210731 10:44:46.607"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:46.607" endtime="20210731 10:44:46.607"/>
</kw>
<status status="PASS" starttime="20210731 10:44:46.606" endtime="20210731 10:44:46.607"/>
</iter>
<status status="PASS" starttime="20210731 10:44:46.601" endtime="20210731 10:44:46.607"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:44:46.608" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:44:46.608" endtime="20210731 10:44:46.608"/>
</kw>
<status status="PASS" starttime="20210731 10:44:46.600" endtime="20210731 10:44:46.609"/>
</kw>
<status status="PASS" starttime="20210731 10:44:45.056" endtime="20210731 10:44:46.609"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=012!.Aab012!.Aab012!.A</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:46.610" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:44:46.610" endtime="20210731 10:44:46.610"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:46.611" level="INFO">${payload} = {'password': '012!.Aab012!.Aab012!.A'}</msg>
<status status="PASS" starttime="20210731 10:44:46.610" endtime="20210731 10:44:46.611"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:46.620" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:46.620" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:46.611" endtime="20210731 10:44:46.620"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:46.620" endtime="20210731 10:44:46.620"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:46.620" endtime="20210731 10:44:46.621"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:46.611" endtime="20210731 10:44:46.621"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:46.611" endtime="20210731 10:44:46.621"/>
</for>
<status status="FAIL" starttime="20210731 10:44:46.609" endtime="20210731 10:44:46.621"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:46.609" endtime="20210731 10:44:46.621"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=012!.Aab012!.Aab012!.A</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:46.622" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 10:44:46.622" endtime="20210731 10:44:46.622"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:46.622" level="INFO">${payload} = {'password': '012!.Aab012!.Aab012!.A'}</msg>
<status status="PASS" starttime="20210731 10:44:46.622" endtime="20210731 10:44:46.622"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:46.628" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:46.628" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:46.623" endtime="20210731 10:44:46.629"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:46.629" endtime="20210731 10:44:46.629"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:46.629" endtime="20210731 10:44:46.629"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:46.623" endtime="20210731 10:44:46.629"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:46.623" endtime="20210731 10:44:46.629"/>
</for>
<status status="FAIL" starttime="20210731 10:44:46.621" endtime="20210731 10:44:46.629"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:46.621" endtime="20210731 10:44:46.629"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=012!.Aab012!.Aab012!.A</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:46.630" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 10:44:46.630" endtime="20210731 10:44:46.630"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:46.631" level="INFO">${payload} = {'password': '012!.Aab012!.Aab012!.A'}</msg>
<status status="PASS" starttime="20210731 10:44:46.630" endtime="20210731 10:44:46.631"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:46.635" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:46.635" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:46.631" endtime="20210731 10:44:46.635"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:44:46.636" endtime="20210731 10:44:46.636"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:44:46.636" endtime="20210731 10:44:46.636"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:46.631" endtime="20210731 10:44:46.636"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:46.631" endtime="20210731 10:44:46.636"/>
</for>
<status status="FAIL" starttime="20210731 10:44:46.629" endtime="20210731 10:44:46.636"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:46.629" endtime="20210731 10:44:46.636"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:46.609" endtime="20210731 10:44:46.636"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:46.641" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:46.652" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:46.652" level="INFO">${pids} = 16603
16610
16614</msg>
<status status="PASS" starttime="20210731 10:44:46.637" endtime="20210731 10:44:46.652"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:46.653" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:46.653" endtime="20210731 10:44:46.653"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:46.654" level="INFO">${pids} = ['16603', '16610', '16614']</msg>
<status status="PASS" starttime="20210731 10:44:46.654" endtime="20210731 10:44:46.654"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">16603</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:46.658" level="INFO">Running command 'kill 16603 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:46.655" endtime="20210731 10:44:46.659"/>
</kw>
<status status="PASS" starttime="20210731 10:44:46.654" endtime="20210731 10:44:46.659"/>
</iter>
<iter>
<var name="${pid}">16610</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:46.663" level="INFO">Running command 'kill 16610 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:46.659" endtime="20210731 10:44:46.665"/>
</kw>
<status status="PASS" starttime="20210731 10:44:46.659" endtime="20210731 10:44:46.665"/>
</iter>
<iter>
<var name="${pid}">16614</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:46.669" level="INFO">Running command 'kill 16614 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:46.666" endtime="20210731 10:44:46.670"/>
</kw>
<status status="PASS" starttime="20210731 10:44:46.665" endtime="20210731 10:44:46.670"/>
</iter>
<status status="PASS" starttime="20210731 10:44:46.654" endtime="20210731 10:44:46.670"/>
</for>
<status status="PASS" starttime="20210731 10:44:46.654" endtime="20210731 10:44:46.670"/>
</branch>
<status status="PASS" starttime="20210731 10:44:46.654" endtime="20210731 10:44:46.670"/>
</if>
<status status="PASS" starttime="20210731 10:44:46.636" endtime="20210731 10:44:46.670"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": '012!.Aab012!.Aab012!.A'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:44:45.055" endtime="20210731 10:44:46.670">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t99" name="With Each Valid Token, Updating First Name Of Each System User With '' Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:46.677" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:46.688" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:46.688" level="INFO">${pids} = 16643</msg>
<status status="PASS" starttime="20210731 10:44:46.672" endtime="20210731 10:44:46.688"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:46.689" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:46.688" endtime="20210731 10:44:46.689"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:46.690" level="INFO">${pids} = ['16643']</msg>
<status status="PASS" starttime="20210731 10:44:46.689" endtime="20210731 10:44:46.690"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">16643</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:46.694" level="INFO">Running command 'kill 16643 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:46.690" endtime="20210731 10:44:46.695"/>
</kw>
<status status="PASS" starttime="20210731 10:44:46.690" endtime="20210731 10:44:46.695"/>
</iter>
<status status="PASS" starttime="20210731 10:44:46.690" endtime="20210731 10:44:46.695"/>
</for>
<status status="PASS" starttime="20210731 10:44:46.689" endtime="20210731 10:44:46.695"/>
</branch>
<status status="PASS" starttime="20210731 10:44:46.689" endtime="20210731 10:44:46.695"/>
</if>
<status status="PASS" starttime="20210731 10:44:46.672" endtime="20210731 10:44:46.695"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:46.696" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:46.696" endtime="20210731 10:44:46.696"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:46.697" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:46.697" endtime="20210731 10:44:46.697"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:46.698" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:46.697" endtime="20210731 10:44:46.698"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:46.699" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:46.698" endtime="20210731 10:44:46.699"/>
</kw>
<msg timestamp="20210731 10:44:46.699" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:46.696" endtime="20210731 10:44:46.699"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:46.703" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:46.699" endtime="20210731 10:44:46.705"/>
</kw>
<status status="PASS" starttime="20210731 10:44:46.695" endtime="20210731 10:44:46.705"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:44:46.706" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:44:46.706" endtime="20210731 10:44:46.712"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:44:48.213" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:44:46.712" endtime="20210731 10:44:48.213"/>
</kw>
<status status="PASS" starttime="20210731 10:44:46.705" endtime="20210731 10:44:48.213"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:48.214" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:48.214" endtime="20210731 10:44:48.214"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:48.215" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:48.214" endtime="20210731 10:44:48.215"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:48.215" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:48.215" endtime="20210731 10:44:48.215"/>
</kw>
<msg timestamp="20210731 10:44:48.216" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:48.214" endtime="20210731 10:44:48.216"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:44:48.217" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:44:48.216" endtime="20210731 10:44:48.217"/>
</kw>
<status status="PASS" starttime="20210731 10:44:48.213" endtime="20210731 10:44:48.217"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:44:48.218" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:44:48.218" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:44:48.218" endtime="20210731 10:44:48.218"/>
</kw>
<status status="PASS" starttime="20210731 10:44:48.217" endtime="20210731 10:44:48.218"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:44:48.219" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:44:48.219" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:44:48.218" endtime="20210731 10:44:48.219"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:44:48.219" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:44:48.219" endtime="20210731 10:44:48.219"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:48.220" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:48.219" endtime="20210731 10:44:48.220"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:48.220" endtime="20210731 10:44:48.220"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:48.221" endtime="20210731 10:44:48.221"/>
</kw>
<status status="PASS" starttime="20210731 10:44:48.219" endtime="20210731 10:44:48.221"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:48.221" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:48.221" endtime="20210731 10:44:48.221"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:48.221" endtime="20210731 10:44:48.222"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:48.222" endtime="20210731 10:44:48.222"/>
</kw>
<status status="PASS" starttime="20210731 10:44:48.221" endtime="20210731 10:44:48.222"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:48.223" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:48.223" endtime="20210731 10:44:48.223"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:48.223" endtime="20210731 10:44:48.224"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:48.224" endtime="20210731 10:44:48.224"/>
</kw>
<status status="PASS" starttime="20210731 10:44:48.222" endtime="20210731 10:44:48.224"/>
</iter>
<status status="PASS" starttime="20210731 10:44:48.219" endtime="20210731 10:44:48.224"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:44:48.224" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:44:48.224" endtime="20210731 10:44:48.225"/>
</kw>
<status status="PASS" starttime="20210731 10:44:48.218" endtime="20210731 10:44:48.225"/>
</kw>
<status status="PASS" starttime="20210731 10:44:46.672" endtime="20210731 10:44:48.225"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 10:44:48.234" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:44:48.225" endtime="20210731 10:44:48.234"/>
</kw>
<msg timestamp="20210731 10:44:48.234" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:44:48.225" endtime="20210731 10:44:48.234"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>first_name</arg>
<arg>An empty first name</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 10:44:48.235" endtime="20210731 10:44:48.235"/>
</kw>
<status status="PASS" starttime="20210731 10:44:48.234" endtime="20210731 10:44:48.236"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=firstname</arg>
<arg>field_data=${user_data}[first_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:48.237" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:44:48.237" endtime="20210731 10:44:48.237"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:48.238" level="INFO">${payload} = {'firstname': ''}</msg>
<status status="PASS" starttime="20210731 10:44:48.237" endtime="20210731 10:44:48.238"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:48.253" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:48.253" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:48.240" endtime="20210731 10:44:48.254"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:44:48.254" endtime="20210731 10:44:48.254"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:44:48.254" endtime="20210731 10:44:48.254"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:48.240" endtime="20210731 10:44:48.254"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:48.239" endtime="20210731 10:44:48.254"/>
</for>
<status status="FAIL" starttime="20210731 10:44:48.236" endtime="20210731 10:44:48.254"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:48.236" endtime="20210731 10:44:48.254"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:48.236" endtime="20210731 10:44:48.254"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:48.259" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:48.270" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:48.270" level="INFO">${pids} = 16666
16673
16680</msg>
<status status="PASS" starttime="20210731 10:44:48.255" endtime="20210731 10:44:48.270"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:48.271" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:48.270" endtime="20210731 10:44:48.271"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:48.271" level="INFO">${pids} = ['16666', '16673', '16680']</msg>
<status status="PASS" starttime="20210731 10:44:48.271" endtime="20210731 10:44:48.272"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">16666</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:48.276" level="INFO">Running command 'kill 16666 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:48.272" endtime="20210731 10:44:48.277"/>
</kw>
<status status="PASS" starttime="20210731 10:44:48.272" endtime="20210731 10:44:48.277"/>
</iter>
<iter>
<var name="${pid}">16673</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:48.281" level="INFO">Running command 'kill 16673 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:48.278" endtime="20210731 10:44:48.282"/>
</kw>
<status status="PASS" starttime="20210731 10:44:48.277" endtime="20210731 10:44:48.282"/>
</iter>
<iter>
<var name="${pid}">16680</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:48.286" level="INFO">Running command 'kill 16680 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:48.282" endtime="20210731 10:44:48.287"/>
</kw>
<status status="PASS" starttime="20210731 10:44:48.282" endtime="20210731 10:44:48.287"/>
</iter>
<status status="PASS" starttime="20210731 10:44:48.272" endtime="20210731 10:44:48.287"/>
</for>
<status status="PASS" starttime="20210731 10:44:48.271" endtime="20210731 10:44:48.287"/>
</branch>
<status status="PASS" starttime="20210731 10:44:48.271" endtime="20210731 10:44:48.287"/>
</if>
<status status="PASS" starttime="20210731 10:44:48.255" endtime="20210731 10:44:48.287"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
firstname as such:
{
"firstname": ''
}
Then, each request should fail with the following response body:
{
"message": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:44:46.671" endtime="20210731 10:44:48.287">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t100" name="With Each Valid Token, Updating First Name Of Each System User With Hakan Results In Success">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:48.294" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:48.304" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:48.304" level="INFO">${pids} = 16712</msg>
<status status="PASS" starttime="20210731 10:44:48.290" endtime="20210731 10:44:48.304"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:48.305" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:48.304" endtime="20210731 10:44:48.305"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:48.306" level="INFO">${pids} = ['16712']</msg>
<status status="PASS" starttime="20210731 10:44:48.305" endtime="20210731 10:44:48.306"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">16712</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:48.311" level="INFO">Running command 'kill 16712 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:48.306" endtime="20210731 10:44:48.312"/>
</kw>
<status status="PASS" starttime="20210731 10:44:48.306" endtime="20210731 10:44:48.312"/>
</iter>
<status status="PASS" starttime="20210731 10:44:48.306" endtime="20210731 10:44:48.312"/>
</for>
<status status="PASS" starttime="20210731 10:44:48.305" endtime="20210731 10:44:48.312"/>
</branch>
<status status="PASS" starttime="20210731 10:44:48.305" endtime="20210731 10:44:48.312"/>
</if>
<status status="PASS" starttime="20210731 10:44:48.289" endtime="20210731 10:44:48.312"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:48.313" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:48.313" endtime="20210731 10:44:48.313"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:48.314" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:48.314" endtime="20210731 10:44:48.314"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:48.315" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:48.314" endtime="20210731 10:44:48.315"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:48.315" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:48.315" endtime="20210731 10:44:48.315"/>
</kw>
<msg timestamp="20210731 10:44:48.316" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:48.313" endtime="20210731 10:44:48.316"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:48.319" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:48.316" endtime="20210731 10:44:48.321"/>
</kw>
<status status="PASS" starttime="20210731 10:44:48.312" endtime="20210731 10:44:48.321"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:44:48.322" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:44:48.322" endtime="20210731 10:44:48.326"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:44:49.828" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:44:48.327" endtime="20210731 10:44:49.828"/>
</kw>
<status status="PASS" starttime="20210731 10:44:48.321" endtime="20210731 10:44:49.829"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:49.830" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:49.829" endtime="20210731 10:44:49.830"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:49.830" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:49.830" endtime="20210731 10:44:49.830"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:49.830" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:49.830" endtime="20210731 10:44:49.830"/>
</kw>
<msg timestamp="20210731 10:44:49.831" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:49.829" endtime="20210731 10:44:49.831"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:44:49.831" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:44:49.831" endtime="20210731 10:44:49.832"/>
</kw>
<status status="PASS" starttime="20210731 10:44:49.829" endtime="20210731 10:44:49.832"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:44:49.833" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:44:49.833" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:44:49.833" endtime="20210731 10:44:49.833"/>
</kw>
<status status="PASS" starttime="20210731 10:44:49.832" endtime="20210731 10:44:49.833"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:44:49.834" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:44:49.834" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:44:49.834" endtime="20210731 10:44:49.834"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:44:49.834" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:44:49.834" endtime="20210731 10:44:49.834"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:49.835" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:49.835" endtime="20210731 10:44:49.835"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:49.835" endtime="20210731 10:44:49.836"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:49.836" endtime="20210731 10:44:49.836"/>
</kw>
<status status="PASS" starttime="20210731 10:44:49.835" endtime="20210731 10:44:49.836"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:49.837" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:49.837" endtime="20210731 10:44:49.837"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:49.837" endtime="20210731 10:44:49.838"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:49.838" endtime="20210731 10:44:49.838"/>
</kw>
<status status="PASS" starttime="20210731 10:44:49.836" endtime="20210731 10:44:49.838"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:49.838" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:49.838" endtime="20210731 10:44:49.838"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:49.838" endtime="20210731 10:44:49.840"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:49.841" endtime="20210731 10:44:49.841"/>
</kw>
<status status="PASS" starttime="20210731 10:44:49.838" endtime="20210731 10:44:49.842"/>
</iter>
<status status="PASS" starttime="20210731 10:44:49.835" endtime="20210731 10:44:49.842"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:44:49.842" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:44:49.842" endtime="20210731 10:44:49.843"/>
</kw>
<status status="PASS" starttime="20210731 10:44:49.834" endtime="20210731 10:44:49.843"/>
</kw>
<status status="PASS" starttime="20210731 10:44:48.289" endtime="20210731 10:44:49.843"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 10:44:49.846" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:44:49.844" endtime="20210731 10:44:49.846"/>
</kw>
<msg timestamp="20210731 10:44:49.847" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:44:49.843" endtime="20210731 10:44:49.847"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>first_name</arg>
<arg>A first name containing more than 2 characters</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 10:44:49.847" endtime="20210731 10:44:49.848"/>
</kw>
<status status="PASS" starttime="20210731 10:44:49.847" endtime="20210731 10:44:49.848"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=firstname</arg>
<arg>field_data=${user_data}[first_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:49.850" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:44:49.849" endtime="20210731 10:44:49.850"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:49.850" level="INFO">${payload} = {'firstname': 'Hakan'}</msg>
<status status="PASS" starttime="20210731 10:44:49.850" endtime="20210731 10:44:49.850"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:49.860" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:49.860" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:49.851" endtime="20210731 10:44:49.860"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:44:49.860" endtime="20210731 10:44:49.860"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:44:49.860" endtime="20210731 10:44:49.860"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:49.851" endtime="20210731 10:44:49.860"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:49.850" endtime="20210731 10:44:49.860"/>
</for>
<status status="FAIL" starttime="20210731 10:44:49.849" endtime="20210731 10:44:49.861"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:49.849" endtime="20210731 10:44:49.861"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:49.848" endtime="20210731 10:44:49.861"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:49.865" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:49.877" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:49.877" level="INFO">${pids} = 16735
16742
16744</msg>
<status status="PASS" starttime="20210731 10:44:49.861" endtime="20210731 10:44:49.877"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:49.878" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:49.877" endtime="20210731 10:44:49.878"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:49.879" level="INFO">${pids} = ['16735', '16742', '16744']</msg>
<status status="PASS" starttime="20210731 10:44:49.878" endtime="20210731 10:44:49.879"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">16735</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:49.882" level="INFO">Running command 'kill 16735 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:49.879" endtime="20210731 10:44:49.883"/>
</kw>
<status status="PASS" starttime="20210731 10:44:49.879" endtime="20210731 10:44:49.883"/>
</iter>
<iter>
<var name="${pid}">16742</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:49.887" level="INFO">Running command 'kill 16742 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:49.884" endtime="20210731 10:44:49.888"/>
</kw>
<status status="PASS" starttime="20210731 10:44:49.883" endtime="20210731 10:44:49.888"/>
</iter>
<iter>
<var name="${pid}">16744</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:49.893" level="INFO">Running command 'kill 16744 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:49.889" endtime="20210731 10:44:49.894"/>
</kw>
<status status="PASS" starttime="20210731 10:44:49.888" endtime="20210731 10:44:49.894"/>
</iter>
<status status="PASS" starttime="20210731 10:44:49.879" endtime="20210731 10:44:49.894"/>
</for>
<status status="PASS" starttime="20210731 10:44:49.878" endtime="20210731 10:44:49.894"/>
</branch>
<status status="PASS" starttime="20210731 10:44:49.878" endtime="20210731 10:44:49.894"/>
</if>
<status status="PASS" starttime="20210731 10:44:49.861" endtime="20210731 10:44:49.894"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
firstname as such:
{
"firstname": 'Hakan'
}
Then, each request should succeed with the following response body:
{
"message": "Updated",
"status": "SUCCESS"
}
This test not only verifies message and status but also verifies that the &lt;username&gt;'s data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:44:48.288" endtime="20210731 10:44:49.894">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t101" name="With Each Valid Token, Updating First Name Of Each System User With Hakan123!?. Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:49.900" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:49.911" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:49.911" level="INFO">${pids} = 16773</msg>
<status status="PASS" starttime="20210731 10:44:49.896" endtime="20210731 10:44:49.911"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:49.912" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:49.911" endtime="20210731 10:44:49.912"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:49.913" level="INFO">${pids} = ['16773']</msg>
<status status="PASS" starttime="20210731 10:44:49.912" endtime="20210731 10:44:49.913"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">16773</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:49.917" level="INFO">Running command 'kill 16773 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:49.913" endtime="20210731 10:44:49.918"/>
</kw>
<status status="PASS" starttime="20210731 10:44:49.913" endtime="20210731 10:44:49.918"/>
</iter>
<status status="PASS" starttime="20210731 10:44:49.913" endtime="20210731 10:44:49.918"/>
</for>
<status status="PASS" starttime="20210731 10:44:49.912" endtime="20210731 10:44:49.918"/>
</branch>
<status status="PASS" starttime="20210731 10:44:49.912" endtime="20210731 10:44:49.918"/>
</if>
<status status="PASS" starttime="20210731 10:44:49.896" endtime="20210731 10:44:49.918"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:49.919" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:49.919" endtime="20210731 10:44:49.919"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:49.920" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:49.920" endtime="20210731 10:44:49.920"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:49.920" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:49.920" endtime="20210731 10:44:49.920"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:49.920" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:49.920" endtime="20210731 10:44:49.921"/>
</kw>
<msg timestamp="20210731 10:44:49.921" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:49.919" endtime="20210731 10:44:49.921"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:49.926" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:49.921" endtime="20210731 10:44:49.927"/>
</kw>
<status status="PASS" starttime="20210731 10:44:49.918" endtime="20210731 10:44:49.928"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:44:49.929" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:44:49.928" endtime="20210731 10:44:49.934"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:44:51.435" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:44:49.934" endtime="20210731 10:44:51.435"/>
</kw>
<status status="PASS" starttime="20210731 10:44:49.928" endtime="20210731 10:44:51.435"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:51.437" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:51.436" endtime="20210731 10:44:51.437"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:51.437" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:51.437" endtime="20210731 10:44:51.437"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:51.437" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:51.437" endtime="20210731 10:44:51.437"/>
</kw>
<msg timestamp="20210731 10:44:51.438" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:51.436" endtime="20210731 10:44:51.438"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:44:51.438" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:44:51.438" endtime="20210731 10:44:51.438"/>
</kw>
<status status="PASS" starttime="20210731 10:44:51.436" endtime="20210731 10:44:51.439"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:44:51.439" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:44:51.439" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:44:51.439" endtime="20210731 10:44:51.439"/>
</kw>
<status status="PASS" starttime="20210731 10:44:51.439" endtime="20210731 10:44:51.440"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:44:51.440" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:44:51.440" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:44:51.440" endtime="20210731 10:44:51.440"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:44:51.441" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:44:51.441" endtime="20210731 10:44:51.441"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:51.443" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:51.442" endtime="20210731 10:44:51.443"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:51.444" endtime="20210731 10:44:51.446"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:51.446" endtime="20210731 10:44:51.447"/>
</kw>
<status status="PASS" starttime="20210731 10:44:51.442" endtime="20210731 10:44:51.447"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:51.448" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:51.447" endtime="20210731 10:44:51.448"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:51.448" endtime="20210731 10:44:51.451"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:51.451" endtime="20210731 10:44:51.452"/>
</kw>
<status status="PASS" starttime="20210731 10:44:51.447" endtime="20210731 10:44:51.452"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:51.453" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:51.452" endtime="20210731 10:44:51.453"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:51.453" endtime="20210731 10:44:51.454"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:51.455" endtime="20210731 10:44:51.455"/>
</kw>
<status status="PASS" starttime="20210731 10:44:51.452" endtime="20210731 10:44:51.455"/>
</iter>
<status status="PASS" starttime="20210731 10:44:51.441" endtime="20210731 10:44:51.455"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:44:51.456" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:44:51.455" endtime="20210731 10:44:51.456"/>
</kw>
<status status="PASS" starttime="20210731 10:44:51.440" endtime="20210731 10:44:51.456"/>
</kw>
<status status="PASS" starttime="20210731 10:44:49.896" endtime="20210731 10:44:51.456"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 10:44:51.460" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:44:51.457" endtime="20210731 10:44:51.460"/>
</kw>
<msg timestamp="20210731 10:44:51.460" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:44:51.457" endtime="20210731 10:44:51.460"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>first_name</arg>
<arg>A name containing numbers and non-alphanumeric characters</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 10:44:51.461" endtime="20210731 10:44:51.462"/>
</kw>
<status status="PASS" starttime="20210731 10:44:51.460" endtime="20210731 10:44:51.462"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=firstname</arg>
<arg>field_data=${user_data}[first_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:51.463" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:44:51.463" endtime="20210731 10:44:51.463"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:51.464" level="INFO">${payload} = {'firstname': 'Hakan123!?.'}</msg>
<status status="PASS" starttime="20210731 10:44:51.463" endtime="20210731 10:44:51.464"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:51.474" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:51.474" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:51.464" endtime="20210731 10:44:51.474"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:44:51.474" endtime="20210731 10:44:51.474"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:44:51.475" endtime="20210731 10:44:51.475"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:51.464" endtime="20210731 10:44:51.476"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:51.464" endtime="20210731 10:44:51.476"/>
</for>
<status status="FAIL" starttime="20210731 10:44:51.462" endtime="20210731 10:44:51.476"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:51.462" endtime="20210731 10:44:51.476"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:51.462" endtime="20210731 10:44:51.476"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:51.481" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:51.491" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:51.491" level="INFO">${pids} = 16796
16803
16811</msg>
<status status="PASS" starttime="20210731 10:44:51.477" endtime="20210731 10:44:51.491"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:51.492" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:51.491" endtime="20210731 10:44:51.492"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:51.493" level="INFO">${pids} = ['16796', '16803', '16811']</msg>
<status status="PASS" starttime="20210731 10:44:51.492" endtime="20210731 10:44:51.493"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">16796</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:51.496" level="INFO">Running command 'kill 16796 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:51.493" endtime="20210731 10:44:51.497"/>
</kw>
<status status="PASS" starttime="20210731 10:44:51.493" endtime="20210731 10:44:51.497"/>
</iter>
<iter>
<var name="${pid}">16803</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:51.503" level="INFO">Running command 'kill 16803 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:51.498" endtime="20210731 10:44:51.505"/>
</kw>
<status status="PASS" starttime="20210731 10:44:51.497" endtime="20210731 10:44:51.505"/>
</iter>
<iter>
<var name="${pid}">16811</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:51.510" level="INFO">Running command 'kill 16811 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:51.505" endtime="20210731 10:44:51.510"/>
</kw>
<status status="PASS" starttime="20210731 10:44:51.505" endtime="20210731 10:44:51.511"/>
</iter>
<status status="PASS" starttime="20210731 10:44:51.493" endtime="20210731 10:44:51.511"/>
</for>
<status status="PASS" starttime="20210731 10:44:51.492" endtime="20210731 10:44:51.511"/>
</branch>
<status status="PASS" starttime="20210731 10:44:51.492" endtime="20210731 10:44:51.511"/>
</if>
<status status="PASS" starttime="20210731 10:44:51.477" endtime="20210731 10:44:51.511"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
firstname as such:
{
"firstname": 'Hakan123!?.'
}
Then, each request should fail with the following response body:
{
"message": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:44:49.895" endtime="20210731 10:44:51.511">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t102" name="With Each Valid Token, Updating First Name Of Each System User With Ha Results In Success">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:51.521" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:51.531" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:51.532" level="INFO">${pids} = 16840</msg>
<status status="PASS" starttime="20210731 10:44:51.513" endtime="20210731 10:44:51.532"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:51.533" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:51.532" endtime="20210731 10:44:51.533"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:51.533" level="INFO">${pids} = ['16840']</msg>
<status status="PASS" starttime="20210731 10:44:51.533" endtime="20210731 10:44:51.533"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">16840</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:51.537" level="INFO">Running command 'kill 16840 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:51.534" endtime="20210731 10:44:51.538"/>
</kw>
<status status="PASS" starttime="20210731 10:44:51.534" endtime="20210731 10:44:51.538"/>
</iter>
<status status="PASS" starttime="20210731 10:44:51.534" endtime="20210731 10:44:51.538"/>
</for>
<status status="PASS" starttime="20210731 10:44:51.533" endtime="20210731 10:44:51.538"/>
</branch>
<status status="PASS" starttime="20210731 10:44:51.533" endtime="20210731 10:44:51.538"/>
</if>
<status status="PASS" starttime="20210731 10:44:51.513" endtime="20210731 10:44:51.538"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:51.539" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:51.539" endtime="20210731 10:44:51.539"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:51.544" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:51.544" endtime="20210731 10:44:51.544"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:51.545" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:51.544" endtime="20210731 10:44:51.545"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:51.545" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:51.545" endtime="20210731 10:44:51.546"/>
</kw>
<msg timestamp="20210731 10:44:51.546" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:51.540" endtime="20210731 10:44:51.546"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:51.549" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:51.546" endtime="20210731 10:44:51.551"/>
</kw>
<status status="PASS" starttime="20210731 10:44:51.538" endtime="20210731 10:44:51.552"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:44:51.553" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:44:51.552" endtime="20210731 10:44:51.558"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:44:53.062" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:44:51.558" endtime="20210731 10:44:53.063"/>
</kw>
<status status="PASS" starttime="20210731 10:44:51.552" endtime="20210731 10:44:53.063"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:53.064" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:53.064" endtime="20210731 10:44:53.064"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:53.065" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:53.064" endtime="20210731 10:44:53.065"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:53.065" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:53.065" endtime="20210731 10:44:53.065"/>
</kw>
<msg timestamp="20210731 10:44:53.065" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:53.064" endtime="20210731 10:44:53.065"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:44:53.066" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:44:53.065" endtime="20210731 10:44:53.066"/>
</kw>
<status status="PASS" starttime="20210731 10:44:53.063" endtime="20210731 10:44:53.066"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:44:53.067" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:44:53.067" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:44:53.067" endtime="20210731 10:44:53.067"/>
</kw>
<status status="PASS" starttime="20210731 10:44:53.066" endtime="20210731 10:44:53.067"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:44:53.068" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:44:53.068" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:44:53.067" endtime="20210731 10:44:53.068"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:44:53.068" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:44:53.068" endtime="20210731 10:44:53.068"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:53.069" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:53.068" endtime="20210731 10:44:53.069"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:53.070" endtime="20210731 10:44:53.071"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:53.071" endtime="20210731 10:44:53.071"/>
</kw>
<status status="PASS" starttime="20210731 10:44:53.068" endtime="20210731 10:44:53.071"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:53.071" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:53.071" endtime="20210731 10:44:53.071"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:53.071" endtime="20210731 10:44:53.072"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:53.072" endtime="20210731 10:44:53.072"/>
</kw>
<status status="PASS" starttime="20210731 10:44:53.071" endtime="20210731 10:44:53.072"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:53.073" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:53.073" endtime="20210731 10:44:53.073"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:53.073" endtime="20210731 10:44:53.074"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:53.074" endtime="20210731 10:44:53.074"/>
</kw>
<status status="PASS" starttime="20210731 10:44:53.073" endtime="20210731 10:44:53.074"/>
</iter>
<status status="PASS" starttime="20210731 10:44:53.068" endtime="20210731 10:44:53.074"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:44:53.075" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:44:53.074" endtime="20210731 10:44:53.075"/>
</kw>
<status status="PASS" starttime="20210731 10:44:53.067" endtime="20210731 10:44:53.075"/>
</kw>
<status status="PASS" starttime="20210731 10:44:51.513" endtime="20210731 10:44:53.075"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 10:44:53.079" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:44:53.076" endtime="20210731 10:44:53.079"/>
</kw>
<msg timestamp="20210731 10:44:53.079" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:44:53.076" endtime="20210731 10:44:53.079"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>first_name</arg>
<arg>A minimum 2 characters first name</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 10:44:53.080" endtime="20210731 10:44:53.080"/>
</kw>
<status status="PASS" starttime="20210731 10:44:53.079" endtime="20210731 10:44:53.080"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=firstname</arg>
<arg>field_data=${user_data}[first_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:53.082" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:44:53.082" endtime="20210731 10:44:53.082"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:53.084" level="INFO">${payload} = {'firstname': 'Ha'}</msg>
<status status="PASS" starttime="20210731 10:44:53.082" endtime="20210731 10:44:53.084"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:53.095" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:53.095" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:53.084" endtime="20210731 10:44:53.095"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:44:53.096" endtime="20210731 10:44:53.096"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:44:53.096" endtime="20210731 10:44:53.096"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:53.084" endtime="20210731 10:44:53.096"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:53.084" endtime="20210731 10:44:53.096"/>
</for>
<status status="FAIL" starttime="20210731 10:44:53.081" endtime="20210731 10:44:53.097"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:53.081" endtime="20210731 10:44:53.097"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:53.080" endtime="20210731 10:44:53.097"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:53.103" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:53.115" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:53.115" level="INFO">${pids} = 16863
16870
16875</msg>
<status status="PASS" starttime="20210731 10:44:53.098" endtime="20210731 10:44:53.115"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:53.116" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:53.115" endtime="20210731 10:44:53.116"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:53.117" level="INFO">${pids} = ['16863', '16870', '16875']</msg>
<status status="PASS" starttime="20210731 10:44:53.116" endtime="20210731 10:44:53.117"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">16863</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:53.121" level="INFO">Running command 'kill 16863 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:53.117" endtime="20210731 10:44:53.121"/>
</kw>
<status status="PASS" starttime="20210731 10:44:53.117" endtime="20210731 10:44:53.122"/>
</iter>
<iter>
<var name="${pid}">16870</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:53.126" level="INFO">Running command 'kill 16870 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:53.122" endtime="20210731 10:44:53.127"/>
</kw>
<status status="PASS" starttime="20210731 10:44:53.122" endtime="20210731 10:44:53.127"/>
</iter>
<iter>
<var name="${pid}">16875</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:53.131" level="INFO">Running command 'kill 16875 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:53.127" endtime="20210731 10:44:53.131"/>
</kw>
<status status="PASS" starttime="20210731 10:44:53.127" endtime="20210731 10:44:53.131"/>
</iter>
<status status="PASS" starttime="20210731 10:44:53.117" endtime="20210731 10:44:53.131"/>
</for>
<status status="PASS" starttime="20210731 10:44:53.116" endtime="20210731 10:44:53.131"/>
</branch>
<status status="PASS" starttime="20210731 10:44:53.116" endtime="20210731 10:44:53.131"/>
</if>
<status status="PASS" starttime="20210731 10:44:53.097" endtime="20210731 10:44:53.132"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
firstname as such:
{
"firstname": 'Ha'
}
Then, each request should fail with the following response body:
{
"message": "Updated",
"status": "SUCCESS"
}
This test not only verifies message and status but also verifies that the &lt;username&gt;'s data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:44:51.512" endtime="20210731 10:44:53.132">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t103" name="With Each Valid Token, Updating First Name Of Each System User With Ha Xu Results In Success">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:53.143" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:53.154" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:53.154" level="INFO">${pids} = 16904</msg>
<status status="PASS" starttime="20210731 10:44:53.134" endtime="20210731 10:44:53.154"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:53.155" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:53.154" endtime="20210731 10:44:53.155"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:53.155" level="INFO">${pids} = ['16904']</msg>
<status status="PASS" starttime="20210731 10:44:53.155" endtime="20210731 10:44:53.155"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">16904</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:53.160" level="INFO">Running command 'kill 16904 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:53.157" endtime="20210731 10:44:53.161"/>
</kw>
<status status="PASS" starttime="20210731 10:44:53.157" endtime="20210731 10:44:53.161"/>
</iter>
<status status="PASS" starttime="20210731 10:44:53.156" endtime="20210731 10:44:53.161"/>
</for>
<status status="PASS" starttime="20210731 10:44:53.155" endtime="20210731 10:44:53.161"/>
</branch>
<status status="PASS" starttime="20210731 10:44:53.155" endtime="20210731 10:44:53.161"/>
</if>
<status status="PASS" starttime="20210731 10:44:53.134" endtime="20210731 10:44:53.161"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:53.162" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:53.162" endtime="20210731 10:44:53.162"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:53.164" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:53.164" endtime="20210731 10:44:53.164"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:53.165" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:53.164" endtime="20210731 10:44:53.165"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:53.165" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:53.165" endtime="20210731 10:44:53.165"/>
</kw>
<msg timestamp="20210731 10:44:53.166" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:53.163" endtime="20210731 10:44:53.166"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:53.169" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:53.166" endtime="20210731 10:44:53.171"/>
</kw>
<status status="PASS" starttime="20210731 10:44:53.162" endtime="20210731 10:44:53.171"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:44:53.172" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:44:53.172" endtime="20210731 10:44:53.177"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:44:54.680" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:44:53.177" endtime="20210731 10:44:54.680"/>
</kw>
<status status="PASS" starttime="20210731 10:44:53.171" endtime="20210731 10:44:54.680"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:54.681" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:54.681" endtime="20210731 10:44:54.681"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:54.682" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:54.681" endtime="20210731 10:44:54.682"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:54.682" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:54.682" endtime="20210731 10:44:54.682"/>
</kw>
<msg timestamp="20210731 10:44:54.682" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:54.681" endtime="20210731 10:44:54.682"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:44:54.683" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:44:54.682" endtime="20210731 10:44:54.683"/>
</kw>
<status status="PASS" starttime="20210731 10:44:54.680" endtime="20210731 10:44:54.683"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:44:54.684" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:44:54.684" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:44:54.684" endtime="20210731 10:44:54.684"/>
</kw>
<status status="PASS" starttime="20210731 10:44:54.683" endtime="20210731 10:44:54.684"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:44:54.685" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:44:54.685" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:44:54.685" endtime="20210731 10:44:54.685"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:44:54.685" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:44:54.685" endtime="20210731 10:44:54.685"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:54.686" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:54.686" endtime="20210731 10:44:54.686"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:54.686" endtime="20210731 10:44:54.687"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:54.687" endtime="20210731 10:44:54.687"/>
</kw>
<status status="PASS" starttime="20210731 10:44:54.686" endtime="20210731 10:44:54.687"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:54.688" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:54.687" endtime="20210731 10:44:54.688"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:54.688" endtime="20210731 10:44:54.688"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:54.689" endtime="20210731 10:44:54.689"/>
</kw>
<status status="PASS" starttime="20210731 10:44:54.687" endtime="20210731 10:44:54.689"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:54.689" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:54.689" endtime="20210731 10:44:54.689"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:54.689" endtime="20210731 10:44:54.690"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:54.690" endtime="20210731 10:44:54.690"/>
</kw>
<status status="PASS" starttime="20210731 10:44:54.689" endtime="20210731 10:44:54.690"/>
</iter>
<status status="PASS" starttime="20210731 10:44:54.685" endtime="20210731 10:44:54.690"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:44:54.691" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:44:54.691" endtime="20210731 10:44:54.691"/>
</kw>
<status status="PASS" starttime="20210731 10:44:54.684" endtime="20210731 10:44:54.691"/>
</kw>
<status status="PASS" starttime="20210731 10:44:53.133" endtime="20210731 10:44:54.691"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 10:44:54.695" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:44:54.692" endtime="20210731 10:44:54.695"/>
</kw>
<msg timestamp="20210731 10:44:54.695" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:44:54.692" endtime="20210731 10:44:54.695"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>first_name</arg>
<arg>minimum 2 characters first names for each first name</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 10:44:54.696" endtime="20210731 10:44:54.696"/>
</kw>
<status status="PASS" starttime="20210731 10:44:54.695" endtime="20210731 10:44:54.696"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=firstname</arg>
<arg>field_data=${user_data}[first_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:54.698" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:44:54.698" endtime="20210731 10:44:54.698"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:54.698" level="INFO">${payload} = {'firstname': 'Ha Xu'}</msg>
<status status="PASS" starttime="20210731 10:44:54.698" endtime="20210731 10:44:54.698"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:54.710" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:54.710" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:54.699" endtime="20210731 10:44:54.710"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:44:54.710" endtime="20210731 10:44:54.710"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:44:54.710" endtime="20210731 10:44:54.710"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:54.699" endtime="20210731 10:44:54.710"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:54.699" endtime="20210731 10:44:54.711"/>
</for>
<status status="FAIL" starttime="20210731 10:44:54.697" endtime="20210731 10:44:54.711"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:54.697" endtime="20210731 10:44:54.711"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:54.696" endtime="20210731 10:44:54.711"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:54.715" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:54.725" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:54.725" level="INFO">${pids} = 16927
16934
16942</msg>
<status status="PASS" starttime="20210731 10:44:54.712" endtime="20210731 10:44:54.725"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:54.726" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:54.725" endtime="20210731 10:44:54.726"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:54.727" level="INFO">${pids} = ['16927', '16934', '16942']</msg>
<status status="PASS" starttime="20210731 10:44:54.726" endtime="20210731 10:44:54.727"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">16927</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:54.731" level="INFO">Running command 'kill 16927 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:54.727" endtime="20210731 10:44:54.731"/>
</kw>
<status status="PASS" starttime="20210731 10:44:54.727" endtime="20210731 10:44:54.731"/>
</iter>
<iter>
<var name="${pid}">16934</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:54.735" level="INFO">Running command 'kill 16934 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:54.732" endtime="20210731 10:44:54.737"/>
</kw>
<status status="PASS" starttime="20210731 10:44:54.732" endtime="20210731 10:44:54.737"/>
</iter>
<iter>
<var name="${pid}">16942</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:54.741" level="INFO">Running command 'kill 16942 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:54.738" endtime="20210731 10:44:54.742"/>
</kw>
<status status="PASS" starttime="20210731 10:44:54.737" endtime="20210731 10:44:54.742"/>
</iter>
<status status="PASS" starttime="20210731 10:44:54.727" endtime="20210731 10:44:54.742"/>
</for>
<status status="PASS" starttime="20210731 10:44:54.726" endtime="20210731 10:44:54.742"/>
</branch>
<status status="PASS" starttime="20210731 10:44:54.726" endtime="20210731 10:44:54.742"/>
</if>
<status status="PASS" starttime="20210731 10:44:54.711" endtime="20210731 10:44:54.743"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
firstname as such:
{
"firstname": 'Ha Xu'
}
Then, each request should succeed with the following response body:
{
"message": "Updated",
"status": "SUCCESS"
}
This test not only verifies message and status but also verifies that the &lt;username&gt;'s data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:44:53.132" endtime="20210731 10:44:54.743">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t104" name="With Each Valid Token, Updating First Name Of Each System User With H Xu Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:54.748" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:54.759" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:54.759" level="INFO">${pids} = 16971</msg>
<status status="PASS" starttime="20210731 10:44:54.745" endtime="20210731 10:44:54.759"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:54.761" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:54.760" endtime="20210731 10:44:54.761"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:54.761" level="INFO">${pids} = ['16971']</msg>
<status status="PASS" starttime="20210731 10:44:54.761" endtime="20210731 10:44:54.761"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">16971</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:54.766" level="INFO">Running command 'kill 16971 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:54.762" endtime="20210731 10:44:54.766"/>
</kw>
<status status="PASS" starttime="20210731 10:44:54.762" endtime="20210731 10:44:54.766"/>
</iter>
<status status="PASS" starttime="20210731 10:44:54.762" endtime="20210731 10:44:54.766"/>
</for>
<status status="PASS" starttime="20210731 10:44:54.761" endtime="20210731 10:44:54.766"/>
</branch>
<status status="PASS" starttime="20210731 10:44:54.761" endtime="20210731 10:44:54.766"/>
</if>
<status status="PASS" starttime="20210731 10:44:54.745" endtime="20210731 10:44:54.767"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:54.768" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:54.767" endtime="20210731 10:44:54.768"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:54.769" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:54.768" endtime="20210731 10:44:54.769"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:54.769" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:54.769" endtime="20210731 10:44:54.769"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:54.770" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:54.769" endtime="20210731 10:44:54.770"/>
</kw>
<msg timestamp="20210731 10:44:54.770" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:54.768" endtime="20210731 10:44:54.770"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:54.774" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:54.770" endtime="20210731 10:44:54.775"/>
</kw>
<status status="PASS" starttime="20210731 10:44:54.767" endtime="20210731 10:44:54.776"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:44:54.778" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:44:54.777" endtime="20210731 10:44:54.788"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:44:56.289" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:44:54.788" endtime="20210731 10:44:56.289"/>
</kw>
<status status="PASS" starttime="20210731 10:44:54.776" endtime="20210731 10:44:56.290"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:56.291" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:56.291" endtime="20210731 10:44:56.291"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:56.291" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:56.291" endtime="20210731 10:44:56.291"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:56.292" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:56.292" endtime="20210731 10:44:56.292"/>
</kw>
<msg timestamp="20210731 10:44:56.292" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:56.290" endtime="20210731 10:44:56.292"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:44:56.293" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:44:56.293" endtime="20210731 10:44:56.294"/>
</kw>
<status status="PASS" starttime="20210731 10:44:56.290" endtime="20210731 10:44:56.294"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:44:56.294" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:44:56.295" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:44:56.294" endtime="20210731 10:44:56.295"/>
</kw>
<status status="PASS" starttime="20210731 10:44:56.294" endtime="20210731 10:44:56.295"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:44:56.295" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:44:56.295" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:44:56.295" endtime="20210731 10:44:56.295"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:44:56.296" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:44:56.296" endtime="20210731 10:44:56.296"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:56.296" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:56.296" endtime="20210731 10:44:56.296"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:56.296" endtime="20210731 10:44:56.297"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:56.297" endtime="20210731 10:44:56.298"/>
</kw>
<status status="PASS" starttime="20210731 10:44:56.296" endtime="20210731 10:44:56.298"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:56.298" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:56.298" endtime="20210731 10:44:56.298"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:56.298" endtime="20210731 10:44:56.299"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:56.299" endtime="20210731 10:44:56.299"/>
</kw>
<status status="PASS" starttime="20210731 10:44:56.298" endtime="20210731 10:44:56.299"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:56.299" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:56.299" endtime="20210731 10:44:56.299"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:56.300" endtime="20210731 10:44:56.300"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:56.300" endtime="20210731 10:44:56.301"/>
</kw>
<status status="PASS" starttime="20210731 10:44:56.299" endtime="20210731 10:44:56.301"/>
</iter>
<status status="PASS" starttime="20210731 10:44:56.296" endtime="20210731 10:44:56.301"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:44:56.301" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:44:56.301" endtime="20210731 10:44:56.301"/>
</kw>
<status status="PASS" starttime="20210731 10:44:56.295" endtime="20210731 10:44:56.301"/>
</kw>
<status status="PASS" starttime="20210731 10:44:54.744" endtime="20210731 10:44:56.301"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 10:44:56.304" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:44:56.302" endtime="20210731 10:44:56.304"/>
</kw>
<msg timestamp="20210731 10:44:56.305" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:44:56.302" endtime="20210731 10:44:56.305"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>first_name</arg>
<arg>The first first name is invalid with only 1 letter, the second first name is valid</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 10:44:56.306" endtime="20210731 10:44:56.306"/>
</kw>
<status status="PASS" starttime="20210731 10:44:56.305" endtime="20210731 10:44:56.306"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=firstname</arg>
<arg>field_data=${user_data}[first_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:56.308" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:44:56.307" endtime="20210731 10:44:56.308"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:56.309" level="INFO">${payload} = {'firstname': 'H Xu'}</msg>
<status status="PASS" starttime="20210731 10:44:56.308" endtime="20210731 10:44:56.309"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:56.318" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:56.319" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:56.309" endtime="20210731 10:44:56.319"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:44:56.319" endtime="20210731 10:44:56.319"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:44:56.319" endtime="20210731 10:44:56.319"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:56.309" endtime="20210731 10:44:56.319"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:56.309" endtime="20210731 10:44:56.319"/>
</for>
<status status="FAIL" starttime="20210731 10:44:56.307" endtime="20210731 10:44:56.319"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:56.306" endtime="20210731 10:44:56.319"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:56.306" endtime="20210731 10:44:56.319"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:56.323" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:56.333" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:56.333" level="INFO">${pids} = 16994
17001
17003</msg>
<status status="PASS" starttime="20210731 10:44:56.320" endtime="20210731 10:44:56.333"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:56.334" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:56.333" endtime="20210731 10:44:56.334"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:56.335" level="INFO">${pids} = ['16994', '17001', '17003']</msg>
<status status="PASS" starttime="20210731 10:44:56.334" endtime="20210731 10:44:56.335"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">16994</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:56.338" level="INFO">Running command 'kill 16994 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:56.335" endtime="20210731 10:44:56.338"/>
</kw>
<status status="PASS" starttime="20210731 10:44:56.335" endtime="20210731 10:44:56.339"/>
</iter>
<iter>
<var name="${pid}">17001</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:56.344" level="INFO">Running command 'kill 17001 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:56.339" endtime="20210731 10:44:56.345"/>
</kw>
<status status="PASS" starttime="20210731 10:44:56.339" endtime="20210731 10:44:56.345"/>
</iter>
<iter>
<var name="${pid}">17003</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:56.349" level="INFO">Running command 'kill 17003 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:56.346" endtime="20210731 10:44:56.349"/>
</kw>
<status status="PASS" starttime="20210731 10:44:56.345" endtime="20210731 10:44:56.349"/>
</iter>
<status status="PASS" starttime="20210731 10:44:56.335" endtime="20210731 10:44:56.349"/>
</for>
<status status="PASS" starttime="20210731 10:44:56.334" endtime="20210731 10:44:56.350"/>
</branch>
<status status="PASS" starttime="20210731 10:44:56.334" endtime="20210731 10:44:56.350"/>
</if>
<status status="PASS" starttime="20210731 10:44:56.320" endtime="20210731 10:44:56.350"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
firstname as such:
{
"firstname": 'H Xu'
}
Then, each request should fail with the following response body:
{
"message": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:44:54.743" endtime="20210731 10:44:56.350">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t105" name="With Each Valid Token, Updating First Name Of Each System User With Ha X Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:56.369" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:56.379" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:56.379" level="INFO">${pids} = 17032</msg>
<status status="PASS" starttime="20210731 10:44:56.352" endtime="20210731 10:44:56.379"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:56.380" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:56.379" endtime="20210731 10:44:56.380"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:56.381" level="INFO">${pids} = ['17032']</msg>
<status status="PASS" starttime="20210731 10:44:56.380" endtime="20210731 10:44:56.382"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">17032</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:56.385" level="INFO">Running command 'kill 17032 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:56.382" endtime="20210731 10:44:56.386"/>
</kw>
<status status="PASS" starttime="20210731 10:44:56.382" endtime="20210731 10:44:56.386"/>
</iter>
<status status="PASS" starttime="20210731 10:44:56.382" endtime="20210731 10:44:56.386"/>
</for>
<status status="PASS" starttime="20210731 10:44:56.380" endtime="20210731 10:44:56.386"/>
</branch>
<status status="PASS" starttime="20210731 10:44:56.380" endtime="20210731 10:44:56.386"/>
</if>
<status status="PASS" starttime="20210731 10:44:56.352" endtime="20210731 10:44:56.386"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:56.387" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:56.387" endtime="20210731 10:44:56.387"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:56.388" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:56.388" endtime="20210731 10:44:56.388"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:56.388" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:56.388" endtime="20210731 10:44:56.388"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:56.389" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:56.389" endtime="20210731 10:44:56.389"/>
</kw>
<msg timestamp="20210731 10:44:56.389" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:56.388" endtime="20210731 10:44:56.389"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:56.393" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:56.389" endtime="20210731 10:44:56.395"/>
</kw>
<status status="PASS" starttime="20210731 10:44:56.387" endtime="20210731 10:44:56.395"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:44:56.396" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:44:56.396" endtime="20210731 10:44:56.400"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:44:57.901" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:44:56.401" endtime="20210731 10:44:57.901"/>
</kw>
<status status="PASS" starttime="20210731 10:44:56.395" endtime="20210731 10:44:57.902"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:57.903" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:57.903" endtime="20210731 10:44:57.903"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:57.904" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:57.904" endtime="20210731 10:44:57.904"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:57.905" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:57.904" endtime="20210731 10:44:57.905"/>
</kw>
<msg timestamp="20210731 10:44:57.905" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:57.902" endtime="20210731 10:44:57.905"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:44:57.906" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:44:57.905" endtime="20210731 10:44:57.906"/>
</kw>
<status status="PASS" starttime="20210731 10:44:57.902" endtime="20210731 10:44:57.906"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:44:57.906" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:44:57.907" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:44:57.906" endtime="20210731 10:44:57.907"/>
</kw>
<status status="PASS" starttime="20210731 10:44:57.906" endtime="20210731 10:44:57.907"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:44:57.907" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:44:57.907" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:44:57.907" endtime="20210731 10:44:57.907"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:44:57.908" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:44:57.908" endtime="20210731 10:44:57.908"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:57.909" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:57.908" endtime="20210731 10:44:57.909"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:57.909" endtime="20210731 10:44:57.910"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:57.910" endtime="20210731 10:44:57.910"/>
</kw>
<status status="PASS" starttime="20210731 10:44:57.908" endtime="20210731 10:44:57.911"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:57.911" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:57.911" endtime="20210731 10:44:57.911"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:57.911" endtime="20210731 10:44:57.912"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:57.912" endtime="20210731 10:44:57.912"/>
</kw>
<status status="PASS" starttime="20210731 10:44:57.911" endtime="20210731 10:44:57.912"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:57.912" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:57.912" endtime="20210731 10:44:57.912"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:57.913" endtime="20210731 10:44:57.913"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:57.913" endtime="20210731 10:44:57.914"/>
</kw>
<status status="PASS" starttime="20210731 10:44:57.912" endtime="20210731 10:44:57.914"/>
</iter>
<status status="PASS" starttime="20210731 10:44:57.908" endtime="20210731 10:44:57.914"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:44:57.914" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:44:57.914" endtime="20210731 10:44:57.914"/>
</kw>
<status status="PASS" starttime="20210731 10:44:57.907" endtime="20210731 10:44:57.914"/>
</kw>
<status status="PASS" starttime="20210731 10:44:56.351" endtime="20210731 10:44:57.914"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 10:44:57.917" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:44:57.915" endtime="20210731 10:44:57.917"/>
</kw>
<msg timestamp="20210731 10:44:57.918" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:44:57.915" endtime="20210731 10:44:57.918"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>first_name</arg>
<arg>The second first name is invalid with only 1 letter, the first first name is valid</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 10:44:57.918" endtime="20210731 10:44:57.919"/>
</kw>
<status status="PASS" starttime="20210731 10:44:57.918" endtime="20210731 10:44:57.919"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=firstname</arg>
<arg>field_data=${user_data}[first_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:57.920" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:44:57.920" endtime="20210731 10:44:57.920"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:57.921" level="INFO">${payload} = {'firstname': 'Ha X'}</msg>
<status status="PASS" starttime="20210731 10:44:57.920" endtime="20210731 10:44:57.921"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:57.930" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:57.930" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:57.921" endtime="20210731 10:44:57.930"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:44:57.930" endtime="20210731 10:44:57.930"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:44:57.930" endtime="20210731 10:44:57.931"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:57.921" endtime="20210731 10:44:57.931"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:57.921" endtime="20210731 10:44:57.931"/>
</for>
<status status="FAIL" starttime="20210731 10:44:57.919" endtime="20210731 10:44:57.931"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:57.919" endtime="20210731 10:44:57.931"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:57.919" endtime="20210731 10:44:57.931"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:57.935" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:57.945" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:57.945" level="INFO">${pids} = 17055
17062
17065</msg>
<status status="PASS" starttime="20210731 10:44:57.932" endtime="20210731 10:44:57.945"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:57.946" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:57.945" endtime="20210731 10:44:57.946"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:57.947" level="INFO">${pids} = ['17055', '17062', '17065']</msg>
<status status="PASS" starttime="20210731 10:44:57.946" endtime="20210731 10:44:57.947"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">17055</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:57.950" level="INFO">Running command 'kill 17055 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:57.947" endtime="20210731 10:44:57.951"/>
</kw>
<status status="PASS" starttime="20210731 10:44:57.947" endtime="20210731 10:44:57.951"/>
</iter>
<iter>
<var name="${pid}">17062</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:57.954" level="INFO">Running command 'kill 17062 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:57.951" endtime="20210731 10:44:57.954"/>
</kw>
<status status="PASS" starttime="20210731 10:44:57.951" endtime="20210731 10:44:57.954"/>
</iter>
<iter>
<var name="${pid}">17065</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:57.958" level="INFO">Running command 'kill 17065 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:57.955" endtime="20210731 10:44:57.958"/>
</kw>
<status status="PASS" starttime="20210731 10:44:57.954" endtime="20210731 10:44:57.958"/>
</iter>
<status status="PASS" starttime="20210731 10:44:57.947" endtime="20210731 10:44:57.958"/>
</for>
<status status="PASS" starttime="20210731 10:44:57.946" endtime="20210731 10:44:57.958"/>
</branch>
<status status="PASS" starttime="20210731 10:44:57.946" endtime="20210731 10:44:57.958"/>
</if>
<status status="PASS" starttime="20210731 10:44:57.931" endtime="20210731 10:44:57.959"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
firstname as such:
{
"firstname": 'Ha X'
}
Then, each request should fail with the following response body:
{
"message": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:44:56.351" endtime="20210731 10:44:57.959">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t106" name="With Each Valid Token, Updating First Name Of Each System User With H X Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:57.964" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:57.975" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:57.975" level="INFO">${pids} = 17094</msg>
<status status="PASS" starttime="20210731 10:44:57.961" endtime="20210731 10:44:57.975"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:57.976" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:57.976" endtime="20210731 10:44:57.976"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:57.977" level="INFO">${pids} = ['17094']</msg>
<status status="PASS" starttime="20210731 10:44:57.977" endtime="20210731 10:44:57.977"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">17094</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:57.984" level="INFO">Running command 'kill 17094 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:57.978" endtime="20210731 10:44:57.984"/>
</kw>
<status status="PASS" starttime="20210731 10:44:57.978" endtime="20210731 10:44:57.984"/>
</iter>
<status status="PASS" starttime="20210731 10:44:57.978" endtime="20210731 10:44:57.984"/>
</for>
<status status="PASS" starttime="20210731 10:44:57.977" endtime="20210731 10:44:57.984"/>
</branch>
<status status="PASS" starttime="20210731 10:44:57.976" endtime="20210731 10:44:57.984"/>
</if>
<status status="PASS" starttime="20210731 10:44:57.960" endtime="20210731 10:44:57.985"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:57.986" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:57.985" endtime="20210731 10:44:57.986"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:57.986" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:57.986" endtime="20210731 10:44:57.986"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:57.987" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:57.987" endtime="20210731 10:44:57.987"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:57.987" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:57.987" endtime="20210731 10:44:57.987"/>
</kw>
<msg timestamp="20210731 10:44:57.987" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:57.986" endtime="20210731 10:44:57.987"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:57.991" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:57.988" endtime="20210731 10:44:57.992"/>
</kw>
<status status="PASS" starttime="20210731 10:44:57.985" endtime="20210731 10:44:57.993"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:44:57.995" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:44:57.994" endtime="20210731 10:44:57.999"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:44:59.500" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:44:57.999" endtime="20210731 10:44:59.501"/>
</kw>
<status status="PASS" starttime="20210731 10:44:57.993" endtime="20210731 10:44:59.501"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:59.502" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:59.502" endtime="20210731 10:44:59.502"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:59.503" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:59.502" endtime="20210731 10:44:59.503"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:59.503" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:59.503" endtime="20210731 10:44:59.503"/>
</kw>
<msg timestamp="20210731 10:44:59.504" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:59.502" endtime="20210731 10:44:59.504"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:44:59.504" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:44:59.504" endtime="20210731 10:44:59.505"/>
</kw>
<status status="PASS" starttime="20210731 10:44:59.501" endtime="20210731 10:44:59.505"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:44:59.505" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:44:59.505" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:44:59.505" endtime="20210731 10:44:59.506"/>
</kw>
<status status="PASS" starttime="20210731 10:44:59.505" endtime="20210731 10:44:59.506"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:44:59.506" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:44:59.506" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:44:59.506" endtime="20210731 10:44:59.506"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:44:59.507" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:44:59.506" endtime="20210731 10:44:59.507"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:59.507" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:59.507" endtime="20210731 10:44:59.507"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:59.508" endtime="20210731 10:44:59.509"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:59.509" endtime="20210731 10:44:59.510"/>
</kw>
<status status="PASS" starttime="20210731 10:44:59.507" endtime="20210731 10:44:59.510"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:59.510" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:59.510" endtime="20210731 10:44:59.510"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:59.510" endtime="20210731 10:44:59.511"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:59.511" endtime="20210731 10:44:59.511"/>
</kw>
<status status="PASS" starttime="20210731 10:44:59.510" endtime="20210731 10:44:59.511"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:59.512" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:44:59.512" endtime="20210731 10:44:59.512"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:44:59.512" endtime="20210731 10:44:59.513"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:44:59.513" endtime="20210731 10:44:59.513"/>
</kw>
<status status="PASS" starttime="20210731 10:44:59.511" endtime="20210731 10:44:59.513"/>
</iter>
<status status="PASS" starttime="20210731 10:44:59.507" endtime="20210731 10:44:59.513"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:44:59.514" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:44:59.513" endtime="20210731 10:44:59.514"/>
</kw>
<status status="PASS" starttime="20210731 10:44:59.506" endtime="20210731 10:44:59.514"/>
</kw>
<status status="PASS" starttime="20210731 10:44:57.960" endtime="20210731 10:44:59.514"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 10:44:59.517" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:44:59.514" endtime="20210731 10:44:59.517"/>
</kw>
<msg timestamp="20210731 10:44:59.517" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:44:59.514" endtime="20210731 10:44:59.517"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>first_name</arg>
<arg>The both first names are invalid with only 1 letter</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 10:44:59.518" endtime="20210731 10:44:59.518"/>
</kw>
<status status="PASS" starttime="20210731 10:44:59.517" endtime="20210731 10:44:59.518"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=firstname</arg>
<arg>field_data=${user_data}[first_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:59.520" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:44:59.519" endtime="20210731 10:44:59.520"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:44:59.520" level="INFO">${payload} = {'firstname': 'H X'}</msg>
<status status="PASS" starttime="20210731 10:44:59.520" endtime="20210731 10:44:59.520"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:44:59.529" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:44:59.529" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:44:59.520" endtime="20210731 10:44:59.529"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:44:59.530" endtime="20210731 10:44:59.530"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:44:59.530" endtime="20210731 10:44:59.530"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:59.520" endtime="20210731 10:44:59.530"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:59.520" endtime="20210731 10:44:59.530"/>
</for>
<status status="FAIL" starttime="20210731 10:44:59.519" endtime="20210731 10:44:59.530"/>
</kw>
<status status="FAIL" starttime="20210731 10:44:59.518" endtime="20210731 10:44:59.530"/>
</iter>
<status status="FAIL" starttime="20210731 10:44:59.518" endtime="20210731 10:44:59.531"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:59.535" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:59.546" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:59.546" level="INFO">${pids} = 17117
17124
17132</msg>
<status status="PASS" starttime="20210731 10:44:59.531" endtime="20210731 10:44:59.546"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:59.547" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:59.546" endtime="20210731 10:44:59.547"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:59.547" level="INFO">${pids} = ['17117', '17124', '17132']</msg>
<status status="PASS" starttime="20210731 10:44:59.547" endtime="20210731 10:44:59.547"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">17117</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:59.551" level="INFO">Running command 'kill 17117 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:59.548" endtime="20210731 10:44:59.551"/>
</kw>
<status status="PASS" starttime="20210731 10:44:59.548" endtime="20210731 10:44:59.551"/>
</iter>
<iter>
<var name="${pid}">17124</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:59.555" level="INFO">Running command 'kill 17124 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:59.552" endtime="20210731 10:44:59.557"/>
</kw>
<status status="PASS" starttime="20210731 10:44:59.552" endtime="20210731 10:44:59.558"/>
</iter>
<iter>
<var name="${pid}">17132</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:59.562" level="INFO">Running command 'kill 17132 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:59.558" endtime="20210731 10:44:59.562"/>
</kw>
<status status="PASS" starttime="20210731 10:44:59.558" endtime="20210731 10:44:59.562"/>
</iter>
<status status="PASS" starttime="20210731 10:44:59.547" endtime="20210731 10:44:59.562"/>
</for>
<status status="PASS" starttime="20210731 10:44:59.547" endtime="20210731 10:44:59.562"/>
</branch>
<status status="PASS" starttime="20210731 10:44:59.547" endtime="20210731 10:44:59.562"/>
</if>
<status status="PASS" starttime="20210731 10:44:59.531" endtime="20210731 10:44:59.563"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
firstname as such:
{
"firstname": 'H X'
}
Then, each request should fail with the following response body:
{
"message": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:44:57.959" endtime="20210731 10:44:59.563">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t107" name="With Each Valid Token, Updating First Name Of Each System User With Helena123 Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:44:59.568" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:44:59.578" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:44:59.578" level="INFO">${pids} = 17161</msg>
<status status="PASS" starttime="20210731 10:44:59.565" endtime="20210731 10:44:59.578"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:59.579" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:44:59.578" endtime="20210731 10:44:59.579"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:44:59.580" level="INFO">${pids} = ['17161']</msg>
<status status="PASS" starttime="20210731 10:44:59.580" endtime="20210731 10:44:59.580"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">17161</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:59.584" level="INFO">Running command 'kill 17161 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:59.580" endtime="20210731 10:44:59.584"/>
</kw>
<status status="PASS" starttime="20210731 10:44:59.580" endtime="20210731 10:44:59.584"/>
</iter>
<status status="PASS" starttime="20210731 10:44:59.580" endtime="20210731 10:44:59.585"/>
</for>
<status status="PASS" starttime="20210731 10:44:59.579" endtime="20210731 10:44:59.585"/>
</branch>
<status status="PASS" starttime="20210731 10:44:59.579" endtime="20210731 10:44:59.585"/>
</if>
<status status="PASS" starttime="20210731 10:44:59.564" endtime="20210731 10:44:59.585"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:59.586" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:59.586" endtime="20210731 10:44:59.586"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:59.587" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:44:59.586" endtime="20210731 10:44:59.587"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:44:59.587" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:44:59.587" endtime="20210731 10:44:59.587"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:44:59.588" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:59.587" endtime="20210731 10:44:59.588"/>
</kw>
<msg timestamp="20210731 10:44:59.588" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:44:59.586" endtime="20210731 10:44:59.588"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:44:59.595" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:44:59.588" endtime="20210731 10:44:59.597"/>
</kw>
<status status="PASS" starttime="20210731 10:44:59.585" endtime="20210731 10:44:59.597"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:44:59.599" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:44:59.598" endtime="20210731 10:44:59.603"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:45:01.104" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:44:59.603" endtime="20210731 10:45:01.105"/>
</kw>
<status status="PASS" starttime="20210731 10:44:59.597" endtime="20210731 10:45:01.105"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:01.106" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:01.106" endtime="20210731 10:45:01.106"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:01.107" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:01.106" endtime="20210731 10:45:01.107"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:01.107" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:01.107" endtime="20210731 10:45:01.107"/>
</kw>
<msg timestamp="20210731 10:45:01.108" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:01.106" endtime="20210731 10:45:01.108"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:45:01.108" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:45:01.108" endtime="20210731 10:45:01.109"/>
</kw>
<status status="PASS" starttime="20210731 10:45:01.105" endtime="20210731 10:45:01.109"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:45:01.110" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:45:01.110" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:45:01.110" endtime="20210731 10:45:01.110"/>
</kw>
<status status="PASS" starttime="20210731 10:45:01.109" endtime="20210731 10:45:01.110"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:45:01.111" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:45:01.112" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:45:01.111" endtime="20210731 10:45:01.112"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:45:01.112" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:45:01.112" endtime="20210731 10:45:01.112"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:01.112" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:01.112" endtime="20210731 10:45:01.112"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:01.113" endtime="20210731 10:45:01.113"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:01.113" endtime="20210731 10:45:01.114"/>
</kw>
<status status="PASS" starttime="20210731 10:45:01.112" endtime="20210731 10:45:01.114"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:01.114" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:01.114" endtime="20210731 10:45:01.114"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:01.115" endtime="20210731 10:45:01.115"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:01.115" endtime="20210731 10:45:01.116"/>
</kw>
<status status="PASS" starttime="20210731 10:45:01.114" endtime="20210731 10:45:01.116"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:01.116" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:01.116" endtime="20210731 10:45:01.116"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:01.116" endtime="20210731 10:45:01.117"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:01.117" endtime="20210731 10:45:01.117"/>
</kw>
<status status="PASS" starttime="20210731 10:45:01.116" endtime="20210731 10:45:01.117"/>
</iter>
<status status="PASS" starttime="20210731 10:45:01.112" endtime="20210731 10:45:01.117"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:45:01.118" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:45:01.117" endtime="20210731 10:45:01.118"/>
</kw>
<status status="PASS" starttime="20210731 10:45:01.111" endtime="20210731 10:45:01.118"/>
</kw>
<status status="PASS" starttime="20210731 10:44:59.564" endtime="20210731 10:45:01.118"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 10:45:01.121" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:45:01.118" endtime="20210731 10:45:01.121"/>
</kw>
<msg timestamp="20210731 10:45:01.121" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:45:01.118" endtime="20210731 10:45:01.121"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>first_name</arg>
<arg>First name does contain numbers, which makes it invalid</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 10:45:01.121" endtime="20210731 10:45:01.122"/>
</kw>
<status status="PASS" starttime="20210731 10:45:01.121" endtime="20210731 10:45:01.122"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=firstname</arg>
<arg>field_data=${user_data}[first_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:01.123" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:45:01.123" endtime="20210731 10:45:01.123"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:01.124" level="INFO">${payload} = {'firstname': 'Helena123'}</msg>
<status status="PASS" starttime="20210731 10:45:01.123" endtime="20210731 10:45:01.124"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:45:01.134" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:45:01.134" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:45:01.124" endtime="20210731 10:45:01.134"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:45:01.134" endtime="20210731 10:45:01.134"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:45:01.134" endtime="20210731 10:45:01.134"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:01.124" endtime="20210731 10:45:01.134"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:01.124" endtime="20210731 10:45:01.134"/>
</for>
<status status="FAIL" starttime="20210731 10:45:01.122" endtime="20210731 10:45:01.135"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:01.122" endtime="20210731 10:45:01.135"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:01.122" endtime="20210731 10:45:01.135"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:01.138" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:01.150" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:01.150" level="INFO">${pids} = 17184
17191
17193</msg>
<status status="PASS" starttime="20210731 10:45:01.135" endtime="20210731 10:45:01.150"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:01.151" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:01.151" endtime="20210731 10:45:01.151"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:01.152" level="INFO">${pids} = ['17184', '17191', '17193']</msg>
<status status="PASS" starttime="20210731 10:45:01.152" endtime="20210731 10:45:01.152"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">17184</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:01.156" level="INFO">Running command 'kill 17184 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:01.152" endtime="20210731 10:45:01.156"/>
</kw>
<status status="PASS" starttime="20210731 10:45:01.152" endtime="20210731 10:45:01.156"/>
</iter>
<iter>
<var name="${pid}">17191</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:01.160" level="INFO">Running command 'kill 17191 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:01.157" endtime="20210731 10:45:01.161"/>
</kw>
<status status="PASS" starttime="20210731 10:45:01.156" endtime="20210731 10:45:01.161"/>
</iter>
<iter>
<var name="${pid}">17193</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:01.165" level="INFO">Running command 'kill 17193 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:01.162" endtime="20210731 10:45:01.166"/>
</kw>
<status status="PASS" starttime="20210731 10:45:01.161" endtime="20210731 10:45:01.166"/>
</iter>
<status status="PASS" starttime="20210731 10:45:01.152" endtime="20210731 10:45:01.166"/>
</for>
<status status="PASS" starttime="20210731 10:45:01.151" endtime="20210731 10:45:01.166"/>
</branch>
<status status="PASS" starttime="20210731 10:45:01.151" endtime="20210731 10:45:01.166"/>
</if>
<status status="PASS" starttime="20210731 10:45:01.135" endtime="20210731 10:45:01.166"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
firstname as such:
{
"firstname": 'Helena123'
}
Then, each request should fail with the following response body:
{
"message": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:44:59.563" endtime="20210731 10:45:01.166">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t108" name="With Each Valid Token, Updating First Name Of Each System User With Helena!.? Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:01.172" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:01.195" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:01.195" level="INFO">${pids} = 17222</msg>
<status status="PASS" starttime="20210731 10:45:01.168" endtime="20210731 10:45:01.195"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:01.196" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:01.195" endtime="20210731 10:45:01.196"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:01.197" level="INFO">${pids} = ['17222']</msg>
<status status="PASS" starttime="20210731 10:45:01.196" endtime="20210731 10:45:01.197"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">17222</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:01.200" level="INFO">Running command 'kill 17222 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:01.197" endtime="20210731 10:45:01.201"/>
</kw>
<status status="PASS" starttime="20210731 10:45:01.197" endtime="20210731 10:45:01.201"/>
</iter>
<status status="PASS" starttime="20210731 10:45:01.197" endtime="20210731 10:45:01.201"/>
</for>
<status status="PASS" starttime="20210731 10:45:01.196" endtime="20210731 10:45:01.201"/>
</branch>
<status status="PASS" starttime="20210731 10:45:01.196" endtime="20210731 10:45:01.201"/>
</if>
<status status="PASS" starttime="20210731 10:45:01.168" endtime="20210731 10:45:01.202"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:01.203" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:01.203" endtime="20210731 10:45:01.203"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:01.204" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:01.204" endtime="20210731 10:45:01.204"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:01.204" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:01.204" endtime="20210731 10:45:01.204"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:01.205" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:01.204" endtime="20210731 10:45:01.205"/>
</kw>
<msg timestamp="20210731 10:45:01.205" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:01.203" endtime="20210731 10:45:01.205"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:01.209" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:01.205" endtime="20210731 10:45:01.212"/>
</kw>
<status status="PASS" starttime="20210731 10:45:01.202" endtime="20210731 10:45:01.212"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:45:01.213" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:45:01.213" endtime="20210731 10:45:01.217"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:45:02.719" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:45:01.218" endtime="20210731 10:45:02.719"/>
</kw>
<status status="PASS" starttime="20210731 10:45:01.212" endtime="20210731 10:45:02.719"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:02.720" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:02.720" endtime="20210731 10:45:02.720"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:02.721" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:02.720" endtime="20210731 10:45:02.721"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:02.721" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:02.721" endtime="20210731 10:45:02.721"/>
</kw>
<msg timestamp="20210731 10:45:02.721" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:02.720" endtime="20210731 10:45:02.721"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:45:02.722" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:45:02.721" endtime="20210731 10:45:02.722"/>
</kw>
<status status="PASS" starttime="20210731 10:45:02.719" endtime="20210731 10:45:02.723"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:45:02.723" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:45:02.723" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:45:02.723" endtime="20210731 10:45:02.723"/>
</kw>
<status status="PASS" starttime="20210731 10:45:02.723" endtime="20210731 10:45:02.724"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:45:02.724" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:45:02.724" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:45:02.724" endtime="20210731 10:45:02.724"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:45:02.726" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:45:02.724" endtime="20210731 10:45:02.726"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:02.726" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:02.726" endtime="20210731 10:45:02.726"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:02.726" endtime="20210731 10:45:02.727"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:02.727" endtime="20210731 10:45:02.728"/>
</kw>
<status status="PASS" starttime="20210731 10:45:02.726" endtime="20210731 10:45:02.728"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:02.728" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:02.728" endtime="20210731 10:45:02.728"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:02.728" endtime="20210731 10:45:02.729"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:02.729" endtime="20210731 10:45:02.730"/>
</kw>
<status status="PASS" starttime="20210731 10:45:02.728" endtime="20210731 10:45:02.730"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:02.730" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:02.730" endtime="20210731 10:45:02.730"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:02.730" endtime="20210731 10:45:02.731"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:02.731" endtime="20210731 10:45:02.731"/>
</kw>
<status status="PASS" starttime="20210731 10:45:02.730" endtime="20210731 10:45:02.731"/>
</iter>
<status status="PASS" starttime="20210731 10:45:02.726" endtime="20210731 10:45:02.731"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:45:02.732" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:45:02.731" endtime="20210731 10:45:02.732"/>
</kw>
<status status="PASS" starttime="20210731 10:45:02.724" endtime="20210731 10:45:02.732"/>
</kw>
<status status="PASS" starttime="20210731 10:45:01.168" endtime="20210731 10:45:02.732"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 10:45:02.735" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:45:02.732" endtime="20210731 10:45:02.735"/>
</kw>
<msg timestamp="20210731 10:45:02.735" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:45:02.732" endtime="20210731 10:45:02.735"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>first_name</arg>
<arg>First name does contain non alphanumeric characters, which makes it invalid</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 10:45:02.736" endtime="20210731 10:45:02.737"/>
</kw>
<status status="PASS" starttime="20210731 10:45:02.736" endtime="20210731 10:45:02.737"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=firstname</arg>
<arg>field_data=${user_data}[first_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:02.740" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:45:02.739" endtime="20210731 10:45:02.740"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:02.740" level="INFO">${payload} = {'firstname': 'Helena!.?'}</msg>
<status status="PASS" starttime="20210731 10:45:02.740" endtime="20210731 10:45:02.740"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:45:02.750" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:45:02.750" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:45:02.741" endtime="20210731 10:45:02.751"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:45:02.751" endtime="20210731 10:45:02.751"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:45:02.752" endtime="20210731 10:45:02.752"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:02.741" endtime="20210731 10:45:02.752"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:02.740" endtime="20210731 10:45:02.752"/>
</for>
<status status="FAIL" starttime="20210731 10:45:02.737" endtime="20210731 10:45:02.752"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:02.737" endtime="20210731 10:45:02.752"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:02.737" endtime="20210731 10:45:02.752"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:02.756" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:02.767" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:02.767" level="INFO">${pids} = 17245
17252
17258</msg>
<status status="PASS" starttime="20210731 10:45:02.753" endtime="20210731 10:45:02.767"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:02.768" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:02.767" endtime="20210731 10:45:02.768"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:02.769" level="INFO">${pids} = ['17245', '17252', '17258']</msg>
<status status="PASS" starttime="20210731 10:45:02.768" endtime="20210731 10:45:02.769"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">17245</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:02.773" level="INFO">Running command 'kill 17245 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:02.769" endtime="20210731 10:45:02.773"/>
</kw>
<status status="PASS" starttime="20210731 10:45:02.769" endtime="20210731 10:45:02.773"/>
</iter>
<iter>
<var name="${pid}">17252</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:02.778" level="INFO">Running command 'kill 17252 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:02.774" endtime="20210731 10:45:02.782"/>
</kw>
<status status="PASS" starttime="20210731 10:45:02.773" endtime="20210731 10:45:02.782"/>
</iter>
<iter>
<var name="${pid}">17258</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:02.786" level="INFO">Running command 'kill 17258 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:02.783" endtime="20210731 10:45:02.786"/>
</kw>
<status status="PASS" starttime="20210731 10:45:02.783" endtime="20210731 10:45:02.787"/>
</iter>
<status status="PASS" starttime="20210731 10:45:02.769" endtime="20210731 10:45:02.787"/>
</for>
<status status="PASS" starttime="20210731 10:45:02.768" endtime="20210731 10:45:02.787"/>
</branch>
<status status="PASS" starttime="20210731 10:45:02.768" endtime="20210731 10:45:02.787"/>
</if>
<status status="PASS" starttime="20210731 10:45:02.753" endtime="20210731 10:45:02.787"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
firstname as such:
{
"firstname": 'Helena!.?'
}
Then, each request should fail with the following response body:
{
"message": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:45:01.167" endtime="20210731 10:45:02.787">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t109" name="With Each Valid Token, Updating First Name Of Each System User With Helena Margaretha Results In Success">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:02.796" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:02.806" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:02.806" level="INFO">${pids} = 17287</msg>
<status status="PASS" starttime="20210731 10:45:02.789" endtime="20210731 10:45:02.806"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:02.808" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:02.807" endtime="20210731 10:45:02.808"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:02.809" level="INFO">${pids} = ['17287']</msg>
<status status="PASS" starttime="20210731 10:45:02.808" endtime="20210731 10:45:02.809"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">17287</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:02.814" level="INFO">Running command 'kill 17287 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:02.810" endtime="20210731 10:45:02.814"/>
</kw>
<status status="PASS" starttime="20210731 10:45:02.810" endtime="20210731 10:45:02.815"/>
</iter>
<status status="PASS" starttime="20210731 10:45:02.810" endtime="20210731 10:45:02.815"/>
</for>
<status status="PASS" starttime="20210731 10:45:02.808" endtime="20210731 10:45:02.815"/>
</branch>
<status status="PASS" starttime="20210731 10:45:02.808" endtime="20210731 10:45:02.815"/>
</if>
<status status="PASS" starttime="20210731 10:45:02.789" endtime="20210731 10:45:02.815"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:02.816" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:02.816" endtime="20210731 10:45:02.816"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:02.817" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:02.817" endtime="20210731 10:45:02.817"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:02.817" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:02.817" endtime="20210731 10:45:02.817"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:02.818" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:02.818" endtime="20210731 10:45:02.818"/>
</kw>
<msg timestamp="20210731 10:45:02.818" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:02.816" endtime="20210731 10:45:02.818"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:02.822" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:02.819" endtime="20210731 10:45:02.824"/>
</kw>
<status status="PASS" starttime="20210731 10:45:02.815" endtime="20210731 10:45:02.825"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:45:02.826" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:45:02.826" endtime="20210731 10:45:02.830"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:45:04.332" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:45:02.831" endtime="20210731 10:45:04.332"/>
</kw>
<status status="PASS" starttime="20210731 10:45:02.825" endtime="20210731 10:45:04.332"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:04.334" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:04.333" endtime="20210731 10:45:04.334"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:04.334" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:04.334" endtime="20210731 10:45:04.334"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:04.335" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:04.335" endtime="20210731 10:45:04.335"/>
</kw>
<msg timestamp="20210731 10:45:04.335" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:04.333" endtime="20210731 10:45:04.335"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:45:04.336" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:45:04.335" endtime="20210731 10:45:04.336"/>
</kw>
<status status="PASS" starttime="20210731 10:45:04.332" endtime="20210731 10:45:04.336"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:45:04.337" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:45:04.337" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:45:04.337" endtime="20210731 10:45:04.337"/>
</kw>
<status status="PASS" starttime="20210731 10:45:04.337" endtime="20210731 10:45:04.338"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:45:04.339" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:45:04.340" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:45:04.338" endtime="20210731 10:45:04.340"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:45:04.340" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:45:04.340" endtime="20210731 10:45:04.340"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:04.341" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:04.341" endtime="20210731 10:45:04.341"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:04.342" endtime="20210731 10:45:04.346"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:04.346" endtime="20210731 10:45:04.347"/>
</kw>
<status status="PASS" starttime="20210731 10:45:04.340" endtime="20210731 10:45:04.347"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:04.347" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:04.347" endtime="20210731 10:45:04.347"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:04.348" endtime="20210731 10:45:04.348"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:04.349" endtime="20210731 10:45:04.349"/>
</kw>
<status status="PASS" starttime="20210731 10:45:04.347" endtime="20210731 10:45:04.349"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:04.349" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:04.349" endtime="20210731 10:45:04.349"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:04.349" endtime="20210731 10:45:04.350"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:04.350" endtime="20210731 10:45:04.351"/>
</kw>
<status status="PASS" starttime="20210731 10:45:04.349" endtime="20210731 10:45:04.351"/>
</iter>
<status status="PASS" starttime="20210731 10:45:04.340" endtime="20210731 10:45:04.351"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:45:04.351" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:45:04.351" endtime="20210731 10:45:04.351"/>
</kw>
<status status="PASS" starttime="20210731 10:45:04.338" endtime="20210731 10:45:04.351"/>
</kw>
<status status="PASS" starttime="20210731 10:45:02.788" endtime="20210731 10:45:04.351"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 10:45:04.355" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:45:04.352" endtime="20210731 10:45:04.355"/>
</kw>
<msg timestamp="20210731 10:45:04.356" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:45:04.352" endtime="20210731 10:45:04.356"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>first_name</arg>
<arg>Two valid first names seperated by a single space character</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 10:45:04.357" endtime="20210731 10:45:04.358"/>
</kw>
<status status="PASS" starttime="20210731 10:45:04.356" endtime="20210731 10:45:04.358"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=firstname</arg>
<arg>field_data=${user_data}[first_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:04.361" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:45:04.360" endtime="20210731 10:45:04.361"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:04.361" level="INFO">${payload} = {'firstname': 'Helena Margaretha'}</msg>
<status status="PASS" starttime="20210731 10:45:04.361" endtime="20210731 10:45:04.361"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:45:04.379" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:45:04.380" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:45:04.362" endtime="20210731 10:45:04.380"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:45:04.380" endtime="20210731 10:45:04.380"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:45:04.380" endtime="20210731 10:45:04.380"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:04.361" endtime="20210731 10:45:04.380"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:04.361" endtime="20210731 10:45:04.380"/>
</for>
<status status="FAIL" starttime="20210731 10:45:04.359" endtime="20210731 10:45:04.380"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:04.359" endtime="20210731 10:45:04.380"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:04.359" endtime="20210731 10:45:04.380"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:04.388" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:04.405" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:04.405" level="INFO">${pids} = 17310
17317
17332</msg>
<status status="PASS" starttime="20210731 10:45:04.382" endtime="20210731 10:45:04.405"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:04.406" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:04.406" endtime="20210731 10:45:04.406"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:04.407" level="INFO">${pids} = ['17310', '17317', '17332']</msg>
<status status="PASS" starttime="20210731 10:45:04.407" endtime="20210731 10:45:04.407"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">17310</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:04.413" level="INFO">Running command 'kill 17310 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:04.408" endtime="20210731 10:45:04.413"/>
</kw>
<status status="PASS" starttime="20210731 10:45:04.408" endtime="20210731 10:45:04.413"/>
</iter>
<iter>
<var name="${pid}">17317</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:04.421" level="INFO">Running command 'kill 17317 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:04.414" endtime="20210731 10:45:04.422"/>
</kw>
<status status="PASS" starttime="20210731 10:45:04.414" endtime="20210731 10:45:04.422"/>
</iter>
<iter>
<var name="${pid}">17332</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:04.429" level="INFO">Running command 'kill 17332 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:04.423" endtime="20210731 10:45:04.429"/>
</kw>
<status status="PASS" starttime="20210731 10:45:04.423" endtime="20210731 10:45:04.430"/>
</iter>
<status status="PASS" starttime="20210731 10:45:04.407" endtime="20210731 10:45:04.430"/>
</for>
<status status="PASS" starttime="20210731 10:45:04.407" endtime="20210731 10:45:04.430"/>
</branch>
<status status="PASS" starttime="20210731 10:45:04.407" endtime="20210731 10:45:04.430"/>
</if>
<status status="PASS" starttime="20210731 10:45:04.381" endtime="20210731 10:45:04.430"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
firstname as such:
{
"firstname": 'Helena Margaretha'
}
Then, each request should succeed with the following response body:
{
"message": "Updated",
"status": "SUCCESS"
}
This test not only verifies message and status but also verifies that the &lt;username&gt;'s data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:45:02.788" endtime="20210731 10:45:04.430">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t110" name="With Each Valid Token, Updating First Name Of Each System User With Helena      Margaretha Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:04.438" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:04.455" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:04.455" level="INFO">${pids} = 17363</msg>
<status status="PASS" starttime="20210731 10:45:04.433" endtime="20210731 10:45:04.455"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:04.456" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:04.456" endtime="20210731 10:45:04.456"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:04.457" level="INFO">${pids} = ['17363']</msg>
<status status="PASS" starttime="20210731 10:45:04.457" endtime="20210731 10:45:04.457"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">17363</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:04.464" level="INFO">Running command 'kill 17363 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:04.458" endtime="20210731 10:45:04.464"/>
</kw>
<status status="PASS" starttime="20210731 10:45:04.458" endtime="20210731 10:45:04.464"/>
</iter>
<status status="PASS" starttime="20210731 10:45:04.458" endtime="20210731 10:45:04.464"/>
</for>
<status status="PASS" starttime="20210731 10:45:04.457" endtime="20210731 10:45:04.465"/>
</branch>
<status status="PASS" starttime="20210731 10:45:04.457" endtime="20210731 10:45:04.465"/>
</if>
<status status="PASS" starttime="20210731 10:45:04.433" endtime="20210731 10:45:04.465"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:04.466" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:04.466" endtime="20210731 10:45:04.466"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:04.467" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:04.467" endtime="20210731 10:45:04.467"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:04.468" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:04.467" endtime="20210731 10:45:04.468"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:04.468" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:04.468" endtime="20210731 10:45:04.468"/>
</kw>
<msg timestamp="20210731 10:45:04.468" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:04.467" endtime="20210731 10:45:04.468"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:04.480" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:04.469" endtime="20210731 10:45:04.483"/>
</kw>
<status status="PASS" starttime="20210731 10:45:04.465" endtime="20210731 10:45:04.483"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:45:04.485" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:45:04.484" endtime="20210731 10:45:04.492"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:45:05.994" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:45:04.492" endtime="20210731 10:45:05.994"/>
</kw>
<status status="PASS" starttime="20210731 10:45:04.484" endtime="20210731 10:45:05.994"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:05.995" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:05.995" endtime="20210731 10:45:05.995"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:05.995" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:05.995" endtime="20210731 10:45:05.995"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:05.996" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:05.995" endtime="20210731 10:45:05.996"/>
</kw>
<msg timestamp="20210731 10:45:05.996" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:05.994" endtime="20210731 10:45:05.996"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:45:05.997" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:45:05.996" endtime="20210731 10:45:05.998"/>
</kw>
<status status="PASS" starttime="20210731 10:45:05.994" endtime="20210731 10:45:05.998"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:45:05.998" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:45:05.998" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:45:05.998" endtime="20210731 10:45:05.999"/>
</kw>
<status status="PASS" starttime="20210731 10:45:05.998" endtime="20210731 10:45:05.999"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:45:05.999" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:45:06.000" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:45:05.999" endtime="20210731 10:45:06.000"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:45:06.000" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:45:06.000" endtime="20210731 10:45:06.000"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:06.001" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:06.001" endtime="20210731 10:45:06.001"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:06.001" endtime="20210731 10:45:06.002"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:06.003" endtime="20210731 10:45:06.003"/>
</kw>
<status status="PASS" starttime="20210731 10:45:06.001" endtime="20210731 10:45:06.003"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:06.004" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:06.003" endtime="20210731 10:45:06.004"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:06.004" endtime="20210731 10:45:06.004"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:06.004" endtime="20210731 10:45:06.005"/>
</kw>
<status status="PASS" starttime="20210731 10:45:06.003" endtime="20210731 10:45:06.005"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:06.005" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:06.005" endtime="20210731 10:45:06.005"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:06.005" endtime="20210731 10:45:06.006"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:06.006" endtime="20210731 10:45:06.006"/>
</kw>
<status status="PASS" starttime="20210731 10:45:06.005" endtime="20210731 10:45:06.006"/>
</iter>
<status status="PASS" starttime="20210731 10:45:06.000" endtime="20210731 10:45:06.006"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:45:06.007" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:45:06.007" endtime="20210731 10:45:06.007"/>
</kw>
<status status="PASS" starttime="20210731 10:45:05.999" endtime="20210731 10:45:06.007"/>
</kw>
<status status="PASS" starttime="20210731 10:45:04.432" endtime="20210731 10:45:06.007"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 10:45:06.011" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:45:06.008" endtime="20210731 10:45:06.011"/>
</kw>
<msg timestamp="20210731 10:45:06.012" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:45:06.007" endtime="20210731 10:45:06.013"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>first_name</arg>
<arg>Two valid first names seperated by multiple space characters making it invalid</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 10:45:06.013" endtime="20210731 10:45:06.014"/>
</kw>
<status status="PASS" starttime="20210731 10:45:06.013" endtime="20210731 10:45:06.014"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=firstname</arg>
<arg>field_data=${user_data}[first_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:06.015" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:45:06.015" endtime="20210731 10:45:06.015"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:06.016" level="INFO">${payload} = {'firstname': 'Helena      Margaretha'}</msg>
<status status="PASS" starttime="20210731 10:45:06.016" endtime="20210731 10:45:06.016"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:45:06.026" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:45:06.026" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:45:06.017" endtime="20210731 10:45:06.026"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:45:06.027" endtime="20210731 10:45:06.027"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:45:06.027" endtime="20210731 10:45:06.027"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:06.017" endtime="20210731 10:45:06.027"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:06.016" endtime="20210731 10:45:06.027"/>
</for>
<status status="FAIL" starttime="20210731 10:45:06.014" endtime="20210731 10:45:06.027"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:06.014" endtime="20210731 10:45:06.027"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:06.014" endtime="20210731 10:45:06.027"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:06.031" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:06.042" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:06.042" level="INFO">${pids} = 17386
17393
17395</msg>
<status status="PASS" starttime="20210731 10:45:06.028" endtime="20210731 10:45:06.042"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:06.043" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:06.042" endtime="20210731 10:45:06.043"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:06.044" level="INFO">${pids} = ['17386', '17393', '17395']</msg>
<status status="PASS" starttime="20210731 10:45:06.044" endtime="20210731 10:45:06.044"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">17386</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:06.048" level="INFO">Running command 'kill 17386 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:06.044" endtime="20210731 10:45:06.048"/>
</kw>
<status status="PASS" starttime="20210731 10:45:06.044" endtime="20210731 10:45:06.048"/>
</iter>
<iter>
<var name="${pid}">17393</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:06.052" level="INFO">Running command 'kill 17393 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:06.049" endtime="20210731 10:45:06.053"/>
</kw>
<status status="PASS" starttime="20210731 10:45:06.048" endtime="20210731 10:45:06.053"/>
</iter>
<iter>
<var name="${pid}">17395</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:06.057" level="INFO">Running command 'kill 17395 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:06.053" endtime="20210731 10:45:06.057"/>
</kw>
<status status="PASS" starttime="20210731 10:45:06.053" endtime="20210731 10:45:06.057"/>
</iter>
<status status="PASS" starttime="20210731 10:45:06.044" endtime="20210731 10:45:06.057"/>
</for>
<status status="PASS" starttime="20210731 10:45:06.043" endtime="20210731 10:45:06.057"/>
</branch>
<status status="PASS" starttime="20210731 10:45:06.043" endtime="20210731 10:45:06.057"/>
</if>
<status status="PASS" starttime="20210731 10:45:06.027" endtime="20210731 10:45:06.058"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
firstname as such:
{
"firstname": 'Helena Margaretha'
}
Then, each request should fail with the following response body:
{
"message": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:45:04.431" endtime="20210731 10:45:06.058">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t111" name="With Each Valid Token, Updating Last Name Of Each System User With '' Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:06.063" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:06.074" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:06.074" level="INFO">${pids} = 17424</msg>
<status status="PASS" starttime="20210731 10:45:06.060" endtime="20210731 10:45:06.074"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:06.076" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:06.075" endtime="20210731 10:45:06.076"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:06.077" level="INFO">${pids} = ['17424']</msg>
<status status="PASS" starttime="20210731 10:45:06.076" endtime="20210731 10:45:06.077"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">17424</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:06.082" level="INFO">Running command 'kill 17424 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:06.078" endtime="20210731 10:45:06.082"/>
</kw>
<status status="PASS" starttime="20210731 10:45:06.077" endtime="20210731 10:45:06.082"/>
</iter>
<status status="PASS" starttime="20210731 10:45:06.077" endtime="20210731 10:45:06.082"/>
</for>
<status status="PASS" starttime="20210731 10:45:06.076" endtime="20210731 10:45:06.083"/>
</branch>
<status status="PASS" starttime="20210731 10:45:06.076" endtime="20210731 10:45:06.083"/>
</if>
<status status="PASS" starttime="20210731 10:45:06.060" endtime="20210731 10:45:06.083"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:06.084" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:06.084" endtime="20210731 10:45:06.084"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:06.085" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:06.084" endtime="20210731 10:45:06.085"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:06.085" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:06.085" endtime="20210731 10:45:06.085"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:06.085" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:06.085" endtime="20210731 10:45:06.085"/>
</kw>
<msg timestamp="20210731 10:45:06.086" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:06.084" endtime="20210731 10:45:06.086"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:06.089" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:06.086" endtime="20210731 10:45:06.091"/>
</kw>
<status status="PASS" starttime="20210731 10:45:06.083" endtime="20210731 10:45:06.091"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:45:06.093" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:45:06.092" endtime="20210731 10:45:06.097"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:45:07.599" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:45:06.097" endtime="20210731 10:45:07.599"/>
</kw>
<status status="PASS" starttime="20210731 10:45:06.092" endtime="20210731 10:45:07.600"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:07.601" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:07.601" endtime="20210731 10:45:07.601"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:07.602" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:07.601" endtime="20210731 10:45:07.602"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:07.602" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:07.602" endtime="20210731 10:45:07.602"/>
</kw>
<msg timestamp="20210731 10:45:07.603" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:07.600" endtime="20210731 10:45:07.603"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:45:07.604" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:45:07.603" endtime="20210731 10:45:07.604"/>
</kw>
<status status="PASS" starttime="20210731 10:45:07.600" endtime="20210731 10:45:07.604"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:45:07.605" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:45:07.605" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:45:07.605" endtime="20210731 10:45:07.606"/>
</kw>
<status status="PASS" starttime="20210731 10:45:07.605" endtime="20210731 10:45:07.606"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:45:07.606" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:45:07.606" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:45:07.606" endtime="20210731 10:45:07.606"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:45:07.607" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:45:07.607" endtime="20210731 10:45:07.607"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:07.608" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:07.607" endtime="20210731 10:45:07.608"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:07.608" endtime="20210731 10:45:07.609"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:07.609" endtime="20210731 10:45:07.609"/>
</kw>
<status status="PASS" starttime="20210731 10:45:07.607" endtime="20210731 10:45:07.609"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:07.610" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:07.610" endtime="20210731 10:45:07.610"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:07.610" endtime="20210731 10:45:07.611"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:07.611" endtime="20210731 10:45:07.611"/>
</kw>
<status status="PASS" starttime="20210731 10:45:07.610" endtime="20210731 10:45:07.611"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:07.612" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:07.611" endtime="20210731 10:45:07.612"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:07.612" endtime="20210731 10:45:07.613"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:07.613" endtime="20210731 10:45:07.613"/>
</kw>
<status status="PASS" starttime="20210731 10:45:07.611" endtime="20210731 10:45:07.613"/>
</iter>
<status status="PASS" starttime="20210731 10:45:07.607" endtime="20210731 10:45:07.613"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:45:07.614" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:45:07.613" endtime="20210731 10:45:07.614"/>
</kw>
<status status="PASS" starttime="20210731 10:45:07.606" endtime="20210731 10:45:07.614"/>
</kw>
<status status="PASS" starttime="20210731 10:45:06.059" endtime="20210731 10:45:07.614"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 10:45:07.618" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:45:07.615" endtime="20210731 10:45:07.618"/>
</kw>
<msg timestamp="20210731 10:45:07.618" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:45:07.615" endtime="20210731 10:45:07.618"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>last_name</arg>
<arg>An empty last name</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 10:45:07.619" endtime="20210731 10:45:07.619"/>
</kw>
<status status="PASS" starttime="20210731 10:45:07.618" endtime="20210731 10:45:07.619"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=lastname</arg>
<arg>field_data=${user_data}[last_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:07.621" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:45:07.620" endtime="20210731 10:45:07.621"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:07.621" level="INFO">${payload} = {'lastname': ''}</msg>
<status status="PASS" starttime="20210731 10:45:07.621" endtime="20210731 10:45:07.621"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:45:07.631" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:45:07.631" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:45:07.622" endtime="20210731 10:45:07.632"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:45:07.632" endtime="20210731 10:45:07.632"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:45:07.632" endtime="20210731 10:45:07.632"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:07.622" endtime="20210731 10:45:07.632"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:07.621" endtime="20210731 10:45:07.632"/>
</for>
<status status="FAIL" starttime="20210731 10:45:07.620" endtime="20210731 10:45:07.632"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:07.620" endtime="20210731 10:45:07.632"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:07.619" endtime="20210731 10:45:07.632"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:07.636" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:07.647" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:07.647" level="INFO">${pids} = 17447
17454
17457</msg>
<status status="PASS" starttime="20210731 10:45:07.633" endtime="20210731 10:45:07.647"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:07.648" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:07.647" endtime="20210731 10:45:07.648"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:07.648" level="INFO">${pids} = ['17447', '17454', '17457']</msg>
<status status="PASS" starttime="20210731 10:45:07.648" endtime="20210731 10:45:07.648"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">17447</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:07.653" level="INFO">Running command 'kill 17447 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:07.649" endtime="20210731 10:45:07.654"/>
</kw>
<status status="PASS" starttime="20210731 10:45:07.649" endtime="20210731 10:45:07.654"/>
</iter>
<iter>
<var name="${pid}">17454</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:07.657" level="INFO">Running command 'kill 17454 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:07.655" endtime="20210731 10:45:07.658"/>
</kw>
<status status="PASS" starttime="20210731 10:45:07.654" endtime="20210731 10:45:07.658"/>
</iter>
<iter>
<var name="${pid}">17457</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:07.662" level="INFO">Running command 'kill 17457 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:07.658" endtime="20210731 10:45:07.663"/>
</kw>
<status status="PASS" starttime="20210731 10:45:07.658" endtime="20210731 10:45:07.663"/>
</iter>
<status status="PASS" starttime="20210731 10:45:07.648" endtime="20210731 10:45:07.663"/>
</for>
<status status="PASS" starttime="20210731 10:45:07.648" endtime="20210731 10:45:07.663"/>
</branch>
<status status="PASS" starttime="20210731 10:45:07.648" endtime="20210731 10:45:07.663"/>
</if>
<status status="PASS" starttime="20210731 10:45:07.633" endtime="20210731 10:45:07.663"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
lastname as such:
{
"lastname": ''
}
Then, each request should fail with the following response body:
{
"message": "Each last name must contain only characters from the set [a-zA-Z]. Last names must be seperated by a a single space. Last names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:45:06.058" endtime="20210731 10:45:07.664">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t112" name="With Each Valid Token, Updating Last Name Of Each System User With Cuzdan Results In Success">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:07.670" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:07.685" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:07.685" level="INFO">${pids} = 17486</msg>
<status status="PASS" starttime="20210731 10:45:07.666" endtime="20210731 10:45:07.685"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:07.686" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:07.685" endtime="20210731 10:45:07.686"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:07.687" level="INFO">${pids} = ['17486']</msg>
<status status="PASS" starttime="20210731 10:45:07.686" endtime="20210731 10:45:07.687"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">17486</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:07.692" level="INFO">Running command 'kill 17486 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:07.687" endtime="20210731 10:45:07.693"/>
</kw>
<status status="PASS" starttime="20210731 10:45:07.687" endtime="20210731 10:45:07.693"/>
</iter>
<status status="PASS" starttime="20210731 10:45:07.687" endtime="20210731 10:45:07.693"/>
</for>
<status status="PASS" starttime="20210731 10:45:07.686" endtime="20210731 10:45:07.693"/>
</branch>
<status status="PASS" starttime="20210731 10:45:07.686" endtime="20210731 10:45:07.693"/>
</if>
<status status="PASS" starttime="20210731 10:45:07.665" endtime="20210731 10:45:07.694"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:07.695" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:07.694" endtime="20210731 10:45:07.695"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:07.695" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:07.695" endtime="20210731 10:45:07.695"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:07.696" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:07.695" endtime="20210731 10:45:07.696"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:07.696" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:07.696" endtime="20210731 10:45:07.696"/>
</kw>
<msg timestamp="20210731 10:45:07.696" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:07.695" endtime="20210731 10:45:07.696"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:07.700" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:07.696" endtime="20210731 10:45:07.703"/>
</kw>
<status status="PASS" starttime="20210731 10:45:07.694" endtime="20210731 10:45:07.703"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:45:07.704" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:45:07.704" endtime="20210731 10:45:07.709"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:45:09.212" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:45:07.710" endtime="20210731 10:45:09.212"/>
</kw>
<status status="PASS" starttime="20210731 10:45:07.703" endtime="20210731 10:45:09.213"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:09.215" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:09.214" endtime="20210731 10:45:09.215"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:09.215" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:09.215" endtime="20210731 10:45:09.215"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:09.216" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:09.215" endtime="20210731 10:45:09.216"/>
</kw>
<msg timestamp="20210731 10:45:09.216" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:09.214" endtime="20210731 10:45:09.216"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:45:09.216" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:45:09.216" endtime="20210731 10:45:09.217"/>
</kw>
<status status="PASS" starttime="20210731 10:45:09.213" endtime="20210731 10:45:09.217"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:45:09.218" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:45:09.218" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:45:09.217" endtime="20210731 10:45:09.218"/>
</kw>
<status status="PASS" starttime="20210731 10:45:09.217" endtime="20210731 10:45:09.218"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:45:09.218" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:45:09.218" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:45:09.218" endtime="20210731 10:45:09.219"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:45:09.219" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:45:09.219" endtime="20210731 10:45:09.219"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:09.219" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:09.219" endtime="20210731 10:45:09.219"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:09.219" endtime="20210731 10:45:09.220"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:09.220" endtime="20210731 10:45:09.221"/>
</kw>
<status status="PASS" starttime="20210731 10:45:09.219" endtime="20210731 10:45:09.221"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:09.221" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:09.221" endtime="20210731 10:45:09.221"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:09.221" endtime="20210731 10:45:09.223"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:09.223" endtime="20210731 10:45:09.224"/>
</kw>
<status status="PASS" starttime="20210731 10:45:09.221" endtime="20210731 10:45:09.224"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:09.225" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:09.224" endtime="20210731 10:45:09.225"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:09.225" endtime="20210731 10:45:09.226"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:09.226" endtime="20210731 10:45:09.226"/>
</kw>
<status status="PASS" starttime="20210731 10:45:09.224" endtime="20210731 10:45:09.226"/>
</iter>
<status status="PASS" starttime="20210731 10:45:09.219" endtime="20210731 10:45:09.226"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:45:09.227" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:45:09.226" endtime="20210731 10:45:09.227"/>
</kw>
<status status="PASS" starttime="20210731 10:45:09.218" endtime="20210731 10:45:09.227"/>
</kw>
<status status="PASS" starttime="20210731 10:45:07.665" endtime="20210731 10:45:09.227"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 10:45:09.231" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:45:09.228" endtime="20210731 10:45:09.231"/>
</kw>
<msg timestamp="20210731 10:45:09.231" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:45:09.227" endtime="20210731 10:45:09.231"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>last_name</arg>
<arg>A last name containing more than 2 characters</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 10:45:09.233" endtime="20210731 10:45:09.234"/>
</kw>
<status status="PASS" starttime="20210731 10:45:09.233" endtime="20210731 10:45:09.234"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=lastname</arg>
<arg>field_data=${user_data}[last_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:09.236" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:45:09.236" endtime="20210731 10:45:09.236"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:09.237" level="INFO">${payload} = {'lastname': 'Cuzdan'}</msg>
<status status="PASS" starttime="20210731 10:45:09.236" endtime="20210731 10:45:09.237"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:45:09.247" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:45:09.248" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:45:09.237" endtime="20210731 10:45:09.248"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:45:09.248" endtime="20210731 10:45:09.248"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:45:09.248" endtime="20210731 10:45:09.248"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:09.237" endtime="20210731 10:45:09.248"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:09.237" endtime="20210731 10:45:09.248"/>
</for>
<status status="FAIL" starttime="20210731 10:45:09.234" endtime="20210731 10:45:09.248"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:09.234" endtime="20210731 10:45:09.250"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:09.234" endtime="20210731 10:45:09.250"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:09.254" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:09.266" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:09.266" level="INFO">${pids} = 17509
17516
17524</msg>
<status status="PASS" starttime="20210731 10:45:09.250" endtime="20210731 10:45:09.266"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:09.267" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:09.266" endtime="20210731 10:45:09.267"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:09.268" level="INFO">${pids} = ['17509', '17516', '17524']</msg>
<status status="PASS" starttime="20210731 10:45:09.267" endtime="20210731 10:45:09.268"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">17509</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:09.272" level="INFO">Running command 'kill 17509 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:09.268" endtime="20210731 10:45:09.273"/>
</kw>
<status status="PASS" starttime="20210731 10:45:09.268" endtime="20210731 10:45:09.273"/>
</iter>
<iter>
<var name="${pid}">17516</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:09.277" level="INFO">Running command 'kill 17516 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:09.273" endtime="20210731 10:45:09.278"/>
</kw>
<status status="PASS" starttime="20210731 10:45:09.273" endtime="20210731 10:45:09.278"/>
</iter>
<iter>
<var name="${pid}">17524</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:09.287" level="INFO">Running command 'kill 17524 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:09.278" endtime="20210731 10:45:09.287"/>
</kw>
<status status="PASS" starttime="20210731 10:45:09.278" endtime="20210731 10:45:09.288"/>
</iter>
<status status="PASS" starttime="20210731 10:45:09.268" endtime="20210731 10:45:09.288"/>
</for>
<status status="PASS" starttime="20210731 10:45:09.267" endtime="20210731 10:45:09.288"/>
</branch>
<status status="PASS" starttime="20210731 10:45:09.267" endtime="20210731 10:45:09.288"/>
</if>
<status status="PASS" starttime="20210731 10:45:09.250" endtime="20210731 10:45:09.288"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
lastname as such:
{
"lastname": 'Cuzdan'
}
Then, each request should succeed with the following response body:
{
"message": "Updated",
"status": "SUCCESS"
}
This test not only verifies message and status but also verifies that the &lt;username&gt;'s data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:45:07.664" endtime="20210731 10:45:09.288">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t113" name="With Each Valid Token, Updating Last Name Of Each System User With Cuzdan123!?. Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:09.294" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:09.305" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:09.305" level="INFO">${pids} = 17553</msg>
<status status="PASS" starttime="20210731 10:45:09.291" endtime="20210731 10:45:09.305"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:09.306" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:09.306" endtime="20210731 10:45:09.306"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:09.308" level="INFO">${pids} = ['17553']</msg>
<status status="PASS" starttime="20210731 10:45:09.307" endtime="20210731 10:45:09.308"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">17553</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:09.312" level="INFO">Running command 'kill 17553 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:09.308" endtime="20210731 10:45:09.313"/>
</kw>
<status status="PASS" starttime="20210731 10:45:09.308" endtime="20210731 10:45:09.313"/>
</iter>
<status status="PASS" starttime="20210731 10:45:09.308" endtime="20210731 10:45:09.313"/>
</for>
<status status="PASS" starttime="20210731 10:45:09.307" endtime="20210731 10:45:09.313"/>
</branch>
<status status="PASS" starttime="20210731 10:45:09.306" endtime="20210731 10:45:09.313"/>
</if>
<status status="PASS" starttime="20210731 10:45:09.290" endtime="20210731 10:45:09.314"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:09.315" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:09.314" endtime="20210731 10:45:09.315"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:09.317" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:09.317" endtime="20210731 10:45:09.317"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:09.318" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:09.317" endtime="20210731 10:45:09.318"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:09.318" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:09.318" endtime="20210731 10:45:09.318"/>
</kw>
<msg timestamp="20210731 10:45:09.319" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:09.316" endtime="20210731 10:45:09.319"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:09.323" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:09.319" endtime="20210731 10:45:09.325"/>
</kw>
<status status="PASS" starttime="20210731 10:45:09.314" endtime="20210731 10:45:09.326"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:45:09.327" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:45:09.327" endtime="20210731 10:45:09.333"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:45:10.834" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:45:09.334" endtime="20210731 10:45:10.834"/>
</kw>
<status status="PASS" starttime="20210731 10:45:09.326" endtime="20210731 10:45:10.835"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:10.836" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:10.836" endtime="20210731 10:45:10.836"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:10.836" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:10.836" endtime="20210731 10:45:10.836"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:10.837" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:10.836" endtime="20210731 10:45:10.837"/>
</kw>
<msg timestamp="20210731 10:45:10.837" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:10.835" endtime="20210731 10:45:10.837"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:45:10.837" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:45:10.837" endtime="20210731 10:45:10.838"/>
</kw>
<status status="PASS" starttime="20210731 10:45:10.835" endtime="20210731 10:45:10.838"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:45:10.838" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:45:10.838" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:45:10.838" endtime="20210731 10:45:10.839"/>
</kw>
<status status="PASS" starttime="20210731 10:45:10.838" endtime="20210731 10:45:10.839"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:45:10.839" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:45:10.839" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:45:10.839" endtime="20210731 10:45:10.839"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:45:10.840" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:45:10.840" endtime="20210731 10:45:10.840"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:10.840" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:10.840" endtime="20210731 10:45:10.840"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:10.841" endtime="20210731 10:45:10.842"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:10.842" endtime="20210731 10:45:10.843"/>
</kw>
<status status="PASS" starttime="20210731 10:45:10.840" endtime="20210731 10:45:10.843"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:10.844" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:10.844" endtime="20210731 10:45:10.844"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:10.844" endtime="20210731 10:45:10.845"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:10.845" endtime="20210731 10:45:10.845"/>
</kw>
<status status="PASS" starttime="20210731 10:45:10.843" endtime="20210731 10:45:10.846"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:10.846" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:10.846" endtime="20210731 10:45:10.846"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:10.846" endtime="20210731 10:45:10.847"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:10.847" endtime="20210731 10:45:10.847"/>
</kw>
<status status="PASS" starttime="20210731 10:45:10.846" endtime="20210731 10:45:10.848"/>
</iter>
<status status="PASS" starttime="20210731 10:45:10.840" endtime="20210731 10:45:10.848"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:45:10.848" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:45:10.848" endtime="20210731 10:45:10.848"/>
</kw>
<status status="PASS" starttime="20210731 10:45:10.839" endtime="20210731 10:45:10.848"/>
</kw>
<status status="PASS" starttime="20210731 10:45:09.290" endtime="20210731 10:45:10.848"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 10:45:10.852" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:45:10.849" endtime="20210731 10:45:10.852"/>
</kw>
<msg timestamp="20210731 10:45:10.852" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:45:10.849" endtime="20210731 10:45:10.852"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>last_name</arg>
<arg>A last name containing numbers and non-alphanumeric characters</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 10:45:10.853" endtime="20210731 10:45:10.854"/>
</kw>
<status status="PASS" starttime="20210731 10:45:10.853" endtime="20210731 10:45:10.854"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=lastname</arg>
<arg>field_data=${user_data}[last_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:10.856" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:45:10.855" endtime="20210731 10:45:10.856"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:10.856" level="INFO">${payload} = {'lastname': 'Cuzdan123!?.'}</msg>
<status status="PASS" starttime="20210731 10:45:10.856" endtime="20210731 10:45:10.856"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:45:10.868" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:45:10.868" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:45:10.857" endtime="20210731 10:45:10.868"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:45:10.868" endtime="20210731 10:45:10.868"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:45:10.868" endtime="20210731 10:45:10.868"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:10.857" endtime="20210731 10:45:10.869"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:10.856" endtime="20210731 10:45:10.869"/>
</for>
<status status="FAIL" starttime="20210731 10:45:10.855" endtime="20210731 10:45:10.869"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:10.855" endtime="20210731 10:45:10.869"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:10.854" endtime="20210731 10:45:10.869"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:10.873" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:10.887" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:10.887" level="INFO">${pids} = 17576
17583
17586</msg>
<status status="PASS" starttime="20210731 10:45:10.870" endtime="20210731 10:45:10.887"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:10.889" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:10.888" endtime="20210731 10:45:10.889"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:10.890" level="INFO">${pids} = ['17576', '17583', '17586']</msg>
<status status="PASS" starttime="20210731 10:45:10.889" endtime="20210731 10:45:10.890"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">17576</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:10.901" level="INFO">Running command 'kill 17576 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:10.891" endtime="20210731 10:45:10.902"/>
</kw>
<status status="PASS" starttime="20210731 10:45:10.891" endtime="20210731 10:45:10.902"/>
</iter>
<iter>
<var name="${pid}">17583</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:10.920" level="INFO">Running command 'kill 17583 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:10.903" endtime="20210731 10:45:10.921"/>
</kw>
<status status="PASS" starttime="20210731 10:45:10.902" endtime="20210731 10:45:10.921"/>
</iter>
<iter>
<var name="${pid}">17586</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:10.926" level="INFO">Running command 'kill 17586 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:10.922" endtime="20210731 10:45:10.927"/>
</kw>
<status status="PASS" starttime="20210731 10:45:10.921" endtime="20210731 10:45:10.927"/>
</iter>
<status status="PASS" starttime="20210731 10:45:10.890" endtime="20210731 10:45:10.927"/>
</for>
<status status="PASS" starttime="20210731 10:45:10.889" endtime="20210731 10:45:10.927"/>
</branch>
<status status="PASS" starttime="20210731 10:45:10.889" endtime="20210731 10:45:10.927"/>
</if>
<status status="PASS" starttime="20210731 10:45:10.869" endtime="20210731 10:45:10.928"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
lastname as such:
{
"lastname": 'Cuzdan123!?.'
}
Then, each request should fail with the following response body:
{
"message": "Each last name must contain only characters from the set [a-zA-Z]. Last names must be seperated by a a single space. Last names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:45:09.289" endtime="20210731 10:45:10.928">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t114" name="With Each Valid Token, Updating Last Name Of Each System User With Wi Results In Success">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:10.937" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:10.949" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:10.949" level="INFO">${pids} = 17615</msg>
<status status="PASS" starttime="20210731 10:45:10.931" endtime="20210731 10:45:10.949"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:10.951" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:10.950" endtime="20210731 10:45:10.951"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:10.952" level="INFO">${pids} = ['17615']</msg>
<status status="PASS" starttime="20210731 10:45:10.952" endtime="20210731 10:45:10.952"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">17615</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:10.962" level="INFO">Running command 'kill 17615 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:10.953" endtime="20210731 10:45:10.963"/>
</kw>
<status status="PASS" starttime="20210731 10:45:10.952" endtime="20210731 10:45:10.963"/>
</iter>
<status status="PASS" starttime="20210731 10:45:10.952" endtime="20210731 10:45:10.963"/>
</for>
<status status="PASS" starttime="20210731 10:45:10.952" endtime="20210731 10:45:10.963"/>
</branch>
<status status="PASS" starttime="20210731 10:45:10.951" endtime="20210731 10:45:10.963"/>
</if>
<status status="PASS" starttime="20210731 10:45:10.931" endtime="20210731 10:45:10.964"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:10.965" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:10.964" endtime="20210731 10:45:10.965"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:10.967" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:10.966" endtime="20210731 10:45:10.967"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:10.967" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:10.967" endtime="20210731 10:45:10.967"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:10.968" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:10.968" endtime="20210731 10:45:10.968"/>
</kw>
<msg timestamp="20210731 10:45:10.968" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:10.965" endtime="20210731 10:45:10.968"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:10.972" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:10.968" endtime="20210731 10:45:10.974"/>
</kw>
<status status="PASS" starttime="20210731 10:45:10.964" endtime="20210731 10:45:10.974"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:45:10.976" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:45:10.975" endtime="20210731 10:45:10.982"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:45:12.484" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:45:10.982" endtime="20210731 10:45:12.484"/>
</kw>
<status status="PASS" starttime="20210731 10:45:10.974" endtime="20210731 10:45:12.484"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:12.485" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:12.485" endtime="20210731 10:45:12.485"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:12.486" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:12.485" endtime="20210731 10:45:12.486"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:12.486" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:12.486" endtime="20210731 10:45:12.486"/>
</kw>
<msg timestamp="20210731 10:45:12.486" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:12.485" endtime="20210731 10:45:12.486"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:45:12.487" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:45:12.486" endtime="20210731 10:45:12.487"/>
</kw>
<status status="PASS" starttime="20210731 10:45:12.484" endtime="20210731 10:45:12.487"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:45:12.488" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:45:12.488" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:45:12.488" endtime="20210731 10:45:12.488"/>
</kw>
<status status="PASS" starttime="20210731 10:45:12.488" endtime="20210731 10:45:12.488"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:45:12.489" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:45:12.489" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:45:12.489" endtime="20210731 10:45:12.489"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:45:12.490" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:45:12.489" endtime="20210731 10:45:12.490"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:12.490" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:12.490" endtime="20210731 10:45:12.490"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:12.490" endtime="20210731 10:45:12.491"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:12.491" endtime="20210731 10:45:12.491"/>
</kw>
<status status="PASS" starttime="20210731 10:45:12.490" endtime="20210731 10:45:12.491"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:12.492" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:12.492" endtime="20210731 10:45:12.492"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:12.492" endtime="20210731 10:45:12.493"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:12.493" endtime="20210731 10:45:12.493"/>
</kw>
<status status="PASS" starttime="20210731 10:45:12.491" endtime="20210731 10:45:12.493"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:12.493" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:12.493" endtime="20210731 10:45:12.493"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:12.494" endtime="20210731 10:45:12.494"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:12.494" endtime="20210731 10:45:12.495"/>
</kw>
<status status="PASS" starttime="20210731 10:45:12.493" endtime="20210731 10:45:12.495"/>
</iter>
<status status="PASS" starttime="20210731 10:45:12.490" endtime="20210731 10:45:12.495"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:45:12.495" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:45:12.495" endtime="20210731 10:45:12.495"/>
</kw>
<status status="PASS" starttime="20210731 10:45:12.489" endtime="20210731 10:45:12.495"/>
</kw>
<status status="PASS" starttime="20210731 10:45:10.931" endtime="20210731 10:45:12.496"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 10:45:12.499" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:45:12.496" endtime="20210731 10:45:12.499"/>
</kw>
<msg timestamp="20210731 10:45:12.499" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:45:12.496" endtime="20210731 10:45:12.499"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>last_name</arg>
<arg>2 character last name with only one word</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 10:45:12.500" endtime="20210731 10:45:12.500"/>
</kw>
<status status="PASS" starttime="20210731 10:45:12.499" endtime="20210731 10:45:12.500"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=lastname</arg>
<arg>field_data=${user_data}[last_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:12.502" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:45:12.501" endtime="20210731 10:45:12.502"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:12.502" level="INFO">${payload} = {'lastname': 'Wi'}</msg>
<status status="PASS" starttime="20210731 10:45:12.502" endtime="20210731 10:45:12.502"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:45:12.512" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:45:12.512" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:45:12.503" endtime="20210731 10:45:12.512"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:45:12.512" endtime="20210731 10:45:12.513"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:45:12.513" endtime="20210731 10:45:12.513"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:12.502" endtime="20210731 10:45:12.513"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:12.502" endtime="20210731 10:45:12.513"/>
</for>
<status status="FAIL" starttime="20210731 10:45:12.500" endtime="20210731 10:45:12.513"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:12.500" endtime="20210731 10:45:12.513"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:12.500" endtime="20210731 10:45:12.513"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:12.517" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:12.528" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:12.528" level="INFO">${pids} = 17638
17645
17648</msg>
<status status="PASS" starttime="20210731 10:45:12.514" endtime="20210731 10:45:12.528"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:12.529" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:12.528" endtime="20210731 10:45:12.529"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:12.530" level="INFO">${pids} = ['17638', '17645', '17648']</msg>
<status status="PASS" starttime="20210731 10:45:12.529" endtime="20210731 10:45:12.530"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">17638</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:12.533" level="INFO">Running command 'kill 17638 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:12.530" endtime="20210731 10:45:12.534"/>
</kw>
<status status="PASS" starttime="20210731 10:45:12.530" endtime="20210731 10:45:12.534"/>
</iter>
<iter>
<var name="${pid}">17645</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:12.538" level="INFO">Running command 'kill 17645 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:12.535" endtime="20210731 10:45:12.538"/>
</kw>
<status status="PASS" starttime="20210731 10:45:12.534" endtime="20210731 10:45:12.538"/>
</iter>
<iter>
<var name="${pid}">17648</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:12.544" level="INFO">Running command 'kill 17648 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:12.539" endtime="20210731 10:45:12.545"/>
</kw>
<status status="PASS" starttime="20210731 10:45:12.538" endtime="20210731 10:45:12.545"/>
</iter>
<status status="PASS" starttime="20210731 10:45:12.530" endtime="20210731 10:45:12.545"/>
</for>
<status status="PASS" starttime="20210731 10:45:12.529" endtime="20210731 10:45:12.545"/>
</branch>
<status status="PASS" starttime="20210731 10:45:12.529" endtime="20210731 10:45:12.545"/>
</if>
<status status="PASS" starttime="20210731 10:45:12.514" endtime="20210731 10:45:12.545"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
lastname as such:
{
"lastname": 'Wi'
}
Then, each request should fail with the following response body:
{
"message": "Updated",
"status": "SUCCESS"
}
This test not only verifies message and status but also verifies that the &lt;username&gt;'s data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:45:10.929" endtime="20210731 10:45:12.546">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t115" name="With Each Valid Token, Updating Last Name Of Each System User With Wi Xi Results In Success">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:12.551" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:12.574" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:12.574" level="INFO">${pids} = 17677</msg>
<status status="PASS" starttime="20210731 10:45:12.547" endtime="20210731 10:45:12.574"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:12.576" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:12.574" endtime="20210731 10:45:12.576"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:12.577" level="INFO">${pids} = ['17677']</msg>
<status status="PASS" starttime="20210731 10:45:12.576" endtime="20210731 10:45:12.577"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">17677</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:12.580" level="INFO">Running command 'kill 17677 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:12.577" endtime="20210731 10:45:12.581"/>
</kw>
<status status="PASS" starttime="20210731 10:45:12.577" endtime="20210731 10:45:12.581"/>
</iter>
<status status="PASS" starttime="20210731 10:45:12.577" endtime="20210731 10:45:12.581"/>
</for>
<status status="PASS" starttime="20210731 10:45:12.576" endtime="20210731 10:45:12.581"/>
</branch>
<status status="PASS" starttime="20210731 10:45:12.576" endtime="20210731 10:45:12.582"/>
</if>
<status status="PASS" starttime="20210731 10:45:12.547" endtime="20210731 10:45:12.582"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:12.583" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:12.583" endtime="20210731 10:45:12.583"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:12.584" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:12.584" endtime="20210731 10:45:12.584"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:12.585" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:12.584" endtime="20210731 10:45:12.585"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:12.585" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:12.585" endtime="20210731 10:45:12.585"/>
</kw>
<msg timestamp="20210731 10:45:12.586" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:12.583" endtime="20210731 10:45:12.586"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:12.589" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:12.586" endtime="20210731 10:45:12.592"/>
</kw>
<status status="PASS" starttime="20210731 10:45:12.582" endtime="20210731 10:45:12.592"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:45:12.594" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:45:12.594" endtime="20210731 10:45:12.599"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:45:14.105" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:45:12.600" endtime="20210731 10:45:14.105"/>
</kw>
<status status="PASS" starttime="20210731 10:45:12.593" endtime="20210731 10:45:14.106"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:14.107" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:14.106" endtime="20210731 10:45:14.107"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:14.107" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:14.107" endtime="20210731 10:45:14.107"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:14.107" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:14.107" endtime="20210731 10:45:14.107"/>
</kw>
<msg timestamp="20210731 10:45:14.108" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:14.106" endtime="20210731 10:45:14.108"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:45:14.108" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:45:14.108" endtime="20210731 10:45:14.109"/>
</kw>
<status status="PASS" starttime="20210731 10:45:14.106" endtime="20210731 10:45:14.110"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:45:14.111" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:45:14.111" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:45:14.110" endtime="20210731 10:45:14.111"/>
</kw>
<status status="PASS" starttime="20210731 10:45:14.110" endtime="20210731 10:45:14.111"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:45:14.113" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:45:14.113" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:45:14.112" endtime="20210731 10:45:14.113"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:45:14.114" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:45:14.114" endtime="20210731 10:45:14.114"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:14.114" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:14.114" endtime="20210731 10:45:14.114"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:14.115" endtime="20210731 10:45:14.115"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:14.115" endtime="20210731 10:45:14.115"/>
</kw>
<status status="PASS" starttime="20210731 10:45:14.114" endtime="20210731 10:45:14.116"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:14.116" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:14.116" endtime="20210731 10:45:14.116"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:14.116" endtime="20210731 10:45:14.117"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:14.117" endtime="20210731 10:45:14.117"/>
</kw>
<status status="PASS" starttime="20210731 10:45:14.116" endtime="20210731 10:45:14.117"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:14.117" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:14.117" endtime="20210731 10:45:14.117"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:14.117" endtime="20210731 10:45:14.118"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:14.118" endtime="20210731 10:45:14.118"/>
</kw>
<status status="PASS" starttime="20210731 10:45:14.117" endtime="20210731 10:45:14.118"/>
</iter>
<status status="PASS" starttime="20210731 10:45:14.114" endtime="20210731 10:45:14.118"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:45:14.119" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:45:14.119" endtime="20210731 10:45:14.119"/>
</kw>
<status status="PASS" starttime="20210731 10:45:14.112" endtime="20210731 10:45:14.119"/>
</kw>
<status status="PASS" starttime="20210731 10:45:12.547" endtime="20210731 10:45:14.119"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 10:45:14.122" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:45:14.120" endtime="20210731 10:45:14.122"/>
</kw>
<msg timestamp="20210731 10:45:14.123" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:45:14.120" endtime="20210731 10:45:14.123"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>last_name</arg>
<arg>2 characters last name with two words</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 10:45:14.123" endtime="20210731 10:45:14.124"/>
</kw>
<status status="PASS" starttime="20210731 10:45:14.123" endtime="20210731 10:45:14.124"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=lastname</arg>
<arg>field_data=${user_data}[last_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:14.125" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:45:14.125" endtime="20210731 10:45:14.125"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:14.126" level="INFO">${payload} = {'lastname': 'Wi Xi'}</msg>
<status status="PASS" starttime="20210731 10:45:14.126" endtime="20210731 10:45:14.126"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:45:14.135" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:45:14.135" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:45:14.126" endtime="20210731 10:45:14.135"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:45:14.135" endtime="20210731 10:45:14.135"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:45:14.136" endtime="20210731 10:45:14.136"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:14.126" endtime="20210731 10:45:14.136"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:14.126" endtime="20210731 10:45:14.136"/>
</for>
<status status="FAIL" starttime="20210731 10:45:14.124" endtime="20210731 10:45:14.136"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:14.124" endtime="20210731 10:45:14.136"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:14.124" endtime="20210731 10:45:14.136"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:14.140" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:14.152" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:14.152" level="INFO">${pids} = 17700
17707
17715</msg>
<status status="PASS" starttime="20210731 10:45:14.137" endtime="20210731 10:45:14.152"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:14.153" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:14.152" endtime="20210731 10:45:14.153"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:14.154" level="INFO">${pids} = ['17700', '17707', '17715']</msg>
<status status="PASS" starttime="20210731 10:45:14.153" endtime="20210731 10:45:14.154"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">17700</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:14.158" level="INFO">Running command 'kill 17700 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:14.154" endtime="20210731 10:45:14.158"/>
</kw>
<status status="PASS" starttime="20210731 10:45:14.154" endtime="20210731 10:45:14.158"/>
</iter>
<iter>
<var name="${pid}">17707</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:14.162" level="INFO">Running command 'kill 17707 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:14.159" endtime="20210731 10:45:14.162"/>
</kw>
<status status="PASS" starttime="20210731 10:45:14.158" endtime="20210731 10:45:14.162"/>
</iter>
<iter>
<var name="${pid}">17715</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:14.167" level="INFO">Running command 'kill 17715 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:14.163" endtime="20210731 10:45:14.168"/>
</kw>
<status status="PASS" starttime="20210731 10:45:14.163" endtime="20210731 10:45:14.168"/>
</iter>
<status status="PASS" starttime="20210731 10:45:14.154" endtime="20210731 10:45:14.168"/>
</for>
<status status="PASS" starttime="20210731 10:45:14.153" endtime="20210731 10:45:14.168"/>
</branch>
<status status="PASS" starttime="20210731 10:45:14.153" endtime="20210731 10:45:14.168"/>
</if>
<status status="PASS" starttime="20210731 10:45:14.136" endtime="20210731 10:45:14.169"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
lastname as such:
{
"lastname": 'Wi Xi'
}
Then, each request should succeed with the following response body:
{
"message": "Updated",
"status": "SUCCESS"
}
This test not only verifies message and status but also verifies that the &lt;username&gt;'s data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:45:12.546" endtime="20210731 10:45:14.169">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t116" name="With Each Valid Token, Updating Last Name Of Each System User With W Xi Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:14.175" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:14.190" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:14.190" level="INFO">${pids} = 17744</msg>
<status status="PASS" starttime="20210731 10:45:14.171" endtime="20210731 10:45:14.190"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:14.191" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:14.191" endtime="20210731 10:45:14.191"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:14.192" level="INFO">${pids} = ['17744']</msg>
<status status="PASS" starttime="20210731 10:45:14.192" endtime="20210731 10:45:14.192"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">17744</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:14.196" level="INFO">Running command 'kill 17744 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:14.192" endtime="20210731 10:45:14.197"/>
</kw>
<status status="PASS" starttime="20210731 10:45:14.192" endtime="20210731 10:45:14.197"/>
</iter>
<status status="PASS" starttime="20210731 10:45:14.192" endtime="20210731 10:45:14.197"/>
</for>
<status status="PASS" starttime="20210731 10:45:14.191" endtime="20210731 10:45:14.197"/>
</branch>
<status status="PASS" starttime="20210731 10:45:14.191" endtime="20210731 10:45:14.197"/>
</if>
<status status="PASS" starttime="20210731 10:45:14.171" endtime="20210731 10:45:14.197"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:14.198" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:14.198" endtime="20210731 10:45:14.198"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:14.199" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:14.199" endtime="20210731 10:45:14.199"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:14.199" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:14.199" endtime="20210731 10:45:14.199"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:14.200" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:14.200" endtime="20210731 10:45:14.200"/>
</kw>
<msg timestamp="20210731 10:45:14.200" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:14.198" endtime="20210731 10:45:14.200"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:14.204" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:14.200" endtime="20210731 10:45:14.208"/>
</kw>
<status status="PASS" starttime="20210731 10:45:14.197" endtime="20210731 10:45:14.209"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:45:14.212" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:45:14.211" endtime="20210731 10:45:14.216"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:45:15.718" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:45:14.216" endtime="20210731 10:45:15.718"/>
</kw>
<status status="PASS" starttime="20210731 10:45:14.210" endtime="20210731 10:45:15.718"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:15.719" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:15.719" endtime="20210731 10:45:15.719"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:15.720" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:15.719" endtime="20210731 10:45:15.720"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:15.720" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:15.720" endtime="20210731 10:45:15.720"/>
</kw>
<msg timestamp="20210731 10:45:15.721" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:15.719" endtime="20210731 10:45:15.721"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:45:15.722" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:45:15.721" endtime="20210731 10:45:15.722"/>
</kw>
<status status="PASS" starttime="20210731 10:45:15.718" endtime="20210731 10:45:15.722"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:45:15.723" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:45:15.723" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:45:15.723" endtime="20210731 10:45:15.723"/>
</kw>
<status status="PASS" starttime="20210731 10:45:15.722" endtime="20210731 10:45:15.723"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:45:15.724" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:45:15.724" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:45:15.724" endtime="20210731 10:45:15.724"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:45:15.724" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:45:15.724" endtime="20210731 10:45:15.724"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:15.725" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:15.725" endtime="20210731 10:45:15.725"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:15.726" endtime="20210731 10:45:15.726"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:15.726" endtime="20210731 10:45:15.727"/>
</kw>
<status status="PASS" starttime="20210731 10:45:15.725" endtime="20210731 10:45:15.727"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:15.727" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:15.727" endtime="20210731 10:45:15.727"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:15.727" endtime="20210731 10:45:15.728"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:15.728" endtime="20210731 10:45:15.728"/>
</kw>
<status status="PASS" starttime="20210731 10:45:15.727" endtime="20210731 10:45:15.728"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:15.729" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:15.728" endtime="20210731 10:45:15.729"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:15.729" endtime="20210731 10:45:15.729"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:15.729" endtime="20210731 10:45:15.730"/>
</kw>
<status status="PASS" starttime="20210731 10:45:15.728" endtime="20210731 10:45:15.730"/>
</iter>
<status status="PASS" starttime="20210731 10:45:15.724" endtime="20210731 10:45:15.730"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:45:15.730" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:45:15.730" endtime="20210731 10:45:15.730"/>
</kw>
<status status="PASS" starttime="20210731 10:45:15.723" endtime="20210731 10:45:15.730"/>
</kw>
<status status="PASS" starttime="20210731 10:45:14.171" endtime="20210731 10:45:15.730"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 10:45:15.734" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:45:15.731" endtime="20210731 10:45:15.734"/>
</kw>
<msg timestamp="20210731 10:45:15.735" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:45:15.731" endtime="20210731 10:45:15.735"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>last_name</arg>
<arg>The first last name is invalid with only 1 letter, the second last name is valid</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 10:45:15.735" endtime="20210731 10:45:15.736"/>
</kw>
<status status="PASS" starttime="20210731 10:45:15.735" endtime="20210731 10:45:15.736"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=lastname</arg>
<arg>field_data=${user_data}[last_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:15.737" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:45:15.737" endtime="20210731 10:45:15.737"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:15.738" level="INFO">${payload} = {'lastname': 'W Xi'}</msg>
<status status="PASS" starttime="20210731 10:45:15.737" endtime="20210731 10:45:15.738"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:45:15.748" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:45:15.748" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:45:15.738" endtime="20210731 10:45:15.748"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:45:15.748" endtime="20210731 10:45:15.749"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:45:15.749" endtime="20210731 10:45:15.749"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:15.738" endtime="20210731 10:45:15.749"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:15.738" endtime="20210731 10:45:15.749"/>
</for>
<status status="FAIL" starttime="20210731 10:45:15.736" endtime="20210731 10:45:15.749"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:15.736" endtime="20210731 10:45:15.749"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:15.736" endtime="20210731 10:45:15.749"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:15.754" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:15.764" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:15.764" level="INFO">${pids} = 17767
17774
17776</msg>
<status status="PASS" starttime="20210731 10:45:15.750" endtime="20210731 10:45:15.764"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:15.765" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:15.764" endtime="20210731 10:45:15.765"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:15.765" level="INFO">${pids} = ['17767', '17774', '17776']</msg>
<status status="PASS" starttime="20210731 10:45:15.765" endtime="20210731 10:45:15.765"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">17767</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:15.769" level="INFO">Running command 'kill 17767 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:15.766" endtime="20210731 10:45:15.770"/>
</kw>
<status status="PASS" starttime="20210731 10:45:15.766" endtime="20210731 10:45:15.770"/>
</iter>
<iter>
<var name="${pid}">17774</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:15.773" level="INFO">Running command 'kill 17774 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:15.770" endtime="20210731 10:45:15.776"/>
</kw>
<status status="PASS" starttime="20210731 10:45:15.770" endtime="20210731 10:45:15.776"/>
</iter>
<iter>
<var name="${pid}">17776</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:15.781" level="INFO">Running command 'kill 17776 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:15.776" endtime="20210731 10:45:15.782"/>
</kw>
<status status="PASS" starttime="20210731 10:45:15.776" endtime="20210731 10:45:15.782"/>
</iter>
<status status="PASS" starttime="20210731 10:45:15.766" endtime="20210731 10:45:15.782"/>
</for>
<status status="PASS" starttime="20210731 10:45:15.765" endtime="20210731 10:45:15.782"/>
</branch>
<status status="PASS" starttime="20210731 10:45:15.765" endtime="20210731 10:45:15.782"/>
</if>
<status status="PASS" starttime="20210731 10:45:15.749" endtime="20210731 10:45:15.783"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
lastname as such:
{
"lastname": 'W Xi'
}
Then, each request should fail with the following response body:
{
"message": "Each last name must contain only characters from the set [a-zA-Z]. Last names must be seperated by a a single space. Last names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:45:14.170" endtime="20210731 10:45:15.783">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t117" name="With Each Valid Token, Updating Last Name Of Each System User With Wi X Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:15.788" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:15.799" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:15.800" level="INFO">${pids} = 17805</msg>
<status status="PASS" starttime="20210731 10:45:15.785" endtime="20210731 10:45:15.800"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:15.801" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:15.800" endtime="20210731 10:45:15.801"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:15.802" level="INFO">${pids} = ['17805']</msg>
<status status="PASS" starttime="20210731 10:45:15.801" endtime="20210731 10:45:15.802"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">17805</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:15.806" level="INFO">Running command 'kill 17805 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:15.803" endtime="20210731 10:45:15.806"/>
</kw>
<status status="PASS" starttime="20210731 10:45:15.802" endtime="20210731 10:45:15.806"/>
</iter>
<status status="PASS" starttime="20210731 10:45:15.802" endtime="20210731 10:45:15.806"/>
</for>
<status status="PASS" starttime="20210731 10:45:15.801" endtime="20210731 10:45:15.806"/>
</branch>
<status status="PASS" starttime="20210731 10:45:15.801" endtime="20210731 10:45:15.806"/>
</if>
<status status="PASS" starttime="20210731 10:45:15.784" endtime="20210731 10:45:15.807"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:15.808" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:15.807" endtime="20210731 10:45:15.808"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:15.808" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:15.808" endtime="20210731 10:45:15.808"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:15.809" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:15.809" endtime="20210731 10:45:15.809"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:15.809" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:15.809" endtime="20210731 10:45:15.809"/>
</kw>
<msg timestamp="20210731 10:45:15.810" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:15.808" endtime="20210731 10:45:15.810"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:15.814" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:15.810" endtime="20210731 10:45:15.815"/>
</kw>
<status status="PASS" starttime="20210731 10:45:15.807" endtime="20210731 10:45:15.815"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:45:15.817" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:45:15.816" endtime="20210731 10:45:15.821"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:45:17.322" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:45:15.822" endtime="20210731 10:45:17.322"/>
</kw>
<status status="PASS" starttime="20210731 10:45:15.816" endtime="20210731 10:45:17.323"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:17.324" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:17.324" endtime="20210731 10:45:17.324"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:17.324" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:17.324" endtime="20210731 10:45:17.324"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:17.325" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:17.324" endtime="20210731 10:45:17.325"/>
</kw>
<msg timestamp="20210731 10:45:17.325" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:17.323" endtime="20210731 10:45:17.325"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:45:17.325" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:45:17.325" endtime="20210731 10:45:17.326"/>
</kw>
<status status="PASS" starttime="20210731 10:45:17.323" endtime="20210731 10:45:17.326"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:45:17.326" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:45:17.327" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:45:17.326" endtime="20210731 10:45:17.327"/>
</kw>
<status status="PASS" starttime="20210731 10:45:17.326" endtime="20210731 10:45:17.327"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:45:17.327" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:45:17.328" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:45:17.327" endtime="20210731 10:45:17.328"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:45:17.329" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:45:17.328" endtime="20210731 10:45:17.329"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:17.329" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:17.329" endtime="20210731 10:45:17.329"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:17.329" endtime="20210731 10:45:17.330"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:17.330" endtime="20210731 10:45:17.330"/>
</kw>
<status status="PASS" starttime="20210731 10:45:17.329" endtime="20210731 10:45:17.330"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:17.331" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:17.331" endtime="20210731 10:45:17.331"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:17.331" endtime="20210731 10:45:17.332"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:17.332" endtime="20210731 10:45:17.332"/>
</kw>
<status status="PASS" starttime="20210731 10:45:17.331" endtime="20210731 10:45:17.332"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:17.333" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:17.332" endtime="20210731 10:45:17.333"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:17.333" endtime="20210731 10:45:17.333"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:17.334" endtime="20210731 10:45:17.334"/>
</kw>
<status status="PASS" starttime="20210731 10:45:17.332" endtime="20210731 10:45:17.334"/>
</iter>
<status status="PASS" starttime="20210731 10:45:17.329" endtime="20210731 10:45:17.334"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:45:17.335" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:45:17.334" endtime="20210731 10:45:17.335"/>
</kw>
<status status="PASS" starttime="20210731 10:45:17.327" endtime="20210731 10:45:17.335"/>
</kw>
<status status="PASS" starttime="20210731 10:45:15.784" endtime="20210731 10:45:17.335"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 10:45:17.339" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:45:17.336" endtime="20210731 10:45:17.339"/>
</kw>
<msg timestamp="20210731 10:45:17.339" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:45:17.335" endtime="20210731 10:45:17.339"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>last_name</arg>
<arg>The second last name is invalid with only 1 letter, the first last name is valid</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 10:45:17.340" endtime="20210731 10:45:17.341"/>
</kw>
<status status="PASS" starttime="20210731 10:45:17.340" endtime="20210731 10:45:17.341"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=lastname</arg>
<arg>field_data=${user_data}[last_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:17.343" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:45:17.342" endtime="20210731 10:45:17.343"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:17.343" level="INFO">${payload} = {'lastname': 'Wi X'}</msg>
<status status="PASS" starttime="20210731 10:45:17.343" endtime="20210731 10:45:17.343"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:45:17.355" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:45:17.355" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:45:17.344" endtime="20210731 10:45:17.356"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:45:17.356" endtime="20210731 10:45:17.356"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:45:17.356" endtime="20210731 10:45:17.356"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:17.343" endtime="20210731 10:45:17.356"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:17.343" endtime="20210731 10:45:17.356"/>
</for>
<status status="FAIL" starttime="20210731 10:45:17.341" endtime="20210731 10:45:17.356"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:17.341" endtime="20210731 10:45:17.356"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:17.341" endtime="20210731 10:45:17.356"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:17.361" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:17.373" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:17.373" level="INFO">${pids} = 17828
17835
17838</msg>
<status status="PASS" starttime="20210731 10:45:17.357" endtime="20210731 10:45:17.373"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:17.374" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:17.373" endtime="20210731 10:45:17.374"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:17.375" level="INFO">${pids} = ['17828', '17835', '17838']</msg>
<status status="PASS" starttime="20210731 10:45:17.374" endtime="20210731 10:45:17.375"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">17828</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:17.380" level="INFO">Running command 'kill 17828 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:17.376" endtime="20210731 10:45:17.380"/>
</kw>
<status status="PASS" starttime="20210731 10:45:17.376" endtime="20210731 10:45:17.380"/>
</iter>
<iter>
<var name="${pid}">17835</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:17.385" level="INFO">Running command 'kill 17835 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:17.381" endtime="20210731 10:45:17.387"/>
</kw>
<status status="PASS" starttime="20210731 10:45:17.381" endtime="20210731 10:45:17.387"/>
</iter>
<iter>
<var name="${pid}">17838</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:17.391" level="INFO">Running command 'kill 17838 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:17.388" endtime="20210731 10:45:17.392"/>
</kw>
<status status="PASS" starttime="20210731 10:45:17.388" endtime="20210731 10:45:17.392"/>
</iter>
<status status="PASS" starttime="20210731 10:45:17.375" endtime="20210731 10:45:17.392"/>
</for>
<status status="PASS" starttime="20210731 10:45:17.374" endtime="20210731 10:45:17.392"/>
</branch>
<status status="PASS" starttime="20210731 10:45:17.374" endtime="20210731 10:45:17.392"/>
</if>
<status status="PASS" starttime="20210731 10:45:17.357" endtime="20210731 10:45:17.392"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
lastname as such:
{
"lastname": 'Wi X'
}
Then, each request should fail with the following response body:
{
"message": "Each last name must contain only characters from the set [a-zA-Z]. Last names must be seperated by a a single space. Last names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:45:15.783" endtime="20210731 10:45:17.393">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t118" name="With Each Valid Token, Updating Last Name Of Each System User With W X Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:17.406" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:17.418" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:17.418" level="INFO">${pids} = 17867</msg>
<status status="PASS" starttime="20210731 10:45:17.396" endtime="20210731 10:45:17.418"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:17.419" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:17.418" endtime="20210731 10:45:17.419"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:17.420" level="INFO">${pids} = ['17867']</msg>
<status status="PASS" starttime="20210731 10:45:17.419" endtime="20210731 10:45:17.420"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">17867</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:17.423" level="INFO">Running command 'kill 17867 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:17.420" endtime="20210731 10:45:17.424"/>
</kw>
<status status="PASS" starttime="20210731 10:45:17.420" endtime="20210731 10:45:17.424"/>
</iter>
<status status="PASS" starttime="20210731 10:45:17.420" endtime="20210731 10:45:17.424"/>
</for>
<status status="PASS" starttime="20210731 10:45:17.419" endtime="20210731 10:45:17.424"/>
</branch>
<status status="PASS" starttime="20210731 10:45:17.419" endtime="20210731 10:45:17.424"/>
</if>
<status status="PASS" starttime="20210731 10:45:17.396" endtime="20210731 10:45:17.425"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:17.427" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:17.426" endtime="20210731 10:45:17.427"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:17.427" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:17.427" endtime="20210731 10:45:17.428"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:17.428" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:17.428" endtime="20210731 10:45:17.428"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:17.429" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:17.428" endtime="20210731 10:45:17.429"/>
</kw>
<msg timestamp="20210731 10:45:17.429" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:17.427" endtime="20210731 10:45:17.429"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:17.434" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:17.429" endtime="20210731 10:45:17.436"/>
</kw>
<status status="PASS" starttime="20210731 10:45:17.425" endtime="20210731 10:45:17.436"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:45:17.438" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:45:17.437" endtime="20210731 10:45:17.443"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:45:18.945" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:45:17.443" endtime="20210731 10:45:18.946"/>
</kw>
<status status="PASS" starttime="20210731 10:45:17.436" endtime="20210731 10:45:18.946"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:18.947" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:18.947" endtime="20210731 10:45:18.947"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:18.947" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:18.947" endtime="20210731 10:45:18.947"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:18.948" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:18.947" endtime="20210731 10:45:18.948"/>
</kw>
<msg timestamp="20210731 10:45:18.948" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:18.946" endtime="20210731 10:45:18.948"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:45:18.948" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:45:18.948" endtime="20210731 10:45:18.949"/>
</kw>
<status status="PASS" starttime="20210731 10:45:18.946" endtime="20210731 10:45:18.949"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:45:18.950" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:45:18.950" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:45:18.949" endtime="20210731 10:45:18.950"/>
</kw>
<status status="PASS" starttime="20210731 10:45:18.949" endtime="20210731 10:45:18.950"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:45:18.950" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:45:18.951" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:45:18.950" endtime="20210731 10:45:18.951"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:45:18.951" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:45:18.951" endtime="20210731 10:45:18.951"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:18.951" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:18.951" endtime="20210731 10:45:18.951"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:18.951" endtime="20210731 10:45:18.952"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:18.952" endtime="20210731 10:45:18.952"/>
</kw>
<status status="PASS" starttime="20210731 10:45:18.951" endtime="20210731 10:45:18.952"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:18.953" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:18.953" endtime="20210731 10:45:18.953"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:18.953" endtime="20210731 10:45:18.955"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:18.955" endtime="20210731 10:45:18.955"/>
</kw>
<status status="PASS" starttime="20210731 10:45:18.953" endtime="20210731 10:45:18.955"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:18.955" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:18.955" endtime="20210731 10:45:18.955"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:18.955" endtime="20210731 10:45:18.956"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:18.956" endtime="20210731 10:45:18.956"/>
</kw>
<status status="PASS" starttime="20210731 10:45:18.955" endtime="20210731 10:45:18.956"/>
</iter>
<status status="PASS" starttime="20210731 10:45:18.951" endtime="20210731 10:45:18.956"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:45:18.957" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:45:18.957" endtime="20210731 10:45:18.957"/>
</kw>
<status status="PASS" starttime="20210731 10:45:18.950" endtime="20210731 10:45:18.957"/>
</kw>
<status status="PASS" starttime="20210731 10:45:17.395" endtime="20210731 10:45:18.957"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 10:45:18.960" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:45:18.958" endtime="20210731 10:45:18.960"/>
</kw>
<msg timestamp="20210731 10:45:18.961" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:45:18.957" endtime="20210731 10:45:18.961"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>last_name</arg>
<arg>The both last names are invalid because they only have 1 letter</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 10:45:18.961" endtime="20210731 10:45:18.962"/>
</kw>
<status status="PASS" starttime="20210731 10:45:18.961" endtime="20210731 10:45:18.962"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=lastname</arg>
<arg>field_data=${user_data}[last_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:18.963" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:45:18.963" endtime="20210731 10:45:18.963"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:18.964" level="INFO">${payload} = {'lastname': 'W X'}</msg>
<status status="PASS" starttime="20210731 10:45:18.963" endtime="20210731 10:45:18.964"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:45:18.976" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:45:18.976" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:45:18.964" endtime="20210731 10:45:18.976"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:45:18.976" endtime="20210731 10:45:18.976"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:45:18.976" endtime="20210731 10:45:18.977"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:18.964" endtime="20210731 10:45:18.977"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:18.964" endtime="20210731 10:45:18.977"/>
</for>
<status status="FAIL" starttime="20210731 10:45:18.962" endtime="20210731 10:45:18.977"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:18.962" endtime="20210731 10:45:18.978"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:18.962" endtime="20210731 10:45:18.978"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:18.982" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:18.992" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:18.992" level="INFO">${pids} = 17890
17897
17905</msg>
<status status="PASS" starttime="20210731 10:45:18.979" endtime="20210731 10:45:18.992"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:18.993" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:18.992" endtime="20210731 10:45:18.993"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:18.994" level="INFO">${pids} = ['17890', '17897', '17905']</msg>
<status status="PASS" starttime="20210731 10:45:18.993" endtime="20210731 10:45:18.994"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">17890</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:18.997" level="INFO">Running command 'kill 17890 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:18.994" endtime="20210731 10:45:18.997"/>
</kw>
<status status="PASS" starttime="20210731 10:45:18.994" endtime="20210731 10:45:18.998"/>
</iter>
<iter>
<var name="${pid}">17897</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:19.000" level="INFO">Running command 'kill 17897 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:18.998" endtime="20210731 10:45:19.001"/>
</kw>
<status status="PASS" starttime="20210731 10:45:18.998" endtime="20210731 10:45:19.001"/>
</iter>
<iter>
<var name="${pid}">17905</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:19.004" level="INFO">Running command 'kill 17905 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:19.001" endtime="20210731 10:45:19.005"/>
</kw>
<status status="PASS" starttime="20210731 10:45:19.001" endtime="20210731 10:45:19.005"/>
</iter>
<status status="PASS" starttime="20210731 10:45:18.994" endtime="20210731 10:45:19.005"/>
</for>
<status status="PASS" starttime="20210731 10:45:18.993" endtime="20210731 10:45:19.005"/>
</branch>
<status status="PASS" starttime="20210731 10:45:18.993" endtime="20210731 10:45:19.005"/>
</if>
<status status="PASS" starttime="20210731 10:45:18.978" endtime="20210731 10:45:19.005"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
lastname as such:
{
"lastname": 'W X'
}
Then, each request should fail with the following response body:
{
"message": "Each last name must contain only characters from the set [a-zA-Z]. Last names must be seperated by a a single space. Last names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:45:17.393" endtime="20210731 10:45:19.006">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t119" name="With Each Valid Token, Updating Last Name Of Each System User With Holm123 Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:19.011" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:19.036" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:19.036" level="INFO">${pids} = 17934</msg>
<status status="PASS" starttime="20210731 10:45:19.008" endtime="20210731 10:45:19.036"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:19.037" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:19.037" endtime="20210731 10:45:19.037"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:19.038" level="INFO">${pids} = ['17934']</msg>
<status status="PASS" starttime="20210731 10:45:19.038" endtime="20210731 10:45:19.038"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">17934</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:19.043" level="INFO">Running command 'kill 17934 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:19.039" endtime="20210731 10:45:19.043"/>
</kw>
<status status="PASS" starttime="20210731 10:45:19.038" endtime="20210731 10:45:19.043"/>
</iter>
<status status="PASS" starttime="20210731 10:45:19.038" endtime="20210731 10:45:19.043"/>
</for>
<status status="PASS" starttime="20210731 10:45:19.038" endtime="20210731 10:45:19.043"/>
</branch>
<status status="PASS" starttime="20210731 10:45:19.037" endtime="20210731 10:45:19.044"/>
</if>
<status status="PASS" starttime="20210731 10:45:19.007" endtime="20210731 10:45:19.044"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:19.045" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:19.045" endtime="20210731 10:45:19.045"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:19.046" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:19.045" endtime="20210731 10:45:19.046"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:19.046" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:19.046" endtime="20210731 10:45:19.046"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:19.046" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:19.046" endtime="20210731 10:45:19.046"/>
</kw>
<msg timestamp="20210731 10:45:19.047" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:19.045" endtime="20210731 10:45:19.047"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:19.051" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:19.047" endtime="20210731 10:45:19.053"/>
</kw>
<status status="PASS" starttime="20210731 10:45:19.044" endtime="20210731 10:45:19.053"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:45:19.054" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:45:19.054" endtime="20210731 10:45:19.058"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:45:20.560" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:45:19.059" endtime="20210731 10:45:20.560"/>
</kw>
<status status="PASS" starttime="20210731 10:45:19.053" endtime="20210731 10:45:20.560"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:20.562" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:20.562" endtime="20210731 10:45:20.562"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:20.563" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:20.562" endtime="20210731 10:45:20.563"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:20.564" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:20.564" endtime="20210731 10:45:20.564"/>
</kw>
<msg timestamp="20210731 10:45:20.564" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:20.561" endtime="20210731 10:45:20.564"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:45:20.565" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:45:20.564" endtime="20210731 10:45:20.565"/>
</kw>
<status status="PASS" starttime="20210731 10:45:20.561" endtime="20210731 10:45:20.566"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:45:20.566" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:45:20.566" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:45:20.566" endtime="20210731 10:45:20.566"/>
</kw>
<status status="PASS" starttime="20210731 10:45:20.566" endtime="20210731 10:45:20.566"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:45:20.567" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:45:20.567" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:45:20.567" endtime="20210731 10:45:20.567"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:45:20.567" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:45:20.567" endtime="20210731 10:45:20.567"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:20.568" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:20.568" endtime="20210731 10:45:20.568"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:20.569" endtime="20210731 10:45:20.570"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:20.570" endtime="20210731 10:45:20.570"/>
</kw>
<status status="PASS" starttime="20210731 10:45:20.568" endtime="20210731 10:45:20.570"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:20.570" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:20.570" endtime="20210731 10:45:20.570"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:20.571" endtime="20210731 10:45:20.571"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:20.571" endtime="20210731 10:45:20.572"/>
</kw>
<status status="PASS" starttime="20210731 10:45:20.570" endtime="20210731 10:45:20.572"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:20.572" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:20.572" endtime="20210731 10:45:20.572"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:20.572" endtime="20210731 10:45:20.573"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:20.573" endtime="20210731 10:45:20.573"/>
</kw>
<status status="PASS" starttime="20210731 10:45:20.572" endtime="20210731 10:45:20.573"/>
</iter>
<status status="PASS" starttime="20210731 10:45:20.567" endtime="20210731 10:45:20.573"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:45:20.574" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:45:20.573" endtime="20210731 10:45:20.574"/>
</kw>
<status status="PASS" starttime="20210731 10:45:20.567" endtime="20210731 10:45:20.574"/>
</kw>
<status status="PASS" starttime="20210731 10:45:19.007" endtime="20210731 10:45:20.574"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 10:45:20.578" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:45:20.575" endtime="20210731 10:45:20.578"/>
</kw>
<msg timestamp="20210731 10:45:20.578" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:45:20.574" endtime="20210731 10:45:20.578"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>last_name</arg>
<arg>Last name does contain numbers, which makes it invalid</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 10:45:20.579" endtime="20210731 10:45:20.579"/>
</kw>
<status status="PASS" starttime="20210731 10:45:20.578" endtime="20210731 10:45:20.580"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=lastname</arg>
<arg>field_data=${user_data}[last_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:20.581" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:45:20.581" endtime="20210731 10:45:20.581"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:20.587" level="INFO">${payload} = {'lastname': 'Holm123'}</msg>
<status status="PASS" starttime="20210731 10:45:20.587" endtime="20210731 10:45:20.587"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:45:20.598" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:45:20.599" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:45:20.588" endtime="20210731 10:45:20.599"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:45:20.599" endtime="20210731 10:45:20.599"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:45:20.599" endtime="20210731 10:45:20.599"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:20.588" endtime="20210731 10:45:20.599"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:20.588" endtime="20210731 10:45:20.599"/>
</for>
<status status="FAIL" starttime="20210731 10:45:20.580" endtime="20210731 10:45:20.599"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:20.580" endtime="20210731 10:45:20.599"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:20.580" endtime="20210731 10:45:20.600"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:20.605" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:20.616" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:20.616" level="INFO">${pids} = 17957
17964
17966</msg>
<status status="PASS" starttime="20210731 10:45:20.600" endtime="20210731 10:45:20.616"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:20.617" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:20.616" endtime="20210731 10:45:20.617"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:20.618" level="INFO">${pids} = ['17957', '17964', '17966']</msg>
<status status="PASS" starttime="20210731 10:45:20.617" endtime="20210731 10:45:20.618"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">17957</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:20.622" level="INFO">Running command 'kill 17957 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:20.619" endtime="20210731 10:45:20.622"/>
</kw>
<status status="PASS" starttime="20210731 10:45:20.619" endtime="20210731 10:45:20.623"/>
</iter>
<iter>
<var name="${pid}">17964</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:20.626" level="INFO">Running command 'kill 17964 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:20.623" endtime="20210731 10:45:20.628"/>
</kw>
<status status="PASS" starttime="20210731 10:45:20.623" endtime="20210731 10:45:20.628"/>
</iter>
<iter>
<var name="${pid}">17966</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:20.632" level="INFO">Running command 'kill 17966 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:20.629" endtime="20210731 10:45:20.632"/>
</kw>
<status status="PASS" starttime="20210731 10:45:20.628" endtime="20210731 10:45:20.632"/>
</iter>
<status status="PASS" starttime="20210731 10:45:20.619" endtime="20210731 10:45:20.632"/>
</for>
<status status="PASS" starttime="20210731 10:45:20.617" endtime="20210731 10:45:20.632"/>
</branch>
<status status="PASS" starttime="20210731 10:45:20.617" endtime="20210731 10:45:20.632"/>
</if>
<status status="PASS" starttime="20210731 10:45:20.600" endtime="20210731 10:45:20.633"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
lastname as such:
{
"lastname": 'Holm123'
}
Then, each request should fail with the following response body:
{
"message": "Each last name must contain only characters from the set [a-zA-Z]. Last names must be seperated by a a single space. Last names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:45:19.006" endtime="20210731 10:45:20.633">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t120" name="With Each Valid Token, Updating Last Name Of Each System User With Holm!.? Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:20.638" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:20.648" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:20.649" level="INFO">${pids} = 17995</msg>
<status status="PASS" starttime="20210731 10:45:20.635" endtime="20210731 10:45:20.649"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:20.650" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:20.649" endtime="20210731 10:45:20.650"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:20.650" level="INFO">${pids} = ['17995']</msg>
<status status="PASS" starttime="20210731 10:45:20.650" endtime="20210731 10:45:20.650"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">17995</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:20.654" level="INFO">Running command 'kill 17995 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:20.651" endtime="20210731 10:45:20.655"/>
</kw>
<status status="PASS" starttime="20210731 10:45:20.651" endtime="20210731 10:45:20.655"/>
</iter>
<status status="PASS" starttime="20210731 10:45:20.650" endtime="20210731 10:45:20.655"/>
</for>
<status status="PASS" starttime="20210731 10:45:20.650" endtime="20210731 10:45:20.655"/>
</branch>
<status status="PASS" starttime="20210731 10:45:20.650" endtime="20210731 10:45:20.655"/>
</if>
<status status="PASS" starttime="20210731 10:45:20.635" endtime="20210731 10:45:20.655"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:20.656" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:20.656" endtime="20210731 10:45:20.656"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:20.657" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:20.657" endtime="20210731 10:45:20.657"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:20.657" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:20.657" endtime="20210731 10:45:20.657"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:20.658" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:20.657" endtime="20210731 10:45:20.658"/>
</kw>
<msg timestamp="20210731 10:45:20.658" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:20.656" endtime="20210731 10:45:20.658"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:20.661" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:20.658" endtime="20210731 10:45:20.663"/>
</kw>
<status status="PASS" starttime="20210731 10:45:20.655" endtime="20210731 10:45:20.663"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:45:20.665" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:45:20.664" endtime="20210731 10:45:20.669"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:45:22.170" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:45:20.669" endtime="20210731 10:45:22.170"/>
</kw>
<status status="PASS" starttime="20210731 10:45:20.664" endtime="20210731 10:45:22.171"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:22.172" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:22.172" endtime="20210731 10:45:22.172"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:22.172" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:22.172" endtime="20210731 10:45:22.172"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:22.172" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:22.172" endtime="20210731 10:45:22.173"/>
</kw>
<msg timestamp="20210731 10:45:22.173" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:22.171" endtime="20210731 10:45:22.173"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:45:22.173" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:45:22.173" endtime="20210731 10:45:22.174"/>
</kw>
<status status="PASS" starttime="20210731 10:45:22.171" endtime="20210731 10:45:22.174"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:45:22.175" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:45:22.175" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:45:22.175" endtime="20210731 10:45:22.175"/>
</kw>
<status status="PASS" starttime="20210731 10:45:22.174" endtime="20210731 10:45:22.176"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:45:22.177" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:45:22.177" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:45:22.176" endtime="20210731 10:45:22.177"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:45:22.178" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:45:22.177" endtime="20210731 10:45:22.178"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:22.178" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:22.178" endtime="20210731 10:45:22.178"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:22.179" endtime="20210731 10:45:22.179"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:22.179" endtime="20210731 10:45:22.180"/>
</kw>
<status status="PASS" starttime="20210731 10:45:22.178" endtime="20210731 10:45:22.180"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:22.180" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:22.180" endtime="20210731 10:45:22.180"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:22.180" endtime="20210731 10:45:22.181"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:22.181" endtime="20210731 10:45:22.181"/>
</kw>
<status status="PASS" starttime="20210731 10:45:22.180" endtime="20210731 10:45:22.181"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:22.182" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:22.182" endtime="20210731 10:45:22.182"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:22.182" endtime="20210731 10:45:22.183"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:22.183" endtime="20210731 10:45:22.183"/>
</kw>
<status status="PASS" starttime="20210731 10:45:22.182" endtime="20210731 10:45:22.183"/>
</iter>
<status status="PASS" starttime="20210731 10:45:22.178" endtime="20210731 10:45:22.183"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:45:22.183" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:45:22.183" endtime="20210731 10:45:22.183"/>
</kw>
<status status="PASS" starttime="20210731 10:45:22.176" endtime="20210731 10:45:22.184"/>
</kw>
<status status="PASS" starttime="20210731 10:45:20.634" endtime="20210731 10:45:22.184"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 10:45:22.187" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:45:22.184" endtime="20210731 10:45:22.187"/>
</kw>
<msg timestamp="20210731 10:45:22.187" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:45:22.184" endtime="20210731 10:45:22.187"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>last_name</arg>
<arg>Last name does contain non alphanumeric characters, which makes it invalid</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 10:45:22.187" endtime="20210731 10:45:22.188"/>
</kw>
<status status="PASS" starttime="20210731 10:45:22.187" endtime="20210731 10:45:22.188"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=lastname</arg>
<arg>field_data=${user_data}[last_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:22.189" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:45:22.189" endtime="20210731 10:45:22.189"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:22.190" level="INFO">${payload} = {'lastname': 'Holm!.?'}</msg>
<status status="PASS" starttime="20210731 10:45:22.190" endtime="20210731 10:45:22.190"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:45:22.200" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:45:22.200" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:45:22.191" endtime="20210731 10:45:22.200"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:45:22.201" endtime="20210731 10:45:22.201"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:45:22.201" endtime="20210731 10:45:22.201"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:22.190" endtime="20210731 10:45:22.201"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:22.190" endtime="20210731 10:45:22.201"/>
</for>
<status status="FAIL" starttime="20210731 10:45:22.188" endtime="20210731 10:45:22.201"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:22.188" endtime="20210731 10:45:22.201"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:22.188" endtime="20210731 10:45:22.201"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:22.206" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:22.217" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:22.217" level="INFO">${pids} = 18018
18025
18028</msg>
<status status="PASS" starttime="20210731 10:45:22.202" endtime="20210731 10:45:22.217"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:22.218" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:22.217" endtime="20210731 10:45:22.218"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:22.219" level="INFO">${pids} = ['18018', '18025', '18028']</msg>
<status status="PASS" starttime="20210731 10:45:22.218" endtime="20210731 10:45:22.219"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">18018</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:22.222" level="INFO">Running command 'kill 18018 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:22.219" endtime="20210731 10:45:22.223"/>
</kw>
<status status="PASS" starttime="20210731 10:45:22.219" endtime="20210731 10:45:22.223"/>
</iter>
<iter>
<var name="${pid}">18025</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:22.227" level="INFO">Running command 'kill 18025 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:22.223" endtime="20210731 10:45:22.227"/>
</kw>
<status status="PASS" starttime="20210731 10:45:22.223" endtime="20210731 10:45:22.227"/>
</iter>
<iter>
<var name="${pid}">18028</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:22.232" level="INFO">Running command 'kill 18028 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:22.228" endtime="20210731 10:45:22.233"/>
</kw>
<status status="PASS" starttime="20210731 10:45:22.227" endtime="20210731 10:45:22.233"/>
</iter>
<status status="PASS" starttime="20210731 10:45:22.219" endtime="20210731 10:45:22.233"/>
</for>
<status status="PASS" starttime="20210731 10:45:22.218" endtime="20210731 10:45:22.233"/>
</branch>
<status status="PASS" starttime="20210731 10:45:22.218" endtime="20210731 10:45:22.233"/>
</if>
<status status="PASS" starttime="20210731 10:45:22.202" endtime="20210731 10:45:22.233"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
lastname as such:
{
"lastname": 'Holm!.?'
}
Then, each request should fail with the following response body:
{
"message": "Each last name must contain only characters from the set [a-zA-Z]. Last names must be seperated by a a single space. Last names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:45:20.633" endtime="20210731 10:45:22.234">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t121" name="With Each Valid Token, Updating Last Name Of Each System User With Holm Cuzdan Results In Success">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:22.239" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:22.252" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:22.252" level="INFO">${pids} = 18057</msg>
<status status="PASS" starttime="20210731 10:45:22.236" endtime="20210731 10:45:22.252"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:22.253" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:22.252" endtime="20210731 10:45:22.253"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:22.254" level="INFO">${pids} = ['18057']</msg>
<status status="PASS" starttime="20210731 10:45:22.253" endtime="20210731 10:45:22.254"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">18057</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:22.258" level="INFO">Running command 'kill 18057 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:22.255" endtime="20210731 10:45:22.259"/>
</kw>
<status status="PASS" starttime="20210731 10:45:22.255" endtime="20210731 10:45:22.259"/>
</iter>
<status status="PASS" starttime="20210731 10:45:22.254" endtime="20210731 10:45:22.259"/>
</for>
<status status="PASS" starttime="20210731 10:45:22.253" endtime="20210731 10:45:22.259"/>
</branch>
<status status="PASS" starttime="20210731 10:45:22.253" endtime="20210731 10:45:22.259"/>
</if>
<status status="PASS" starttime="20210731 10:45:22.235" endtime="20210731 10:45:22.259"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:22.261" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:22.260" endtime="20210731 10:45:22.261"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:22.261" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:22.261" endtime="20210731 10:45:22.261"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:22.262" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:22.261" endtime="20210731 10:45:22.262"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:22.262" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:22.262" endtime="20210731 10:45:22.262"/>
</kw>
<msg timestamp="20210731 10:45:22.262" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:22.261" endtime="20210731 10:45:22.262"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:22.266" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:22.263" endtime="20210731 10:45:22.268"/>
</kw>
<status status="PASS" starttime="20210731 10:45:22.260" endtime="20210731 10:45:22.268"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:45:22.269" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:45:22.269" endtime="20210731 10:45:22.274"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:45:23.775" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:45:22.274" endtime="20210731 10:45:23.775"/>
</kw>
<status status="PASS" starttime="20210731 10:45:22.269" endtime="20210731 10:45:23.775"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:23.777" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:23.777" endtime="20210731 10:45:23.777"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:23.777" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:23.777" endtime="20210731 10:45:23.777"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:23.778" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:23.778" endtime="20210731 10:45:23.778"/>
</kw>
<msg timestamp="20210731 10:45:23.778" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:23.776" endtime="20210731 10:45:23.778"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:45:23.779" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:45:23.778" endtime="20210731 10:45:23.779"/>
</kw>
<status status="PASS" starttime="20210731 10:45:23.776" endtime="20210731 10:45:23.780"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:45:23.780" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:45:23.780" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:45:23.780" endtime="20210731 10:45:23.781"/>
</kw>
<status status="PASS" starttime="20210731 10:45:23.780" endtime="20210731 10:45:23.781"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:45:23.781" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:45:23.781" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:45:23.781" endtime="20210731 10:45:23.781"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:45:23.782" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:45:23.782" endtime="20210731 10:45:23.782"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:23.782" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:23.782" endtime="20210731 10:45:23.782"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:23.782" endtime="20210731 10:45:23.783"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:23.783" endtime="20210731 10:45:23.784"/>
</kw>
<status status="PASS" starttime="20210731 10:45:23.782" endtime="20210731 10:45:23.784"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:23.784" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:23.784" endtime="20210731 10:45:23.784"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:23.784" endtime="20210731 10:45:23.785"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:23.785" endtime="20210731 10:45:23.785"/>
</kw>
<status status="PASS" starttime="20210731 10:45:23.784" endtime="20210731 10:45:23.785"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:23.786" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:23.785" endtime="20210731 10:45:23.786"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:23.786" endtime="20210731 10:45:23.787"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:23.787" endtime="20210731 10:45:23.787"/>
</kw>
<status status="PASS" starttime="20210731 10:45:23.785" endtime="20210731 10:45:23.787"/>
</iter>
<status status="PASS" starttime="20210731 10:45:23.782" endtime="20210731 10:45:23.787"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:45:23.788" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:45:23.787" endtime="20210731 10:45:23.788"/>
</kw>
<status status="PASS" starttime="20210731 10:45:23.781" endtime="20210731 10:45:23.788"/>
</kw>
<status status="PASS" starttime="20210731 10:45:22.235" endtime="20210731 10:45:23.788"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 10:45:23.791" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:45:23.788" endtime="20210731 10:45:23.791"/>
</kw>
<msg timestamp="20210731 10:45:23.792" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:45:23.788" endtime="20210731 10:45:23.792"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>last_name</arg>
<arg>Two valid last names seperated by a single space character</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 10:45:23.793" endtime="20210731 10:45:23.794"/>
</kw>
<status status="PASS" starttime="20210731 10:45:23.792" endtime="20210731 10:45:23.794"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=lastname</arg>
<arg>field_data=${user_data}[last_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:23.795" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:45:23.795" endtime="20210731 10:45:23.795"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:23.796" level="INFO">${payload} = {'lastname': 'Holm Cuzdan'}</msg>
<status status="PASS" starttime="20210731 10:45:23.796" endtime="20210731 10:45:23.796"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:45:23.806" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:45:23.807" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:45:23.796" endtime="20210731 10:45:23.807"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:45:23.807" endtime="20210731 10:45:23.807"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:45:23.807" endtime="20210731 10:45:23.807"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:23.796" endtime="20210731 10:45:23.807"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:23.796" endtime="20210731 10:45:23.807"/>
</for>
<status status="FAIL" starttime="20210731 10:45:23.794" endtime="20210731 10:45:23.808"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:23.794" endtime="20210731 10:45:23.808"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:23.794" endtime="20210731 10:45:23.808"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:23.813" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:23.824" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:23.824" level="INFO">${pids} = 18080
18087
18098</msg>
<status status="PASS" starttime="20210731 10:45:23.809" endtime="20210731 10:45:23.824"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:23.825" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:23.824" endtime="20210731 10:45:23.825"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:23.826" level="INFO">${pids} = ['18080', '18087', '18098']</msg>
<status status="PASS" starttime="20210731 10:45:23.825" endtime="20210731 10:45:23.826"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">18080</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:23.829" level="INFO">Running command 'kill 18080 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:23.826" endtime="20210731 10:45:23.830"/>
</kw>
<status status="PASS" starttime="20210731 10:45:23.826" endtime="20210731 10:45:23.830"/>
</iter>
<iter>
<var name="${pid}">18087</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:23.833" level="INFO">Running command 'kill 18087 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:23.830" endtime="20210731 10:45:23.834"/>
</kw>
<status status="PASS" starttime="20210731 10:45:23.830" endtime="20210731 10:45:23.834"/>
</iter>
<iter>
<var name="${pid}">18098</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:23.837" level="INFO">Running command 'kill 18098 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:23.834" endtime="20210731 10:45:23.838"/>
</kw>
<status status="PASS" starttime="20210731 10:45:23.834" endtime="20210731 10:45:23.838"/>
</iter>
<status status="PASS" starttime="20210731 10:45:23.826" endtime="20210731 10:45:23.838"/>
</for>
<status status="PASS" starttime="20210731 10:45:23.825" endtime="20210731 10:45:23.838"/>
</branch>
<status status="PASS" starttime="20210731 10:45:23.825" endtime="20210731 10:45:23.838"/>
</if>
<status status="PASS" starttime="20210731 10:45:23.808" endtime="20210731 10:45:23.839"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
lastname as such:
{
"lastname": 'Holm Cuzdan'
}
Then, each request should succeed with the following response body:
{
"message": "Updated",
"status": "SUCCESS"
}
This test not only verifies message and status but also verifies that the &lt;username&gt;'s data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:45:22.234" endtime="20210731 10:45:23.839">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t122" name="With Each Valid Token, Updating Last Name Of Each System User With Holm      Cuzdan Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:23.846" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:23.856" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:23.856" level="INFO">${pids} = 18127</msg>
<status status="PASS" starttime="20210731 10:45:23.841" endtime="20210731 10:45:23.857"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:23.858" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:23.857" endtime="20210731 10:45:23.858"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:23.858" level="INFO">${pids} = ['18127']</msg>
<status status="PASS" starttime="20210731 10:45:23.858" endtime="20210731 10:45:23.858"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">18127</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:23.862" level="INFO">Running command 'kill 18127 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:23.859" endtime="20210731 10:45:23.863"/>
</kw>
<status status="PASS" starttime="20210731 10:45:23.859" endtime="20210731 10:45:23.863"/>
</iter>
<status status="PASS" starttime="20210731 10:45:23.858" endtime="20210731 10:45:23.863"/>
</for>
<status status="PASS" starttime="20210731 10:45:23.858" endtime="20210731 10:45:23.863"/>
</branch>
<status status="PASS" starttime="20210731 10:45:23.858" endtime="20210731 10:45:23.863"/>
</if>
<status status="PASS" starttime="20210731 10:45:23.840" endtime="20210731 10:45:23.863"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:23.864" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:23.864" endtime="20210731 10:45:23.864"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:23.865" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:23.865" endtime="20210731 10:45:23.865"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:23.865" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:23.865" endtime="20210731 10:45:23.865"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:23.866" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:23.866" endtime="20210731 10:45:23.866"/>
</kw>
<msg timestamp="20210731 10:45:23.866" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:23.865" endtime="20210731 10:45:23.866"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:23.876" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:23.866" endtime="20210731 10:45:23.879"/>
</kw>
<status status="PASS" starttime="20210731 10:45:23.864" endtime="20210731 10:45:23.879"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:45:23.881" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:45:23.880" endtime="20210731 10:45:23.891"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:45:25.393" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:45:23.891" endtime="20210731 10:45:25.393"/>
</kw>
<status status="PASS" starttime="20210731 10:45:23.879" endtime="20210731 10:45:25.394"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:25.395" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:25.395" endtime="20210731 10:45:25.395"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:25.396" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:25.395" endtime="20210731 10:45:25.396"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:25.397" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:25.397" endtime="20210731 10:45:25.397"/>
</kw>
<msg timestamp="20210731 10:45:25.397" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:25.394" endtime="20210731 10:45:25.397"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:45:25.397" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:45:25.397" endtime="20210731 10:45:25.398"/>
</kw>
<status status="PASS" starttime="20210731 10:45:25.394" endtime="20210731 10:45:25.398"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:45:25.398" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:45:25.398" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:45:25.398" endtime="20210731 10:45:25.399"/>
</kw>
<status status="PASS" starttime="20210731 10:45:25.398" endtime="20210731 10:45:25.399"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:45:25.399" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:45:25.399" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:45:25.399" endtime="20210731 10:45:25.399"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:45:25.400" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:45:25.400" endtime="20210731 10:45:25.400"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:25.400" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:25.400" endtime="20210731 10:45:25.400"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:25.400" endtime="20210731 10:45:25.401"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:25.401" endtime="20210731 10:45:25.401"/>
</kw>
<status status="PASS" starttime="20210731 10:45:25.400" endtime="20210731 10:45:25.401"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:25.402" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:25.402" endtime="20210731 10:45:25.402"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:25.402" endtime="20210731 10:45:25.402"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:25.403" endtime="20210731 10:45:25.403"/>
</kw>
<status status="PASS" starttime="20210731 10:45:25.401" endtime="20210731 10:45:25.403"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:25.403" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:25.403" endtime="20210731 10:45:25.403"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:25.403" endtime="20210731 10:45:25.404"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:25.404" endtime="20210731 10:45:25.404"/>
</kw>
<status status="PASS" starttime="20210731 10:45:25.403" endtime="20210731 10:45:25.404"/>
</iter>
<status status="PASS" starttime="20210731 10:45:25.400" endtime="20210731 10:45:25.404"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:45:25.405" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:45:25.405" endtime="20210731 10:45:25.405"/>
</kw>
<status status="PASS" starttime="20210731 10:45:25.399" endtime="20210731 10:45:25.406"/>
</kw>
<status status="PASS" starttime="20210731 10:45:23.840" endtime="20210731 10:45:25.407"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 10:45:25.410" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:45:25.407" endtime="20210731 10:45:25.410"/>
</kw>
<msg timestamp="20210731 10:45:25.411" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:45:25.407" endtime="20210731 10:45:25.411"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>last_name</arg>
<arg>Two valid last names seperated by many space characters</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 10:45:25.412" endtime="20210731 10:45:25.412"/>
</kw>
<status status="PASS" starttime="20210731 10:45:25.411" endtime="20210731 10:45:25.412"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=lastname</arg>
<arg>field_data=${user_data}[last_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:25.414" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:45:25.413" endtime="20210731 10:45:25.414"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:25.414" level="INFO">${payload} = {'lastname': 'Holm      Cuzdan'}</msg>
<status status="PASS" starttime="20210731 10:45:25.414" endtime="20210731 10:45:25.414"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:45:25.424" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:45:25.424" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:45:25.415" endtime="20210731 10:45:25.424"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:45:25.425" endtime="20210731 10:45:25.425"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:45:25.425" endtime="20210731 10:45:25.425"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:25.414" endtime="20210731 10:45:25.425"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:25.414" endtime="20210731 10:45:25.425"/>
</for>
<status status="FAIL" starttime="20210731 10:45:25.413" endtime="20210731 10:45:25.425"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:25.413" endtime="20210731 10:45:25.425"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:25.412" endtime="20210731 10:45:25.425"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:25.429" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:25.440" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:25.440" level="INFO">${pids} = 18150
18157
18160</msg>
<status status="PASS" starttime="20210731 10:45:25.426" endtime="20210731 10:45:25.440"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:25.441" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:25.440" endtime="20210731 10:45:25.441"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:25.442" level="INFO">${pids} = ['18150', '18157', '18160']</msg>
<status status="PASS" starttime="20210731 10:45:25.442" endtime="20210731 10:45:25.442"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">18150</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:25.448" level="INFO">Running command 'kill 18150 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:25.444" endtime="20210731 10:45:25.448"/>
</kw>
<status status="PASS" starttime="20210731 10:45:25.442" endtime="20210731 10:45:25.448"/>
</iter>
<iter>
<var name="${pid}">18157</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:25.452" level="INFO">Running command 'kill 18157 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:25.449" endtime="20210731 10:45:25.452"/>
</kw>
<status status="PASS" starttime="20210731 10:45:25.448" endtime="20210731 10:45:25.452"/>
</iter>
<iter>
<var name="${pid}">18160</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:25.457" level="INFO">Running command 'kill 18160 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:25.453" endtime="20210731 10:45:25.458"/>
</kw>
<status status="PASS" starttime="20210731 10:45:25.453" endtime="20210731 10:45:25.458"/>
</iter>
<status status="PASS" starttime="20210731 10:45:25.442" endtime="20210731 10:45:25.458"/>
</for>
<status status="PASS" starttime="20210731 10:45:25.441" endtime="20210731 10:45:25.458"/>
</branch>
<status status="PASS" starttime="20210731 10:45:25.441" endtime="20210731 10:45:25.458"/>
</if>
<status status="PASS" starttime="20210731 10:45:25.426" endtime="20210731 10:45:25.459"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
lastname as such:
{
"lastname": 'Holm Cuzdan'
}
Then, each request should fail with the following response body:
{
"message": "Each last name must contain only characters from the set [a-zA-Z]. Last names must be seperated by a a single space. Last names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:45:23.839" endtime="20210731 10:45:25.459">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t123" name="With Each Valid Token, Updating Phone Number Of Each System User With Empty String Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:25.467" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:25.490" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:25.490" level="INFO">${pids} = 18189</msg>
<status status="PASS" starttime="20210731 10:45:25.462" endtime="20210731 10:45:25.490"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:25.492" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:25.491" endtime="20210731 10:45:25.492"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:25.492" level="INFO">${pids} = ['18189']</msg>
<status status="PASS" starttime="20210731 10:45:25.492" endtime="20210731 10:45:25.492"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">18189</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:25.497" level="INFO">Running command 'kill 18189 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:25.493" endtime="20210731 10:45:25.498"/>
</kw>
<status status="PASS" starttime="20210731 10:45:25.493" endtime="20210731 10:45:25.498"/>
</iter>
<status status="PASS" starttime="20210731 10:45:25.492" endtime="20210731 10:45:25.498"/>
</for>
<status status="PASS" starttime="20210731 10:45:25.492" endtime="20210731 10:45:25.498"/>
</branch>
<status status="PASS" starttime="20210731 10:45:25.492" endtime="20210731 10:45:25.498"/>
</if>
<status status="PASS" starttime="20210731 10:45:25.461" endtime="20210731 10:45:25.498"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:25.499" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:25.499" endtime="20210731 10:45:25.499"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:25.500" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:25.500" endtime="20210731 10:45:25.500"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:25.500" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:25.500" endtime="20210731 10:45:25.500"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:25.501" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:25.500" endtime="20210731 10:45:25.501"/>
</kw>
<msg timestamp="20210731 10:45:25.501" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:25.499" endtime="20210731 10:45:25.501"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:25.505" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:25.501" endtime="20210731 10:45:25.507"/>
</kw>
<status status="PASS" starttime="20210731 10:45:25.498" endtime="20210731 10:45:25.508"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:45:25.510" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:45:25.509" endtime="20210731 10:45:25.516"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:45:27.018" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:45:25.516" endtime="20210731 10:45:27.018"/>
</kw>
<status status="PASS" starttime="20210731 10:45:25.508" endtime="20210731 10:45:27.018"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:27.019" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:27.019" endtime="20210731 10:45:27.019"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:27.020" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:27.019" endtime="20210731 10:45:27.020"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:27.020" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:27.020" endtime="20210731 10:45:27.020"/>
</kw>
<msg timestamp="20210731 10:45:27.020" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:27.019" endtime="20210731 10:45:27.020"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:45:27.020" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:45:27.020" endtime="20210731 10:45:27.021"/>
</kw>
<status status="PASS" starttime="20210731 10:45:27.018" endtime="20210731 10:45:27.021"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:45:27.022" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:45:27.022" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:45:27.022" endtime="20210731 10:45:27.022"/>
</kw>
<status status="PASS" starttime="20210731 10:45:27.021" endtime="20210731 10:45:27.022"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:45:27.023" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:45:27.023" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:45:27.023" endtime="20210731 10:45:27.023"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:45:27.024" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:45:27.023" endtime="20210731 10:45:27.024"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:27.024" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:27.024" endtime="20210731 10:45:27.024"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:27.024" endtime="20210731 10:45:27.025"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:27.025" endtime="20210731 10:45:27.026"/>
</kw>
<status status="PASS" starttime="20210731 10:45:27.024" endtime="20210731 10:45:27.026"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:27.026" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:27.026" endtime="20210731 10:45:27.026"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:27.026" endtime="20210731 10:45:27.027"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:27.027" endtime="20210731 10:45:27.027"/>
</kw>
<status status="PASS" starttime="20210731 10:45:27.026" endtime="20210731 10:45:27.027"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:27.029" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:27.029" endtime="20210731 10:45:27.029"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:27.029" endtime="20210731 10:45:27.030"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:27.030" endtime="20210731 10:45:27.030"/>
</kw>
<status status="PASS" starttime="20210731 10:45:27.028" endtime="20210731 10:45:27.030"/>
</iter>
<status status="PASS" starttime="20210731 10:45:27.024" endtime="20210731 10:45:27.030"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:45:27.031" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:45:27.030" endtime="20210731 10:45:27.031"/>
</kw>
<status status="PASS" starttime="20210731 10:45:27.023" endtime="20210731 10:45:27.031"/>
</kw>
<status status="PASS" starttime="20210731 10:45:25.460" endtime="20210731 10:45:27.031"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 10:45:27.034" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:45:27.031" endtime="20210731 10:45:27.034"/>
</kw>
<msg timestamp="20210731 10:45:27.034" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:45:27.031" endtime="20210731 10:45:27.034"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>phone_number</arg>
<arg>An empty phone number</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 10:45:27.035" endtime="20210731 10:45:27.035"/>
</kw>
<status status="PASS" starttime="20210731 10:45:27.034" endtime="20210731 10:45:27.035"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=phone</arg>
<arg>field_data=${user_data}[phone_number]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:27.037" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:45:27.036" endtime="20210731 10:45:27.037"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:27.037" level="INFO">${payload} = {'phone': ''}</msg>
<status status="PASS" starttime="20210731 10:45:27.037" endtime="20210731 10:45:27.037"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:45:27.049" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:45:27.049" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:45:27.038" endtime="20210731 10:45:27.049"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:45:27.049" endtime="20210731 10:45:27.049"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:45:27.049" endtime="20210731 10:45:27.049"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:27.038" endtime="20210731 10:45:27.050"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:27.037" endtime="20210731 10:45:27.050"/>
</for>
<status status="FAIL" starttime="20210731 10:45:27.036" endtime="20210731 10:45:27.050"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:27.036" endtime="20210731 10:45:27.050"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:27.036" endtime="20210731 10:45:27.050"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:27.056" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:27.068" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:27.068" level="INFO">${pids} = 18212
18219
18222</msg>
<status status="PASS" starttime="20210731 10:45:27.053" endtime="20210731 10:45:27.068"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:27.069" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:27.068" endtime="20210731 10:45:27.069"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:27.069" level="INFO">${pids} = ['18212', '18219', '18222']</msg>
<status status="PASS" starttime="20210731 10:45:27.069" endtime="20210731 10:45:27.069"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">18212</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:27.074" level="INFO">Running command 'kill 18212 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:27.070" endtime="20210731 10:45:27.075"/>
</kw>
<status status="PASS" starttime="20210731 10:45:27.070" endtime="20210731 10:45:27.075"/>
</iter>
<iter>
<var name="${pid}">18219</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:27.080" level="INFO">Running command 'kill 18219 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:27.076" endtime="20210731 10:45:27.084"/>
</kw>
<status status="PASS" starttime="20210731 10:45:27.075" endtime="20210731 10:45:27.084"/>
</iter>
<iter>
<var name="${pid}">18222</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:27.089" level="INFO">Running command 'kill 18222 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:27.085" endtime="20210731 10:45:27.090"/>
</kw>
<status status="PASS" starttime="20210731 10:45:27.085" endtime="20210731 10:45:27.090"/>
</iter>
<status status="PASS" starttime="20210731 10:45:27.069" endtime="20210731 10:45:27.090"/>
</for>
<status status="PASS" starttime="20210731 10:45:27.069" endtime="20210731 10:45:27.090"/>
</branch>
<status status="PASS" starttime="20210731 10:45:27.069" endtime="20210731 10:45:27.090"/>
</if>
<status status="PASS" starttime="20210731 10:45:27.051" endtime="20210731 10:45:27.090"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
phone number as such:
{
"phone": ''
}
Then, each request should fail with the following response body:
{
"message": "mandatory phone number can only contain numbers [0-9] and optionally a single plus sign at the beginning indicating the country code",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:45:25.459" endtime="20210731 10:45:27.090">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t124" name="With Each Valid Token, Updating Phone Number Of Each System User With +358506662712 Results In Success">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:27.095" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:27.106" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:27.106" level="INFO">${pids} = 18251</msg>
<status status="PASS" starttime="20210731 10:45:27.092" endtime="20210731 10:45:27.106"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:27.107" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:27.107" endtime="20210731 10:45:27.107"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:27.108" level="INFO">${pids} = ['18251']</msg>
<status status="PASS" starttime="20210731 10:45:27.108" endtime="20210731 10:45:27.108"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">18251</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:27.112" level="INFO">Running command 'kill 18251 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:27.109" endtime="20210731 10:45:27.113"/>
</kw>
<status status="PASS" starttime="20210731 10:45:27.108" endtime="20210731 10:45:27.113"/>
</iter>
<status status="PASS" starttime="20210731 10:45:27.108" endtime="20210731 10:45:27.114"/>
</for>
<status status="PASS" starttime="20210731 10:45:27.108" endtime="20210731 10:45:27.114"/>
</branch>
<status status="PASS" starttime="20210731 10:45:27.107" endtime="20210731 10:45:27.114"/>
</if>
<status status="PASS" starttime="20210731 10:45:27.092" endtime="20210731 10:45:27.114"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:27.115" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:27.115" endtime="20210731 10:45:27.115"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:27.116" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:27.116" endtime="20210731 10:45:27.116"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:27.118" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:27.116" endtime="20210731 10:45:27.118"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:27.118" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:27.118" endtime="20210731 10:45:27.118"/>
</kw>
<msg timestamp="20210731 10:45:27.118" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:27.115" endtime="20210731 10:45:27.118"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:27.122" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:27.118" endtime="20210731 10:45:27.123"/>
</kw>
<status status="PASS" starttime="20210731 10:45:27.114" endtime="20210731 10:45:27.124"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:45:27.125" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:45:27.124" endtime="20210731 10:45:27.129"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:45:28.630" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:45:27.130" endtime="20210731 10:45:28.630"/>
</kw>
<status status="PASS" starttime="20210731 10:45:27.124" endtime="20210731 10:45:28.631"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:28.632" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:28.632" endtime="20210731 10:45:28.632"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:28.632" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:28.632" endtime="20210731 10:45:28.632"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:28.633" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:28.632" endtime="20210731 10:45:28.633"/>
</kw>
<msg timestamp="20210731 10:45:28.633" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:28.631" endtime="20210731 10:45:28.633"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:45:28.633" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:45:28.633" endtime="20210731 10:45:28.634"/>
</kw>
<status status="PASS" starttime="20210731 10:45:28.631" endtime="20210731 10:45:28.634"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:45:28.634" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:45:28.634" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:45:28.634" endtime="20210731 10:45:28.635"/>
</kw>
<status status="PASS" starttime="20210731 10:45:28.634" endtime="20210731 10:45:28.635"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:45:28.635" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:45:28.635" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:45:28.635" endtime="20210731 10:45:28.635"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:45:28.636" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:45:28.636" endtime="20210731 10:45:28.636"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:28.636" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:28.636" endtime="20210731 10:45:28.636"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:28.636" endtime="20210731 10:45:28.637"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:28.637" endtime="20210731 10:45:28.638"/>
</kw>
<status status="PASS" starttime="20210731 10:45:28.636" endtime="20210731 10:45:28.638"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:28.638" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:28.638" endtime="20210731 10:45:28.638"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:28.638" endtime="20210731 10:45:28.639"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:28.639" endtime="20210731 10:45:28.639"/>
</kw>
<status status="PASS" starttime="20210731 10:45:28.638" endtime="20210731 10:45:28.639"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:28.640" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:28.640" endtime="20210731 10:45:28.640"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:28.640" endtime="20210731 10:45:28.641"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:28.641" endtime="20210731 10:45:28.641"/>
</kw>
<status status="PASS" starttime="20210731 10:45:28.640" endtime="20210731 10:45:28.641"/>
</iter>
<status status="PASS" starttime="20210731 10:45:28.636" endtime="20210731 10:45:28.641"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:45:28.642" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:45:28.642" endtime="20210731 10:45:28.642"/>
</kw>
<status status="PASS" starttime="20210731 10:45:28.635" endtime="20210731 10:45:28.642"/>
</kw>
<status status="PASS" starttime="20210731 10:45:27.092" endtime="20210731 10:45:28.643"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 10:45:28.647" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:45:28.644" endtime="20210731 10:45:28.647"/>
</kw>
<msg timestamp="20210731 10:45:28.647" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:45:28.643" endtime="20210731 10:45:28.647"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>phone_number</arg>
<arg>A valid phone number with a country code +358</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 10:45:28.648" endtime="20210731 10:45:28.648"/>
</kw>
<status status="PASS" starttime="20210731 10:45:28.647" endtime="20210731 10:45:28.648"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=phone</arg>
<arg>field_data=${user_data}[phone_number]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:28.650" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:45:28.650" endtime="20210731 10:45:28.650"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:28.650" level="INFO">${payload} = {'phone': '+358506662712'}</msg>
<status status="PASS" starttime="20210731 10:45:28.650" endtime="20210731 10:45:28.650"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:45:28.660" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:45:28.660" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:45:28.651" endtime="20210731 10:45:28.660"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:45:28.661" endtime="20210731 10:45:28.661"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:45:28.661" endtime="20210731 10:45:28.661"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:28.651" endtime="20210731 10:45:28.661"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:28.651" endtime="20210731 10:45:28.661"/>
</for>
<status status="FAIL" starttime="20210731 10:45:28.649" endtime="20210731 10:45:28.661"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:28.649" endtime="20210731 10:45:28.661"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:28.649" endtime="20210731 10:45:28.661"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:28.665" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:28.676" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:28.676" level="INFO">${pids} = 18274
18281
18283</msg>
<status status="PASS" starttime="20210731 10:45:28.662" endtime="20210731 10:45:28.676"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:28.677" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:28.676" endtime="20210731 10:45:28.677"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:28.678" level="INFO">${pids} = ['18274', '18281', '18283']</msg>
<status status="PASS" starttime="20210731 10:45:28.678" endtime="20210731 10:45:28.678"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">18274</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:28.681" level="INFO">Running command 'kill 18274 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:28.678" endtime="20210731 10:45:28.682"/>
</kw>
<status status="PASS" starttime="20210731 10:45:28.678" endtime="20210731 10:45:28.682"/>
</iter>
<iter>
<var name="${pid}">18281</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:28.685" level="INFO">Running command 'kill 18281 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:28.682" endtime="20210731 10:45:28.686"/>
</kw>
<status status="PASS" starttime="20210731 10:45:28.682" endtime="20210731 10:45:28.686"/>
</iter>
<iter>
<var name="${pid}">18283</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:28.690" level="INFO">Running command 'kill 18283 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:28.686" endtime="20210731 10:45:28.691"/>
</kw>
<status status="PASS" starttime="20210731 10:45:28.686" endtime="20210731 10:45:28.691"/>
</iter>
<status status="PASS" starttime="20210731 10:45:28.678" endtime="20210731 10:45:28.691"/>
</for>
<status status="PASS" starttime="20210731 10:45:28.677" endtime="20210731 10:45:28.691"/>
</branch>
<status status="PASS" starttime="20210731 10:45:28.677" endtime="20210731 10:45:28.691"/>
</if>
<status status="PASS" starttime="20210731 10:45:28.661" endtime="20210731 10:45:28.691"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
phone number as such:
{
"phone": '+358506662712'
}
Then, each request should succeed with the following response body:
{
"message": "Updated",
"status": "SUCCESS"
}
This test not only verifies message and status but also verifies that the &lt;username&gt;'s data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:45:27.091" endtime="20210731 10:45:28.692">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t125" name="With Each Valid Token, Updating Phone Number Of Each System User With +358+50666+2712 Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:28.698" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:28.710" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:28.710" level="INFO">${pids} = 18312</msg>
<status status="PASS" starttime="20210731 10:45:28.694" endtime="20210731 10:45:28.710"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:28.711" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:28.710" endtime="20210731 10:45:28.711"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:28.713" level="INFO">${pids} = ['18312']</msg>
<status status="PASS" starttime="20210731 10:45:28.712" endtime="20210731 10:45:28.713"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">18312</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:28.717" level="INFO">Running command 'kill 18312 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:28.713" endtime="20210731 10:45:28.717"/>
</kw>
<status status="PASS" starttime="20210731 10:45:28.713" endtime="20210731 10:45:28.717"/>
</iter>
<status status="PASS" starttime="20210731 10:45:28.713" endtime="20210731 10:45:28.717"/>
</for>
<status status="PASS" starttime="20210731 10:45:28.711" endtime="20210731 10:45:28.717"/>
</branch>
<status status="PASS" starttime="20210731 10:45:28.711" endtime="20210731 10:45:28.717"/>
</if>
<status status="PASS" starttime="20210731 10:45:28.694" endtime="20210731 10:45:28.718"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:28.719" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:28.718" endtime="20210731 10:45:28.719"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:28.719" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:28.719" endtime="20210731 10:45:28.720"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:28.720" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:28.720" endtime="20210731 10:45:28.720"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:28.720" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:28.720" endtime="20210731 10:45:28.720"/>
</kw>
<msg timestamp="20210731 10:45:28.721" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:28.719" endtime="20210731 10:45:28.721"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:28.724" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:28.721" endtime="20210731 10:45:28.726"/>
</kw>
<status status="PASS" starttime="20210731 10:45:28.718" endtime="20210731 10:45:28.726"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:45:28.727" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:45:28.727" endtime="20210731 10:45:28.732"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:45:30.233" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:45:28.733" endtime="20210731 10:45:30.234"/>
</kw>
<status status="PASS" starttime="20210731 10:45:28.726" endtime="20210731 10:45:30.234"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:30.235" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:30.235" endtime="20210731 10:45:30.235"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:30.235" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:30.235" endtime="20210731 10:45:30.235"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:30.236" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:30.235" endtime="20210731 10:45:30.236"/>
</kw>
<msg timestamp="20210731 10:45:30.236" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:30.234" endtime="20210731 10:45:30.236"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:45:30.237" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:45:30.237" endtime="20210731 10:45:30.238"/>
</kw>
<status status="PASS" starttime="20210731 10:45:30.234" endtime="20210731 10:45:30.238"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:45:30.239" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:45:30.239" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:45:30.239" endtime="20210731 10:45:30.240"/>
</kw>
<status status="PASS" starttime="20210731 10:45:30.238" endtime="20210731 10:45:30.240"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:45:30.241" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:45:30.241" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:45:30.240" endtime="20210731 10:45:30.241"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:45:30.243" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:45:30.241" endtime="20210731 10:45:30.243"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:30.244" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:30.244" endtime="20210731 10:45:30.244"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:30.245" endtime="20210731 10:45:30.245"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:30.246" endtime="20210731 10:45:30.246"/>
</kw>
<status status="PASS" starttime="20210731 10:45:30.243" endtime="20210731 10:45:30.246"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:30.246" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:30.246" endtime="20210731 10:45:30.246"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:30.246" endtime="20210731 10:45:30.247"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:30.247" endtime="20210731 10:45:30.248"/>
</kw>
<status status="PASS" starttime="20210731 10:45:30.246" endtime="20210731 10:45:30.248"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:30.248" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:30.248" endtime="20210731 10:45:30.248"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:30.248" endtime="20210731 10:45:30.249"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:30.249" endtime="20210731 10:45:30.250"/>
</kw>
<status status="PASS" starttime="20210731 10:45:30.248" endtime="20210731 10:45:30.250"/>
</iter>
<status status="PASS" starttime="20210731 10:45:30.243" endtime="20210731 10:45:30.250"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:45:30.250" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:45:30.250" endtime="20210731 10:45:30.250"/>
</kw>
<status status="PASS" starttime="20210731 10:45:30.240" endtime="20210731 10:45:30.250"/>
</kw>
<status status="PASS" starttime="20210731 10:45:28.693" endtime="20210731 10:45:30.250"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 10:45:30.255" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:45:30.251" endtime="20210731 10:45:30.255"/>
</kw>
<msg timestamp="20210731 10:45:30.255" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:45:30.251" endtime="20210731 10:45:30.255"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>phone_number</arg>
<arg>An invalid phone number with a country code with second and third + signs misplaced</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 10:45:30.256" endtime="20210731 10:45:30.256"/>
</kw>
<status status="PASS" starttime="20210731 10:45:30.255" endtime="20210731 10:45:30.256"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=phone</arg>
<arg>field_data=${user_data}[phone_number]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:30.259" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:45:30.259" endtime="20210731 10:45:30.259"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:30.260" level="INFO">${payload} = {'phone': '+358+50666+2712'}</msg>
<status status="PASS" starttime="20210731 10:45:30.259" endtime="20210731 10:45:30.260"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:45:30.270" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:45:30.270" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:45:30.260" endtime="20210731 10:45:30.270"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:45:30.270" endtime="20210731 10:45:30.270"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:45:30.271" endtime="20210731 10:45:30.271"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:30.260" endtime="20210731 10:45:30.271"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:30.260" endtime="20210731 10:45:30.271"/>
</for>
<status status="FAIL" starttime="20210731 10:45:30.256" endtime="20210731 10:45:30.271"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:30.256" endtime="20210731 10:45:30.271"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:30.256" endtime="20210731 10:45:30.271"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:30.276" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:30.287" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:30.287" level="INFO">${pids} = 18335
18342
18351</msg>
<status status="PASS" starttime="20210731 10:45:30.272" endtime="20210731 10:45:30.287"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:30.289" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:30.288" endtime="20210731 10:45:30.289"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:30.289" level="INFO">${pids} = ['18335', '18342', '18351']</msg>
<status status="PASS" starttime="20210731 10:45:30.289" endtime="20210731 10:45:30.289"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">18335</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:30.294" level="INFO">Running command 'kill 18335 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:30.290" endtime="20210731 10:45:30.295"/>
</kw>
<status status="PASS" starttime="20210731 10:45:30.290" endtime="20210731 10:45:30.295"/>
</iter>
<iter>
<var name="${pid}">18342</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:30.299" level="INFO">Running command 'kill 18342 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:30.295" endtime="20210731 10:45:30.300"/>
</kw>
<status status="PASS" starttime="20210731 10:45:30.295" endtime="20210731 10:45:30.300"/>
</iter>
<iter>
<var name="${pid}">18351</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:30.304" level="INFO">Running command 'kill 18351 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:30.300" endtime="20210731 10:45:30.304"/>
</kw>
<status status="PASS" starttime="20210731 10:45:30.300" endtime="20210731 10:45:30.304"/>
</iter>
<status status="PASS" starttime="20210731 10:45:30.289" endtime="20210731 10:45:30.305"/>
</for>
<status status="PASS" starttime="20210731 10:45:30.289" endtime="20210731 10:45:30.305"/>
</branch>
<status status="PASS" starttime="20210731 10:45:30.289" endtime="20210731 10:45:30.305"/>
</if>
<status status="PASS" starttime="20210731 10:45:30.271" endtime="20210731 10:45:30.305"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
phone number as such:
{
"phone": '+358+50666+2712'
}
Then, each request should fail with the following response body:
{
"message": "mandatory phone number can only contain numbers [0-9] and optionally a single plus sign at the beginning indicating the country code",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:45:28.692" endtime="20210731 10:45:30.305">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t126" name="With Each Valid Token, Updating Phone Number Of Each System User With 0+506662712+ Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:30.319" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:30.329" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:30.329" level="INFO">${pids} = 18380</msg>
<status status="PASS" starttime="20210731 10:45:30.307" endtime="20210731 10:45:30.329"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:30.330" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:30.329" endtime="20210731 10:45:30.330"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:30.331" level="INFO">${pids} = ['18380']</msg>
<status status="PASS" starttime="20210731 10:45:30.331" endtime="20210731 10:45:30.331"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">18380</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:30.335" level="INFO">Running command 'kill 18380 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:30.331" endtime="20210731 10:45:30.336"/>
</kw>
<status status="PASS" starttime="20210731 10:45:30.331" endtime="20210731 10:45:30.336"/>
</iter>
<status status="PASS" starttime="20210731 10:45:30.331" endtime="20210731 10:45:30.336"/>
</for>
<status status="PASS" starttime="20210731 10:45:30.330" endtime="20210731 10:45:30.336"/>
</branch>
<status status="PASS" starttime="20210731 10:45:30.330" endtime="20210731 10:45:30.336"/>
</if>
<status status="PASS" starttime="20210731 10:45:30.307" endtime="20210731 10:45:30.336"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:30.338" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:30.337" endtime="20210731 10:45:30.338"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:30.338" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:30.338" endtime="20210731 10:45:30.338"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:30.339" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:30.338" endtime="20210731 10:45:30.339"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:30.340" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:30.339" endtime="20210731 10:45:30.340"/>
</kw>
<msg timestamp="20210731 10:45:30.340" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:30.338" endtime="20210731 10:45:30.340"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:30.344" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:30.340" endtime="20210731 10:45:30.347"/>
</kw>
<status status="PASS" starttime="20210731 10:45:30.337" endtime="20210731 10:45:30.348"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:45:30.349" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:45:30.348" endtime="20210731 10:45:30.354"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:45:31.855" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:45:30.354" endtime="20210731 10:45:31.856"/>
</kw>
<status status="PASS" starttime="20210731 10:45:30.348" endtime="20210731 10:45:31.856"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:31.857" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:31.857" endtime="20210731 10:45:31.857"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:31.858" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:31.857" endtime="20210731 10:45:31.858"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:31.858" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:31.858" endtime="20210731 10:45:31.858"/>
</kw>
<msg timestamp="20210731 10:45:31.858" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:31.856" endtime="20210731 10:45:31.858"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:45:31.859" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:45:31.858" endtime="20210731 10:45:31.859"/>
</kw>
<status status="PASS" starttime="20210731 10:45:31.856" endtime="20210731 10:45:31.859"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:45:31.860" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:45:31.860" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:45:31.860" endtime="20210731 10:45:31.860"/>
</kw>
<status status="PASS" starttime="20210731 10:45:31.860" endtime="20210731 10:45:31.860"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:45:31.861" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:45:31.861" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:45:31.861" endtime="20210731 10:45:31.861"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:45:31.862" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:45:31.861" endtime="20210731 10:45:31.862"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:31.862" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:31.862" endtime="20210731 10:45:31.862"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:31.862" endtime="20210731 10:45:31.863"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:31.863" endtime="20210731 10:45:31.864"/>
</kw>
<status status="PASS" starttime="20210731 10:45:31.862" endtime="20210731 10:45:31.864"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:31.864" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:31.864" endtime="20210731 10:45:31.864"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:31.864" endtime="20210731 10:45:31.865"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:31.865" endtime="20210731 10:45:31.865"/>
</kw>
<status status="PASS" starttime="20210731 10:45:31.864" endtime="20210731 10:45:31.865"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:31.865" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:31.865" endtime="20210731 10:45:31.865"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:31.866" endtime="20210731 10:45:31.866"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:31.866" endtime="20210731 10:45:31.867"/>
</kw>
<status status="PASS" starttime="20210731 10:45:31.865" endtime="20210731 10:45:31.867"/>
</iter>
<status status="PASS" starttime="20210731 10:45:31.862" endtime="20210731 10:45:31.867"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:45:31.867" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:45:31.867" endtime="20210731 10:45:31.867"/>
</kw>
<status status="PASS" starttime="20210731 10:45:31.861" endtime="20210731 10:45:31.867"/>
</kw>
<status status="PASS" starttime="20210731 10:45:30.307" endtime="20210731 10:45:31.867"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 10:45:31.870" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:45:31.868" endtime="20210731 10:45:31.870"/>
</kw>
<msg timestamp="20210731 10:45:31.871" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:45:31.868" endtime="20210731 10:45:31.871"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>phone_number</arg>
<arg>An invalid phone number with two + signs misplaced</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 10:45:31.871" endtime="20210731 10:45:31.872"/>
</kw>
<status status="PASS" starttime="20210731 10:45:31.871" endtime="20210731 10:45:31.872"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=phone</arg>
<arg>field_data=${user_data}[phone_number]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:31.874" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:45:31.873" endtime="20210731 10:45:31.874"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:31.874" level="INFO">${payload} = {'phone': '0+506662712+'}</msg>
<status status="PASS" starttime="20210731 10:45:31.874" endtime="20210731 10:45:31.874"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:45:31.884" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:45:31.884" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:45:31.875" endtime="20210731 10:45:31.884"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:45:31.885" endtime="20210731 10:45:31.885"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:45:31.885" endtime="20210731 10:45:31.885"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:31.874" endtime="20210731 10:45:31.885"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:31.874" endtime="20210731 10:45:31.885"/>
</for>
<status status="FAIL" starttime="20210731 10:45:31.872" endtime="20210731 10:45:31.885"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:31.872" endtime="20210731 10:45:31.885"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:31.872" endtime="20210731 10:45:31.885"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:31.892" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:31.902" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:31.903" level="INFO">${pids} = 18403
18410
18412</msg>
<status status="PASS" starttime="20210731 10:45:31.888" endtime="20210731 10:45:31.903"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:31.904" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:31.903" endtime="20210731 10:45:31.904"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:31.904" level="INFO">${pids} = ['18403', '18410', '18412']</msg>
<status status="PASS" starttime="20210731 10:45:31.904" endtime="20210731 10:45:31.904"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">18403</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:31.909" level="INFO">Running command 'kill 18403 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:31.905" endtime="20210731 10:45:31.909"/>
</kw>
<status status="PASS" starttime="20210731 10:45:31.905" endtime="20210731 10:45:31.910"/>
</iter>
<iter>
<var name="${pid}">18410</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:31.914" level="INFO">Running command 'kill 18410 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:31.910" endtime="20210731 10:45:31.915"/>
</kw>
<status status="PASS" starttime="20210731 10:45:31.910" endtime="20210731 10:45:31.915"/>
</iter>
<iter>
<var name="${pid}">18412</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:31.919" level="INFO">Running command 'kill 18412 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:31.915" endtime="20210731 10:45:31.919"/>
</kw>
<status status="PASS" starttime="20210731 10:45:31.915" endtime="20210731 10:45:31.919"/>
</iter>
<status status="PASS" starttime="20210731 10:45:31.904" endtime="20210731 10:45:31.919"/>
</for>
<status status="PASS" starttime="20210731 10:45:31.904" endtime="20210731 10:45:31.920"/>
</branch>
<status status="PASS" starttime="20210731 10:45:31.904" endtime="20210731 10:45:31.920"/>
</if>
<status status="PASS" starttime="20210731 10:45:31.888" endtime="20210731 10:45:31.920"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
phone number as such:
{
"phone": '0+506662712+'
}
Then, each request should fail with the following response body:
{
"message": "mandatory phone number can only contain numbers [0-9] and optionally a single plus sign at the beginning indicating the country code",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:45:30.306" endtime="20210731 10:45:31.920">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t127" name="With Each Valid Token, Updating Phone Number Of Each System User With 0506662712 Results In Success">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:31.925" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:31.937" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:31.937" level="INFO">${pids} = 18441</msg>
<status status="PASS" starttime="20210731 10:45:31.922" endtime="20210731 10:45:31.937"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:31.938" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:31.937" endtime="20210731 10:45:31.938"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:31.939" level="INFO">${pids} = ['18441']</msg>
<status status="PASS" starttime="20210731 10:45:31.938" endtime="20210731 10:45:31.939"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">18441</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:31.946" level="INFO">Running command 'kill 18441 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:31.939" endtime="20210731 10:45:31.946"/>
</kw>
<status status="PASS" starttime="20210731 10:45:31.939" endtime="20210731 10:45:31.946"/>
</iter>
<status status="PASS" starttime="20210731 10:45:31.939" endtime="20210731 10:45:31.946"/>
</for>
<status status="PASS" starttime="20210731 10:45:31.938" endtime="20210731 10:45:31.946"/>
</branch>
<status status="PASS" starttime="20210731 10:45:31.938" endtime="20210731 10:45:31.946"/>
</if>
<status status="PASS" starttime="20210731 10:45:31.922" endtime="20210731 10:45:31.947"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:31.948" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:31.948" endtime="20210731 10:45:31.948"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:31.949" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:31.948" endtime="20210731 10:45:31.949"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:31.949" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:31.949" endtime="20210731 10:45:31.949"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:31.950" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:31.949" endtime="20210731 10:45:31.950"/>
</kw>
<msg timestamp="20210731 10:45:31.950" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:31.948" endtime="20210731 10:45:31.950"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:31.954" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:31.950" endtime="20210731 10:45:31.956"/>
</kw>
<status status="PASS" starttime="20210731 10:45:31.947" endtime="20210731 10:45:31.956"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:45:31.957" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:45:31.957" endtime="20210731 10:45:31.962"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:45:33.466" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:45:31.963" endtime="20210731 10:45:33.467"/>
</kw>
<status status="PASS" starttime="20210731 10:45:31.956" endtime="20210731 10:45:33.468"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:33.473" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:33.472" endtime="20210731 10:45:33.473"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:33.476" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:33.474" endtime="20210731 10:45:33.476"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:33.479" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:33.476" endtime="20210731 10:45:33.479"/>
</kw>
<msg timestamp="20210731 10:45:33.480" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:33.470" endtime="20210731 10:45:33.480"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:45:33.484" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:45:33.480" endtime="20210731 10:45:33.485"/>
</kw>
<status status="PASS" starttime="20210731 10:45:33.468" endtime="20210731 10:45:33.485"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:45:33.486" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:45:33.486" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:45:33.486" endtime="20210731 10:45:33.487"/>
</kw>
<status status="PASS" starttime="20210731 10:45:33.485" endtime="20210731 10:45:33.487"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:45:33.488" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:45:33.488" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:45:33.488" endtime="20210731 10:45:33.488"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:45:33.489" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:45:33.488" endtime="20210731 10:45:33.489"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:33.492" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:33.489" endtime="20210731 10:45:33.492"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:33.493" endtime="20210731 10:45:33.496"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:33.496" endtime="20210731 10:45:33.497"/>
</kw>
<status status="PASS" starttime="20210731 10:45:33.489" endtime="20210731 10:45:33.497"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:33.497" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:33.497" endtime="20210731 10:45:33.497"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:33.498" endtime="20210731 10:45:33.498"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:33.499" endtime="20210731 10:45:33.499"/>
</kw>
<status status="PASS" starttime="20210731 10:45:33.497" endtime="20210731 10:45:33.499"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:33.499" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:33.499" endtime="20210731 10:45:33.499"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:33.499" endtime="20210731 10:45:33.500"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:33.500" endtime="20210731 10:45:33.501"/>
</kw>
<status status="PASS" starttime="20210731 10:45:33.499" endtime="20210731 10:45:33.501"/>
</iter>
<status status="PASS" starttime="20210731 10:45:33.489" endtime="20210731 10:45:33.501"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:45:33.501" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:45:33.501" endtime="20210731 10:45:33.501"/>
</kw>
<status status="PASS" starttime="20210731 10:45:33.487" endtime="20210731 10:45:33.501"/>
</kw>
<status status="PASS" starttime="20210731 10:45:31.921" endtime="20210731 10:45:33.501"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 10:45:33.504" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:45:33.502" endtime="20210731 10:45:33.504"/>
</kw>
<msg timestamp="20210731 10:45:33.505" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:45:33.502" endtime="20210731 10:45:33.505"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>phone_number</arg>
<arg>A valid phone number without a country code. This assumes Finland</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 10:45:33.505" endtime="20210731 10:45:33.506"/>
</kw>
<status status="PASS" starttime="20210731 10:45:33.505" endtime="20210731 10:45:33.506"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=phone</arg>
<arg>field_data=${user_data}[phone_number]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:33.507" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:45:33.507" endtime="20210731 10:45:33.507"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:33.508" level="INFO">${payload} = {'phone': '0506662712'}</msg>
<status status="PASS" starttime="20210731 10:45:33.507" endtime="20210731 10:45:33.508"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:45:33.519" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:45:33.519" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:45:33.509" endtime="20210731 10:45:33.519"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:45:33.519" endtime="20210731 10:45:33.519"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:45:33.519" endtime="20210731 10:45:33.519"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:33.509" endtime="20210731 10:45:33.519"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:33.509" endtime="20210731 10:45:33.519"/>
</for>
<status status="FAIL" starttime="20210731 10:45:33.506" endtime="20210731 10:45:33.519"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:33.506" endtime="20210731 10:45:33.519"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:33.506" endtime="20210731 10:45:33.520"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:33.524" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:33.534" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:33.534" level="INFO">${pids} = 18464
18471
18474</msg>
<status status="PASS" starttime="20210731 10:45:33.520" endtime="20210731 10:45:33.534"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:33.535" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:33.535" endtime="20210731 10:45:33.535"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:33.536" level="INFO">${pids} = ['18464', '18471', '18474']</msg>
<status status="PASS" starttime="20210731 10:45:33.536" endtime="20210731 10:45:33.536"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">18464</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:33.540" level="INFO">Running command 'kill 18464 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:33.537" endtime="20210731 10:45:33.541"/>
</kw>
<status status="PASS" starttime="20210731 10:45:33.537" endtime="20210731 10:45:33.541"/>
</iter>
<iter>
<var name="${pid}">18471</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:33.547" level="INFO">Running command 'kill 18471 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:33.542" endtime="20210731 10:45:33.547"/>
</kw>
<status status="PASS" starttime="20210731 10:45:33.542" endtime="20210731 10:45:33.547"/>
</iter>
<iter>
<var name="${pid}">18474</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:33.552" level="INFO">Running command 'kill 18474 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:33.548" endtime="20210731 10:45:33.553"/>
</kw>
<status status="PASS" starttime="20210731 10:45:33.547" endtime="20210731 10:45:33.553"/>
</iter>
<status status="PASS" starttime="20210731 10:45:33.536" endtime="20210731 10:45:33.553"/>
</for>
<status status="PASS" starttime="20210731 10:45:33.536" endtime="20210731 10:45:33.553"/>
</branch>
<status status="PASS" starttime="20210731 10:45:33.535" endtime="20210731 10:45:33.553"/>
</if>
<status status="PASS" starttime="20210731 10:45:33.520" endtime="20210731 10:45:33.553"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
phone number as such:
{
"phone": '0506662712'
}
Then, each request should succeed with the following response body:
{
"message": "Updated",
"status": "SUCCESS"
}
This test not only verifies message and status but also verifies that the &lt;username&gt;'s data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:45:31.921" endtime="20210731 10:45:33.553">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t128" name="With Each Valid Token, Updating Phone Number Of Each System User With +358506abc!#662712 Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:33.559" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:33.572" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:33.572" level="INFO">${pids} = 18503</msg>
<status status="PASS" starttime="20210731 10:45:33.555" endtime="20210731 10:45:33.572"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:33.573" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:33.572" endtime="20210731 10:45:33.573"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:33.574" level="INFO">${pids} = ['18503']</msg>
<status status="PASS" starttime="20210731 10:45:33.573" endtime="20210731 10:45:33.574"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">18503</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:33.578" level="INFO">Running command 'kill 18503 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:33.574" endtime="20210731 10:45:33.579"/>
</kw>
<status status="PASS" starttime="20210731 10:45:33.574" endtime="20210731 10:45:33.579"/>
</iter>
<status status="PASS" starttime="20210731 10:45:33.574" endtime="20210731 10:45:33.579"/>
</for>
<status status="PASS" starttime="20210731 10:45:33.573" endtime="20210731 10:45:33.579"/>
</branch>
<status status="PASS" starttime="20210731 10:45:33.573" endtime="20210731 10:45:33.579"/>
</if>
<status status="PASS" starttime="20210731 10:45:33.555" endtime="20210731 10:45:33.579"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:33.580" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:33.580" endtime="20210731 10:45:33.580"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:33.581" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:33.581" endtime="20210731 10:45:33.581"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:33.581" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:33.581" endtime="20210731 10:45:33.581"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:33.582" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:33.581" endtime="20210731 10:45:33.582"/>
</kw>
<msg timestamp="20210731 10:45:33.582" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:33.580" endtime="20210731 10:45:33.582"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:33.585" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:33.582" endtime="20210731 10:45:33.588"/>
</kw>
<status status="PASS" starttime="20210731 10:45:33.579" endtime="20210731 10:45:33.588"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:45:33.589" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:45:33.589" endtime="20210731 10:45:33.594"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:45:35.095" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:45:33.595" endtime="20210731 10:45:35.096"/>
</kw>
<status status="PASS" starttime="20210731 10:45:33.588" endtime="20210731 10:45:35.096"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:35.098" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:35.097" endtime="20210731 10:45:35.098"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:35.099" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:35.098" endtime="20210731 10:45:35.099"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:35.099" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:35.099" endtime="20210731 10:45:35.099"/>
</kw>
<msg timestamp="20210731 10:45:35.099" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:35.097" endtime="20210731 10:45:35.099"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:45:35.100" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:45:35.099" endtime="20210731 10:45:35.100"/>
</kw>
<status status="PASS" starttime="20210731 10:45:35.096" endtime="20210731 10:45:35.100"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:45:35.101" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:45:35.101" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:45:35.101" endtime="20210731 10:45:35.101"/>
</kw>
<status status="PASS" starttime="20210731 10:45:35.101" endtime="20210731 10:45:35.101"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:45:35.102" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:45:35.102" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:45:35.102" endtime="20210731 10:45:35.102"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:45:35.102" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:45:35.102" endtime="20210731 10:45:35.102"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:35.103" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:35.102" endtime="20210731 10:45:35.103"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:35.103" endtime="20210731 10:45:35.104"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:35.104" endtime="20210731 10:45:35.104"/>
</kw>
<status status="PASS" starttime="20210731 10:45:35.102" endtime="20210731 10:45:35.104"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:35.105" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:35.105" endtime="20210731 10:45:35.105"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:35.105" endtime="20210731 10:45:35.106"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:35.106" endtime="20210731 10:45:35.106"/>
</kw>
<status status="PASS" starttime="20210731 10:45:35.104" endtime="20210731 10:45:35.106"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:35.106" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:35.106" endtime="20210731 10:45:35.106"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:35.106" endtime="20210731 10:45:35.107"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:35.107" endtime="20210731 10:45:35.107"/>
</kw>
<status status="PASS" starttime="20210731 10:45:35.106" endtime="20210731 10:45:35.107"/>
</iter>
<status status="PASS" starttime="20210731 10:45:35.102" endtime="20210731 10:45:35.107"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:45:35.109" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:45:35.108" endtime="20210731 10:45:35.110"/>
</kw>
<status status="PASS" starttime="20210731 10:45:35.101" endtime="20210731 10:45:35.110"/>
</kw>
<status status="PASS" starttime="20210731 10:45:33.555" endtime="20210731 10:45:35.110"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 10:45:35.113" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:45:35.111" endtime="20210731 10:45:35.113"/>
</kw>
<msg timestamp="20210731 10:45:35.113" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:45:35.110" endtime="20210731 10:45:35.113"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>phone_number</arg>
<arg>An invalid phone number containing letters, non-alphanumeric characters</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 10:45:35.114" endtime="20210731 10:45:35.115"/>
</kw>
<status status="PASS" starttime="20210731 10:45:35.114" endtime="20210731 10:45:35.115"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=phone</arg>
<arg>field_data=${user_data}[phone_number]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:35.116" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:45:35.116" endtime="20210731 10:45:35.116"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:35.117" level="INFO">${payload} = {'phone': '+358506abc!#662712'}</msg>
<status status="PASS" starttime="20210731 10:45:35.116" endtime="20210731 10:45:35.117"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:45:35.126" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:45:35.126" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:45:35.117" endtime="20210731 10:45:35.127"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:45:35.127" endtime="20210731 10:45:35.127"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:45:35.127" endtime="20210731 10:45:35.127"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:35.117" endtime="20210731 10:45:35.127"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:35.117" endtime="20210731 10:45:35.127"/>
</for>
<status status="FAIL" starttime="20210731 10:45:35.115" endtime="20210731 10:45:35.127"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:35.115" endtime="20210731 10:45:35.127"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:35.115" endtime="20210731 10:45:35.127"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:35.131" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:35.141" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:35.141" level="INFO">${pids} = 18526
18533
18541</msg>
<status status="PASS" starttime="20210731 10:45:35.128" endtime="20210731 10:45:35.141"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:35.142" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:35.141" endtime="20210731 10:45:35.142"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:35.145" level="INFO">${pids} = ['18526', '18533', '18541']</msg>
<status status="PASS" starttime="20210731 10:45:35.143" endtime="20210731 10:45:35.145"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">18526</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:35.148" level="INFO">Running command 'kill 18526 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:35.145" endtime="20210731 10:45:35.149"/>
</kw>
<status status="PASS" starttime="20210731 10:45:35.145" endtime="20210731 10:45:35.149"/>
</iter>
<iter>
<var name="${pid}">18533</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:35.152" level="INFO">Running command 'kill 18533 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:35.149" endtime="20210731 10:45:35.154"/>
</kw>
<status status="PASS" starttime="20210731 10:45:35.149" endtime="20210731 10:45:35.154"/>
</iter>
<iter>
<var name="${pid}">18541</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:35.158" level="INFO">Running command 'kill 18541 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:35.155" endtime="20210731 10:45:35.159"/>
</kw>
<status status="PASS" starttime="20210731 10:45:35.154" endtime="20210731 10:45:35.159"/>
</iter>
<status status="PASS" starttime="20210731 10:45:35.145" endtime="20210731 10:45:35.159"/>
</for>
<status status="PASS" starttime="20210731 10:45:35.142" endtime="20210731 10:45:35.159"/>
</branch>
<status status="PASS" starttime="20210731 10:45:35.142" endtime="20210731 10:45:35.159"/>
</if>
<status status="PASS" starttime="20210731 10:45:35.127" endtime="20210731 10:45:35.159"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
phone number as such:
{
"phone": '+358506abc!#662712'
}
Then, each request should fail with the following response body:
{
"message": "mandatory phone number can only contain numbers [0-9] and optionally a single plus sign at the beginning indicating the country code",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:45:33.554" endtime="20210731 10:45:35.160">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t129" name="With Each Valid Token, Updating Phone Number Of Each System User With 050!?.#662712 Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:35.165" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:35.176" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:35.176" level="INFO">${pids} = 18570</msg>
<status status="PASS" starttime="20210731 10:45:35.162" endtime="20210731 10:45:35.177"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:35.178" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:35.177" endtime="20210731 10:45:35.178"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:35.179" level="INFO">${pids} = ['18570']</msg>
<status status="PASS" starttime="20210731 10:45:35.179" endtime="20210731 10:45:35.179"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">18570</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:35.182" level="INFO">Running command 'kill 18570 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:35.179" endtime="20210731 10:45:35.183"/>
</kw>
<status status="PASS" starttime="20210731 10:45:35.179" endtime="20210731 10:45:35.183"/>
</iter>
<status status="PASS" starttime="20210731 10:45:35.179" endtime="20210731 10:45:35.183"/>
</for>
<status status="PASS" starttime="20210731 10:45:35.178" endtime="20210731 10:45:35.183"/>
</branch>
<status status="PASS" starttime="20210731 10:45:35.178" endtime="20210731 10:45:35.183"/>
</if>
<status status="PASS" starttime="20210731 10:45:35.161" endtime="20210731 10:45:35.183"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:35.184" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:35.184" endtime="20210731 10:45:35.184"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:35.185" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:35.185" endtime="20210731 10:45:35.185"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:35.185" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:35.185" endtime="20210731 10:45:35.185"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:35.186" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:35.186" endtime="20210731 10:45:35.186"/>
</kw>
<msg timestamp="20210731 10:45:35.186" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:35.184" endtime="20210731 10:45:35.186"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:35.189" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:35.186" endtime="20210731 10:45:35.193"/>
</kw>
<status status="PASS" starttime="20210731 10:45:35.184" endtime="20210731 10:45:35.193"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:45:35.195" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:45:35.194" endtime="20210731 10:45:35.199"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:45:36.700" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:45:35.199" endtime="20210731 10:45:36.700"/>
</kw>
<status status="PASS" starttime="20210731 10:45:35.194" endtime="20210731 10:45:36.701"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:36.702" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:36.702" endtime="20210731 10:45:36.702"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:36.703" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:36.702" endtime="20210731 10:45:36.703"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:36.703" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:36.703" endtime="20210731 10:45:36.703"/>
</kw>
<msg timestamp="20210731 10:45:36.703" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:36.702" endtime="20210731 10:45:36.703"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:45:36.704" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:45:36.704" endtime="20210731 10:45:36.704"/>
</kw>
<status status="PASS" starttime="20210731 10:45:36.701" endtime="20210731 10:45:36.705"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:45:36.705" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:45:36.705" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:45:36.705" endtime="20210731 10:45:36.705"/>
</kw>
<status status="PASS" starttime="20210731 10:45:36.705" endtime="20210731 10:45:36.705"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:45:36.706" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:45:36.706" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:45:36.706" endtime="20210731 10:45:36.706"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:45:36.706" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:45:36.706" endtime="20210731 10:45:36.706"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:36.707" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:36.707" endtime="20210731 10:45:36.707"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:36.708" endtime="20210731 10:45:36.709"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:36.709" endtime="20210731 10:45:36.710"/>
</kw>
<status status="PASS" starttime="20210731 10:45:36.707" endtime="20210731 10:45:36.710"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:36.710" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:36.710" endtime="20210731 10:45:36.710"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:36.710" endtime="20210731 10:45:36.711"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:36.711" endtime="20210731 10:45:36.711"/>
</kw>
<status status="PASS" starttime="20210731 10:45:36.710" endtime="20210731 10:45:36.711"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:36.712" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:36.712" endtime="20210731 10:45:36.712"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:36.712" endtime="20210731 10:45:36.713"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:36.713" endtime="20210731 10:45:36.713"/>
</kw>
<status status="PASS" starttime="20210731 10:45:36.711" endtime="20210731 10:45:36.714"/>
</iter>
<status status="PASS" starttime="20210731 10:45:36.706" endtime="20210731 10:45:36.714"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:45:36.714" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:45:36.714" endtime="20210731 10:45:36.714"/>
</kw>
<status status="PASS" starttime="20210731 10:45:36.706" endtime="20210731 10:45:36.714"/>
</kw>
<status status="PASS" starttime="20210731 10:45:35.161" endtime="20210731 10:45:36.714"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 10:45:36.717" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:45:36.715" endtime="20210731 10:45:36.717"/>
</kw>
<msg timestamp="20210731 10:45:36.718" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:45:36.715" endtime="20210731 10:45:36.718"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>phone_number</arg>
<arg>An invalid phone number containing non-alphanumeric characters</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 10:45:36.718" endtime="20210731 10:45:36.719"/>
</kw>
<status status="PASS" starttime="20210731 10:45:36.718" endtime="20210731 10:45:36.719"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=phone</arg>
<arg>field_data=${user_data}[phone_number]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:36.720" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:45:36.720" endtime="20210731 10:45:36.721"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:36.721" level="INFO">${payload} = {'phone': '050!?.#662712'}</msg>
<status status="PASS" starttime="20210731 10:45:36.721" endtime="20210731 10:45:36.721"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:45:36.731" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:45:36.731" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:45:36.721" endtime="20210731 10:45:36.731"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:45:36.732" endtime="20210731 10:45:36.732"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:45:36.732" endtime="20210731 10:45:36.732"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:36.721" endtime="20210731 10:45:36.732"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:36.721" endtime="20210731 10:45:36.732"/>
</for>
<status status="FAIL" starttime="20210731 10:45:36.720" endtime="20210731 10:45:36.732"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:36.719" endtime="20210731 10:45:36.732"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:36.719" endtime="20210731 10:45:36.732"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:36.736" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:36.748" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:36.748" level="INFO">${pids} = 18593
18600
18605</msg>
<status status="PASS" starttime="20210731 10:45:36.733" endtime="20210731 10:45:36.748"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:36.753" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:36.753" endtime="20210731 10:45:36.753"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:36.754" level="INFO">${pids} = ['18593', '18600', '18605']</msg>
<status status="PASS" starttime="20210731 10:45:36.754" endtime="20210731 10:45:36.754"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">18593</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:36.758" level="INFO">Running command 'kill 18593 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:36.754" endtime="20210731 10:45:36.758"/>
</kw>
<status status="PASS" starttime="20210731 10:45:36.754" endtime="20210731 10:45:36.758"/>
</iter>
<iter>
<var name="${pid}">18600</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:36.762" level="INFO">Running command 'kill 18600 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:36.759" endtime="20210731 10:45:36.763"/>
</kw>
<status status="PASS" starttime="20210731 10:45:36.758" endtime="20210731 10:45:36.763"/>
</iter>
<iter>
<var name="${pid}">18605</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:36.767" level="INFO">Running command 'kill 18605 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:36.764" endtime="20210731 10:45:36.768"/>
</kw>
<status status="PASS" starttime="20210731 10:45:36.763" endtime="20210731 10:45:36.768"/>
</iter>
<status status="PASS" starttime="20210731 10:45:36.754" endtime="20210731 10:45:36.768"/>
</for>
<status status="PASS" starttime="20210731 10:45:36.754" endtime="20210731 10:45:36.768"/>
</branch>
<status status="PASS" starttime="20210731 10:45:36.753" endtime="20210731 10:45:36.768"/>
</if>
<status status="PASS" starttime="20210731 10:45:36.733" endtime="20210731 10:45:36.768"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
phone number as such:
{
"phone": '050!?.#662712'
}
Then, each request should fail with the following response body:
{
"message": "mandatory phone number can only contain numbers [0-9] and optionally a single plus sign at the beginning indicating the country code",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:45:35.160" endtime="20210731 10:45:36.768">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t130" name="With Each Valid Token, Updating Phone Number Of Each System User With +358abc662712xyz Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:36.782" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:36.793" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:36.793" level="INFO">${pids} = 18634</msg>
<status status="PASS" starttime="20210731 10:45:36.770" endtime="20210731 10:45:36.793"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:36.794" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:36.793" endtime="20210731 10:45:36.794"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:36.795" level="INFO">${pids} = ['18634']</msg>
<status status="PASS" starttime="20210731 10:45:36.794" endtime="20210731 10:45:36.795"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">18634</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:36.798" level="INFO">Running command 'kill 18634 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:36.795" endtime="20210731 10:45:36.799"/>
</kw>
<status status="PASS" starttime="20210731 10:45:36.795" endtime="20210731 10:45:36.799"/>
</iter>
<status status="PASS" starttime="20210731 10:45:36.795" endtime="20210731 10:45:36.799"/>
</for>
<status status="PASS" starttime="20210731 10:45:36.794" endtime="20210731 10:45:36.799"/>
</branch>
<status status="PASS" starttime="20210731 10:45:36.794" endtime="20210731 10:45:36.799"/>
</if>
<status status="PASS" starttime="20210731 10:45:36.770" endtime="20210731 10:45:36.800"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:36.801" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:36.800" endtime="20210731 10:45:36.801"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:36.802" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:36.801" endtime="20210731 10:45:36.802"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:36.802" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:36.802" endtime="20210731 10:45:36.802"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:36.802" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:36.802" endtime="20210731 10:45:36.802"/>
</kw>
<msg timestamp="20210731 10:45:36.803" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:36.801" endtime="20210731 10:45:36.803"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:36.806" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:36.803" endtime="20210731 10:45:36.808"/>
</kw>
<status status="PASS" starttime="20210731 10:45:36.800" endtime="20210731 10:45:36.809"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:45:36.811" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:45:36.809" endtime="20210731 10:45:36.816"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:45:38.318" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:45:36.816" endtime="20210731 10:45:38.318"/>
</kw>
<status status="PASS" starttime="20210731 10:45:36.809" endtime="20210731 10:45:38.319"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:38.320" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:38.320" endtime="20210731 10:45:38.320"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:38.320" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:38.320" endtime="20210731 10:45:38.320"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:38.321" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:38.320" endtime="20210731 10:45:38.321"/>
</kw>
<msg timestamp="20210731 10:45:38.321" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:38.319" endtime="20210731 10:45:38.321"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:45:38.321" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:45:38.321" endtime="20210731 10:45:38.322"/>
</kw>
<status status="PASS" starttime="20210731 10:45:38.319" endtime="20210731 10:45:38.322"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:45:38.322" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:45:38.322" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:45:38.322" endtime="20210731 10:45:38.323"/>
</kw>
<status status="PASS" starttime="20210731 10:45:38.322" endtime="20210731 10:45:38.323"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:45:38.324" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:45:38.324" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:45:38.323" endtime="20210731 10:45:38.324"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:45:38.324" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:45:38.324" endtime="20210731 10:45:38.324"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:38.325" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:38.324" endtime="20210731 10:45:38.325"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:38.325" endtime="20210731 10:45:38.326"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:38.326" endtime="20210731 10:45:38.326"/>
</kw>
<status status="PASS" starttime="20210731 10:45:38.324" endtime="20210731 10:45:38.326"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:38.327" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:38.327" endtime="20210731 10:45:38.327"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:38.327" endtime="20210731 10:45:38.328"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:38.328" endtime="20210731 10:45:38.328"/>
</kw>
<status status="PASS" starttime="20210731 10:45:38.327" endtime="20210731 10:45:38.328"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:38.328" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:38.328" endtime="20210731 10:45:38.328"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:38.328" endtime="20210731 10:45:38.329"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:38.329" endtime="20210731 10:45:38.329"/>
</kw>
<status status="PASS" starttime="20210731 10:45:38.328" endtime="20210731 10:45:38.329"/>
</iter>
<status status="PASS" starttime="20210731 10:45:38.324" endtime="20210731 10:45:38.330"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:45:38.330" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:45:38.330" endtime="20210731 10:45:38.330"/>
</kw>
<status status="PASS" starttime="20210731 10:45:38.323" endtime="20210731 10:45:38.330"/>
</kw>
<status status="PASS" starttime="20210731 10:45:36.770" endtime="20210731 10:45:38.330"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 10:45:38.333" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:45:38.331" endtime="20210731 10:45:38.333"/>
</kw>
<msg timestamp="20210731 10:45:38.333" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:45:38.330" endtime="20210731 10:45:38.333"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>phone_number</arg>
<arg>An invalid phone number containing letters in between</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 10:45:38.334" endtime="20210731 10:45:38.334"/>
</kw>
<status status="PASS" starttime="20210731 10:45:38.334" endtime="20210731 10:45:38.334"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=phone</arg>
<arg>field_data=${user_data}[phone_number]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:38.336" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:45:38.335" endtime="20210731 10:45:38.336"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:38.336" level="INFO">${payload} = {'phone': '+358abc662712xyz'}</msg>
<status status="PASS" starttime="20210731 10:45:38.336" endtime="20210731 10:45:38.336"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:45:38.347" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:45:38.348" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:45:38.337" endtime="20210731 10:45:38.348"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:45:38.348" endtime="20210731 10:45:38.348"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:45:38.348" endtime="20210731 10:45:38.348"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:38.337" endtime="20210731 10:45:38.348"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:38.336" endtime="20210731 10:45:38.348"/>
</for>
<status status="FAIL" starttime="20210731 10:45:38.335" endtime="20210731 10:45:38.349"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:38.335" endtime="20210731 10:45:38.349"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:38.335" endtime="20210731 10:45:38.349"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:38.353" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:38.363" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:38.363" level="INFO">${pids} = 18657
18664
18667</msg>
<status status="PASS" starttime="20210731 10:45:38.349" endtime="20210731 10:45:38.363"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:38.364" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:38.363" endtime="20210731 10:45:38.364"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:38.364" level="INFO">${pids} = ['18657', '18664', '18667']</msg>
<status status="PASS" starttime="20210731 10:45:38.364" endtime="20210731 10:45:38.364"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">18657</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:38.368" level="INFO">Running command 'kill 18657 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:38.365" endtime="20210731 10:45:38.368"/>
</kw>
<status status="PASS" starttime="20210731 10:45:38.365" endtime="20210731 10:45:38.368"/>
</iter>
<iter>
<var name="${pid}">18664</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:38.371" level="INFO">Running command 'kill 18664 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:38.369" endtime="20210731 10:45:38.374"/>
</kw>
<status status="PASS" starttime="20210731 10:45:38.368" endtime="20210731 10:45:38.374"/>
</iter>
<iter>
<var name="${pid}">18667</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:38.379" level="INFO">Running command 'kill 18667 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:38.375" endtime="20210731 10:45:38.380"/>
</kw>
<status status="PASS" starttime="20210731 10:45:38.374" endtime="20210731 10:45:38.380"/>
</iter>
<status status="PASS" starttime="20210731 10:45:38.365" endtime="20210731 10:45:38.380"/>
</for>
<status status="PASS" starttime="20210731 10:45:38.364" endtime="20210731 10:45:38.380"/>
</branch>
<status status="PASS" starttime="20210731 10:45:38.364" endtime="20210731 10:45:38.380"/>
</if>
<status status="PASS" starttime="20210731 10:45:38.349" endtime="20210731 10:45:38.380"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
phone number as such:
{
"phone": '+358abc662712xyz'
}
Then, each request should fail with the following response body:
{
"message": "mandatory phone number can only contain numbers [0-9] and optionally a single plus sign at the beginning indicating the country code",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:45:36.769" endtime="20210731 10:45:38.380">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t131" name="With Each Valid Token, Updating Phone Number Of Each System User With +35840 687 54 53 Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:38.386" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:38.401" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:38.401" level="INFO">${pids} = 18696</msg>
<status status="PASS" starttime="20210731 10:45:38.382" endtime="20210731 10:45:38.401"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:38.402" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:38.402" endtime="20210731 10:45:38.402"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:38.403" level="INFO">${pids} = ['18696']</msg>
<status status="PASS" starttime="20210731 10:45:38.403" endtime="20210731 10:45:38.403"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">18696</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:38.406" level="INFO">Running command 'kill 18696 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:38.403" endtime="20210731 10:45:38.407"/>
</kw>
<status status="PASS" starttime="20210731 10:45:38.403" endtime="20210731 10:45:38.407"/>
</iter>
<status status="PASS" starttime="20210731 10:45:38.403" endtime="20210731 10:45:38.408"/>
</for>
<status status="PASS" starttime="20210731 10:45:38.402" endtime="20210731 10:45:38.408"/>
</branch>
<status status="PASS" starttime="20210731 10:45:38.402" endtime="20210731 10:45:38.408"/>
</if>
<status status="PASS" starttime="20210731 10:45:38.382" endtime="20210731 10:45:38.408"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:38.410" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:38.409" endtime="20210731 10:45:38.410"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:38.411" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:38.410" endtime="20210731 10:45:38.411"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:38.411" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:38.411" endtime="20210731 10:45:38.411"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:38.411" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:38.411" endtime="20210731 10:45:38.411"/>
</kw>
<msg timestamp="20210731 10:45:38.412" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:38.410" endtime="20210731 10:45:38.412"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:38.415" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:38.412" endtime="20210731 10:45:38.417"/>
</kw>
<status status="PASS" starttime="20210731 10:45:38.408" endtime="20210731 10:45:38.417"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:45:38.418" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:45:38.418" endtime="20210731 10:45:38.422"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:45:39.923" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:45:38.422" endtime="20210731 10:45:39.923"/>
</kw>
<status status="PASS" starttime="20210731 10:45:38.417" endtime="20210731 10:45:39.924"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:39.925" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:39.924" endtime="20210731 10:45:39.925"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:39.925" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:39.925" endtime="20210731 10:45:39.925"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:39.926" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:39.925" endtime="20210731 10:45:39.926"/>
</kw>
<msg timestamp="20210731 10:45:39.926" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:39.924" endtime="20210731 10:45:39.926"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:45:39.926" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:45:39.926" endtime="20210731 10:45:39.927"/>
</kw>
<status status="PASS" starttime="20210731 10:45:39.924" endtime="20210731 10:45:39.927"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:45:39.928" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:45:39.928" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:45:39.927" endtime="20210731 10:45:39.928"/>
</kw>
<status status="PASS" starttime="20210731 10:45:39.927" endtime="20210731 10:45:39.928"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:45:39.929" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:45:39.930" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:45:39.928" endtime="20210731 10:45:39.930"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:45:39.930" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:45:39.930" endtime="20210731 10:45:39.930"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:39.931" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:39.931" endtime="20210731 10:45:39.931"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:39.931" endtime="20210731 10:45:39.932"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:39.932" endtime="20210731 10:45:39.932"/>
</kw>
<status status="PASS" starttime="20210731 10:45:39.931" endtime="20210731 10:45:39.932"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:39.932" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:39.932" endtime="20210731 10:45:39.932"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:39.933" endtime="20210731 10:45:39.933"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:39.934" endtime="20210731 10:45:39.934"/>
</kw>
<status status="PASS" starttime="20210731 10:45:39.932" endtime="20210731 10:45:39.934"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:39.934" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:39.934" endtime="20210731 10:45:39.934"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:39.934" endtime="20210731 10:45:39.935"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:39.935" endtime="20210731 10:45:39.935"/>
</kw>
<status status="PASS" starttime="20210731 10:45:39.934" endtime="20210731 10:45:39.935"/>
</iter>
<status status="PASS" starttime="20210731 10:45:39.930" endtime="20210731 10:45:39.935"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:45:39.936" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:45:39.936" endtime="20210731 10:45:39.936"/>
</kw>
<status status="PASS" starttime="20210731 10:45:39.928" endtime="20210731 10:45:39.936"/>
</kw>
<status status="PASS" starttime="20210731 10:45:38.382" endtime="20210731 10:45:39.936"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 10:45:39.939" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:45:39.937" endtime="20210731 10:45:39.939"/>
</kw>
<msg timestamp="20210731 10:45:39.939" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 10:45:39.936" endtime="20210731 10:45:39.939"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>phone_number</arg>
<arg>An invalid phone number containing spaces in between digits</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 10:45:39.940" endtime="20210731 10:45:39.941"/>
</kw>
<status status="PASS" starttime="20210731 10:45:39.940" endtime="20210731 10:45:39.941"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=phone</arg>
<arg>field_data=${user_data}[phone_number]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:39.944" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:45:39.944" endtime="20210731 10:45:39.944"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:39.945" level="INFO">${payload} = {'phone': '+35840 687 54 53'}</msg>
<status status="PASS" starttime="20210731 10:45:39.945" endtime="20210731 10:45:39.945"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:45:39.954" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:45:39.954" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:45:39.945" endtime="20210731 10:45:39.955"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:45:39.955" endtime="20210731 10:45:39.955"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 10:45:39.955" endtime="20210731 10:45:39.955"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:39.945" endtime="20210731 10:45:39.955"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:39.945" endtime="20210731 10:45:39.955"/>
</for>
<status status="FAIL" starttime="20210731 10:45:39.943" endtime="20210731 10:45:39.955"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:39.943" endtime="20210731 10:45:39.955"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:39.941" endtime="20210731 10:45:39.955"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:39.959" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:39.969" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:39.969" level="INFO">${pids} = 18719
18726
18734</msg>
<status status="PASS" starttime="20210731 10:45:39.956" endtime="20210731 10:45:39.969"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:39.970" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:39.970" endtime="20210731 10:45:39.970"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:39.971" level="INFO">${pids} = ['18719', '18726', '18734']</msg>
<status status="PASS" starttime="20210731 10:45:39.971" endtime="20210731 10:45:39.971"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">18719</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:39.977" level="INFO">Running command 'kill 18719 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:39.971" endtime="20210731 10:45:39.978"/>
</kw>
<status status="PASS" starttime="20210731 10:45:39.971" endtime="20210731 10:45:39.978"/>
</iter>
<iter>
<var name="${pid}">18726</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:39.983" level="INFO">Running command 'kill 18726 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:39.979" endtime="20210731 10:45:39.983"/>
</kw>
<status status="PASS" starttime="20210731 10:45:39.978" endtime="20210731 10:45:39.983"/>
</iter>
<iter>
<var name="${pid}">18734</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:39.989" level="INFO">Running command 'kill 18734 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:39.984" endtime="20210731 10:45:39.989"/>
</kw>
<status status="PASS" starttime="20210731 10:45:39.984" endtime="20210731 10:45:39.989"/>
</iter>
<status status="PASS" starttime="20210731 10:45:39.971" endtime="20210731 10:45:39.989"/>
</for>
<status status="PASS" starttime="20210731 10:45:39.971" endtime="20210731 10:45:39.989"/>
</branch>
<status status="PASS" starttime="20210731 10:45:39.970" endtime="20210731 10:45:39.989"/>
</if>
<status status="PASS" starttime="20210731 10:45:39.955" endtime="20210731 10:45:39.990"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
phone number as such:
{
"phone": '+35840 687 54 53'
}
Then, each request should fail with the following response body:
{
"message": "mandatory phone number can only contain numbers [0-9] and optionally a single plus sign at the beginning indicating the country code",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:45:38.381" endtime="20210731 10:45:39.990">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t132" name="With Each Valid Token, Updating Each System User With Unknown Field Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:39.997" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:40.013" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:40.014" level="INFO">${pids} = 18763</msg>
<status status="PASS" starttime="20210731 10:45:39.993" endtime="20210731 10:45:40.014"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:40.014" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:40.014" endtime="20210731 10:45:40.015"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:40.015" level="INFO">${pids} = ['18763']</msg>
<status status="PASS" starttime="20210731 10:45:40.015" endtime="20210731 10:45:40.015"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">18763</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:40.018" level="INFO">Running command 'kill 18763 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:40.015" endtime="20210731 10:45:40.019"/>
</kw>
<status status="PASS" starttime="20210731 10:45:40.015" endtime="20210731 10:45:40.019"/>
</iter>
<status status="PASS" starttime="20210731 10:45:40.015" endtime="20210731 10:45:40.019"/>
</for>
<status status="PASS" starttime="20210731 10:45:40.015" endtime="20210731 10:45:40.019"/>
</branch>
<status status="PASS" starttime="20210731 10:45:40.015" endtime="20210731 10:45:40.019"/>
</if>
<status status="PASS" starttime="20210731 10:45:39.993" endtime="20210731 10:45:40.019"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:40.020" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:40.020" endtime="20210731 10:45:40.020"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:40.021" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:40.021" endtime="20210731 10:45:40.021"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:40.021" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:40.021" endtime="20210731 10:45:40.021"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:40.022" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:40.021" endtime="20210731 10:45:40.022"/>
</kw>
<msg timestamp="20210731 10:45:40.022" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:40.020" endtime="20210731 10:45:40.022"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:40.025" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:40.022" endtime="20210731 10:45:40.027"/>
</kw>
<status status="PASS" starttime="20210731 10:45:40.020" endtime="20210731 10:45:40.028"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:45:40.029" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:45:40.029" endtime="20210731 10:45:40.033"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:45:41.535" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:45:40.034" endtime="20210731 10:45:41.535"/>
</kw>
<status status="PASS" starttime="20210731 10:45:40.028" endtime="20210731 10:45:41.535"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:41.536" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:41.536" endtime="20210731 10:45:41.536"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:41.536" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:41.536" endtime="20210731 10:45:41.536"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:41.537" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:41.537" endtime="20210731 10:45:41.537"/>
</kw>
<msg timestamp="20210731 10:45:41.537" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:41.536" endtime="20210731 10:45:41.537"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:45:41.539" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:45:41.537" endtime="20210731 10:45:41.539"/>
</kw>
<status status="PASS" starttime="20210731 10:45:41.535" endtime="20210731 10:45:41.539"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:45:41.540" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:45:41.540" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:45:41.540" endtime="20210731 10:45:41.540"/>
</kw>
<status status="PASS" starttime="20210731 10:45:41.539" endtime="20210731 10:45:41.540"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:45:41.541" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:45:41.541" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:45:41.540" endtime="20210731 10:45:41.541"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:45:41.541" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:45:41.541" endtime="20210731 10:45:41.541"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:41.543" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:41.542" endtime="20210731 10:45:41.543"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:41.543" endtime="20210731 10:45:41.544"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:41.544" endtime="20210731 10:45:41.545"/>
</kw>
<status status="PASS" starttime="20210731 10:45:41.542" endtime="20210731 10:45:41.545"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:41.546" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:41.546" endtime="20210731 10:45:41.546"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:41.546" endtime="20210731 10:45:41.547"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:41.547" endtime="20210731 10:45:41.547"/>
</kw>
<status status="PASS" starttime="20210731 10:45:41.546" endtime="20210731 10:45:41.547"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:41.548" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:41.547" endtime="20210731 10:45:41.548"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:41.548" endtime="20210731 10:45:41.548"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:41.548" endtime="20210731 10:45:41.549"/>
</kw>
<status status="PASS" starttime="20210731 10:45:41.547" endtime="20210731 10:45:41.549"/>
</iter>
<status status="PASS" starttime="20210731 10:45:41.542" endtime="20210731 10:45:41.549"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:45:41.549" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:45:41.549" endtime="20210731 10:45:41.549"/>
</kw>
<status status="PASS" starttime="20210731 10:45:41.540" endtime="20210731 10:45:41.549"/>
</kw>
<status status="PASS" starttime="20210731 10:45:39.991" endtime="20210731 10:45:41.549"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:41.550" level="INFO">${payload} = {}</msg>
<status status="PASS" starttime="20210731 10:45:41.550" endtime="20210731 10:45:41.550"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>firstname=Hakan</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:41.550" endtime="20210731 10:45:41.550"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>lastname=Cuzdan</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:41.550" endtime="20210731 10:45:41.551"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>phone=+358406875453</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:41.551" endtime="20210731 10:45:41.552"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>alien_field_one=some value</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:41.552" endtime="20210731 10:45:41.553"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Given Fields For All System Users">
<arg>${api_user}[token]</arg>
<arg>${payload}</arg>
<arg>alien_field_one</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:41.554" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:45:41.554" endtime="20210731 10:45:41.554"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${payload}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210731 10:45:41.554" level="INFO">{'firstname': 'Hakan', 'lastname': 'Cuzdan', 'phone': '+358406875453', 'alien_field_one': 'some value'}</msg>
<status status="PASS" starttime="20210731 10:45:41.554" endtime="20210731 10:45:41.554"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:45:41.565" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:45:41.565" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:45:41.555" endtime="20210731 10:45:41.565"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Unknown field ${first_unknown_field}</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:45:41.565" endtime="20210731 10:45:41.566"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:45:41.566" endtime="20210731 10:45:41.566"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:41.554" endtime="20210731 10:45:41.571"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:41.554" endtime="20210731 10:45:41.571"/>
</for>
<status status="FAIL" starttime="20210731 10:45:41.553" endtime="20210731 10:45:41.571"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:41.553" endtime="20210731 10:45:41.571"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:41.553" endtime="20210731 10:45:41.571"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:41.578" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:41.589" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:41.589" level="INFO">${pids} = 18786
18793
18795</msg>
<status status="PASS" starttime="20210731 10:45:41.572" endtime="20210731 10:45:41.589"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:41.590" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:41.590" endtime="20210731 10:45:41.590"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:41.591" level="INFO">${pids} = ['18786', '18793', '18795']</msg>
<status status="PASS" starttime="20210731 10:45:41.591" endtime="20210731 10:45:41.591"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">18786</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:41.597" level="INFO">Running command 'kill 18786 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:41.591" endtime="20210731 10:45:41.597"/>
</kw>
<status status="PASS" starttime="20210731 10:45:41.591" endtime="20210731 10:45:41.598"/>
</iter>
<iter>
<var name="${pid}">18793</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:41.601" level="INFO">Running command 'kill 18793 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:41.598" endtime="20210731 10:45:41.603"/>
</kw>
<status status="PASS" starttime="20210731 10:45:41.598" endtime="20210731 10:45:41.604"/>
</iter>
<iter>
<var name="${pid}">18795</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:41.608" level="INFO">Running command 'kill 18795 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:41.604" endtime="20210731 10:45:41.609"/>
</kw>
<status status="PASS" starttime="20210731 10:45:41.604" endtime="20210731 10:45:41.609"/>
</iter>
<status status="PASS" starttime="20210731 10:45:41.591" endtime="20210731 10:45:41.609"/>
</for>
<status status="PASS" starttime="20210731 10:45:41.591" endtime="20210731 10:45:41.609"/>
</branch>
<status status="PASS" starttime="20210731 10:45:41.590" endtime="20210731 10:45:41.609"/>
</if>
<status status="PASS" starttime="20210731 10:45:41.572" endtime="20210731 10:45:41.610"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set:
{
"firstname": "Hakan",
"lastname": "Cuzdan",
"phone": '+358406875453',
"alien_field_one": "some value"
}
Note that firstname, lastname and phone are valid, and alien_field_one is not available in user table in SUT.
Then, each request should fail with the following response body:
{
"message": "unknown field alien_field_one",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:45:39.990" endtime="20210731 10:45:41.610">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t133" name="With Each Valid Token, Updating Each System User With Multiple Unknown Fields Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:41.617" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:41.628" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:41.628" level="INFO">${pids} = 18824</msg>
<status status="PASS" starttime="20210731 10:45:41.613" endtime="20210731 10:45:41.628"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:41.629" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:41.628" endtime="20210731 10:45:41.629"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:41.630" level="INFO">${pids} = ['18824']</msg>
<status status="PASS" starttime="20210731 10:45:41.630" endtime="20210731 10:45:41.630"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">18824</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:41.634" level="INFO">Running command 'kill 18824 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:41.630" endtime="20210731 10:45:41.635"/>
</kw>
<status status="PASS" starttime="20210731 10:45:41.630" endtime="20210731 10:45:41.635"/>
</iter>
<status status="PASS" starttime="20210731 10:45:41.630" endtime="20210731 10:45:41.635"/>
</for>
<status status="PASS" starttime="20210731 10:45:41.629" endtime="20210731 10:45:41.635"/>
</branch>
<status status="PASS" starttime="20210731 10:45:41.629" endtime="20210731 10:45:41.635"/>
</if>
<status status="PASS" starttime="20210731 10:45:41.613" endtime="20210731 10:45:41.636"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:41.637" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:41.636" endtime="20210731 10:45:41.637"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:41.638" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:41.637" endtime="20210731 10:45:41.638"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:41.638" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:41.638" endtime="20210731 10:45:41.638"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:41.638" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:41.638" endtime="20210731 10:45:41.638"/>
</kw>
<msg timestamp="20210731 10:45:41.639" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:41.637" endtime="20210731 10:45:41.639"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:41.643" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:41.639" endtime="20210731 10:45:41.645"/>
</kw>
<status status="PASS" starttime="20210731 10:45:41.636" endtime="20210731 10:45:41.645"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 10:45:41.646" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 10:45:41.646" endtime="20210731 10:45:41.651"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 10:45:43.167" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 10:45:41.651" endtime="20210731 10:45:43.167"/>
</kw>
<status status="PASS" starttime="20210731 10:45:41.645" endtime="20210731 10:45:43.167"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:43.169" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 10:45:43.168" endtime="20210731 10:45:43.169"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 10:45:43.169" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 10:45:43.169" endtime="20210731 10:45:43.169"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 10:45:43.169" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:43.169" endtime="20210731 10:45:43.169"/>
</kw>
<msg timestamp="20210731 10:45:43.170" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 10:45:43.168" endtime="20210731 10:45:43.170"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 10:45:43.171" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 10:45:43.170" endtime="20210731 10:45:43.172"/>
</kw>
<status status="PASS" starttime="20210731 10:45:43.168" endtime="20210731 10:45:43.172"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 10:45:43.173" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 10:45:43.173" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 10:45:43.172" endtime="20210731 10:45:43.173"/>
</kw>
<status status="PASS" starttime="20210731 10:45:43.172" endtime="20210731 10:45:43.173"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 10:45:43.174" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 10:45:43.174" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 10:45:43.173" endtime="20210731 10:45:43.174"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 10:45:43.174" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 10:45:43.174" endtime="20210731 10:45:43.174"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:43.175" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:43.175" endtime="20210731 10:45:43.175"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:43.175" endtime="20210731 10:45:43.176"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:43.176" endtime="20210731 10:45:43.177"/>
</kw>
<status status="PASS" starttime="20210731 10:45:43.174" endtime="20210731 10:45:43.177"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:43.177" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:43.177" endtime="20210731 10:45:43.177"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:43.177" endtime="20210731 10:45:43.178"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:43.178" endtime="20210731 10:45:43.179"/>
</kw>
<status status="PASS" starttime="20210731 10:45:43.177" endtime="20210731 10:45:43.179"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:43.179" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 10:45:43.179" endtime="20210731 10:45:43.179"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:43.179" endtime="20210731 10:45:43.180"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 10:45:43.180" endtime="20210731 10:45:43.180"/>
</kw>
<status status="PASS" starttime="20210731 10:45:43.179" endtime="20210731 10:45:43.180"/>
</iter>
<status status="PASS" starttime="20210731 10:45:43.174" endtime="20210731 10:45:43.180"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 10:45:43.180" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 10:45:43.180" endtime="20210731 10:45:43.181"/>
</kw>
<status status="PASS" starttime="20210731 10:45:43.173" endtime="20210731 10:45:43.181"/>
</kw>
<status status="PASS" starttime="20210731 10:45:41.611" endtime="20210731 10:45:43.181"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:43.181" level="INFO">${payload} = {}</msg>
<status status="PASS" starttime="20210731 10:45:43.181" endtime="20210731 10:45:43.181"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>firstname=Hakan</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:43.181" endtime="20210731 10:45:43.182"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>lastname=Cuzdan</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:43.182" endtime="20210731 10:45:43.182"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>phone=+358406875453</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:43.183" endtime="20210731 10:45:43.184"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>alien_field_one=some value</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:43.184" endtime="20210731 10:45:43.184"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>alien_field_two=some other value</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 10:45:43.184" endtime="20210731 10:45:43.185"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Given Fields For All System Users">
<arg>${api_user}[token]</arg>
<arg>${payload}</arg>
<arg>alien_field_one</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 10:45:43.186" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 10:45:43.185" endtime="20210731 10:45:43.186"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${payload}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210731 10:45:43.186" level="INFO">{'firstname': 'Hakan', 'lastname': 'Cuzdan', 'phone': '+358406875453', 'alien_field_one': 'some value', 'alien_field_two': 'some other value'}</msg>
<status status="PASS" starttime="20210731 10:45:43.186" endtime="20210731 10:45:43.186"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 10:45:43.195" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 10:45:43.196" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 10:45:43.187" endtime="20210731 10:45:43.196"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Unknown field ${first_unknown_field}</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 10:45:43.196" endtime="20210731 10:45:43.196"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 10:45:43.196" endtime="20210731 10:45:43.196"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:43.187" endtime="20210731 10:45:43.196"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:43.186" endtime="20210731 10:45:43.196"/>
</for>
<status status="FAIL" starttime="20210731 10:45:43.185" endtime="20210731 10:45:43.196"/>
</kw>
<status status="FAIL" starttime="20210731 10:45:43.185" endtime="20210731 10:45:43.196"/>
</iter>
<status status="FAIL" starttime="20210731 10:45:43.185" endtime="20210731 10:45:43.196"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 10:45:43.200" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 10:45:43.212" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 10:45:43.212" level="INFO">${pids} = 18847
18854
18858</msg>
<status status="PASS" starttime="20210731 10:45:43.197" endtime="20210731 10:45:43.212"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:43.213" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 10:45:43.212" endtime="20210731 10:45:43.213"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 10:45:43.214" level="INFO">${pids} = ['18847', '18854', '18858']</msg>
<status status="PASS" starttime="20210731 10:45:43.213" endtime="20210731 10:45:43.214"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">18847</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:43.217" level="INFO">Running command 'kill 18847 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:43.214" endtime="20210731 10:45:43.218"/>
</kw>
<status status="PASS" starttime="20210731 10:45:43.214" endtime="20210731 10:45:43.218"/>
</iter>
<iter>
<var name="${pid}">18854</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:43.221" level="INFO">Running command 'kill 18854 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:43.218" endtime="20210731 10:45:43.223"/>
</kw>
<status status="PASS" starttime="20210731 10:45:43.218" endtime="20210731 10:45:43.223"/>
</iter>
<iter>
<var name="${pid}">18858</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 10:45:43.227" level="INFO">Running command 'kill 18858 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 10:45:43.224" endtime="20210731 10:45:43.228"/>
</kw>
<status status="PASS" starttime="20210731 10:45:43.223" endtime="20210731 10:45:43.228"/>
</iter>
<status status="PASS" starttime="20210731 10:45:43.214" endtime="20210731 10:45:43.228"/>
</for>
<status status="PASS" starttime="20210731 10:45:43.213" endtime="20210731 10:45:43.228"/>
</branch>
<status status="PASS" starttime="20210731 10:45:43.213" endtime="20210731 10:45:43.228"/>
</if>
<status status="PASS" starttime="20210731 10:45:43.197" endtime="20210731 10:45:43.228"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set:
{
"firstname": "Hakan",
"lastname": "Cuzdan",
"phone": '+358406875453',
"alien_field_one": "some value",
"alien_field_two": "some other value"
}
Note that firstname, lastname and phone are valid, and alien_field_one is not available in user table in SUT.
Then, each request should fail with the following response body:
{
"message": "unknown field alien_field_one",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210731 10:45:41.610" endtime="20210731 10:45:43.229">We expected a JSON, but received text/html</status>
</test>
<doc>This test suite contains test cases for CRF Demo API.
Documentation for the API can be found:
https://github.com/Interview-demoapp/Flasky
The acceptance criteria we verify here is
"3: As an API Consumer, if authenticated, I can update personal information of users"
Definitions
(1) System User: The user, who is registered to the system under test with a valid token
(2) API User: The user, who calls the API to update personal information of the system user</doc>
<status status="FAIL" starttime="20210731 10:42:06.293" endtime="20210731 10:45:43.234"/>
</suite>
<statistics>
<total>
<stat pass="0" fail="133" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="0" fail="133" skip="0" id="s1" name="3-Updating-Personal-Information">3-Updating-Personal-Information</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20210731 10:43:24.090" level="WARN">Multiple test cases with name 'With Each Valid Token, Updating Password Of Each System User With ABCDEFG Results In "Field update not allowed"' executed in test suite '3-Updating-Personal-Information'.</msg>
<msg timestamp="20210731 10:43:25.701" level="WARN">Multiple test cases with name 'With Each Valid Token, Updating Password Of Each System User With ABCDEFGH Results In "Field update not allowed"' executed in test suite '3-Updating-Personal-Information'.</msg>
<msg timestamp="20210731 10:43:27.317" level="WARN">Multiple test cases with name 'With Each Valid Token, Updating Password Of Each System User With ABCDEFGHJKLMNPRSTOÖUÜVYZ Results In "Field update not allowed"' executed in test suite '3-Updating-Personal-Information'.</msg>
<msg timestamp="20210731 10:43:53.177" level="WARN">Multiple test cases with name 'With Each Valid Token, Updating Password Of Each System User With ABCD012 Results In "Field update not allowed"' executed in test suite '3-Updating-Personal-Information'.</msg>
<msg timestamp="20210731 10:43:54.815" level="WARN">Multiple test cases with name 'With Each Valid Token, Updating Password Of Each System User With ABCD0123 Results In "Field update not allowed"' executed in test suite '3-Updating-Personal-Information'.</msg>
<msg timestamp="20210731 10:43:58.045" level="WARN">Multiple test cases with name 'With Each Valid Token, Updating Password Of Each System User With ABCD!?. Results In "Field update not allowed"' executed in test suite '3-Updating-Personal-Information'.</msg>
</errors>
</robot>
