<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 4.0.3 (Python 3.7.4 on linux)" generated="20210726 14:13:15.903" rpa="false" schemaversion="2">
<suite id="s1" name="1-Review-Users" source="/home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/Tests/API/1-Review-Users.robot">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>Initialize Database Connection</arg>
<arg>Verify Tables</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210726 14:13:16.473" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210726 14:13:16.481" level="INFO">${rc} = 0</msg>
<msg timestamp="20210726 14:13:16.481" level="INFO">${pids} = 21184</msg>
<status status="PASS" starttime="20210726 14:13:16.469" endtime="20210726 14:13:16.481"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210726 14:13:16.485" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210726 14:13:16.481" endtime="20210726 14:13:16.485"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210726 14:13:16.486" level="INFO">${pids} = ['21184']</msg>
<status status="PASS" starttime="20210726 14:13:16.486" endtime="20210726 14:13:16.486"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">21184</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210726 14:13:16.489" level="INFO">Running command 'kill 21184 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210726 14:13:16.486" endtime="20210726 14:13:16.489"/>
</kw>
<status status="PASS" starttime="20210726 14:13:16.486" endtime="20210726 14:13:16.489"/>
</iter>
<status status="PASS" starttime="20210726 14:13:16.486" endtime="20210726 14:13:16.489"/>
</for>
<status status="PASS" starttime="20210726 14:13:16.486" endtime="20210726 14:13:16.489"/>
</branch>
<status status="PASS" starttime="20210726 14:13:16.485" endtime="20210726 14:13:16.489"/>
</if>
<status status="PASS" starttime="20210726 14:13:16.468" endtime="20210726 14:13:16.489"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210726 14:13:16.491" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210726 14:13:16.490" endtime="20210726 14:13:16.491"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210726 14:13:16.491" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210726 14:13:16.491" endtime="20210726 14:13:16.491"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210726 14:13:16.491" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210726 14:13:16.491" endtime="20210726 14:13:16.491"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210726 14:13:16.492" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210726 14:13:16.492" endtime="20210726 14:13:16.492"/>
</kw>
<msg timestamp="20210726 14:13:16.492" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210726 14:13:16.491" endtime="20210726 14:13:16.492"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210726 14:13:16.494" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210726 14:13:16.492" endtime="20210726 14:13:16.496"/>
</kw>
<status status="PASS" starttime="20210726 14:13:16.490" endtime="20210726 14:13:16.496"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210726 14:13:16.497" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210726 14:13:16.497" endtime="20210726 14:13:16.501"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210726 14:13:18.002" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210726 14:13:16.501" endtime="20210726 14:13:18.002"/>
</kw>
<status status="PASS" starttime="20210726 14:13:16.496" endtime="20210726 14:13:18.002"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210726 14:13:18.003" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210726 14:13:18.003" endtime="20210726 14:13:18.003"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210726 14:13:18.004" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210726 14:13:18.004" endtime="20210726 14:13:18.004"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210726 14:13:18.004" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210726 14:13:18.004" endtime="20210726 14:13:18.004"/>
</kw>
<msg timestamp="20210726 14:13:18.004" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210726 14:13:18.003" endtime="20210726 14:13:18.005"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210726 14:13:18.008" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210726 14:13:18.005" endtime="20210726 14:13:18.008"/>
</kw>
<status status="PASS" starttime="20210726 14:13:18.002" endtime="20210726 14:13:18.008"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210726 14:13:18.009" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210726 14:13:18.009" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210726 14:13:18.009" endtime="20210726 14:13:18.009"/>
</kw>
<status status="PASS" starttime="20210726 14:13:18.008" endtime="20210726 14:13:18.009"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210726 14:13:18.010" level="INFO">Executing : Query  |  select username, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210726 14:13:18.011" level="INFO">${users} = [('SuperDuperUser1', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'), ('SuperDuperUser2', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTU...</msg>
<status status="PASS" starttime="20210726 14:13:18.010" endtime="20210726 14:13:18.011"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210726 14:13:18.011" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210726 14:13:18.011" endtime="20210726 14:13:18.011"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2')</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210726 14:13:18.012" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210726 14:13:18.012" endtime="20210726 14:13:18.012"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>firstname=${user}[1]</arg>
<arg>lastname=${user}[2]</arg>
<arg>phone=${user}[3]</arg>
<arg>token=${user}[4]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210726 14:13:18.012" endtime="20210726 14:13:18.013"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210726 14:13:18.013" endtime="20210726 14:13:18.013"/>
</kw>
<status status="PASS" starttime="20210726 14:13:18.011" endtime="20210726 14:13:18.013"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4')</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210726 14:13:18.014" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210726 14:13:18.014" endtime="20210726 14:13:18.014"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>firstname=${user}[1]</arg>
<arg>lastname=${user}[2]</arg>
<arg>phone=${user}[3]</arg>
<arg>token=${user}[4]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210726 14:13:18.014" endtime="20210726 14:13:18.015"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210726 14:13:18.015" endtime="20210726 14:13:18.015"/>
</kw>
<status status="PASS" starttime="20210726 14:13:18.013" endtime="20210726 14:13:18.016"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3')</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210726 14:13:18.016" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210726 14:13:18.016" endtime="20210726 14:13:18.016"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>firstname=${user}[1]</arg>
<arg>lastname=${user}[2]</arg>
<arg>phone=${user}[3]</arg>
<arg>token=${user}[4]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210726 14:13:18.016" endtime="20210726 14:13:18.017"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210726 14:13:18.017" endtime="20210726 14:13:18.017"/>
</kw>
<status status="PASS" starttime="20210726 14:13:18.016" endtime="20210726 14:13:18.017"/>
</iter>
<status status="PASS" starttime="20210726 14:13:18.011" endtime="20210726 14:13:18.017"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210726 14:13:18.018" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627124', 'token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'} | {'username': 'SuperDuperUser2', 'f...</msg>
<status status="PASS" starttime="20210726 14:13:18.017" endtime="20210726 14:13:18.018"/>
</kw>
<status status="PASS" starttime="20210726 14:13:18.010" endtime="20210726 14:13:18.018"/>
</kw>
<status status="PASS" starttime="20210726 14:13:16.468" endtime="20210726 14:13:18.018"/>
</kw>
<test id="s1-t1" name="Reading Users From DB">
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627124', 'token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</var>
<kw name="With Valid Token, Reading Users From API Should Return All System Users">
<arg>${system_user}</arg>
<kw name="Log" library="BuiltIn">
<arg>${system_user}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210726 14:13:18.019" level="INFO">{'username': 'SuperDuperUser1', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627124', 'token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210726 14:13:18.019" endtime="20210726 14:13:18.019"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${headers}</var>
<arg>{'Content-Type': 'application/json', 'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2' }</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210726 14:13:18.021" level="INFO">${headers} = {'Content-Type': 'application/json', 'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2' }</msg>
<status status="PASS" starttime="20210726 14:13:18.020" endtime="20210726 14:13:18.021"/>
</kw>
<kw name="GET" library="CRUD_Library">
<var>${response}</var>
<arg>/users</arg>
<arg>headers=${headers}</arg>
<doc>Sends a GET request to the endpoint.</doc>
<msg timestamp="20210726 14:13:18.029" level="INFO">${response} = {'payload': ['SuperDuperUser1', 'SuperDuperUser2', 'SuperDuperUser3'], 'status': 'SUCCESS'}</msg>
<status status="PASS" starttime="20210726 14:13:18.021" endtime="20210726 14:13:18.029"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${response}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210726 14:13:18.029" level="INFO">{'payload': ['SuperDuperUser1', 'SuperDuperUser2', 'SuperDuperUser3'], 'status': 'SUCCESS'}</msg>
<status status="PASS" starttime="20210726 14:13:18.029" endtime="20210726 14:13:18.029"/>
</kw>
<status status="PASS" starttime="20210726 14:13:18.019" endtime="20210726 14:13:18.030"/>
</kw>
<status status="PASS" starttime="20210726 14:13:18.019" endtime="20210726 14:13:18.030"/>
</iter>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser2', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563452', 'token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</var>
<kw name="With Valid Token, Reading Users From API Should Return All System Users">
<arg>${system_user}</arg>
<kw name="Log" library="BuiltIn">
<arg>${system_user}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210726 14:13:18.031" level="INFO">{'username': 'SuperDuperUser2', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563452', 'token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210726 14:13:18.030" endtime="20210726 14:13:18.031"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${headers}</var>
<arg>{'Content-Type': 'application/json', 'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2' }</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210726 14:13:18.031" level="INFO">${headers} = {'Content-Type': 'application/json', 'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2' }</msg>
<status status="PASS" starttime="20210726 14:13:18.031" endtime="20210726 14:13:18.031"/>
</kw>
<kw name="GET" library="CRUD_Library">
<var>${response}</var>
<arg>/users</arg>
<arg>headers=${headers}</arg>
<doc>Sends a GET request to the endpoint.</doc>
<msg timestamp="20210726 14:13:18.036" level="INFO">${response} = {'payload': ['SuperDuperUser1', 'SuperDuperUser2', 'SuperDuperUser3'], 'status': 'SUCCESS'}</msg>
<status status="PASS" starttime="20210726 14:13:18.032" endtime="20210726 14:13:18.036"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${response}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210726 14:13:18.037" level="INFO">{'payload': ['SuperDuperUser1', 'SuperDuperUser2', 'SuperDuperUser3'], 'status': 'SUCCESS'}</msg>
<status status="PASS" starttime="20210726 14:13:18.037" endtime="20210726 14:13:18.037"/>
</kw>
<status status="PASS" starttime="20210726 14:13:18.030" endtime="20210726 14:13:18.037"/>
</kw>
<status status="PASS" starttime="20210726 14:13:18.030" endtime="20210726 14:13:18.037"/>
</iter>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser3', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094677', 'token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</var>
<kw name="With Valid Token, Reading Users From API Should Return All System Users">
<arg>${system_user}</arg>
<kw name="Log" library="BuiltIn">
<arg>${system_user}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210726 14:13:18.038" level="INFO">{'username': 'SuperDuperUser3', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094677', 'token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210726 14:13:18.038" endtime="20210726 14:13:18.038"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${headers}</var>
<arg>{'Content-Type': 'application/json', 'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2' }</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210726 14:13:18.038" level="INFO">${headers} = {'Content-Type': 'application/json', 'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2' }</msg>
<status status="PASS" starttime="20210726 14:13:18.038" endtime="20210726 14:13:18.038"/>
</kw>
<kw name="GET" library="CRUD_Library">
<var>${response}</var>
<arg>/users</arg>
<arg>headers=${headers}</arg>
<doc>Sends a GET request to the endpoint.</doc>
<msg timestamp="20210726 14:13:18.045" level="INFO">${response} = {'payload': ['SuperDuperUser1', 'SuperDuperUser2', 'SuperDuperUser3'], 'status': 'SUCCESS'}</msg>
<status status="PASS" starttime="20210726 14:13:18.038" endtime="20210726 14:13:18.045"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${response}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210726 14:13:18.046" level="INFO">{'payload': ['SuperDuperUser1', 'SuperDuperUser2', 'SuperDuperUser3'], 'status': 'SUCCESS'}</msg>
<status status="PASS" starttime="20210726 14:13:18.045" endtime="20210726 14:13:18.046"/>
</kw>
<status status="PASS" starttime="20210726 14:13:18.037" endtime="20210726 14:13:18.046"/>
</kw>
<status status="PASS" starttime="20210726 14:13:18.037" endtime="20210726 14:13:18.046"/>
</iter>
<status status="PASS" starttime="20210726 14:13:18.018" endtime="20210726 14:13:18.046"/>
</for>
<status status="PASS" starttime="20210726 14:13:18.018" endtime="20210726 14:13:18.046"/>
</test>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210726 14:13:18.052" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210726 14:13:18.061" level="INFO">${rc} = 0</msg>
<msg timestamp="20210726 14:13:18.061" level="INFO">${pids} = 21207
21214
21219</msg>
<status status="PASS" starttime="20210726 14:13:18.048" endtime="20210726 14:13:18.061"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210726 14:13:18.062" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210726 14:13:18.061" endtime="20210726 14:13:18.062"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210726 14:13:18.063" level="INFO">${pids} = ['21207', '21214', '21219']</msg>
<status status="PASS" starttime="20210726 14:13:18.063" endtime="20210726 14:13:18.063"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">21207</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210726 14:13:18.068" level="INFO">Running command 'kill 21207 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210726 14:13:18.063" endtime="20210726 14:13:18.069"/>
</kw>
<status status="PASS" starttime="20210726 14:13:18.063" endtime="20210726 14:13:18.069"/>
</iter>
<iter>
<var name="${pid}">21214</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210726 14:13:18.073" level="INFO">Running command 'kill 21214 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210726 14:13:18.069" endtime="20210726 14:13:18.073"/>
</kw>
<status status="PASS" starttime="20210726 14:13:18.069" endtime="20210726 14:13:18.073"/>
</iter>
<iter>
<var name="${pid}">21219</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210726 14:13:18.082" level="INFO">Running command 'kill 21219 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210726 14:13:18.074" endtime="20210726 14:13:18.083"/>
</kw>
<status status="PASS" starttime="20210726 14:13:18.074" endtime="20210726 14:13:18.083"/>
</iter>
<status status="PASS" starttime="20210726 14:13:18.063" endtime="20210726 14:13:18.083"/>
</for>
<status status="PASS" starttime="20210726 14:13:18.063" endtime="20210726 14:13:18.083"/>
</branch>
<status status="PASS" starttime="20210726 14:13:18.062" endtime="20210726 14:13:18.083"/>
</if>
<status status="PASS" starttime="20210726 14:13:18.047" endtime="20210726 14:13:18.083"/>
</kw>
<doc>This test suite contains login test cases for CRF Demo API.
Documentation for the API can be found:
https://github.com/Interview-demoapp/Flasky
The acceptance criteria we verify here is
"1: Review users registered in the system"</doc>
<status status="PASS" starttime="20210726 14:13:15.905" endtime="20210726 14:13:18.083"/>
</suite>
<statistics>
<total>
<stat pass="1" fail="0" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="1" fail="0" skip="0" id="s1" name="1-Review-Users">1-Review-Users</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
