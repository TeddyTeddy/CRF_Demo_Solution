<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 4.0.3 (Python 3.7.4 on linux)" generated="20210727 10:51:05.773" rpa="false" schemaversion="2">
<suite id="s1" name="1-Review-Users" source="/home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/Tests/API/1-Review-Users.robot">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<arg>AND</arg>
<arg>Filter System Users By</arg>
<arg>username</arg>
<arg>\${SYSTEM_USERS_USERNAMES}</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210727 10:51:06.752" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210727 10:51:06.762" level="INFO">${rc} = 0</msg>
<msg timestamp="20210727 10:51:06.762" level="INFO">${pids} = 13659</msg>
<status status="PASS" starttime="20210727 10:51:06.750" endtime="20210727 10:51:06.762"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210727 10:51:06.766" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210727 10:51:06.763" endtime="20210727 10:51:06.766"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210727 10:51:06.767" level="INFO">${pids} = ['13659']</msg>
<status status="PASS" starttime="20210727 10:51:06.767" endtime="20210727 10:51:06.767"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">13659</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210727 10:51:06.770" level="INFO">Running command 'kill 13659 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210727 10:51:06.767" endtime="20210727 10:51:06.770"/>
</kw>
<status status="PASS" starttime="20210727 10:51:06.767" endtime="20210727 10:51:06.770"/>
</iter>
<status status="PASS" starttime="20210727 10:51:06.767" endtime="20210727 10:51:06.770"/>
</for>
<status status="PASS" starttime="20210727 10:51:06.767" endtime="20210727 10:51:06.771"/>
</branch>
<status status="PASS" starttime="20210727 10:51:06.766" endtime="20210727 10:51:06.771"/>
</if>
<status status="PASS" starttime="20210727 10:51:06.749" endtime="20210727 10:51:06.771"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210727 10:51:06.772" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210727 10:51:06.771" endtime="20210727 10:51:06.772"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210727 10:51:06.772" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210727 10:51:06.772" endtime="20210727 10:51:06.772"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210727 10:51:06.773" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210727 10:51:06.773" endtime="20210727 10:51:06.773"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210727 10:51:06.773" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210727 10:51:06.773" endtime="20210727 10:51:06.773"/>
</kw>
<msg timestamp="20210727 10:51:06.773" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210727 10:51:06.772" endtime="20210727 10:51:06.773"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210727 10:51:06.776" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210727 10:51:06.774" endtime="20210727 10:51:06.780"/>
</kw>
<status status="PASS" starttime="20210727 10:51:06.771" endtime="20210727 10:51:06.780"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210727 10:51:06.782" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210727 10:51:06.781" endtime="20210727 10:51:06.786"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210727 10:51:08.288" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210727 10:51:06.787" endtime="20210727 10:51:08.288"/>
</kw>
<status status="PASS" starttime="20210727 10:51:06.780" endtime="20210727 10:51:08.288"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210727 10:51:08.290" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210727 10:51:08.289" endtime="20210727 10:51:08.290"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210727 10:51:08.290" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210727 10:51:08.290" endtime="20210727 10:51:08.290"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210727 10:51:08.291" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210727 10:51:08.290" endtime="20210727 10:51:08.291"/>
</kw>
<msg timestamp="20210727 10:51:08.291" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210727 10:51:08.289" endtime="20210727 10:51:08.291"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210727 10:51:08.293" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210727 10:51:08.291" endtime="20210727 10:51:08.296"/>
</kw>
<status status="PASS" starttime="20210727 10:51:08.289" endtime="20210727 10:51:08.297"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210727 10:51:08.297" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210727 10:51:08.298" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210727 10:51:08.297" endtime="20210727 10:51:08.299"/>
</kw>
<status status="PASS" starttime="20210727 10:51:08.297" endtime="20210727 10:51:08.299"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210727 10:51:08.300" level="INFO">Executing : Query  |  select username, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210727 10:51:08.300" level="INFO">${users} = [('SuperDuperUser1', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'), ('SuperDuperUser2', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTU...</msg>
<status status="PASS" starttime="20210727 10:51:08.299" endtime="20210727 10:51:08.300"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210727 10:51:08.300" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210727 10:51:08.300" endtime="20210727 10:51:08.300"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2')</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210727 10:51:08.301" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210727 10:51:08.300" endtime="20210727 10:51:08.301"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>firstname=${user}[1]</arg>
<arg>lastname=${user}[2]</arg>
<arg>phone=${user}[3]</arg>
<arg>token=${user}[4]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210727 10:51:08.301" endtime="20210727 10:51:08.302"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210727 10:51:08.302" endtime="20210727 10:51:08.303"/>
</kw>
<status status="PASS" starttime="20210727 10:51:08.300" endtime="20210727 10:51:08.303"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4')</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210727 10:51:08.303" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210727 10:51:08.303" endtime="20210727 10:51:08.303"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>firstname=${user}[1]</arg>
<arg>lastname=${user}[2]</arg>
<arg>phone=${user}[3]</arg>
<arg>token=${user}[4]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210727 10:51:08.303" endtime="20210727 10:51:08.304"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210727 10:51:08.304" endtime="20210727 10:51:08.304"/>
</kw>
<status status="PASS" starttime="20210727 10:51:08.303" endtime="20210727 10:51:08.304"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3')</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210727 10:51:08.304" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210727 10:51:08.304" endtime="20210727 10:51:08.304"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>firstname=${user}[1]</arg>
<arg>lastname=${user}[2]</arg>
<arg>phone=${user}[3]</arg>
<arg>token=${user}[4]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210727 10:51:08.305" endtime="20210727 10:51:08.305"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210727 10:51:08.305" endtime="20210727 10:51:08.305"/>
</kw>
<status status="PASS" starttime="20210727 10:51:08.304" endtime="20210727 10:51:08.306"/>
</iter>
<status status="PASS" starttime="20210727 10:51:08.300" endtime="20210727 10:51:08.306"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210727 10:51:08.306" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627124', 'token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'} | {'username': 'SuperDuperUser2', 'f...</msg>
<status status="PASS" starttime="20210727 10:51:08.306" endtime="20210727 10:51:08.306"/>
</kw>
<status status="PASS" starttime="20210727 10:51:08.299" endtime="20210727 10:51:08.306"/>
</kw>
<kw name="Filter System Users By">
<arg>username</arg>
<arg>\${SYSTEM_USERS_USERNAMES}</arg>
<kw name="Create List" library="BuiltIn">
<var>${list}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210727 10:51:08.307" level="INFO">${list} = []</msg>
<status status="PASS" starttime="20210727 10:51:08.307" endtime="20210727 10:51:08.307"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627124', 'token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</var>
<kw name="Append To List" library="Collections">
<arg>${list}</arg>
<arg>${system_user}[${key}]</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210727 10:51:08.307" endtime="20210727 10:51:08.307"/>
</kw>
<status status="PASS" starttime="20210727 10:51:08.307" endtime="20210727 10:51:08.307"/>
</iter>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser2', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563452', 'token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</var>
<kw name="Append To List" library="Collections">
<arg>${list}</arg>
<arg>${system_user}[${key}]</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210727 10:51:08.307" endtime="20210727 10:51:08.308"/>
</kw>
<status status="PASS" starttime="20210727 10:51:08.307" endtime="20210727 10:51:08.308"/>
</iter>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser3', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094677', 'token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</var>
<kw name="Append To List" library="Collections">
<arg>${list}</arg>
<arg>${system_user}[${key}]</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210727 10:51:08.308" endtime="20210727 10:51:08.308"/>
</kw>
<status status="PASS" starttime="20210727 10:51:08.308" endtime="20210727 10:51:08.308"/>
</iter>
<status status="PASS" starttime="20210727 10:51:08.307" endtime="20210727 10:51:08.308"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${DYNAMIC_VARIABLE_NAME}</arg>
<arg>${list}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210727 10:51:08.309" level="INFO">${SYSTEM_USERS_USERNAMES} = ['SuperDuperUser1', 'SuperDuperUser2', 'SuperDuperUser3']</msg>
<status status="PASS" starttime="20210727 10:51:08.308" endtime="20210727 10:51:08.309"/>
</kw>
<status status="PASS" starttime="20210727 10:51:08.306" endtime="20210727 10:51:08.309"/>
</kw>
<status status="PASS" starttime="20210727 10:51:06.749" endtime="20210727 10:51:08.309"/>
</kw>
<test id="s1-t1" name="With No Token, Reading Users From API Should Return Error">
<kw name="GET" library="CRUD_Library">
<var>${response}</var>
<arg>/users</arg>
<doc>Sends a GET request to the endpoint.</doc>
<msg timestamp="20210727 10:51:08.316" level="INFO">${response} = {'payload': ['SuperDuperUser1', 'SuperDuperUser2', 'SuperDuperUser3'], 'status': 'SUCCESS'}</msg>
<status status="PASS" starttime="20210727 10:51:08.309" endtime="20210727 10:51:08.316"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[status]</arg>
<arg>FAILURE</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20210727 10:51:08.317" level="FAIL">SUCCESS != FAILURE</msg>
<status status="FAIL" starttime="20210727 10:51:08.316" endtime="20210727 10:51:08.317"/>
</kw>
<status status="FAIL" starttime="20210727 10:51:08.309" endtime="20210727 10:51:08.317">SUCCESS != FAILURE</status>
</test>
<test id="s1-t2" name="With Invalid Token, Reading Users From API Should Return Error">
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=Invalid Token</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210727 10:51:08.318" level="INFO">${headers} = {'Token': 'Invalid Token'}</msg>
<status status="PASS" starttime="20210727 10:51:08.318" endtime="20210727 10:51:08.318"/>
</kw>
<kw name="GET" library="CRUD_Library">
<var>${response}</var>
<arg>/users</arg>
<arg>headers=${headers}</arg>
<doc>Sends a GET request to the endpoint.</doc>
<msg timestamp="20210727 10:51:08.325" level="INFO">${response} = {'payload': ['SuperDuperUser1', 'SuperDuperUser2', 'SuperDuperUser3'], 'status': 'SUCCESS'}</msg>
<status status="PASS" starttime="20210727 10:51:08.319" endtime="20210727 10:51:08.326"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[status]</arg>
<arg>FAILURE</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20210727 10:51:08.327" level="FAIL">SUCCESS != FAILURE</msg>
<status status="FAIL" starttime="20210727 10:51:08.326" endtime="20210727 10:51:08.327"/>
</kw>
<status status="FAIL" starttime="20210727 10:51:08.317" endtime="20210727 10:51:08.327">SUCCESS != FAILURE</status>
</test>
<test id="s1-t3" name="With Valid Token, Reading Users From API Matches With Users From DB">
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627124', 'token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</var>
<kw name="With Valid Token, Reading Users From API Should Return All System Users">
<arg>${system_user}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${system_user}[token]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210727 10:51:08.329" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210727 10:51:08.329" endtime="20210727 10:51:08.329"/>
</kw>
<kw name="GET" library="CRUD_Library">
<var>${response}</var>
<arg>/users</arg>
<arg>headers=${headers}</arg>
<doc>Sends a GET request to the endpoint.</doc>
<msg timestamp="20210727 10:51:08.333" level="INFO">${response} = {'payload': ['SuperDuperUser1', 'SuperDuperUser2', 'SuperDuperUser3'], 'status': 'SUCCESS'}</msg>
<status status="PASS" starttime="20210727 10:51:08.329" endtime="20210727 10:51:08.333"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[status]</arg>
<arg>SUCCESS</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210727 10:51:08.333" endtime="20210727 10:51:08.334"/>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<arg>${SYSTEM_USERS_USERNAMES}</arg>
<arg>${response}[payload]</arg>
<doc>Fails if given lists are unequal.</doc>
<status status="PASS" starttime="20210727 10:51:08.334" endtime="20210727 10:51:08.334"/>
</kw>
<status status="PASS" starttime="20210727 10:51:08.328" endtime="20210727 10:51:08.334"/>
</kw>
<status status="PASS" starttime="20210727 10:51:08.328" endtime="20210727 10:51:08.334"/>
</iter>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser2', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563452', 'token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</var>
<kw name="With Valid Token, Reading Users From API Should Return All System Users">
<arg>${system_user}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${system_user}[token]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210727 10:51:08.335" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210727 10:51:08.335" endtime="20210727 10:51:08.335"/>
</kw>
<kw name="GET" library="CRUD_Library">
<var>${response}</var>
<arg>/users</arg>
<arg>headers=${headers}</arg>
<doc>Sends a GET request to the endpoint.</doc>
<msg timestamp="20210727 10:51:08.340" level="INFO">${response} = {'payload': ['SuperDuperUser1', 'SuperDuperUser2', 'SuperDuperUser3'], 'status': 'SUCCESS'}</msg>
<status status="PASS" starttime="20210727 10:51:08.335" endtime="20210727 10:51:08.341"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[status]</arg>
<arg>SUCCESS</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210727 10:51:08.341" endtime="20210727 10:51:08.341"/>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<arg>${SYSTEM_USERS_USERNAMES}</arg>
<arg>${response}[payload]</arg>
<doc>Fails if given lists are unequal.</doc>
<status status="PASS" starttime="20210727 10:51:08.342" endtime="20210727 10:51:08.344"/>
</kw>
<status status="PASS" starttime="20210727 10:51:08.334" endtime="20210727 10:51:08.344"/>
</kw>
<status status="PASS" starttime="20210727 10:51:08.334" endtime="20210727 10:51:08.344"/>
</iter>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser3', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094677', 'token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</var>
<kw name="With Valid Token, Reading Users From API Should Return All System Users">
<arg>${system_user}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${system_user}[token]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210727 10:51:08.345" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210727 10:51:08.345" endtime="20210727 10:51:08.345"/>
</kw>
<kw name="GET" library="CRUD_Library">
<var>${response}</var>
<arg>/users</arg>
<arg>headers=${headers}</arg>
<doc>Sends a GET request to the endpoint.</doc>
<msg timestamp="20210727 10:51:08.349" level="INFO">${response} = {'payload': ['SuperDuperUser1', 'SuperDuperUser2', 'SuperDuperUser3'], 'status': 'SUCCESS'}</msg>
<status status="PASS" starttime="20210727 10:51:08.345" endtime="20210727 10:51:08.349"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[status]</arg>
<arg>SUCCESS</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210727 10:51:08.349" endtime="20210727 10:51:08.350"/>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<arg>${SYSTEM_USERS_USERNAMES}</arg>
<arg>${response}[payload]</arg>
<doc>Fails if given lists are unequal.</doc>
<status status="PASS" starttime="20210727 10:51:08.350" endtime="20210727 10:51:08.350"/>
</kw>
<status status="PASS" starttime="20210727 10:51:08.344" endtime="20210727 10:51:08.350"/>
</kw>
<status status="PASS" starttime="20210727 10:51:08.344" endtime="20210727 10:51:08.350"/>
</iter>
<status status="PASS" starttime="20210727 10:51:08.328" endtime="20210727 10:51:08.350"/>
</for>
<status status="PASS" starttime="20210727 10:51:08.328" endtime="20210727 10:51:08.350"/>
</test>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210727 10:51:08.354" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210727 10:51:08.362" level="INFO">${rc} = 0</msg>
<msg timestamp="20210727 10:51:08.362" level="INFO">${pids} = 13682
13689
13697</msg>
<status status="PASS" starttime="20210727 10:51:08.351" endtime="20210727 10:51:08.362"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210727 10:51:08.364" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210727 10:51:08.363" endtime="20210727 10:51:08.364"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210727 10:51:08.365" level="INFO">${pids} = ['13682', '13689', '13697']</msg>
<status status="PASS" starttime="20210727 10:51:08.364" endtime="20210727 10:51:08.365"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">13682</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210727 10:51:08.370" level="INFO">Running command 'kill 13682 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210727 10:51:08.366" endtime="20210727 10:51:08.370"/>
</kw>
<status status="PASS" starttime="20210727 10:51:08.365" endtime="20210727 10:51:08.370"/>
</iter>
<iter>
<var name="${pid}">13689</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210727 10:51:08.374" level="INFO">Running command 'kill 13689 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210727 10:51:08.371" endtime="20210727 10:51:08.374"/>
</kw>
<status status="PASS" starttime="20210727 10:51:08.370" endtime="20210727 10:51:08.374"/>
</iter>
<iter>
<var name="${pid}">13697</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210727 10:51:08.377" level="INFO">Running command 'kill 13697 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210727 10:51:08.374" endtime="20210727 10:51:08.377"/>
</kw>
<status status="PASS" starttime="20210727 10:51:08.374" endtime="20210727 10:51:08.377"/>
</iter>
<status status="PASS" starttime="20210727 10:51:08.365" endtime="20210727 10:51:08.377"/>
</for>
<status status="PASS" starttime="20210727 10:51:08.364" endtime="20210727 10:51:08.377"/>
</branch>
<status status="PASS" starttime="20210727 10:51:08.364" endtime="20210727 10:51:08.377"/>
</if>
<status status="PASS" starttime="20210727 10:51:08.351" endtime="20210727 10:51:08.378"/>
</kw>
<doc>This test suite contains test cases for CRF Demo API.
Documentation for the API can be found:
https://github.com/Interview-demoapp/Flasky
The acceptance criteria we verify here is
"1: Review users registered in the system"</doc>
<status status="FAIL" starttime="20210727 10:51:05.774" endtime="20210727 10:51:08.378"/>
</suite>
<statistics>
<total>
<stat pass="1" fail="2" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="1" fail="2" skip="0" id="s1" name="1-Review-Users">1-Review-Users</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
