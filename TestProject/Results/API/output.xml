<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 4.0.3 (Python 3.7.4 on linux)" generated="20210730 11:36:10.784" rpa="false" schemaversion="2">
<suite id="s1" name="3-Updating-Personal-Information" source="/home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/Tests/API/3-Updating-Personal-Information.robot">
<kw name="Import DataManager" library="Common" type="SETUP">
<kw name="Convert Suite Variables To Correct Types" library="Common">
<doc>This keyword is needed because parameters passed by command line
to robot (i.e. -v variable_name:value) are of string types.
In run command we pass 2 parameters to robot:
robot -d Results/ -v DATA_SET_LENGTH:100 -v USE_EXISTING_FORM_DATA_SET:True -v BROWSER:chromium -P CustomLibs Tests/
So, we have the following variables passed as strings:
- DATA_SET_LENGTH:100
- USE_EXISTING_FORM_DATA_SET:True
We need to convert:
- DATA_SET_LENGTH to int (i.e. integer)
- USE_EXISTING_FORM_DATA_SET to bool (i.e. boolean)
Later these values will be used while loading DataManager.robot resource.</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${DATA_SET_LENGTH}</var>
<arg>int($DATA_SET_LENGTH)</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 11:36:11.545" level="INFO">${DATA_SET_LENGTH} = 100</msg>
<status status="PASS" starttime="20210730 11:36:11.541" endtime="20210730 11:36:11.545"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${USE_EXISTING_FORM_DATA_SET}</var>
<arg>$USE_EXISTING_FORM_DATA_SET=='True'</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 11:36:11.546" level="INFO">${USE_EXISTING_FORM_DATA_SET} = True</msg>
<status status="PASS" starttime="20210730 11:36:11.545" endtime="20210730 11:36:11.546"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${DATA_SET_LENGTH}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 11:36:11.546" level="INFO">${DATA_SET_LENGTH} = 100</msg>
<status status="PASS" starttime="20210730 11:36:11.546" endtime="20210730 11:36:11.546"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${USE_EXISTING_FORM_DATA_SET}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 11:36:11.547" level="INFO">${USE_EXISTING_FORM_DATA_SET} = True</msg>
<status status="PASS" starttime="20210730 11:36:11.547" endtime="20210730 11:36:11.547"/>
</kw>
<status status="PASS" starttime="20210730 11:36:11.540" endtime="20210730 11:36:11.547"/>
</kw>
<kw name="Import Resource" library="BuiltIn">
<arg>${EXECDIR}${/}Resources${/}DataManager.robot</arg>
<doc>Imports a resource file with the given path.</doc>
<status status="PASS" starttime="20210730 11:36:11.547" endtime="20210730 11:36:11.556"/>
</kw>
<status status="PASS" starttime="20210730 11:36:11.540" endtime="20210730 11:36:11.557"/>
</kw>
<test id="s1-t1" name="With Any Valid Token, Updating First Name Of Each System User With Helena      Margaretha Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 11:36:11.562" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 11:36:11.579" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 11:36:11.579" level="INFO">${pids} = 25062</msg>
<status status="PASS" starttime="20210730 11:36:11.559" endtime="20210730 11:36:11.579"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 11:36:11.580" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 11:36:11.580" endtime="20210730 11:36:11.580"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 11:36:11.581" level="INFO">${pids} = ['25062']</msg>
<status status="PASS" starttime="20210730 11:36:11.581" endtime="20210730 11:36:11.581"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">25062</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 11:36:11.587" level="INFO">Running command 'kill 25062 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 11:36:11.583" endtime="20210730 11:36:11.587"/>
</kw>
<status status="PASS" starttime="20210730 11:36:11.582" endtime="20210730 11:36:11.587"/>
</iter>
<status status="PASS" starttime="20210730 11:36:11.582" endtime="20210730 11:36:11.588"/>
</for>
<status status="PASS" starttime="20210730 11:36:11.581" endtime="20210730 11:36:11.588"/>
</branch>
<status status="PASS" starttime="20210730 11:36:11.581" endtime="20210730 11:36:11.588"/>
</if>
<status status="PASS" starttime="20210730 11:36:11.558" endtime="20210730 11:36:11.588"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 11:36:11.590" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 11:36:11.589" endtime="20210730 11:36:11.590"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 11:36:11.591" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 11:36:11.590" endtime="20210730 11:36:11.591"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 11:36:11.591" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 11:36:11.591" endtime="20210730 11:36:11.591"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 11:36:11.592" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 11:36:11.591" endtime="20210730 11:36:11.592"/>
</kw>
<msg timestamp="20210730 11:36:11.592" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 11:36:11.590" endtime="20210730 11:36:11.592"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 11:36:11.608" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 11:36:11.592" endtime="20210730 11:36:11.612"/>
</kw>
<status status="PASS" starttime="20210730 11:36:11.588" endtime="20210730 11:36:11.612"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 11:36:11.614" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 11:36:11.613" endtime="20210730 11:36:11.620"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 11:36:13.123" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 11:36:11.620" endtime="20210730 11:36:13.123"/>
</kw>
<status status="PASS" starttime="20210730 11:36:11.613" endtime="20210730 11:36:13.123"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 11:36:13.124" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 11:36:13.124" endtime="20210730 11:36:13.124"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 11:36:13.125" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 11:36:13.124" endtime="20210730 11:36:13.125"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 11:36:13.125" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 11:36:13.125" endtime="20210730 11:36:13.125"/>
</kw>
<msg timestamp="20210730 11:36:13.125" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 11:36:13.124" endtime="20210730 11:36:13.125"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 11:36:13.127" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 11:36:13.125" endtime="20210730 11:36:13.128"/>
</kw>
<status status="PASS" starttime="20210730 11:36:13.123" endtime="20210730 11:36:13.128"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 11:36:13.129" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 11:36:13.129" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 11:36:13.129" endtime="20210730 11:36:13.129"/>
</kw>
<status status="PASS" starttime="20210730 11:36:13.128" endtime="20210730 11:36:13.129"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 11:36:13.130" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 11:36:13.130" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 11:36:13.130" endtime="20210730 11:36:13.130"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 11:36:13.130" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 11:36:13.130" endtime="20210730 11:36:13.130"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 11:36:13.131" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 11:36:13.131" endtime="20210730 11:36:13.131"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 11:36:13.131" endtime="20210730 11:36:13.132"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 11:36:13.132" endtime="20210730 11:36:13.133"/>
</kw>
<status status="PASS" starttime="20210730 11:36:13.131" endtime="20210730 11:36:13.133"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 11:36:13.133" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 11:36:13.133" endtime="20210730 11:36:13.133"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 11:36:13.133" endtime="20210730 11:36:13.134"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 11:36:13.135" endtime="20210730 11:36:13.136"/>
</kw>
<status status="PASS" starttime="20210730 11:36:13.133" endtime="20210730 11:36:13.136"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 11:36:13.136" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 11:36:13.136" endtime="20210730 11:36:13.136"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 11:36:13.137" endtime="20210730 11:36:13.137"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 11:36:13.137" endtime="20210730 11:36:13.138"/>
</kw>
<status status="PASS" starttime="20210730 11:36:13.136" endtime="20210730 11:36:13.138"/>
</iter>
<status status="PASS" starttime="20210730 11:36:13.130" endtime="20210730 11:36:13.138"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 11:36:13.138" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 11:36:13.138" endtime="20210730 11:36:13.138"/>
</kw>
<status status="PASS" starttime="20210730 11:36:13.130" endtime="20210730 11:36:13.138"/>
</kw>
<status status="PASS" starttime="20210730 11:36:11.558" endtime="20210730 11:36:13.138"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 11:36:13.142" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 11:36:13.139" endtime="20210730 11:36:13.142"/>
</kw>
<msg timestamp="20210730 11:36:13.142" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 11:36:13.139" endtime="20210730 11:36:13.142"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>first_name</arg>
<arg>Two valid first names seperated by multiple space characters making it invalid</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 11:36:13.143" endtime="20210730 11:36:13.143"/>
</kw>
<status status="PASS" starttime="20210730 11:36:13.142" endtime="20210730 11:36:13.143"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set First Name To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>firstname=${user_data}[first_name]</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 11:36:13.145" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 11:36:13.144" endtime="20210730 11:36:13.145"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>firstname=${firstname}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 11:36:13.145" level="INFO">${payload} = {'firstname': 'Helena      Margaretha'}</msg>
<status status="PASS" starttime="20210730 11:36:13.145" endtime="20210730 11:36:13.145"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 11:36:13.157" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 11:36:13.158" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 11:36:13.146" endtime="20210730 11:36:13.158"/>
</kw>
<kw name="Verify Response Based On Firstname">
<arg>${response}</arg>
<arg>${firstname}</arg>
<status status="NOT RUN" starttime="20210730 11:36:13.158" endtime="20210730 11:36:13.158"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${firstname}</arg>
<arg>${system_user}</arg>
<status status="NOT RUN" starttime="20210730 11:36:13.158" endtime="20210730 11:36:13.158"/>
</kw>
<status status="FAIL" starttime="20210730 11:36:13.145" endtime="20210730 11:36:13.158"/>
</iter>
<status status="FAIL" starttime="20210730 11:36:13.145" endtime="20210730 11:36:13.158"/>
</for>
<status status="FAIL" starttime="20210730 11:36:13.144" endtime="20210730 11:36:13.158"/>
</kw>
<status status="FAIL" starttime="20210730 11:36:13.143" endtime="20210730 11:36:13.158"/>
</iter>
<status status="FAIL" starttime="20210730 11:36:13.143" endtime="20210730 11:36:13.158"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 11:36:13.173" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 11:36:13.184" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 11:36:13.184" level="INFO">${pids} = 25085
25092
25101</msg>
<status status="PASS" starttime="20210730 11:36:13.159" endtime="20210730 11:36:13.184"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 11:36:13.185" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 11:36:13.184" endtime="20210730 11:36:13.185"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 11:36:13.186" level="INFO">${pids} = ['25085', '25092', '25101']</msg>
<status status="PASS" starttime="20210730 11:36:13.186" endtime="20210730 11:36:13.186"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">25085</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 11:36:13.189" level="INFO">Running command 'kill 25085 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 11:36:13.187" endtime="20210730 11:36:13.190"/>
</kw>
<status status="PASS" starttime="20210730 11:36:13.186" endtime="20210730 11:36:13.190"/>
</iter>
<iter>
<var name="${pid}">25092</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 11:36:13.193" level="INFO">Running command 'kill 25092 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 11:36:13.190" endtime="20210730 11:36:13.193"/>
</kw>
<status status="PASS" starttime="20210730 11:36:13.190" endtime="20210730 11:36:13.194"/>
</iter>
<iter>
<var name="${pid}">25101</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 11:36:13.197" level="INFO">Running command 'kill 25101 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 11:36:13.194" endtime="20210730 11:36:13.198"/>
</kw>
<status status="PASS" starttime="20210730 11:36:13.194" endtime="20210730 11:36:13.198"/>
</iter>
<status status="PASS" starttime="20210730 11:36:13.186" endtime="20210730 11:36:13.198"/>
</for>
<status status="PASS" starttime="20210730 11:36:13.185" endtime="20210730 11:36:13.198"/>
</branch>
<status status="PASS" starttime="20210730 11:36:13.185" endtime="20210730 11:36:13.198"/>
</if>
<status status="PASS" starttime="20210730 11:36:13.159" endtime="20210730 11:36:13.198"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
firstname as such:
{
"firstname": 'Helena Margaretha'
}
Then, each request should fail with the following response body:
{
"message": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>run-me</tag>
<status status="FAIL" starttime="20210730 11:36:11.557" endtime="20210730 11:36:13.198">We expected a JSON, but received text/html</status>
</test>
<doc>This test suite contains test cases for CRF Demo API.
Documentation for the API can be found:
https://github.com/Interview-demoapp/Flasky
The acceptance criteria we verify here is
"3: As an API Consumer, if authenticated, I can update personal information of users"
Definitions
(1) System User: The user, who is registered to the system under test with a valid token
(2) API User: The user, who calls the API to update personal information of the system user</doc>
<status status="FAIL" starttime="20210730 11:36:10.787" endtime="20210730 11:36:13.199"/>
</suite>
<statistics>
<total>
<stat pass="0" fail="1" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1" skip="0">run-me</stat>
</tag>
<suite>
<stat pass="0" fail="1" skip="0" id="s1" name="3-Updating-Personal-Information">3-Updating-Personal-Information</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
